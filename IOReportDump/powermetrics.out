/usr/bin/powermetrics (architecture x86_64):
(__TEXT,__text) section
1000013e0:	55	pushq	%rbp
1000013e1:	48 89 e5	movq	%rsp, %rbp
1000013e4:	48 8b 05 8d 6f 01 00	movq	94093(%rip), %rax ## literal pool symbol address: _kOSThermalNotificationPressureLevelName
1000013eb:	48 8b 38	movq	(%rax), %rdi
1000013ee:	48 8d 35 7b cc 01 00	leaq	117883(%rip), %rsi
1000013f5:	e8 fa ef 00 00	callq	0x1000103f4 ## symbol stub for: _notify_register_check
1000013fa:	85 c0	testl	%eax, %eax
1000013fc:	0f 94 05 71 cc 01 00	sete	117873(%rip)
100001403:	5d	popq	%rbp
100001404:	c3	retq
100001405:	55	pushq	%rbp
100001406:	48 89 e5	movq	%rsp, %rbp
100001409:	53	pushq	%rbx
10000140a:	50	pushq	%rax
10000140b:	80 3d 62 cc 01 00 00	cmpb	$0, 117858(%rip)
100001412:	74 52	je	0x100001466
100001414:	48 8d 05 d5 cb 01 00	leaq	117717(%rip), %rax
10000141b:	8b 40 28	movl	40(%rax), %eax
10000141e:	83 f8 01	cmpl	$1, %eax
100001421:	74 4a	je	0x10000146d
100001423:	85 c0	testl	%eax, %eax
100001425:	75 3f	jne	0x100001466
100001427:	48 8d 1d 6a cb 01 00	leaq	117610(%rip), %rbx
10000142e:	48 8b 4b 50	movq	80(%rbx), %rcx
100001432:	48 8d 3d 1a f1 00 00	leaq	61722(%rip), %rdi ## literal pool for: "\n\n**** Thermal pressure ****\n\n"
100001439:	be 1e 00 00 00	movl	$30, %esi
10000143e:	ba 01 00 00 00	movl	$1, %edx
100001443:	e8 22 ef 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100001448:	48 8b 7b 50	movq	80(%rbx), %rdi
10000144c:	48 8b 05 25 cc 01 00	movq	117797(%rip), %rax
100001453:	48 83 f8 04	cmpq	$4, %rax
100001457:	77 39	ja	0x100001492
100001459:	48 8d 0d 88 71 01 00	leaq	94600(%rip), %rcx
100001460:	48 8b 14 c1	movq	(%rcx,%rax,8), %rdx
100001464:	eb 33	jmp	0x100001499
100001466:	48 83 c4 08	addq	$8, %rsp
10000146a:	5b	popq	%rbx
10000146b:	5d	popq	%rbp
10000146c:	c3	retq
10000146d:	48 8d 05 24 cb 01 00	leaq	117540(%rip), %rax
100001474:	48 8b 78 50	movq	80(%rax), %rdi
100001478:	48 8b 05 f9 cb 01 00	movq	117753(%rip), %rax
10000147f:	48 83 f8 04	cmpq	$4, %rax
100001483:	77 1d	ja	0x1000014a2
100001485:	48 8d 0d 5c 71 01 00	leaq	94556(%rip), %rcx
10000148c:	48 8b 14 c1	movq	(%rcx,%rax,8), %rdx
100001490:	eb 17	jmp	0x1000014a9
100001492:	48 8d 15 4e f1 00 00	leaq	61774(%rip), %rdx ## literal pool for: "Undefined"
100001499:	48 8d 35 d2 f0 00 00	leaq	61650(%rip), %rsi ## literal pool for: "Current pressure level: %s\n"
1000014a0:	eb 0e	jmp	0x1000014b0
1000014a2:	48 8d 15 3e f1 00 00	leaq	61758(%rip), %rdx ## literal pool for: "Undefined"
1000014a9:	48 8d 35 de f0 00 00	leaq	61662(%rip), %rsi ## literal pool for: "<key>thermal_pressure</key><string>%s</string>\n"
1000014b0:	31 c0	xorl	%eax, %eax
1000014b2:	48 83 c4 08	addq	$8, %rsp
1000014b6:	5b	popq	%rbx
1000014b7:	5d	popq	%rbp
1000014b8:	e9 95 ee 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
1000014bd:	55	pushq	%rbp
1000014be:	48 89 e5	movq	%rsp, %rbp
1000014c1:	80 3d ac cb 01 00 00	cmpb	$0, 117676(%rip)
1000014c8:	74 13	je	0x1000014dd
1000014ca:	8b 3d a0 cb 01 00	movl	117664(%rip), %edi
1000014d0:	48 8d 35 a1 cb 01 00	leaq	117665(%rip), %rsi
1000014d7:	5d	popq	%rbp
1000014d8:	e9 11 ef 00 00	jmp	0x1000103ee ## symbol stub for: _notify_get_state
1000014dd:	5d	popq	%rbp
1000014de:	c3	retq
1000014df:	55	pushq	%rbp
1000014e0:	48 89 e5	movq	%rsp, %rbp
1000014e3:	c6 05 96 cb 01 00 01	movb	$1, 117654(%rip)
1000014ea:	48 8d 3d 7f 82 01 00	leaq	98943(%rip), %rdi ## Objc cfstring ref: @"Interrupt Statistics (by index)"
1000014f1:	31 f6	xorl	%esi, %esi
1000014f3:	31 d2	xorl	%edx, %edx
1000014f5:	31 c9	xorl	%ecx, %ecx
1000014f7:	e8 54 ed 00 00	callq	0x100010250 ## symbol stub for: _IOReportCopyChannelsInGroup
1000014fc:	48 89 05 85 cb 01 00	movq	%rax, 117637(%rip)
100001503:	48 85 c0	testq	%rax, %rax
100001506:	74 5b	je	0x100001563
100001508:	48 89 c7	movq	%rax, %rdi
10000150b:	e8 5e ed 00 00	callq	0x10001026e ## symbol stub for: _IOReportGetChannelCount
100001510:	85 c0	testl	%eax, %eax
100001512:	7e 67	jle	0x10000157b
100001514:	48 8b 35 6d cb 01 00	movq	117613(%rip), %rsi
10000151b:	48 8d 15 6e cb 01 00	leaq	117614(%rip), %rdx
100001522:	31 ff	xorl	%edi, %edi
100001524:	31 c9	xorl	%ecx, %ecx
100001526:	45 31 c0	xorl	%r8d, %r8d
100001529:	e8 3a ed 00 00	callq	0x100010268 ## symbol stub for: _IOReportCreateSubscription
10000152e:	48 89 05 63 cb 01 00	movq	%rax, 117603(%rip)
100001535:	48 83 3d 53 cb 01 00 00	cmpq	$0, 117587(%rip)
10000153d:	75 64	jne	0x1000015a3
10000153f:	48 8b 05 2a 6d 01 00	movq	93482(%rip), %rax ## literal pool symbol address: ___stderrp
100001546:	48 8b 08	movq	(%rax), %rcx
100001549:	48 8d 3d 27 f1 00 00	leaq	61735(%rip), %rdi ## literal pool for: "IOReportCreateSubscription() failed\n"
100001550:	be 24 00 00 00	movl	$36, %esi
100001555:	ba 01 00 00 00	movl	$1, %edx
10000155a:	e8 0b ee 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000155f:	b0 01	movb	$1, %al
100001561:	eb 3a	jmp	0x10000159d
100001563:	48 8b 05 06 6d 01 00	movq	93446(%rip), %rax ## literal pool symbol address: ___stderrp
10000156a:	48 8b 08	movq	(%rax), %rcx
10000156d:	48 8d 3d c7 f0 00 00	leaq	61639(%rip), %rdi ## literal pool for: "IOReportCopyChannelsForDriver() failed\n"
100001574:	be 27 00 00 00	movl	$39, %esi
100001579:	eb 16	jmp	0x100001591
10000157b:	48 8b 05 ee 6c 01 00	movq	93422(%rip), %rax ## literal pool symbol address: ___stderrp
100001582:	48 8b 08	movq	(%rax), %rcx
100001585:	48 8d 3d d7 f0 00 00	leaq	61655(%rip), %rdi ## literal pool for: "No channels found!\n"
10000158c:	be 13 00 00 00	movl	$19, %esi
100001591:	ba 01 00 00 00	movl	$1, %edx
100001596:	e8 cf ed 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000159b:	31 c0	xorl	%eax, %eax
10000159d:	88 05 dd ca 01 00	movb	%al, 117469(%rip)
1000015a3:	48 8b 3d de ca 01 00	movq	117470(%rip), %rdi
1000015aa:	48 85 ff	testq	%rdi, %rdi
1000015ad:	74 10	je	0x1000015bf
1000015af:	e8 dc eb 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000015b4:	48 c7 05 c9 ca 01 00 00 00 00 00	movq	$0, 117449(%rip)
1000015bf:	5d	popq	%rbp
1000015c0:	c3	retq
1000015c1:	55	pushq	%rbp
1000015c2:	48 89 e5	movq	%rsp, %rbp
1000015c5:	41 56	pushq	%r14
1000015c7:	53	pushq	%rbx
1000015c8:	48 83 ec 40	subq	$64, %rsp
1000015cc:	48 83 3d cc ca 01 00 00	cmpq	$0, 117452(%rip)
1000015d4:	0f 84 f6 00 00 00	je	0x1000016d0
1000015da:	4c 8d 35 b7 c9 01 00	leaq	117175(%rip), %r14
1000015e1:	41 80 3e 00	cmpb	$0, (%r14)
1000015e5:	74 2e	je	0x100001615
1000015e7:	e8 b4 ed 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
1000015ec:	66 48 0f 6e c0	movq	%rax, %xmm0
1000015f1:	66 0f 62 05 07 51 01 00	punpckldq	86279(%rip), %xmm0
1000015f9:	66 0f 5c 05 0f 51 01 00	subpd	86287(%rip), %xmm0
100001601:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100001605:	f2 41 0f 59 46 08	mulsd	8(%r14), %xmm0
10000160b:	f2 0f 5e 05 0d 51 01 00	divsd	86285(%rip), %xmm0
100001613:	eb 15	jmp	0x10000162a
100001615:	41 80 7e 02 00	cmpb	$0, 2(%r14)
10000161a:	74 08	je	0x100001624
10000161c:	f2 41 0f 10 46 28	movsd	40(%r14), %xmm0
100001622:	eb 06	jmp	0x10000162a
100001624:	f2 41 0f 10 46 20	movsd	32(%r14), %xmm0
10000162a:	48 8d 1d bf c9 01 00	leaq	117183(%rip), %rbx
100001631:	8b 43 28	movl	40(%rbx), %eax
100001634:	83 f8 01	cmpl	$1, %eax
100001637:	74 16	je	0x10000164f
100001639:	85 c0	testl	%eax, %eax
10000163b:	75 36	jne	0x100001673
10000163d:	49 8b 4e 50	movq	80(%r14), %rcx
100001641:	48 8d 3d 54 f0 00 00	leaq	61524(%rip), %rdi ## literal pool for: "\n**** Interrupt Sources ****\n"
100001648:	be 1d 00 00 00	movl	$29, %esi
10000164d:	eb 10	jmp	0x10000165f
10000164f:	49 8b 4e 50	movq	80(%r14), %rcx
100001653:	48 8d 3d 60 f0 00 00	leaq	61536(%rip), %rdi ## literal pool for: "<key>interrupt_sources</key>\n<dict>\n"
10000165a:	be 24 00 00 00	movl	$36, %esi
10000165f:	ba 01 00 00 00	movl	$1, %edx
100001664:	66 0f 29 45 e0	movapd	%xmm0, -32(%rbp)
100001669:	e8 fc ec 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000166e:	66 0f 28 45 e0	movapd	-32(%rbp), %xmm0
100001673:	48 8b 3d 26 ca 01 00	movq	117286(%rip), %rdi
10000167a:	48 8b 05 9f 6b 01 00	movq	93087(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100001681:	48 8d 75 b8	leaq	-72(%rbp), %rsi
100001685:	48 89 06	movq	%rax, (%rsi)
100001688:	48 c7 46 08 00 00 00 40	movq	$1073741824, 8(%rsi)
100001690:	48 8d 05 81 00 00 00	leaq	129(%rip), %rax
100001697:	48 89 46 10	movq	%rax, 16(%rsi)
10000169b:	48 8d 05 a6 6f 01 00	leaq	94118(%rip), %rax
1000016a2:	48 89 46 18	movq	%rax, 24(%rsi)
1000016a6:	f2 0f 11 46 20	movsd	%xmm0, 32(%rsi)
1000016ab:	e8 c4 eb 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
1000016b0:	83 7b 28 01	cmpl	$1, 40(%rbx)
1000016b4:	75 1a	jne	0x1000016d0
1000016b6:	49 8b 4e 50	movq	80(%r14), %rcx
1000016ba:	48 8d 3d ec f0 00 00	leaq	61676(%rip), %rdi ## literal pool for: "</dict>\n"
1000016c1:	be 08 00 00 00	movl	$8, %esi
1000016c6:	ba 01 00 00 00	movl	$1, %edx
1000016cb:	e8 9a ec 00 00	callq	0x10001036a ## symbol stub for: _fwrite
1000016d0:	48 83 c4 40	addq	$64, %rsp
1000016d4:	5b	popq	%rbx
1000016d5:	41 5e	popq	%r14
1000016d7:	5d	popq	%rbp
1000016d8:	c3	retq
1000016d9:	55	pushq	%rbp
1000016da:	48 89 e5	movq	%rsp, %rbp
1000016dd:	80 3d 9c c9 01 00 01	cmpb	$1, 117148(%rip)
1000016e4:	75 30	jne	0x100001716
1000016e6:	4c 8b 05 ab c9 01 00	movq	117163(%rip), %r8
1000016ed:	4c 8b 0d 9c c9 01 00	movq	117148(%rip), %r9
1000016f4:	48 8d 3d ad c9 01 00	leaq	117165(%rip), %rdi
1000016fb:	48 8d 35 ae c9 01 00	leaq	117166(%rip), %rsi
100001702:	48 8d 15 af c9 01 00	leaq	117167(%rip), %rdx
100001709:	48 8d 0d 90 c9 01 00	leaq	117136(%rip), %rcx
100001710:	5d	popq	%rbp
100001711:	e9 8c a9 00 00	jmp	0x10000c0a2
100001716:	5d	popq	%rbp
100001717:	c3	retq
100001718:	55	pushq	%rbp
100001719:	48 89 e5	movq	%rsp, %rbp
10000171c:	41 57	pushq	%r15
10000171e:	41 56	pushq	%r14
100001720:	41 55	pushq	%r13
100001722:	41 54	pushq	%r12
100001724:	53	pushq	%rbx
100001725:	48 81 ec 18 02 00 00	subq	$536, %rsp
10000172c:	48 89 f3	movq	%rsi, %rbx
10000172f:	49 89 fe	movq	%rdi, %r14
100001732:	48 8b 05 2f 6b 01 00	movq	92975(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100001739:	48 8b 00	movq	(%rax), %rax
10000173c:	48 89 45 d0	movq	%rax, -48(%rbp)
100001740:	48 89 f7	movq	%rsi, %rdi
100001743:	31 f6	xorl	%esi, %esi
100001745:	e8 42 eb 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000174a:	48 85 c0	testq	%rax, %rax
10000174d:	0f 8e ed 00 00 00	jle	0x100001840
100001753:	49 89 c7	movq	%rax, %r15
100001756:	48 89 df	movq	%rbx, %rdi
100001759:	e8 e0 ea 00 00	callq	0x10001023e ## symbol stub for: _IOReportChannelGetDriverName
10000175e:	48 85 c0	testq	%rax, %rax
100001761:	0f 84 fd 00 00 00	je	0x100001864
100001767:	49 89 c4	movq	%rax, %r12
10000176a:	48 89 c7	movq	%rax, %rdi
10000176d:	be 00 01 00 08	movl	$134217984, %esi
100001772:	e8 2b ea 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
100001777:	49 89 c5	movq	%rax, %r13
10000177a:	48 89 df	movq	%rbx, %rdi
10000177d:	e8 b6 ea 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
100001782:	48 85 c0	testq	%rax, %rax
100001785:	0f 84 de 00 00 00	je	0x100001869
10000178b:	48 89 c7	movq	%rax, %rdi
10000178e:	be 00 01 00 08	movl	$134217984, %esi
100001793:	e8 0a ea 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
100001798:	48 89 c3	movq	%rax, %rbx
10000179b:	48 ff cb	decq	%rbx
10000179e:	80 7b 01 20	cmpb	$32, 1(%rbx)
1000017a2:	48 8d 5b 01	leaq	1(%rbx), %rbx
1000017a6:	74 f6	je	0x10000179e
1000017a8:	48 8d 05 41 c8 01 00	leaq	116801(%rip), %rax
1000017af:	8b 40 28	movl	40(%rax), %eax
1000017b2:	83 f8 01	cmpl	$1, %eax
1000017b5:	74 34	je	0x1000017eb
1000017b7:	85 c0	testl	%eax, %eax
1000017b9:	0f 85 81 00 00 00	jne	0x100001840
1000017bf:	48 8d 05 d2 c7 01 00	leaq	116690(%rip), %rax
1000017c6:	48 8b 78 50	movq	80(%rax), %rdi
1000017ca:	f2 49 0f 2a c7	cvtsi2sd	%r15, %xmm0
1000017cf:	f2 41 0f 5e 46 20	divsd	32(%r14), %xmm0
1000017d5:	48 8d 35 53 ef 00 00	leaq	61267(%rip), %rsi ## literal pool for: "%30s %36s: %.2f /s\n"
1000017dc:	4c 89 ea	movq	%r13, %rdx
1000017df:	48 89 d9	movq	%rbx, %rcx
1000017e2:	b0 01	movb	$1, %al
1000017e4:	e8 69 eb 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000017e9:	eb 55	jmp	0x100001840
1000017eb:	4c 89 e7	movq	%r12, %rdi
1000017ee:	be 00 01 00 08	movl	$134217984, %esi
1000017f3:	e8 aa e9 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
1000017f8:	48 8d b5 d0 fd ff ff	leaq	-560(%rbp), %rsi
1000017ff:	ba 00 02 00 00	movl	$512, %edx
100001804:	48 89 c7	movq	%rax, %rdi
100001807:	e8 ea a5 00 00	callq	0x10000bdf6
10000180c:	48 8d 0d 85 c7 01 00	leaq	116613(%rip), %rcx
100001813:	48 8b 79 50	movq	80(%rcx), %rdi
100001817:	f2 49 0f 2a c7	cvtsi2sd	%r15, %xmm0
10000181c:	f2 41 0f 5e 46 20	divsd	32(%r14), %xmm0
100001822:	48 89 1c 24	movq	%rbx, (%rsp)
100001826:	48 8d 35 16 ef 00 00	leaq	61206(%rip), %rsi ## literal pool for: "<key>%s %s</key>\n<integer>%llu</integer>\n<key>%s %s rate</key>\n<real>%g</real>\n"
10000182d:	48 89 c2	movq	%rax, %rdx
100001830:	48 89 d9	movq	%rbx, %rcx
100001833:	4d 89 f8	movq	%r15, %r8
100001836:	49 89 c1	movq	%rax, %r9
100001839:	b0 01	movb	$1, %al
10000183b:	e8 12 eb 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001840:	48 8b 05 21 6a 01 00	movq	92705(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100001847:	48 8b 00	movq	(%rax), %rax
10000184a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000184e:	75 1e	jne	0x10000186e
100001850:	31 c0	xorl	%eax, %eax
100001852:	48 81 c4 18 02 00 00	addq	$536, %rsp
100001859:	5b	popq	%rbx
10000185a:	41 5c	popq	%r12
10000185c:	41 5d	popq	%r13
10000185e:	41 5e	popq	%r14
100001860:	41 5f	popq	%r15
100001862:	5d	popq	%rbp
100001863:	c3	retq
100001864:	e8 34 e1 00 00	callq	0x10000f99d
100001869:	e8 50 e1 00 00	callq	0x10000f9be
10000186e:	e8 85 ea 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100001873:	55	pushq	%rbp
100001874:	48 89 e5	movq	%rsp, %rbp
100001877:	48 8d 3d 5e ef 00 00	leaq	61278(%rip), %rdi ## literal pool for: "AppleNVMeController"
10000187e:	e8 39 ea 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
100001883:	48 89 05 36 c8 01 00	movq	%rax, 116790(%rip)
10000188a:	48 85 c0	testq	%rax, %rax
10000188d:	0f 84 8c 00 00 00	je	0x10000191f
100001893:	48 89 c7	movq	%rax, %rdi
100001896:	e8 fb e8 00 00	callq	0x100010196 ## symbol stub for: _CFRetain
10000189b:	48 8b 05 ce 6a 01 00	movq	92878(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
1000018a2:	8b 38	movl	(%rax), %edi
1000018a4:	48 8b 35 15 c8 01 00	movq	116757(%rip), %rsi
1000018ab:	e8 00 ea 00 00	callq	0x1000102b0 ## symbol stub for: _IOServiceGetMatchingService
1000018b0:	89 05 12 c8 01 00	movl	%eax, 116754(%rip)
1000018b6:	85 c0	testl	%eax, %eax
1000018b8:	74 65	je	0x10000191f
1000018ba:	89 c7	movl	%eax, %edi
1000018bc:	31 f6	xorl	%esi, %esi
1000018be:	31 d2	xorl	%edx, %edx
1000018c0:	e8 85 e9 00 00	callq	0x10001024a ## symbol stub for: _IOReportCopyChannelsForDriver
1000018c5:	48 89 05 04 c8 01 00	movq	%rax, 116740(%rip)
1000018cc:	48 85 c0	testq	%rax, %rax
1000018cf:	74 4e	je	0x10000191f
1000018d1:	48 8d 15 00 c8 01 00	leaq	116736(%rip), %rdx
1000018d8:	31 ff	xorl	%edi, %edi
1000018da:	48 89 c6	movq	%rax, %rsi
1000018dd:	31 c9	xorl	%ecx, %ecx
1000018df:	45 31 c0	xorl	%r8d, %r8d
1000018e2:	e8 81 e9 00 00	callq	0x100010268 ## symbol stub for: _IOReportCreateSubscription
1000018e7:	48 89 05 f2 c7 01 00	movq	%rax, 116722(%rip)
1000018ee:	48 85 c0	testq	%rax, %rax
1000018f1:	74 0c	je	0x1000018ff
1000018f3:	c6 05 ee c7 01 00 01	movb	$1, 116718(%rip)
1000018fa:	e9 a9 00 00 00	jmp	0x1000019a8
1000018ff:	48 8b 05 6a 69 01 00	movq	92522(%rip), %rax ## literal pool symbol address: ___stderrp
100001906:	48 8b 08	movq	(%rax), %rcx
100001909:	48 8d 3d e0 ee 00 00	leaq	61152(%rip), %rdi ## literal pool for: "Failed to get NVMe power state information.\n"
100001910:	be 2c 00 00 00	movl	$44, %esi
100001915:	ba 01 00 00 00	movl	$1, %edx
10000191a:	e8 4b ea 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000191f:	48 8b 3d ba c7 01 00	movq	116666(%rip), %rdi
100001926:	48 85 ff	testq	%rdi, %rdi
100001929:	74 10	je	0x10000193b
10000192b:	e8 60 e8 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
100001930:	48 c7 05 a5 c7 01 00 00 00 00 00	movq	$0, 116645(%rip)
10000193b:	48 8b 3d 96 c7 01 00	movq	116630(%rip), %rdi
100001942:	48 85 ff	testq	%rdi, %rdi
100001945:	74 10	je	0x100001957
100001947:	e8 44 e8 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000194c:	48 c7 05 81 c7 01 00 00 00 00 00	movq	$0, 116609(%rip)
100001957:	48 8b 3d 72 c7 01 00	movq	116594(%rip), %rdi
10000195e:	48 85 ff	testq	%rdi, %rdi
100001961:	74 10	je	0x100001973
100001963:	e8 28 e8 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
100001968:	48 c7 05 5d c7 01 00 00 00 00 00	movq	$0, 116573(%rip)
100001973:	48 8b 3d 46 c7 01 00	movq	116550(%rip), %rdi
10000197a:	48 85 ff	testq	%rdi, %rdi
10000197d:	74 10	je	0x10000198f
10000197f:	e8 0c e8 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
100001984:	48 c7 05 31 c7 01 00 00 00 00 00	movq	$0, 116529(%rip)
10000198f:	8b 3d 33 c7 01 00	movl	116531(%rip), %edi
100001995:	85 ff	testl	%edi, %edi
100001997:	74 0f	je	0x1000019a8
100001999:	e8 46 e8 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000199e:	c7 05 20 c7 01 00 00 00 00 00	movl	$0, 116512(%rip)
1000019a8:	5d	popq	%rbp
1000019a9:	c3	retq
1000019aa:	55	pushq	%rbp
1000019ab:	48 89 e5	movq	%rsp, %rbp
1000019ae:	41 56	pushq	%r14
1000019b0:	53	pushq	%rbx
1000019b1:	80 3d 30 c7 01 00 01	cmpb	$1, 116528(%rip)
1000019b8:	75 41	jne	0x1000019fb
1000019ba:	48 83 3d 2e c7 01 00 00	cmpq	$0, 116526(%rip)
1000019c2:	74 37	je	0x1000019fb
1000019c4:	48 83 3d 2c c7 01 00 00	cmpq	$0, 116524(%rip)
1000019cc:	74 2d	je	0x1000019fb
1000019ce:	4c 8d 35 1b c6 01 00	leaq	116251(%rip), %r14
1000019d5:	41 8b 46 28	movl	40(%r14), %eax
1000019d9:	83 f8 01	cmpl	$1, %eax
1000019dc:	74 22	je	0x100001a00
1000019de:	85 c0	testl	%eax, %eax
1000019e0:	75 3f	jne	0x100001a21
1000019e2:	48 8d 05 af c5 01 00	leaq	116143(%rip), %rax
1000019e9:	48 8b 48 50	movq	80(%rax), %rcx
1000019ed:	48 8d 3d 29 ee 00 00	leaq	60969(%rip), %rdi ## literal pool for: "\n**** NVMe Power-state Residency ****\n"
1000019f4:	be 26 00 00 00	movl	$38, %esi
1000019f9:	eb 1c	jmp	0x100001a17
1000019fb:	5b	popq	%rbx
1000019fc:	41 5e	popq	%r14
1000019fe:	5d	popq	%rbp
1000019ff:	c3	retq
100001a00:	48 8d 05 91 c5 01 00	leaq	116113(%rip), %rax
100001a07:	48 8b 48 50	movq	80(%rax), %rcx
100001a0b:	48 8d 3d 32 ee 00 00	leaq	60978(%rip), %rdi ## literal pool for: "<key>nvme_power</key>\n<dict>\n"
100001a12:	be 1d 00 00 00	movl	$29, %esi
100001a17:	ba 01 00 00 00	movl	$1, %edx
100001a1c:	e8 49 e9 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100001a21:	48 8b 3d d0 c6 01 00	movq	116432(%rip), %rdi
100001a28:	48 8b 35 c1 c6 01 00	movq	116417(%rip), %rsi
100001a2f:	31 d2	xorl	%edx, %edx
100001a31:	e8 2c e8 00 00	callq	0x100010262 ## symbol stub for: _IOReportCreateSamplesDelta
100001a36:	48 89 c3	movq	%rax, %rbx
100001a39:	48 8d 35 80 6c 01 00	leaq	93312(%rip), %rsi
100001a40:	48 89 c7	movq	%rax, %rdi
100001a43:	e8 2c e8 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
100001a48:	41 83 7e 28 01	cmpl	$1, 40(%r14)
100001a4d:	75 21	jne	0x100001a70
100001a4f:	48 8d 05 42 c5 01 00	leaq	116034(%rip), %rax
100001a56:	48 8b 48 50	movq	80(%rax), %rcx
100001a5a:	48 8d 3d 4c ed 00 00	leaq	60748(%rip), %rdi ## literal pool for: "</dict>\n"
100001a61:	be 08 00 00 00	movl	$8, %esi
100001a66:	ba 01 00 00 00	movl	$1, %edx
100001a6b:	e8 fa e8 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100001a70:	48 89 df	movq	%rbx, %rdi
100001a73:	5b	popq	%rbx
100001a74:	41 5e	popq	%r14
100001a76:	5d	popq	%rbp
100001a77:	e9 14 e7 00 00	jmp	0x100010190 ## symbol stub for: _CFRelease
100001a7c:	55	pushq	%rbp
100001a7d:	48 89 e5	movq	%rsp, %rbp
100001a80:	53	pushq	%rbx
100001a81:	50	pushq	%rax
100001a82:	80 3d 5f c6 01 00 01	cmpb	$1, 116319(%rip)
100001a89:	75 6e	jne	0x100001af9
100001a8b:	48 8b 3d 66 c6 01 00	movq	116326(%rip), %rdi
100001a92:	48 85 ff	testq	%rdi, %rdi
100001a95:	74 05	je	0x100001a9c
100001a97:	e8 f4 e6 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
100001a9c:	48 8d 1d f5 c4 01 00	leaq	115957(%rip), %rbx
100001aa3:	80 7b 02 00	cmpb	$0, 2(%rbx)
100001aa7:	48 8d 05 42 c6 01 00	leaq	116290(%rip), %rax
100001aae:	48 8d 0d 4b c6 01 00	leaq	116299(%rip), %rcx
100001ab5:	48 0f 44 c8	cmoveq	%rax, %rcx
100001ab9:	48 8b 01	movq	(%rcx), %rax
100001abc:	48 89 05 35 c6 01 00	movq	%rax, 116277(%rip)
100001ac3:	48 8b 3d 16 c6 01 00	movq	116246(%rip), %rdi
100001aca:	48 8b 35 07 c6 01 00	movq	116231(%rip), %rsi
100001ad1:	31 d2	xorl	%edx, %edx
100001ad3:	e8 84 e7 00 00	callq	0x10001025c ## symbol stub for: _IOReportCreateSamples
100001ad8:	48 89 05 11 c6 01 00	movq	%rax, 116241(%rip)
100001adf:	80 3b 00	cmpb	$0, (%rbx)
100001ae2:	74 15	je	0x100001af9
100001ae4:	48 89 05 15 c6 01 00	movq	%rax, 116245(%rip)
100001aeb:	48 89 c7	movq	%rax, %rdi
100001aee:	48 83 c4 08	addq	$8, %rsp
100001af2:	5b	popq	%rbx
100001af3:	5d	popq	%rbp
100001af4:	e9 9d e6 00 00	jmp	0x100010196 ## symbol stub for: _CFRetain
100001af9:	48 83 c4 08	addq	$8, %rsp
100001afd:	5b	popq	%rbx
100001afe:	5d	popq	%rbp
100001aff:	c3	retq
100001b00:	55	pushq	%rbp
100001b01:	48 89 e5	movq	%rsp, %rbp
100001b04:	41 57	pushq	%r15
100001b06:	41 56	pushq	%r14
100001b08:	41 55	pushq	%r13
100001b0a:	41 54	pushq	%r12
100001b0c:	53	pushq	%rbx
100001b0d:	50	pushq	%rax
100001b0e:	49 89 f6	movq	%rsi, %r14
100001b11:	48 89 f7	movq	%rsi, %rdi
100001b14:	e8 79 e7 00 00	callq	0x100010292 ## symbol stub for: _IOReportStateGetCount
100001b19:	85 c0	testl	%eax, %eax
100001b1b:	0f 8e 00 01 00 00	jle	0x100001c21
100001b21:	31 db	xorl	%ebx, %ebx
100001b23:	49 bf 00 00 00 00 00 00 00 01	movabsq	$72057594037927936, %r15
100001b2d:	4c 89 f7	movq	%r14, %rdi
100001b30:	89 de	movl	%ebx, %esi
100001b32:	e8 6d e7 00 00	callq	0x1000102a4 ## symbol stub for: _IOReportStateGetNameForIndex
100001b37:	48 85 c0	testq	%rax, %rax
100001b3a:	0f 84 cf 00 00 00	je	0x100001c0f
100001b40:	49 89 c4	movq	%rax, %r12
100001b43:	4c 89 f7	movq	%r14, %rdi
100001b46:	89 de	movl	%ebx, %esi
100001b48:	e8 5d e7 00 00	callq	0x1000102aa ## symbol stub for: _IOReportStateGetResidency
100001b4d:	49 89 c5	movq	%rax, %r13
100001b50:	4c 89 f7	movq	%r14, %rdi
100001b53:	e8 ec e6 00 00	callq	0x100010244 ## symbol stub for: _IOReportChannelGetUnit
100001b58:	4c 89 ef	movq	%r13, %rdi
100001b5b:	48 89 c6	movq	%rax, %rsi
100001b5e:	4c 89 fa	movq	%r15, %rdx
100001b61:	e8 20 e7 00 00	callq	0x100010286 ## symbol stub for: _IOReportScaleValue
100001b66:	48 8d 05 83 c4 01 00	leaq	115843(%rip), %rax
100001b6d:	8b 40 28	movl	40(%rax), %eax
100001b70:	83 f8 01	cmpl	$1, %eax
100001b73:	74 59	je	0x100001bce
100001b75:	85 c0	testl	%eax, %eax
100001b77:	0f 85 92 00 00 00	jne	0x100001c0f
100001b7d:	48 8d 05 14 c4 01 00	leaq	115732(%rip), %rax
100001b84:	4c 8b 68 50	movq	80(%rax), %r13
100001b88:	4c 89 e7	movq	%r12, %rdi
100001b8b:	be 00 01 00 08	movl	$134217984, %esi
100001b90:	f2 0f 11 45 d0	movsd	%xmm0, -48(%rbp)
100001b95:	e8 08 e6 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
100001b9a:	49 89 c4	movq	%rax, %r12
100001b9d:	4c 89 f7	movq	%r14, %rdi
100001ba0:	89 de	movl	%ebx, %esi
100001ba2:	e8 f1 e6 00 00	callq	0x100010298 ## symbol stub for: _IOReportStateGetDutyCycle
100001ba7:	66 0f 28 c8	movapd	%xmm0, %xmm1
100001bab:	f2 0f 59 0d 75 4b 01 00	mulsd	84853(%rip), %xmm1
100001bb3:	4c 89 ef	movq	%r13, %rdi
100001bb6:	48 8d 35 a5 ec 00 00	leaq	60581(%rip), %rsi ## literal pool for: "%16s: %12.3f s (%5.1f%%)\n"
100001bbd:	4c 89 e2	movq	%r12, %rdx
100001bc0:	f2 0f 10 45 d0	movsd	-48(%rbp), %xmm0
100001bc5:	b0 02	movb	$2, %al
100001bc7:	e8 86 e7 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001bcc:	eb 41	jmp	0x100001c0f
100001bce:	48 8d 05 c3 c3 01 00	leaq	115651(%rip), %rax
100001bd5:	4c 8b 68 50	movq	80(%rax), %r13
100001bd9:	4c 89 e7	movq	%r12, %rdi
100001bdc:	be 00 01 00 08	movl	$134217984, %esi
100001be1:	e8 bc e5 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
100001be6:	49 89 c4	movq	%rax, %r12
100001be9:	4c 89 f7	movq	%r14, %rdi
100001bec:	89 de	movl	%ebx, %esi
100001bee:	e8 a5 e6 00 00	callq	0x100010298 ## symbol stub for: _IOReportStateGetDutyCycle
100001bf3:	f2 0f 59 05 2d 4b 01 00	mulsd	84781(%rip), %xmm0
100001bfb:	4c 89 ef	movq	%r13, %rdi
100001bfe:	48 8d 35 77 ec 00 00	leaq	60535(%rip), %rsi ## literal pool for: "<key>%s</key>\n<real>%.1f</real>\n"
100001c05:	4c 89 e2	movq	%r12, %rdx
100001c08:	b0 01	movb	$1, %al
100001c0a:	e8 43 e7 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001c0f:	ff c3	incl	%ebx
100001c11:	4c 89 f7	movq	%r14, %rdi
100001c14:	e8 79 e6 00 00	callq	0x100010292 ## symbol stub for: _IOReportStateGetCount
100001c19:	39 c3	cmpl	%eax, %ebx
100001c1b:	0f 8c 0c ff ff ff	jl	0x100001b2d
100001c21:	31 c0	xorl	%eax, %eax
100001c23:	48 83 c4 08	addq	$8, %rsp
100001c27:	5b	popq	%rbx
100001c28:	41 5c	popq	%r12
100001c2a:	41 5d	popq	%r13
100001c2c:	41 5e	popq	%r14
100001c2e:	41 5f	popq	%r15
100001c30:	5d	popq	%rbp
100001c31:	c3	retq
100001c32:	55	pushq	%rbp
100001c33:	48 89 e5	movq	%rsp, %rbp
100001c36:	31 c0	xorl	%eax, %eax
100001c38:	48 89 05 d1 c4 01 00	movq	%rax, 115921(%rip)
100001c3f:	0f 57 c0	xorps	%xmm0, %xmm0
100001c42:	0f 29 05 d7 c4 01 00	movaps	%xmm0, 115927(%rip)
100001c49:	0f 29 05 e0 c4 01 00	movaps	%xmm0, 115936(%rip)
100001c50:	0f 29 05 e9 c4 01 00	movaps	%xmm0, 115945(%rip)
100001c57:	0f 29 05 f2 c4 01 00	movaps	%xmm0, 115954(%rip)
100001c5e:	0f 29 05 fb c4 01 00	movaps	%xmm0, 115963(%rip)
100001c65:	0f 29 05 04 c5 01 00	movaps	%xmm0, 115972(%rip)
100001c6c:	0f 29 05 0d c5 01 00	movaps	%xmm0, 115981(%rip)
100001c73:	0f 29 05 16 c5 01 00	movaps	%xmm0, 115990(%rip)
100001c7a:	48 89 05 1f c5 01 00	movq	%rax, 115999(%rip)
100001c81:	5d	popq	%rbp
100001c82:	c3	retq
100001c83:	55	pushq	%rbp
100001c84:	48 89 e5	movq	%rsp, %rbp
100001c87:	41 57	pushq	%r15
100001c89:	41 56	pushq	%r14
100001c8b:	41 55	pushq	%r13
100001c8d:	41 54	pushq	%r12
100001c8f:	53	pushq	%rbx
100001c90:	50	pushq	%rax
100001c91:	4c 8d 2d 58 c3 01 00	leaq	115544(%rip), %r13
100001c98:	41 8b 45 28	movl	40(%r13), %eax
100001c9c:	83 f8 01	cmpl	$1, %eax
100001c9f:	74 49	je	0x100001cea
100001ca1:	85 c0	testl	%eax, %eax
100001ca3:	0f 85 81 00 00 00	jne	0x100001d2a
100001ca9:	48 8d 1d e8 c2 01 00	leaq	115432(%rip), %rbx
100001cb0:	48 8b 4b 50	movq	80(%rbx), %rcx
100001cb4:	48 8d 3d 87 ed 00 00	leaq	60807(%rip), %rdi ## literal pool for: "\n\n**** Selective Forced Idle ****\n\n"
100001cbb:	be 23 00 00 00	movl	$35, %esi
100001cc0:	ba 01 00 00 00	movl	$1, %edx
100001cc5:	e8 a0 e6 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100001cca:	48 8b 15 3f c4 01 00	movq	115775(%rip), %rdx
100001cd1:	48 85 d2	testq	%rdx, %rdx
100001cd4:	74 54	je	0x100001d2a
100001cd6:	48 8b 7b 50	movq	80(%rbx), %rdi
100001cda:	48 8d 35 85 ed 00 00	leaq	60805(%rip), %rsi ## literal pool for: "Selective Forced Idle window:     %lluus\n"
100001ce1:	31 c0	xorl	%eax, %eax
100001ce3:	e8 6a e6 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001ce8:	eb 40	jmp	0x100001d2a
100001cea:	48 8d 1d a7 c2 01 00	leaq	115367(%rip), %rbx
100001cf1:	48 8b 73 50	movq	80(%rbx), %rsi
100001cf5:	48 8d 3d 94 ed 00 00	leaq	60820(%rip), %rdi ## literal pool for: "<key>sfi</key>\n<dict>\n"
100001cfc:	e8 5d e6 00 00	callq	0x10001035e ## symbol stub for: _fputs
100001d01:	48 8b 7b 50	movq	80(%rbx), %rdi
100001d05:	48 8b 15 04 c4 01 00	movq	115716(%rip), %rdx
100001d0c:	48 8d 35 94 ed 00 00	leaq	60820(%rip), %rsi ## literal pool for: "<key>window_size_us</key><integer>%llu</integer>\n"
100001d13:	31 c0	xorl	%eax, %eax
100001d15:	e8 38 e6 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001d1a:	48 8b 73 50	movq	80(%rbx), %rsi
100001d1e:	48 8d 3d b4 ed 00 00	leaq	60852(%rip), %rdi ## literal pool for: "<key>sfi_classes</key>\n<dict>\n"
100001d25:	e8 34 e6 00 00	callq	0x10001035e ## symbol stub for: _fputs
100001d2a:	48 8d 1d cf a2 01 00	leaq	107215(%rip), %rbx
100001d31:	4c 8d 25 60 c2 01 00	leaq	115296(%rip), %r12
100001d38:	4c 8d 35 e1 c3 01 00	leaq	115681(%rip), %r14
100001d3f:	45 31 ff	xorl	%r15d, %r15d
100001d42:	49 8b 14 1f	movq	(%r15,%rbx), %rdx
100001d46:	48 85 d2	testq	%rdx, %rdx
100001d49:	0f 84 96 00 00 00	je	0x100001de5
100001d4f:	41 8b 45 28	movl	40(%r13), %eax
100001d53:	83 f8 01	cmpl	$1, %eax
100001d56:	74 5d	je	0x100001db5
100001d58:	85 c0	testl	%eax, %eax
100001d5a:	0f 85 85 00 00 00	jne	0x100001de5
100001d60:	4b 8b 0c 37	movq	(%r15,%r14), %rcx
100001d64:	48 85 c9	testq	%rcx, %rcx
100001d67:	74 7c	je	0x100001de5
100001d69:	48 8b 05 a0 c3 01 00	movq	115616(%rip), %rax
100001d70:	48 85 c0	testq	%rax, %rax
100001d73:	74 59	je	0x100001dce
100001d75:	66 48 0f 6e c1	movq	%rcx, %xmm0
100001d7a:	66 0f 6f 15 7e 49 01 00	movdqa	84350(%rip), %xmm2
100001d82:	66 0f 62 c2	punpckldq	%xmm2, %xmm0
100001d86:	66 0f 28 1d 82 49 01 00	movapd	84354(%rip), %xmm3
100001d8e:	66 0f 5c c3	subpd	%xmm3, %xmm0
100001d92:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100001d96:	66 48 0f 6e c8	movq	%rax, %xmm1
100001d9b:	66 0f 62 ca	punpckldq	%xmm2, %xmm1
100001d9f:	66 0f 5c cb	subpd	%xmm3, %xmm1
100001da3:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100001da7:	f2 0f 5e c1	divsd	%xmm1, %xmm0
100001dab:	f2 0f 59 05 75 49 01 00	mulsd	84341(%rip), %xmm0
100001db3:	eb 1d	jmp	0x100001dd2
100001db5:	49 8b 7c 24 50	movq	80(%r12), %rdi
100001dba:	4b 8b 0c 37	movq	(%r15,%r14), %rcx
100001dbe:	48 8d 35 53 ed 00 00	leaq	60755(%rip), %rsi ## literal pool for: "<key>%s</key><integer>%llu</integer>\n"
100001dc5:	31 c0	xorl	%eax, %eax
100001dc7:	e8 86 e5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001dcc:	eb 17	jmp	0x100001de5
100001dce:	66 0f 57 c0	xorpd	%xmm0, %xmm0
100001dd2:	49 8b 7c 24 50	movq	80(%r12), %rdi
100001dd7:	48 8d 35 1a ed 00 00	leaq	60698(%rip), %rsi ## literal pool for: "%33s off-time: %lluus (%.2f%%)\n"
100001dde:	b0 01	movb	$1, %al
100001de0:	e8 6d e5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001de5:	49 83 c7 08	addq	$8, %r15
100001de9:	49 81 ff 88 00 00 00	cmpq	$136, %r15
100001df0:	0f 85 4c ff ff ff	jne	0x100001d42
100001df6:	41 83 7d 28 01	cmpl	$1, 40(%r13)
100001dfb:	75 1f	jne	0x100001e1c
100001dfd:	49 8b 74 24 50	movq	80(%r12), %rsi
100001e02:	48 8d 3d 35 ed 00 00	leaq	60725(%rip), %rdi ## literal pool for: "</dict>\n</dict>\n"
100001e09:	48 83 c4 08	addq	$8, %rsp
100001e0d:	5b	popq	%rbx
100001e0e:	41 5c	popq	%r12
100001e10:	41 5d	popq	%r13
100001e12:	41 5e	popq	%r14
100001e14:	41 5f	popq	%r15
100001e16:	5d	popq	%rbp
100001e17:	e9 42 e5 00 00	jmp	0x10001035e ## symbol stub for: _fputs
100001e1c:	48 83 c4 08	addq	$8, %rsp
100001e20:	5b	popq	%rbx
100001e21:	41 5c	popq	%r12
100001e23:	41 5d	popq	%r13
100001e25:	41 5e	popq	%r14
100001e27:	41 5f	popq	%r15
100001e29:	5d	popq	%rbp
100001e2a:	c3	retq
100001e2b:	55	pushq	%rbp
100001e2c:	48 89 e5	movq	%rsp, %rbp
100001e2f:	41 57	pushq	%r15
100001e31:	41 56	pushq	%r14
100001e33:	41 55	pushq	%r13
100001e35:	41 54	pushq	%r12
100001e37:	53	pushq	%rbx
100001e38:	50	pushq	%rax
100001e39:	48 8d 3d d0 c2 01 00	leaq	115408(%rip), %rdi
100001e40:	e8 b1 e6 00 00	callq	0x1000104f6 ## symbol stub for: _system_get_sfi_window
100001e45:	83 f8 ff	cmpl	$-1, %eax
100001e48:	75 20	jne	0x100001e6a
100001e4a:	48 8b 05 1f 64 01 00	movq	91167(%rip), %rax ## literal pool symbol address: ___stderrp
100001e51:	48 8b 08	movq	(%rax), %rcx
100001e54:	48 8d 3d f4 ec 00 00	leaq	60660(%rip), %rdi ## literal pool for: "Failed to get SFI window\n"
100001e5b:	be 19 00 00 00	movl	$25, %esi
100001e60:	ba 01 00 00 00	movl	$1, %edx
100001e65:	e8 00 e5 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100001e6a:	4c 8d 3d 8f a1 01 00	leaq	106895(%rip), %r15
100001e71:	4c 8d 25 a8 c2 01 00	leaq	115368(%rip), %r12
100001e78:	4c 8d 35 ea ec 00 00	leaq	60650(%rip), %r14 ## literal pool for: "Failed to get SFI class: %s"
100001e7f:	45 31 ed	xorl	%r13d, %r13d
100001e82:	31 db	xorl	%ebx, %ebx
100001e84:	4b 83 7c 3d 00 00	cmpq	$0, (%r13,%r15)
100001e8a:	74 29	je	0x100001eb5
100001e8c:	4b 8d 34 2c	leaq	(%r12,%r13), %rsi
100001e90:	89 df	movl	%ebx, %edi
100001e92:	e8 ed e5 00 00	callq	0x100010484 ## symbol stub for: _sfi_get_class_offtime
100001e97:	83 f8 ff	cmpl	$-1, %eax
100001e9a:	75 19	jne	0x100001eb5
100001e9c:	48 8b 05 cd 63 01 00	movq	91085(%rip), %rax ## literal pool symbol address: ___stderrp
100001ea3:	48 8b 38	movq	(%rax), %rdi
100001ea6:	4b 8b 54 3d 00	movq	(%r13,%r15), %rdx
100001eab:	4c 89 f6	movq	%r14, %rsi
100001eae:	31 c0	xorl	%eax, %eax
100001eb0:	e8 9d e4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100001eb5:	48 ff c3	incq	%rbx
100001eb8:	49 83 c5 08	addq	$8, %r13
100001ebc:	48 83 fb 11	cmpq	$17, %rbx
100001ec0:	75 c2	jne	0x100001e84
100001ec2:	48 83 c4 08	addq	$8, %rsp
100001ec6:	5b	popq	%rbx
100001ec7:	41 5c	popq	%r12
100001ec9:	41 5d	popq	%r13
100001ecb:	41 5e	popq	%r14
100001ecd:	41 5f	popq	%r15
100001ecf:	5d	popq	%rbp
100001ed0:	c3	retq
100001ed1:	90	nop
100001ed2:	90	nop
100001ed3:	90	nop
100001ed4:	90	nop
100001ed5:	90	nop
100001ed6:	90	nop
100001ed7:	90	nop
100001ed8:	90	nop
100001ed9:	90	nop
100001eda:	90	nop
100001edb:	90	nop
100001edc:	90	nop
100001edd:	90	nop
100001ede:	90	nop
100001edf:	90	nop
100001ee0:	55	pushq	%rbp
100001ee1:	48 89 e5	movq	%rsp, %rbp
100001ee4:	41 57	pushq	%r15
100001ee6:	41 56	pushq	%r14
100001ee8:	41 55	pushq	%r13
100001eea:	41 54	pushq	%r12
100001eec:	53	pushq	%rbx
100001eed:	48 83 ec 68	subq	$104, %rsp
100001ef1:	48 8b 05 70 63 01 00	movq	90992(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100001ef8:	48 8b 00	movq	(%rax), %rax
100001efb:	48 89 45 d0	movq	%rax, -48(%rbp)
100001eff:	0f 57 c0	xorps	%xmm0, %xmm0
100001f02:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100001f06:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100001f0a:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100001f0e:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100001f12:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100001f16:	0f 11 05 8b c2 01 00	movups	%xmm0, 115339(%rip)
100001f1d:	0f 11 05 94 c2 01 00	movups	%xmm0, 115348(%rip)
100001f24:	0f 11 05 9d c2 01 00	movups	%xmm0, 115357(%rip)
100001f2b:	0f 11 05 a6 c2 01 00	movups	%xmm0, 115366(%rip)
100001f32:	0f 11 05 af c2 01 00	movups	%xmm0, 115375(%rip)
100001f39:	0f 11 05 b8 c2 01 00	movups	%xmm0, 115384(%rip)
100001f40:	0f 11 05 c1 c2 01 00	movups	%xmm0, 115393(%rip)
100001f47:	0f 11 05 ca c2 01 00	movups	%xmm0, 115402(%rip)
100001f4e:	0f 11 05 d3 c2 01 00	movups	%xmm0, 115411(%rip)
100001f55:	0f 11 05 5c c3 01 00	movups	%xmm0, 115548(%rip)
100001f5c:	0f 11 05 45 c3 01 00	movups	%xmm0, 115525(%rip)
100001f63:	0f 11 05 2e c3 01 00	movups	%xmm0, 115502(%rip)
100001f6a:	0f 11 05 17 c3 01 00	movups	%xmm0, 115479(%rip)
100001f71:	0f 11 05 00 c3 01 00	movups	%xmm0, 115456(%rip)
100001f78:	0f 11 05 e9 c2 01 00	movups	%xmm0, 115433(%rip)
100001f7f:	0f 11 05 d2 c2 01 00	movups	%xmm0, 115410(%rip)
100001f86:	0f 11 05 bb c2 01 00	movups	%xmm0, 115387(%rip)
100001f8d:	0f 11 05 a4 c2 01 00	movups	%xmm0, 115364(%rip)
100001f94:	48 8b 05 d5 63 01 00	movq	91093(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
100001f9b:	44 8b 38	movl	(%rax), %r15d
100001f9e:	48 8d 35 2c ec 00 00	leaq	60460(%rip), %rsi ## literal pool for: "IODeviceTree:/"
100001fa5:	44 89 ff	movl	%r15d, %edi
100001fa8:	e8 5b e2 00 00	callq	0x100010208 ## symbol stub for: _IORegistryEntryFromPath
100001fad:	85 c0	testl	%eax, %eax
100001faf:	0f 84 ab 01 00 00	je	0x100002160
100001fb5:	41 89 c6	movl	%eax, %r14d
100001fb8:	48 8d 35 d1 77 01 00	leaq	96209(%rip), %rsi ## Objc cfstring ref: @"board-id"
100001fbf:	89 c7	movl	%eax, %edi
100001fc1:	31 d2	xorl	%edx, %edx
100001fc3:	31 c9	xorl	%ecx, %ecx
100001fc5:	e8 38 e2 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
100001fca:	48 85 c0	testq	%rax, %rax
100001fcd:	0f 84 85 01 00 00	je	0x100002158
100001fd3:	48 89 c3	movq	%rax, %rbx
100001fd6:	48 89 c7	movq	%rax, %rdi
100001fd9:	e8 a0 e1 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
100001fde:	49 89 c4	movq	%rax, %r12
100001fe1:	e8 86 e1 00 00	callq	0x10001016c ## symbol stub for: _CFDataGetTypeID
100001fe6:	49 39 c4	cmpq	%rax, %r12
100001fe9:	0f 85 5a 01 00 00	jne	0x100002149
100001fef:	48 89 df	movq	%rbx, %rdi
100001ff2:	e8 6f e1 00 00	callq	0x100010166 ## symbol stub for: _CFDataGetLength
100001ff7:	48 83 f8 50	cmpq	$80, %rax
100001ffb:	0f 87 4f 01 00 00	ja	0x100002150
100002001:	49 89 c5	movq	%rax, %r13
100002004:	48 89 df	movq	%rbx, %rdi
100002007:	e8 4e e1 00 00	callq	0x10001015a ## symbol stub for: _CFDataGetBytePtr
10000200c:	4c 8d 65 80	leaq	-128(%rbp), %r12
100002010:	b9 50 00 00 00	movl	$80, %ecx
100002015:	4c 89 e7	movq	%r12, %rdi
100002018:	48 89 c6	movq	%rax, %rsi
10000201b:	4c 89 ea	movq	%r13, %rdx
10000201e:	e8 c9 e2 00 00	callq	0x1000102ec ## symbol stub for: ___memcpy_chk
100002023:	48 89 df	movq	%rbx, %rdi
100002026:	e8 65 e1 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000202b:	44 89 f7	movl	%r14d, %edi
10000202e:	e8 b1 e1 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
100002033:	4c 89 e7	movq	%r12, %rdi
100002036:	e8 91 e4 00 00	callq	0x1000104cc ## symbol stub for: _strlen
10000203b:	49 89 c6	movq	%rax, %r14
10000203e:	bb 08 00 00 00	movl	$8, %ebx
100002043:	4c 8d 2d 16 67 01 00	leaq	91926(%rip), %r13
10000204a:	4a 8b 7c 2b f8	movq	-8(%rbx,%r13), %rdi
10000204f:	4c 89 e6	movq	%r12, %rsi
100002052:	4c 89 f2	movq	%r14, %rdx
100002055:	e8 78 e4 00 00	callq	0x1000104d2 ## symbol stub for: _strncmp
10000205a:	85 c0	testl	%eax, %eax
10000205c:	74 16	je	0x100002074
10000205e:	48 83 c3 10	addq	$16, %rbx
100002062:	48 81 fb 18 03 00 00	cmpq	$792, %rbx
100002069:	75 df	jne	0x10000204a
10000206b:	48 8b 05 56 c2 01 00	movq	115286(%rip), %rax
100002072:	eb 0b	jmp	0x10000207f
100002074:	4a 8b 04 2b	movq	(%rbx,%r13), %rax
100002078:	48 89 05 49 c2 01 00	movq	%rax, 115273(%rip)
10000207f:	48 85 c0	testq	%rax, %rax
100002082:	74 4e	je	0x1000020d2
100002084:	bf 01 00 00 00	movl	$1, %edi
100002089:	be 08 00 00 00	movl	$8, %esi
10000208e:	e8 89 e2 00 00	callq	0x10001031c ## symbol stub for: _calloc
100002093:	48 85 c0	testq	%rax, %rax
100002096:	0f 84 6e 01 00 00	je	0x10000220a
10000209c:	49 89 c6	movq	%rax, %r14
10000209f:	48 8d 3d 67 ef 00 00	leaq	61287(%rip), %rdi ## literal pool for: "AppleSMC"
1000020a6:	e8 11 e2 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
1000020ab:	48 8d 95 70 ff ff ff	leaq	-144(%rbp), %rdx
1000020b2:	44 89 ff	movl	%r15d, %edi
1000020b5:	48 89 c6	movq	%rax, %rsi
1000020b8:	e8 f9 e1 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
1000020bd:	85 c0	testl	%eax, %eax
1000020bf:	74 2c	je	0x1000020ed
1000020c1:	48 8d 3d bf f4 00 00	leaq	62655(%rip), %rdi ## literal pool for: "failed to match to AppleSMC"
1000020c8:	e8 93 e3 00 00	callq	0x100010460 ## symbol stub for: _puts
1000020cd:	e9 03 01 00 00	jmp	0x1000021d5
1000020d2:	48 8b 05 97 61 01 00	movq	90519(%rip), %rax ## literal pool symbol address: ___stderrp
1000020d9:	48 8b 08	movq	(%rax), %rcx
1000020dc:	48 8d 3d d4 ea 00 00	leaq	60116(%rip), %rdi ## literal pool for: "unable to get smc values\n"
1000020e3:	be 19 00 00 00	movl	$25, %esi
1000020e8:	e9 89 00 00 00	jmp	0x100002176
1000020ed:	8b bd 70 ff ff ff	movl	-144(%rbp), %edi
1000020f3:	e8 da e0 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
1000020f8:	85 c0	testl	%eax, %eax
1000020fa:	0f 84 ca 00 00 00	je	0x1000021ca
100002100:	89 c3	movl	%eax, %ebx
100002102:	48 8b 05 9f 62 01 00	movq	90783(%rip), %rax ## literal pool symbol address: _mach_task_self_
100002109:	8b 30	movl	(%rax), %esi
10000210b:	48 8d 8d 7c ff ff ff	leaq	-132(%rbp), %rcx
100002112:	89 df	movl	%ebx, %edi
100002114:	ba 01 00 00 00	movl	$1, %edx
100002119:	e8 a4 e1 00 00	callq	0x1000102c2 ## symbol stub for: _IOServiceOpen
10000211e:	85 c0	testl	%eax, %eax
100002120:	0f 85 9d 00 00 00	jne	0x1000021c3
100002126:	8b bd 7c ff ff ff	movl	-132(%rbp), %edi
10000212c:	31 f6	xorl	%esi, %esi
10000212e:	31 d2	xorl	%edx, %edx
100002130:	31 c9	xorl	%ecx, %ecx
100002132:	45 31 c0	xorl	%r8d, %r8d
100002135:	45 31 c9	xorl	%r9d, %r9d
100002138:	e8 83 e0 00 00	callq	0x1000101c0 ## symbol stub for: _IOConnectCallScalarMethod
10000213d:	85 c0	testl	%eax, %eax
10000213f:	74 5e	je	0x10000219f
100002141:	8b bd 7c ff ff ff	movl	-132(%rbp), %edi
100002147:	eb 75	jmp	0x1000021be
100002149:	31 ff	xorl	%edi, %edi
10000214b:	e8 ba e1 00 00	callq	0x10001030a ## symbol stub for: __os_assumes_log
100002150:	48 89 df	movq	%rbx, %rdi
100002153:	e8 38 e0 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
100002158:	44 89 f7	movl	%r14d, %edi
10000215b:	e8 84 e0 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
100002160:	48 8b 05 09 61 01 00	movq	90377(%rip), %rax ## literal pool symbol address: ___stderrp
100002167:	48 8b 08	movq	(%rax), %rcx
10000216a:	48 8d 3d 2e ea 00 00	leaq	59950(%rip), %rdi ## literal pool for: "failed to get board-id\n"
100002171:	be 17 00 00 00	movl	$23, %esi
100002176:	ba 01 00 00 00	movl	$1, %edx
10000217b:	e8 ea e1 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100002180:	48 8b 05 e1 60 01 00	movq	90337(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100002187:	48 8b 00	movq	(%rax), %rax
10000218a:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000218e:	75 7f	jne	0x10000220f
100002190:	48 83 c4 68	addq	$104, %rsp
100002194:	5b	popq	%rbx
100002195:	41 5c	popq	%r12
100002197:	41 5d	popq	%r13
100002199:	41 5e	popq	%r14
10000219b:	41 5f	popq	%r15
10000219d:	5d	popq	%rbp
10000219e:	c3	retq
10000219f:	89 df	movl	%ebx, %edi
1000021a1:	e8 44 e0 00 00	callq	0x1000101ea ## symbol stub for: _IOObjectRetain
1000021a6:	41 89 1e	movl	%ebx, (%r14)
1000021a9:	8b bd 7c ff ff ff	movl	-132(%rbp), %edi
1000021af:	e8 00 e0 00 00	callq	0x1000101b4 ## symbol stub for: _IOConnectAddRef
1000021b4:	8b bd 7c ff ff ff	movl	-132(%rbp), %edi
1000021ba:	41 89 7e 04	movl	%edi, 4(%r14)
1000021be:	e8 09 e0 00 00	callq	0x1000101cc ## symbol stub for: _IOConnectRelease
1000021c3:	89 df	movl	%ebx, %edi
1000021c5:	e8 1a e0 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000021ca:	8b bd 70 ff ff ff	movl	-144(%rbp), %edi
1000021d0:	e8 0f e0 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000021d5:	4c 89 35 f4 c0 01 00	movq	%r14, 114932(%rip)
1000021dc:	c6 05 f5 c0 01 00 01	movb	$1, 114933(%rip)
1000021e3:	48 8b 35 de c0 01 00	movq	114910(%rip), %rsi
1000021ea:	48 83 c6 50	addq	$80, %rsi
1000021ee:	48 8d 95 70 ff ff ff	leaq	-144(%rbp), %rdx
1000021f5:	4c 89 f7	movq	%r14, %rdi
1000021f8:	e8 34 0a 00 00	callq	0x100002c31
1000021fd:	34 01	xorb	$1, %al
1000021ff:	88 05 d4 c0 01 00	movb	%al, 114900(%rip)
100002205:	e9 76 ff ff ff	jmp	0x100002180
10000220a:	e8 d5 d7 00 00	callq	0x10000f9e4
10000220f:	e8 e4 e0 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100002214:	55	pushq	%rbp
100002215:	48 89 e5	movq	%rsp, %rbp
100002218:	41 57	pushq	%r15
10000221a:	41 56	pushq	%r14
10000221c:	53	pushq	%rbx
10000221d:	50	pushq	%rax
10000221e:	48 83 3d a2 c0 01 00 00	cmpq	$0, 114850(%rip)
100002226:	0f 84 a7 06 00 00	je	0x1000028d3
10000222c:	48 83 3d 9c c0 01 00 00	cmpq	$0, 114844(%rip)
100002234:	0f 84 99 06 00 00	je	0x1000028d3
10000223a:	4c 8d 35 57 bd 01 00	leaq	114007(%rip), %r14
100002241:	41 8a 1e	movb	(%r14), %bl
100002244:	48 8d 05 a5 bd 01 00	leaq	114085(%rip), %rax
10000224b:	8b 40 28	movl	40(%rax), %eax
10000224e:	83 f8 01	cmpl	$1, %eax
100002251:	0f 84 8c 00 00 00	je	0x1000022e3
100002257:	85 c0	testl	%eax, %eax
100002259:	0f 85 74 06 00 00	jne	0x1000028d3
10000225f:	49 8b 4e 50	movq	80(%r14), %rcx
100002263:	48 8d 3d c3 ed 00 00	leaq	60867(%rip), %rdi ## literal pool for: "\n\n**** SMC sensors ****\n\n"
10000226a:	be 19 00 00 00	movl	$25, %esi
10000226f:	ba 01 00 00 00	movl	$1, %edx
100002274:	e8 f1 e0 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100002279:	80 3d a0 bf 01 00 00	cmpb	$0, 114592(%rip)
100002280:	0f 84 27 03 00 00	je	0x1000025ad
100002286:	80 3d 94 bf 01 00 00	cmpb	$0, 114580(%rip)
10000228d:	0f 84 3c 03 00 00	je	0x1000025cf
100002293:	49 8b 7e 50	movq	80(%r14), %rdi
100002297:	48 8b 15 0a bf 01 00	movq	114442(%rip), %rdx
10000229e:	48 8d 35 a2 ed 00 00	leaq	60834(%rip), %rsi ## literal pool for: "CPU Thermal level: %llu"
1000022a5:	31 c0	xorl	%eax, %eax
1000022a7:	e8 a6 e0 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000022ac:	80 3d 71 bf 01 00 00	cmpb	$0, 114545(%rip)
1000022b3:	49 8b 46 50	movq	80(%r14), %rax
1000022b7:	0f 84 05 03 00 00	je	0x1000025c2
1000022bd:	48 8b 15 fc be 01 00	movq	114428(%rip), %rdx
1000022c4:	48 85 d2	testq	%rdx, %rdx
1000022c7:	0f 84 f5 02 00 00	je	0x1000025c2
1000022cd:	48 8d 35 8b ed 00 00	leaq	60811(%rip), %rsi ## literal pool for: " (simulated:%llu)\n"
1000022d4:	48 89 c7	movq	%rax, %rdi
1000022d7:	31 c0	xorl	%eax, %eax
1000022d9:	e8 74 e0 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000022de:	e9 ec 02 00 00	jmp	0x1000025cf
1000022e3:	80 3d 36 bf 01 00 00	cmpb	$0, 114486(%rip)
1000022ea:	0f 84 e3 05 00 00	je	0x1000028d3
1000022f0:	49 8b 4e 50	movq	80(%r14), %rcx
1000022f4:	48 8d 3d d2 ee 00 00	leaq	61138(%rip), %rdi ## literal pool for: "<key>smc</key>\n<dict>\n"
1000022fb:	be 16 00 00 00	movl	$22, %esi
100002300:	ba 01 00 00 00	movl	$1, %edx
100002305:	e8 60 e0 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000230a:	80 3d 10 bf 01 00 00	cmpb	$0, 114448(%rip)
100002311:	74 19	je	0x10000232c
100002313:	49 8b 7e 50	movq	80(%r14), %rdi
100002317:	48 8b 15 8a be 01 00	movq	114314(%rip), %rdx
10000231e:	48 8d 35 bf ee 00 00	leaq	61119(%rip), %rsi ## literal pool for: "<key>cpu_thermal_level</key><integer>%llu</integer>\n"
100002325:	31 c0	xorl	%eax, %eax
100002327:	e8 26 e0 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000232c:	80 3d f1 be 01 00 00	cmpb	$0, 114417(%rip)
100002333:	74 19	je	0x10000234e
100002335:	49 8b 7e 50	movq	80(%r14), %rdi
100002339:	48 8b 15 80 be 01 00	movq	114304(%rip), %rdx
100002340:	48 8d 35 d2 ee 00 00	leaq	61138(%rip), %rsi ## literal pool for: "<key>simulated_cpu_thermal_level</key><integer>%llu</integer>\n"
100002347:	31 c0	xorl	%eax, %eax
100002349:	e8 04 e0 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000234e:	80 3d cd be 01 00 00	cmpb	$0, 114381(%rip)
100002355:	74 19	je	0x100002370
100002357:	49 8b 7e 50	movq	80(%r14), %rdi
10000235b:	48 8b 15 4e be 01 00	movq	114254(%rip), %rdx
100002362:	48 8d 35 ef ee 00 00	leaq	61167(%rip), %rsi ## literal pool for: "<key>gpu_thermal_level</key><integer>%llu</integer>\n"
100002369:	31 c0	xorl	%eax, %eax
10000236b:	e8 e2 df 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002370:	80 3d ae be 01 00 00	cmpb	$0, 114350(%rip)
100002377:	74 19	je	0x100002392
100002379:	49 8b 7e 50	movq	80(%r14), %rdi
10000237d:	48 8b 15 44 be 01 00	movq	114244(%rip), %rdx
100002384:	48 8d 35 02 ef 00 00	leaq	61186(%rip), %rsi ## literal pool for: "<key>simulated_gpu_thermal_level</key><integer>%llu</integer>\n"
10000238b:	31 c0	xorl	%eax, %eax
10000238d:	e8 c0 df 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002392:	80 3d 8a be 01 00 00	cmpb	$0, 114314(%rip)
100002399:	74 19	je	0x1000023b4
10000239b:	49 8b 7e 50	movq	80(%r14), %rdi
10000239f:	48 8b 15 12 be 01 00	movq	114194(%rip), %rdx
1000023a6:	48 8d 35 1f ef 00 00	leaq	61215(%rip), %rsi ## literal pool for: "<key>io_thermal_level</key><integer>%llu</integer>\n"
1000023ad:	31 c0	xorl	%eax, %eax
1000023af:	e8 9e df 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000023b4:	80 3d 6b be 01 00 00	cmpb	$0, 114283(%rip)
1000023bb:	74 19	je	0x1000023d6
1000023bd:	49 8b 7e 50	movq	80(%r14), %rdi
1000023c1:	48 8b 15 08 be 01 00	movq	114184(%rip), %rdx
1000023c8:	48 8d 35 31 ef 00 00	leaq	61233(%rip), %rsi ## literal pool for: "<key>simulated_io_thermal_level</key><integer>%llu</integer>\n"
1000023cf:	31 c0	xorl	%eax, %eax
1000023d1:	e8 7c df 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000023d6:	80 3d 4a be 01 00 00	cmpb	$0, 114250(%rip)
1000023dd:	74 1a	je	0x1000023f9
1000023df:	49 8b 7e 50	movq	80(%r14), %rdi
1000023e3:	f2 0f 10 05 ed bd 01 00	movsd	114157(%rip), %xmm0
1000023eb:	48 8d 35 4c ef 00 00	leaq	61260(%rip), %rsi ## literal pool for: "<key>fan</key><real>%g</real>\n"
1000023f2:	b0 01	movb	$1, %al
1000023f4:	e8 59 df 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000023f9:	80 3d 28 be 01 00 00	cmpb	$0, 114216(%rip)
100002400:	74 2d	je	0x10000242f
100002402:	49 8b 7e 50	movq	80(%r14), %rdi
100002406:	f2 0f 10 05 d2 bd 01 00	movsd	114130(%rip), %xmm0
10000240e:	48 8b 05 b3 be 01 00	movq	114355(%rip), %rax
100002415:	8b 88 a0 00 00 00	movl	160(%rax), %ecx
10000241b:	8b 90 a4 00 00 00	movl	164(%rax), %edx
100002421:	48 8d 35 35 ef 00 00	leaq	61237(%rip), %rsi ## literal pool for: "<key>cpu_die</key><real>%.2f</real>\n<key>cpu_die_power_target</key><real>%d</real>\n<key>cpu_die_fan_target</key><real>%d</real>\n"
100002428:	b0 01	movb	$1, %al
10000242a:	e8 23 df 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000242f:	80 3d f3 bd 01 00 00	cmpb	$0, 114163(%rip)
100002436:	74 2d	je	0x100002465
100002438:	49 8b 7e 50	movq	80(%r14), %rdi
10000243c:	f2 0f 10 05 a4 bd 01 00	movsd	114084(%rip), %xmm0
100002444:	48 8b 05 7d be 01 00	movq	114301(%rip), %rax
10000244b:	8b 88 b8 00 00 00	movl	184(%rax), %ecx
100002451:	8b 90 bc 00 00 00	movl	188(%rax), %edx
100002457:	48 8d 35 80 ef 00 00	leaq	61312(%rip), %rsi ## literal pool for: "<key>gpu_die</key><real>%.2f</real>\n<key>gpu_die_power_target</key><real>%d</real>\n<key>gpu_die_fan_target</key><real>%d</real>\n"
10000245e:	b0 01	movb	$1, %al
100002460:	e8 ed de 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002465:	80 3d be bd 01 00 00	cmpb	$0, 114110(%rip)
10000246c:	74 1a	je	0x100002488
10000246e:	49 8b 7e 50	movq	80(%r14), %rdi
100002472:	f2 0f 10 05 76 bd 01 00	movsd	114038(%rip), %xmm0
10000247a:	48 8d 35 de ef 00 00	leaq	61406(%rip), %rsi ## literal pool for: "<key>cpu_plimit</key><real>%.2f</real>\n"
100002481:	b0 01	movb	$1, %al
100002483:	e8 ca de 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002488:	80 3d 9c bd 01 00 00	cmpb	$0, 114076(%rip)
10000248f:	74 1a	je	0x1000024ab
100002491:	49 8b 7e 50	movq	80(%r14), %rdi
100002495:	f2 0f 10 05 5b bd 01 00	movsd	114011(%rip), %xmm0
10000249d:	48 8d 35 e3 ef 00 00	leaq	61411(%rip), %rsi ## literal pool for: "<key>gpu_plimit</key><real>%.2f</real>\n"
1000024a4:	b0 01	movb	$1, %al
1000024a6:	e8 a7 de 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000024ab:	80 3d 7a bd 01 00 00	cmpb	$0, 114042(%rip)
1000024b2:	74 1a	je	0x1000024ce
1000024b4:	49 8b 7e 50	movq	80(%r14), %rdi
1000024b8:	f2 0f 10 05 40 bd 01 00	movsd	113984(%rip), %xmm0
1000024c0:	48 8d 35 e8 ef 00 00	leaq	61416(%rip), %rsi ## literal pool for: "<key>gpu_plimit2</key><real>%.2f</real>\n"
1000024c7:	b0 01	movb	$1, %al
1000024c9:	e8 84 de 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000024ce:	80 3d 58 bd 01 00 00	cmpb	$0, 114008(%rip)
1000024d5:	74 1a	je	0x1000024f1
1000024d7:	49 8b 7e 50	movq	80(%r14), %rdi
1000024db:	f2 0f 10 05 25 bd 01 00	movsd	113957(%rip), %xmm0
1000024e3:	48 8d 35 ee ef 00 00	leaq	61422(%rip), %rsi ## literal pool for: "<key>gpu_plimit3</key><real>%.2f</real>\n"
1000024ea:	b0 01	movb	$1, %al
1000024ec:	e8 61 de 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000024f1:	84 db	testb	%bl, %bl
1000024f3:	48 8d 0d 3e bd 01 00	leaq	113982(%rip), %rcx
1000024fa:	48 8d 05 df bd 01 00	leaq	114143(%rip), %rax
100002501:	48 89 c2	movq	%rax, %rdx
100002504:	48 0f 44 d1	cmoveq	%rcx, %rdx
100002508:	80 3d 25 bd 01 00 00	cmpb	$0, 113957(%rip)
10000250f:	74 2c	je	0x10000253d
100002511:	80 ba 8c 00 00 00 00	cmpb	$0, 140(%rdx)
100002518:	74 23	je	0x10000253d
10000251a:	84 db	testb	%bl, %bl
10000251c:	49 8b 7e 50	movq	80(%r14), %rdi
100002520:	48 8b 15 e9 bc 01 00	movq	113897(%rip), %rdx
100002527:	48 0f 44 c1	cmoveq	%rcx, %rax
10000252b:	48 2b 50 68	subq	104(%rax), %rdx
10000252f:	48 8d 35 cb ef 00 00	leaq	61387(%rip), %rsi ## literal pool for: "<key>num_prochots</key><integer>%llu</integer>\n"
100002536:	31 c0	xorl	%eax, %eax
100002538:	e8 15 de 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000253d:	80 3d f1 bc 01 00 00	cmpb	$0, 113905(%rip)
100002544:	74 52	je	0x100002598
100002546:	49 8b 7e 50	movq	80(%r14), %rdi
10000254a:	80 3d c7 bc 01 00 00	cmpb	$0, 113863(%rip)
100002551:	4c 8d 3d fb ef 00 00	leaq	61435(%rip), %r15 ## literal pool for: "false"
100002558:	48 8d 1d ef ef 00 00	leaq	61423(%rip), %rbx ## literal pool for: "true"
10000255f:	48 89 da	movq	%rbx, %rdx
100002562:	49 0f 44 d7	cmoveq	%r15, %rdx
100002566:	48 8d 35 c4 ef 00 00	leaq	61380(%rip), %rsi ## literal pool for: "<key>cpu_prochot</key><%s/>\n"
10000256d:	31 c0	xorl	%eax, %eax
10000256f:	e8 de dd 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002574:	49 8b 7e 50	movq	80(%r14), %rdi
100002578:	0f b6 05 9a bc 01 00	movzbl	113818(%rip), %eax
10000257f:	48 c1 e0 08	shlq	$8, %rax
100002583:	49 0f 44 df	cmoveq	%r15, %rbx
100002587:	48 8d 35 cb ef 00 00	leaq	61387(%rip), %rsi ## literal pool for: "<key>smc_prochot</key><%s/>\n"
10000258e:	48 89 da	movq	%rbx, %rdx
100002591:	31 c0	xorl	%eax, %eax
100002593:	e8 ba dd 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002598:	49 8b 4e 50	movq	80(%r14), %rcx
10000259c:	48 8d 3d 0a e2 00 00	leaq	57866(%rip), %rdi ## literal pool for: "</dict>\n"
1000025a3:	be 08 00 00 00	movl	$8, %esi
1000025a8:	e9 12 03 00 00	jmp	0x1000028bf
1000025ad:	49 8b 4e 50	movq	80(%r14), %rcx
1000025b1:	48 8d 3d de eb 00 00	leaq	60382(%rip), %rdi ## literal pool for: "(SMC is currently in monitor mode, no data available)\n"
1000025b8:	be 36 00 00 00	movl	$54, %esi
1000025bd:	e9 fd 02 00 00	jmp	0x1000028bf
1000025c2:	bf 0a 00 00 00	movl	$10, %edi
1000025c7:	48 89 c6	movq	%rax, %rsi
1000025ca:	e8 89 dd 00 00	callq	0x100010358 ## symbol stub for: _fputc
1000025cf:	80 3d 4c bc 01 00 00	cmpb	$0, 113740(%rip)
1000025d6:	74 52	je	0x10000262a
1000025d8:	49 8b 7e 50	movq	80(%r14), %rdi
1000025dc:	48 8b 15 cd bb 01 00	movq	113613(%rip), %rdx
1000025e3:	48 8d 35 8a ea 00 00	leaq	60042(%rip), %rsi ## literal pool for: "GPU Thermal level: %llu"
1000025ea:	31 c0	xorl	%eax, %eax
1000025ec:	e8 61 dd 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000025f1:	80 3d 2d bc 01 00 00	cmpb	$0, 113709(%rip)
1000025f8:	49 8b 46 50	movq	80(%r14), %rax
1000025fc:	74 1f	je	0x10000261d
1000025fe:	48 8b 15 c3 bb 01 00	movq	113603(%rip), %rdx
100002605:	48 85 d2	testq	%rdx, %rdx
100002608:	74 13	je	0x10000261d
10000260a:	48 8d 35 4e ea 00 00	leaq	59982(%rip), %rsi ## literal pool for: " (simulated:%llu)\n"
100002611:	48 89 c7	movq	%rax, %rdi
100002614:	31 c0	xorl	%eax, %eax
100002616:	e8 37 dd 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000261b:	eb 0d	jmp	0x10000262a
10000261d:	bf 0a 00 00 00	movl	$10, %edi
100002622:	48 89 c6	movq	%rax, %rsi
100002625:	e8 2e dd 00 00	callq	0x100010358 ## symbol stub for: _fputc
10000262a:	80 3d f2 bb 01 00 00	cmpb	$0, 113650(%rip)
100002631:	74 52	je	0x100002685
100002633:	49 8b 7e 50	movq	80(%r14), %rdi
100002637:	48 8b 15 7a bb 01 00	movq	113530(%rip), %rdx
10000263e:	48 8d 35 47 ea 00 00	leaq	59975(%rip), %rsi ## literal pool for: "IO Thermal level: %llu"
100002645:	31 c0	xorl	%eax, %eax
100002647:	e8 06 dd 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000264c:	80 3d d3 bb 01 00 00	cmpb	$0, 113619(%rip)
100002653:	49 8b 46 50	movq	80(%r14), %rax
100002657:	74 1f	je	0x100002678
100002659:	48 8b 15 70 bb 01 00	movq	113520(%rip), %rdx
100002660:	48 85 d2	testq	%rdx, %rdx
100002663:	74 13	je	0x100002678
100002665:	48 8d 35 f3 e9 00 00	leaq	59891(%rip), %rsi ## literal pool for: " (simulated:%llu)\n"
10000266c:	48 89 c7	movq	%rax, %rdi
10000266f:	31 c0	xorl	%eax, %eax
100002671:	e8 dc dc 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002676:	eb 0d	jmp	0x100002685
100002678:	bf 0a 00 00 00	movl	$10, %edi
10000267d:	48 89 c6	movq	%rax, %rsi
100002680:	e8 d3 dc 00 00	callq	0x100010358 ## symbol stub for: _fputc
100002685:	80 3d 9b bb 01 00 00	cmpb	$0, 113563(%rip)
10000268c:	74 2a	je	0x1000026b8
10000268e:	49 8b 7e 50	movq	80(%r14), %rdi
100002692:	f2 0f 10 05 3e bb 01 00	movsd	113470(%rip), %xmm0
10000269a:	48 8d 35 02 ea 00 00	leaq	59906(%rip), %rsi ## literal pool for: "Fan: %g rpm"
1000026a1:	b0 01	movb	$1, %al
1000026a3:	e8 aa dc 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000026a8:	49 8b 76 50	movq	80(%r14), %rsi
1000026ac:	48 8d 3d bf e9 00 00	leaq	59839(%rip), %rdi ## literal pool for: "\n"
1000026b3:	e8 a6 dc 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000026b8:	80 3d 69 bb 01 00 00	cmpb	$0, 113513(%rip)
1000026bf:	74 67	je	0x100002728
1000026c1:	49 8b 7e 50	movq	80(%r14), %rdi
1000026c5:	f2 0f 10 05 13 bb 01 00	movsd	113427(%rip), %xmm0
1000026cd:	48 8b 0d f4 bb 01 00	movq	113652(%rip), %rcx
1000026d4:	8b 81 a0 00 00 00	movl	160(%rcx), %eax
1000026da:	8b 89 a4 00 00 00	movl	164(%rcx), %ecx
1000026e0:	85 c9	testl	%ecx, %ecx
1000026e2:	74 13	je	0x1000026f7
1000026e4:	f2 0f 2a c9	cvtsi2sd	%ecx, %xmm1
1000026e8:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
1000026ec:	72 09	jb	0x1000026f7
1000026ee:	48 8d 15 81 ee 00 00	leaq	61057(%rip), %rdx ## literal pool for: " (power)"
1000026f5:	eb 23	jmp	0x10000271a
1000026f7:	0f 57 c9	xorps	%xmm1, %xmm1
1000026fa:	f2 0f 2a c8	cvtsi2sd	%eax, %xmm1
1000026fe:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
100002702:	48 8d 15 76 ee 00 00	leaq	61046(%rip), %rdx ## literal pool for: " (fan)"
100002709:	48 8d 0d 76 ee 00 00	leaq	61046(%rip), %rcx ## literal pool for: ""
100002710:	48 0f 42 d1	cmovbq	%rcx, %rdx
100002714:	85 c0	testl	%eax, %eax
100002716:	48 0f 44 d1	cmoveq	%rcx, %rdx
10000271a:	48 8d 35 8e e9 00 00	leaq	59790(%rip), %rsi ## literal pool for: "CPU die temperature: %.2f C%s\n"
100002721:	b0 01	movb	$1, %al
100002723:	e8 2a dc 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002728:	80 3d fa ba 01 00 00	cmpb	$0, 113402(%rip)
10000272f:	74 6a	je	0x10000279b
100002731:	49 8b 7e 50	movq	80(%r14), %rdi
100002735:	f2 0f 10 05 ab ba 01 00	movsd	113323(%rip), %xmm0
10000273d:	48 8b 0d 84 bb 01 00	movq	113540(%rip), %rcx
100002744:	8b 81 b8 00 00 00	movl	184(%rcx), %eax
10000274a:	8b 89 bc 00 00 00	movl	188(%rcx), %ecx
100002750:	85 c9	testl	%ecx, %ecx
100002752:	74 16	je	0x10000276a
100002754:	0f 57 c9	xorps	%xmm1, %xmm1
100002757:	f2 0f 2a c9	cvtsi2sd	%ecx, %xmm1
10000275b:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
10000275f:	72 09	jb	0x10000276a
100002761:	48 8d 15 0e ee 00 00	leaq	60942(%rip), %rdx ## literal pool for: " (power)"
100002768:	eb 23	jmp	0x10000278d
10000276a:	0f 57 c9	xorps	%xmm1, %xmm1
10000276d:	f2 0f 2a c8	cvtsi2sd	%eax, %xmm1
100002771:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
100002775:	48 8d 15 03 ee 00 00	leaq	60931(%rip), %rdx ## literal pool for: " (fan)"
10000277c:	48 8d 0d 03 ee 00 00	leaq	60931(%rip), %rcx ## literal pool for: ""
100002783:	48 0f 42 d1	cmovbq	%rcx, %rdx
100002787:	85 c0	testl	%eax, %eax
100002789:	48 0f 44 d1	cmoveq	%rcx, %rdx
10000278d:	48 8d 35 3a e9 00 00	leaq	59706(%rip), %rsi ## literal pool for: "GPU die temperature: %.2f C%s\n"
100002794:	b0 01	movb	$1, %al
100002796:	e8 b7 db 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000279b:	80 3d 88 ba 01 00 00	cmpb	$0, 113288(%rip)
1000027a2:	74 1a	je	0x1000027be
1000027a4:	49 8b 7e 50	movq	80(%r14), %rdi
1000027a8:	f2 0f 10 05 40 ba 01 00	movsd	113216(%rip), %xmm0
1000027b0:	48 8d 35 36 e9 00 00	leaq	59702(%rip), %rsi ## literal pool for: "CPU Plimit: %.2f\n"
1000027b7:	b0 01	movb	$1, %al
1000027b9:	e8 94 db 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000027be:	80 3d 66 ba 01 00 00	cmpb	$0, 113254(%rip)
1000027c5:	74 1a	je	0x1000027e1
1000027c7:	49 8b 7e 50	movq	80(%r14), %rdi
1000027cb:	f2 0f 10 05 25 ba 01 00	movsd	113189(%rip), %xmm0
1000027d3:	48 8d 35 25 e9 00 00	leaq	59685(%rip), %rsi ## literal pool for: "GPU Plimit (Int): %.2f \n"
1000027da:	b0 01	movb	$1, %al
1000027dc:	e8 71 db 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000027e1:	80 3d 44 ba 01 00 00	cmpb	$0, 113220(%rip)
1000027e8:	74 1a	je	0x100002804
1000027ea:	49 8b 7e 50	movq	80(%r14), %rdi
1000027ee:	f2 0f 10 05 0a ba 01 00	movsd	113162(%rip), %xmm0
1000027f6:	48 8d 35 1b e9 00 00	leaq	59675(%rip), %rsi ## literal pool for: "GPU2 Plimit (Ext1): %.2f \n"
1000027fd:	b0 01	movb	$1, %al
1000027ff:	e8 4e db 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002804:	80 3d 22 ba 01 00 00	cmpb	$0, 113186(%rip)
10000280b:	74 1a	je	0x100002827
10000280d:	49 8b 7e 50	movq	80(%r14), %rdi
100002811:	f2 0f 10 05 ef b9 01 00	movsd	113135(%rip), %xmm0
100002819:	48 8d 35 13 e9 00 00	leaq	59667(%rip), %rsi ## literal pool for: "GPU3 Plimit (Ext2): %.2f \n"
100002820:	b0 01	movb	$1, %al
100002822:	e8 2b db 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002827:	84 db	testb	%bl, %bl
100002829:	48 8d 0d 08 ba 01 00	leaq	113160(%rip), %rcx
100002830:	48 8d 05 a9 ba 01 00	leaq	113321(%rip), %rax
100002837:	48 89 c2	movq	%rax, %rdx
10000283a:	48 0f 44 d1	cmoveq	%rcx, %rdx
10000283e:	80 3d ef b9 01 00 00	cmpb	$0, 113135(%rip)
100002845:	74 2c	je	0x100002873
100002847:	80 ba 8c 00 00 00 00	cmpb	$0, 140(%rdx)
10000284e:	74 23	je	0x100002873
100002850:	84 db	testb	%bl, %bl
100002852:	49 8b 7e 50	movq	80(%r14), %rdi
100002856:	48 8b 15 b3 b9 01 00	movq	113075(%rip), %rdx
10000285d:	48 0f 44 c1	cmoveq	%rcx, %rax
100002861:	48 2b 50 68	subq	104(%rax), %rdx
100002865:	48 8d 35 e2 e8 00 00	leaq	59618(%rip), %rsi ## literal pool for: "Number of prochots: %llu\n"
10000286c:	31 c0	xorl	%eax, %eax
10000286e:	e8 df da 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100002873:	80 3d bb b9 01 00 00	cmpb	$0, 113083(%rip)
10000287a:	74 57	je	0x1000028d3
10000287c:	48 8b 05 95 b9 01 00	movq	113045(%rip), %rax
100002883:	84 c0	testb	%al, %al
100002885:	74 21	je	0x1000028a8
100002887:	49 8b 4e 50	movq	80(%r14), %rcx
10000288b:	48 8d 3d d6 e8 00 00	leaq	59606(%rip), %rdi ## literal pool for: "CPU asserting prochot\n"
100002892:	be 16 00 00 00	movl	$22, %esi
100002897:	ba 01 00 00 00	movl	$1, %edx
10000289c:	e8 c9 da 00 00	callq	0x10001036a ## symbol stub for: _fwrite
1000028a1:	48 8b 05 70 b9 01 00	movq	113008(%rip), %rax
1000028a8:	a9 00 ff 00 00	testl	$65280, %eax
1000028ad:	74 24	je	0x1000028d3
1000028af:	49 8b 4e 50	movq	80(%r14), %rcx
1000028b3:	48 8d 3d c5 e8 00 00	leaq	59589(%rip), %rdi ## literal pool for: "SMC asserting prochot\n"
1000028ba:	be 16 00 00 00	movl	$22, %esi
1000028bf:	ba 01 00 00 00	movl	$1, %edx
1000028c4:	48 83 c4 08	addq	$8, %rsp
1000028c8:	5b	popq	%rbx
1000028c9:	41 5e	popq	%r14
1000028cb:	41 5f	popq	%r15
1000028cd:	5d	popq	%rbp
1000028ce:	e9 97 da 00 00	jmp	0x10001036a ## symbol stub for: _fwrite
1000028d3:	48 83 c4 08	addq	$8, %rsp
1000028d7:	5b	popq	%rbx
1000028d8:	41 5e	popq	%r14
1000028da:	41 5f	popq	%r15
1000028dc:	5d	popq	%rbp
1000028dd:	c3	retq
1000028de:	55	pushq	%rbp
1000028df:	48 89 e5	movq	%rsp, %rbp
1000028e2:	41 56	pushq	%r14
1000028e4:	53	pushq	%rbx
1000028e5:	48 83 ec 10	subq	$16, %rsp
1000028e9:	48 8b 1d d8 b9 01 00	movq	113112(%rip), %rbx
1000028f0:	48 85 db	testq	%rbx, %rbx
1000028f3:	0f 84 2f 03 00 00	je	0x100002c28
1000028f9:	4c 8b 35 d0 b9 01 00	movq	113104(%rip), %r14
100002900:	4d 85 f6	testq	%r14, %r14
100002903:	0f 84 1f 03 00 00	je	0x100002c28
100002909:	48 8d 3d 28 b9 01 00	leaq	112936(%rip), %rdi
100002910:	48 8d 35 91 b8 01 00	leaq	112785(%rip), %rsi
100002917:	ba 90 00 00 00	movl	$144, %edx
10000291c:	e8 af da 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100002921:	66 0f ef c0	pxor	%xmm0, %xmm0
100002925:	f3 0f 7f 05 7b b8 01 00	movdqu	%xmm0, 112763(%rip)
10000292d:	f3 0f 7f 05 83 b8 01 00	movdqu	%xmm0, 112771(%rip)
100002935:	f3 0f 7f 05 8b b8 01 00	movdqu	%xmm0, 112779(%rip)
10000293d:	f3 0f 7f 05 93 b8 01 00	movdqu	%xmm0, 112787(%rip)
100002945:	f3 0f 7f 05 9b b8 01 00	movdqu	%xmm0, 112795(%rip)
10000294d:	f3 0f 7f 05 a3 b8 01 00	movdqu	%xmm0, 112803(%rip)
100002955:	f3 0f 7f 05 ab b8 01 00	movdqu	%xmm0, 112811(%rip)
10000295d:	f3 0f 7f 05 b3 b8 01 00	movdqu	%xmm0, 112819(%rip)
100002965:	f3 0f 7f 05 bb b8 01 00	movdqu	%xmm0, 112827(%rip)
10000296d:	48 81 c3 c0 00 00 00	addq	$192, %rbx
100002974:	48 8d 55 e0	leaq	-32(%rbp), %rdx
100002978:	4c 89 f7	movq	%r14, %rdi
10000297b:	48 89 de	movq	%rbx, %rsi
10000297e:	e8 ae 02 00 00	callq	0x100002c31
100002983:	84 c0	testb	%al, %al
100002985:	74 13	je	0x10000299a
100002987:	48 83 7d e0 02	cmpq	$2, -32(%rbp)
10000298c:	75 0c	jne	0x10000299a
10000298e:	c6 05 8b b8 01 00 00	movb	$0, 112779(%rip)
100002995:	e9 6a 02 00 00	jmp	0x100002c04
10000299a:	c6 05 7f b8 01 00 01	movb	$1, 112767(%rip)
1000029a1:	48 8d 15 00 b8 01 00	leaq	112640(%rip), %rdx
1000029a8:	48 8b 3d 21 b9 01 00	movq	112929(%rip), %rdi
1000029af:	48 8b 05 12 b9 01 00	movq	112914(%rip), %rax
1000029b6:	48 83 c0 50	addq	$80, %rax
1000029ba:	48 8d 35 bf b5 01 00	leaq	112063(%rip), %rsi
1000029c1:	80 3d 11 b9 01 00 00	cmpb	$0, 112913(%rip)
1000029c8:	48 0f 44 f0	cmoveq	%rax, %rsi
1000029cc:	e8 60 02 00 00	callq	0x100002c31
1000029d1:	88 05 4a b8 01 00	movb	%al, 112714(%rip)
1000029d7:	48 8b 3d f2 b8 01 00	movq	112882(%rip), %rdi
1000029de:	48 8b 35 e3 b8 01 00	movq	112867(%rip), %rsi
1000029e5:	48 83 c6 60	addq	$96, %rsi
1000029e9:	48 8d 15 c0 b7 01 00	leaq	112576(%rip), %rdx
1000029f0:	e8 3c 02 00 00	callq	0x100002c31
1000029f5:	88 05 27 b8 01 00	movb	%al, 112679(%rip)
1000029fb:	48 8b 3d ce b8 01 00	movq	112846(%rip), %rdi
100002a02:	48 8b 35 bf b8 01 00	movq	112831(%rip), %rsi
100002a09:	48 83 c6 70	addq	$112, %rsi
100002a0d:	48 8d 15 a4 b7 01 00	leaq	112548(%rip), %rdx
100002a14:	e8 18 02 00 00	callq	0x100002c31
100002a19:	88 05 04 b8 01 00	movb	%al, 112644(%rip)
100002a1f:	80 3d fb b7 01 00 00	cmpb	$0, 112635(%rip)
100002a26:	75 1a	jne	0x100002a42
100002a28:	80 3d f3 b7 01 00 00	cmpb	$0, 112627(%rip)
100002a2f:	75 11	jne	0x100002a42
100002a31:	84 c0	testb	%al, %al
100002a33:	75 0d	jne	0x100002a42
100002a35:	66 c7 05 e6 b7 01 00 00 00	movw	$0, 112614(%rip)
100002a3e:	31 c0	xorl	%eax, %eax
100002a40:	eb 68	jmp	0x100002aaa
100002a42:	8b 3d 48 b5 01 00	movl	111944(%rip), %edi
100002a48:	85 ff	testl	%edi, %edi
100002a4a:	79 1c	jns	0x100002a68
100002a4c:	48 8b 3d 35 96 01 00	movq	103989(%rip), %rdi
100002a53:	31 f6	xorl	%esi, %esi
100002a55:	31 c0	xorl	%eax, %eax
100002a57:	e8 9e d9 00 00	callq	0x1000103fa ## symbol stub for: _open
100002a5c:	89 c7	movl	%eax, %edi
100002a5e:	89 05 2c b5 01 00	movl	%eax, 111916(%rip)
100002a64:	85 c0	testl	%eax, %eax
100002a66:	78 14	js	0x100002a7c
100002a68:	48 8d 55 e8	leaq	-24(%rbp), %rdx
100002a6c:	be 19 58 04 c0	movl	$3221510169, %esi
100002a71:	31 c0	xorl	%eax, %eax
100002a73:	e8 1c d9 00 00	callq	0x100010394 ## symbol stub for: _ioctl
100002a78:	85 c0	testl	%eax, %eax
100002a7a:	79 0a	jns	0x100002a86
100002a7c:	e8 65 d8 00 00	callq	0x1000102e6 ## symbol stub for: ___error
100002a81:	83 38 00	cmpl	$0, (%rax)
100002a84:	75 af	jne	0x100002a35
100002a86:	66 c7 05 95 b7 01 00 01 01	movw	$257, 112533(%rip)
100002a8f:	66 0f 38 32 45 e8	pmovzxbq	-24(%rbp), %xmm0
100002a95:	f3 0f 7f 05 23 b7 01 00	movdqu	%xmm0, 112419(%rip)
100002a9d:	0f b6 45 ea	movzbl	-22(%rbp), %eax
100002aa1:	48 89 05 28 b7 01 00	movq	%rax, 112424(%rip)
100002aa8:	b0 01	movb	$1, %al
100002aaa:	88 05 76 b7 01 00	movb	%al, 112502(%rip)
100002ab0:	48 8b 3d 19 b8 01 00	movq	112665(%rip), %rdi
100002ab7:	48 8b 35 0a b8 01 00	movq	112650(%rip), %rsi
100002abe:	48 8d 15 13 b7 01 00	leaq	112403(%rip), %rdx
100002ac5:	e8 ae 03 00 00	callq	0x100002e78
100002aca:	88 05 57 b7 01 00	movb	%al, 112471(%rip)
100002ad0:	48 8b 3d f9 b7 01 00	movq	112633(%rip), %rdi
100002ad7:	be 90 00 00 00	movl	$144, %esi
100002adc:	48 03 35 e5 b7 01 00	addq	112613(%rip), %rsi
100002ae3:	48 8d 15 f6 b6 01 00	leaq	112374(%rip), %rdx
100002aea:	e8 89 03 00 00	callq	0x100002e78
100002aef:	88 05 33 b7 01 00	movb	%al, 112435(%rip)
100002af5:	48 8b 3d d4 b7 01 00	movq	112596(%rip), %rdi
100002afc:	be a8 00 00 00	movl	$168, %esi
100002b01:	48 03 35 c0 b7 01 00	addq	112576(%rip), %rsi
100002b08:	48 8d 15 d9 b6 01 00	leaq	112345(%rip), %rdx
100002b0f:	e8 64 03 00 00	callq	0x100002e78
100002b14:	88 05 0f b7 01 00	movb	%al, 112399(%rip)
100002b1a:	48 8b 3d af b7 01 00	movq	112559(%rip), %rdi
100002b21:	48 8b 35 a0 b7 01 00	movq	112544(%rip), %rsi
100002b28:	48 83 c6 10	addq	$16, %rsi
100002b2c:	48 8d 15 bd b6 01 00	leaq	112317(%rip), %rdx
100002b33:	e8 40 03 00 00	callq	0x100002e78
100002b38:	88 05 ec b6 01 00	movb	%al, 112364(%rip)
100002b3e:	48 8b 3d 8b b7 01 00	movq	112523(%rip), %rdi
100002b45:	48 8b 35 7c b7 01 00	movq	112508(%rip), %rsi
100002b4c:	48 83 c6 20	addq	$32, %rsi
100002b50:	48 8d 15 a1 b6 01 00	leaq	112289(%rip), %rdx
100002b57:	e8 1c 03 00 00	callq	0x100002e78
100002b5c:	88 05 c9 b6 01 00	movb	%al, 112329(%rip)
100002b62:	48 8b 3d 67 b7 01 00	movq	112487(%rip), %rdi
100002b69:	48 8b 35 58 b7 01 00	movq	112472(%rip), %rsi
100002b70:	48 83 c6 30	addq	$48, %rsi
100002b74:	48 8d 15 85 b6 01 00	leaq	112261(%rip), %rdx
100002b7b:	e8 f8 02 00 00	callq	0x100002e78
100002b80:	88 05 a6 b6 01 00	movb	%al, 112294(%rip)
100002b86:	48 8b 3d 43 b7 01 00	movq	112451(%rip), %rdi
100002b8d:	48 8b 35 34 b7 01 00	movq	112436(%rip), %rsi
100002b94:	48 83 c6 40	addq	$64, %rsi
100002b98:	48 8d 15 69 b6 01 00	leaq	112233(%rip), %rdx
100002b9f:	e8 d4 02 00 00	callq	0x100002e78
100002ba4:	88 05 83 b6 01 00	movb	%al, 112259(%rip)
100002baa:	48 8b 3d 1f b7 01 00	movq	112415(%rip), %rdi
100002bb1:	be d0 00 00 00	movl	$208, %esi
100002bb6:	48 03 35 0b b7 01 00	addq	112395(%rip), %rsi
100002bbd:	48 8d 15 4c b6 01 00	leaq	112204(%rip), %rdx
100002bc4:	e8 68 00 00 00	callq	0x100002c31
100002bc9:	88 05 65 b6 01 00	movb	%al, 112229(%rip)
100002bcf:	48 8b 3d fa b6 01 00	movq	112378(%rip), %rdi
100002bd6:	be e0 00 00 00	movl	$224, %esi
100002bdb:	48 03 35 e6 b6 01 00	addq	112358(%rip), %rsi
100002be2:	48 8d 15 2f b6 01 00	leaq	112175(%rip), %rdx
100002be9:	e8 43 00 00 00	callq	0x100002c31
100002bee:	88 05 41 b6 01 00	movb	%al, 112193(%rip)
100002bf4:	80 3d dd b6 01 00 01	cmpb	$1, 112349(%rip)
100002bfb:	75 07	jne	0x100002c04
100002bfd:	c6 05 d4 b6 01 00 00	movb	$0, 112340(%rip)
100002c04:	48 8d 05 8d b3 01 00	leaq	111501(%rip), %rax
100002c0b:	80 38 00	cmpb	$0, (%rax)
100002c0e:	74 18	je	0x100002c28
100002c10:	48 8d 3d c9 b6 01 00	leaq	112329(%rip), %rdi
100002c17:	48 8d 35 8a b5 01 00	leaq	112010(%rip), %rsi
100002c1e:	ba 90 00 00 00	movl	$144, %edx
100002c23:	e8 a8 d7 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100002c28:	48 83 c4 10	addq	$16, %rsp
100002c2c:	5b	popq	%rbx
100002c2d:	41 5e	popq	%r14
100002c2f:	5d	popq	%rbp
100002c30:	c3	retq
100002c31:	55	pushq	%rbp
100002c32:	48 89 e5	movq	%rsp, %rbp
100002c35:	41 57	pushq	%r15
100002c37:	41 56	pushq	%r14
100002c39:	53	pushq	%rbx
100002c3a:	50	pushq	%rax
100002c3b:	49 89 d6	movq	%rdx, %r14
100002c3e:	48 89 f3	movq	%rsi, %rbx
100002c41:	48 8b 05 20 56 01 00	movq	87584(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100002c48:	48 8b 00	movq	(%rax), %rax
100002c4b:	48 89 45 e0	movq	%rax, -32(%rbp)
100002c4f:	8b 4e 04	movl	4(%rsi), %ecx
100002c52:	48 89 c8	movq	%rcx, %rax
100002c55:	e8 86 03 00 00	callq	0x100002fe0
100002c5a:	48 83 c0 0f	addq	$15, %rax
100002c5e:	48 83 e0 f0	andq	$-16, %rax
100002c62:	48 29 c4	subq	%rax, %rsp
100002c65:	49 89 e7	movq	%rsp, %r15
100002c68:	83 3e 00	cmpl	$0, (%rsi)
100002c6b:	74 39	je	0x100002ca6
100002c6d:	48 89 de	movq	%rbx, %rsi
100002c70:	4c 89 fa	movq	%r15, %rdx
100002c73:	e8 67 00 00 00	callq	0x100002cdf
100002c78:	84 c0	testb	%al, %al
100002c7a:	74 2a	je	0x100002ca6
100002c7c:	49 c7 06 00 00 00 00	movq	$0, (%r14)
100002c83:	8b 4b 08	movl	8(%rbx), %ecx
100002c86:	b0 01	movb	$1, %al
100002c88:	81 f9 36 31 69 75	cmpl	$1969828150, %ecx
100002c8e:	74 1a	je	0x100002caa
100002c90:	81 f9 32 33 69 75	cmpl	$1969828658, %ecx
100002c96:	74 1f	je	0x100002cb7
100002c98:	81 f9 20 38 69 75	cmpl	$1969829920, %ecx
100002c9e:	75 1f	jne	0x100002cbf
100002ca0:	41 0f b6 0f	movzbl	(%r15), %ecx
100002ca4:	eb 16	jmp	0x100002cbc
100002ca6:	31 c0	xorl	%eax, %eax
100002ca8:	eb 15	jmp	0x100002cbf
100002caa:	41 0f b7 0f	movzwl	(%r15), %ecx
100002cae:	66 c1 c1 08	rolw	$8, %cx
100002cb2:	0f b7 c9	movzwl	%cx, %ecx
100002cb5:	eb 05	jmp	0x100002cbc
100002cb7:	41 8b 0f	movl	(%r15), %ecx
100002cba:	0f c9	bswapl	%ecx
100002cbc:	49 89 0e	movq	%rcx, (%r14)
100002cbf:	48 8b 0d a2 55 01 00	movq	87458(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100002cc6:	48 8b 09	movq	(%rcx), %rcx
100002cc9:	48 3b 4d e0	cmpq	-32(%rbp), %rcx
100002ccd:	75 0b	jne	0x100002cda
100002ccf:	48 8d 65 e8	leaq	-24(%rbp), %rsp
100002cd3:	5b	popq	%rbx
100002cd4:	41 5e	popq	%r14
100002cd6:	41 5f	popq	%r15
100002cd8:	5d	popq	%rbp
100002cd9:	c3	retq
100002cda:	e8 19 d6 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100002cdf:	55	pushq	%rbp
100002ce0:	48 89 e5	movq	%rsp, %rbp
100002ce3:	41 57	pushq	%r15
100002ce5:	41 56	pushq	%r14
100002ce7:	41 54	pushq	%r12
100002ce9:	53	pushq	%rbx
100002cea:	48 81 ec c0 00 00 00	subq	$192, %rsp
100002cf1:	49 89 cf	movq	%rcx, %r15
100002cf4:	49 89 d6	movq	%rdx, %r14
100002cf7:	48 89 f3	movq	%rsi, %rbx
100002cfa:	49 89 fc	movq	%rdi, %r12
100002cfd:	48 8b 05 64 55 01 00	movq	87396(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100002d04:	48 8b 00	movq	(%rax), %rax
100002d07:	48 89 45 d8	movq	%rax, -40(%rbp)
100002d0b:	48 c7 85 28 ff ff ff 50 00 00 00	movq	$80, -216(%rbp)
100002d16:	0f 57 c0	xorps	%xmm0, %xmm0
100002d19:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100002d1d:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100002d21:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100002d25:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100002d29:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100002d2d:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
100002d34:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
100002d3b:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
100002d42:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
100002d49:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
100002d50:	80 3d 81 b5 01 00 01	cmpb	$1, 112001(%rip)
100002d57:	75 70	jne	0x100002dc9
100002d59:	48 8d 55 80	leaq	-128(%rbp), %rdx
100002d5d:	c6 42 2a 09	movb	$9, 42(%rdx)
100002d61:	8b 03	movl	(%rbx), %eax
100002d63:	89 02	movl	%eax, (%rdx)
100002d65:	41 8b 7c 24 04	movl	4(%r12), %edi
100002d6a:	4c 8d 85 30 ff ff ff	leaq	-208(%rbp), %r8
100002d71:	4c 8d 8d 28 ff ff ff	leaq	-216(%rbp), %r9
100002d78:	b9 50 00 00 00	movl	$80, %ecx
100002d7d:	be 02 00 00 00	movl	$2, %esi
100002d82:	e8 3f d4 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
100002d87:	85 c0	testl	%eax, %eax
100002d89:	75 0d	jne	0x100002d98
100002d8b:	80 bd 58 ff ff ff 00	cmpb	$0, -168(%rbp)
100002d92:	75 04	jne	0x100002d98
100002d94:	c6 43 0c 01	movb	$1, 12(%rbx)
100002d98:	0f 57 c0	xorps	%xmm0, %xmm0
100002d9b:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
100002d9f:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
100002da3:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
100002da7:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
100002dab:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
100002daf:	48 8b 95 28 ff ff ff	movq	-216(%rbp), %rdx
100002db6:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
100002dbd:	b9 50 00 00 00	movl	$80, %ecx
100002dc2:	31 f6	xorl	%esi, %esi
100002dc4:	e8 29 d5 00 00	callq	0x1000102f2 ## symbol stub for: ___memset_chk
100002dc9:	80 7b 0c 00	cmpb	$0, 12(%rbx)
100002dcd:	74 55	je	0x100002e24
100002dcf:	48 8d 55 80	leaq	-128(%rbp), %rdx
100002dd3:	c6 42 2a 05	movb	$5, 42(%rdx)
100002dd7:	8b 03	movl	(%rbx), %eax
100002dd9:	89 02	movl	%eax, (%rdx)
100002ddb:	44 89 7a 1c	movl	%r15d, 28(%rdx)
100002ddf:	41 8b 7c 24 04	movl	4(%r12), %edi
100002de4:	4c 8d 85 30 ff ff ff	leaq	-208(%rbp), %r8
100002deb:	4c 8d 8d 28 ff ff ff	leaq	-216(%rbp), %r9
100002df2:	b9 50 00 00 00	movl	$80, %ecx
100002df7:	be 02 00 00 00	movl	$2, %esi
100002dfc:	e8 c5 d3 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
100002e01:	85 c0	testl	%eax, %eax
100002e03:	75 41	jne	0x100002e46
100002e05:	80 bd 58 ff ff ff 00	cmpb	$0, -168(%rbp)
100002e0c:	75 38	jne	0x100002e46
100002e0e:	48 8d b5 60 ff ff ff	leaq	-160(%rbp), %rsi
100002e15:	4c 89 f7	movq	%r14, %rdi
100002e18:	4c 89 fa	movq	%r15, %rdx
100002e1b:	e8 b0 d5 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100002e20:	b0 01	movb	$1, %al
100002e22:	eb 2f	jmp	0x100002e53
100002e24:	48 8b 05 45 54 01 00	movq	87109(%rip), %rax ## literal pool symbol address: ___stderrp
100002e2b:	48 8b 08	movq	(%rax), %rcx
100002e2e:	48 8d 3d e1 e1 00 00	leaq	57825(%rip), %rdi ## literal pool for: "Invalid key detected!\n"
100002e35:	be 16 00 00 00	movl	$22, %esi
100002e3a:	ba 01 00 00 00	movl	$1, %edx
100002e3f:	e8 26 d5 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100002e44:	eb 0b	jmp	0x100002e51
100002e46:	4c 89 f7	movq	%r14, %rdi
100002e49:	4c 89 fe	movq	%r15, %rsi
100002e4c:	e8 8f d4 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
100002e51:	31 c0	xorl	%eax, %eax
100002e53:	48 8b 0d 0e 54 01 00	movq	87054(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100002e5a:	48 8b 09	movq	(%rcx), %rcx
100002e5d:	48 3b 4d d8	cmpq	-40(%rbp), %rcx
100002e61:	75 10	jne	0x100002e73
100002e63:	48 81 c4 c0 00 00 00	addq	$192, %rsp
100002e6a:	5b	popq	%rbx
100002e6b:	41 5c	popq	%r12
100002e6d:	41 5e	popq	%r14
100002e6f:	41 5f	popq	%r15
100002e71:	5d	popq	%rbp
100002e72:	c3	retq
100002e73:	e8 80 d4 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100002e78:	55	pushq	%rbp
100002e79:	48 89 e5	movq	%rsp, %rbp
100002e7c:	41 57	pushq	%r15
100002e7e:	41 56	pushq	%r14
100002e80:	53	pushq	%rbx
100002e81:	50	pushq	%rax
100002e82:	49 89 d6	movq	%rdx, %r14
100002e85:	48 89 f3	movq	%rsi, %rbx
100002e88:	48 8b 05 d9 53 01 00	movq	87001(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100002e8f:	48 8b 00	movq	(%rax), %rax
100002e92:	48 89 45 e0	movq	%rax, -32(%rbp)
100002e96:	8b 4e 04	movl	4(%rsi), %ecx
100002e99:	48 89 c8	movq	%rcx, %rax
100002e9c:	e8 3f 01 00 00	callq	0x100002fe0
100002ea1:	48 83 c0 0f	addq	$15, %rax
100002ea5:	48 83 e0 f0	andq	$-16, %rax
100002ea9:	48 29 c4	subq	%rax, %rsp
100002eac:	49 89 e7	movq	%rsp, %r15
100002eaf:	83 3e 00	cmpl	$0, (%rsi)
100002eb2:	74 24	je	0x100002ed8
100002eb4:	48 89 de	movq	%rbx, %rsi
100002eb7:	4c 89 fa	movq	%r15, %rdx
100002eba:	e8 20 fe ff ff	callq	0x100002cdf
100002ebf:	84 c0	testb	%al, %al
100002ec1:	74 15	je	0x100002ed8
100002ec3:	8b 73 08	movl	8(%rbx), %esi
100002ec6:	81 fe 20 74 6c 66	cmpl	$1718383648, %esi
100002ecc:	75 11	jne	0x100002edf
100002ece:	f3 41 0f 5a 07	cvtss2sd	(%r15), %xmm0
100002ed3:	e9 d5 00 00 00	jmp	0x100002fad
100002ed8:	31 c0	xorl	%eax, %eax
100002eda:	e9 d5 00 00 00	jmp	0x100002fb4
100002edf:	41 0f b7 17	movzwl	(%r15), %edx
100002ee3:	66 c1 c2 08	rolw	$8, %dx
100002ee7:	40 0f b6 c6	movzbl	%sil, %eax
100002eeb:	8d 78 d0	leal	-48(%rax), %edi
100002eee:	8d 48 9f	leal	-97(%rax), %ecx
100002ef1:	04 a9	addb	$-87, %al
100002ef3:	31 db	xorl	%ebx, %ebx
100002ef5:	83 f9 17	cmpl	$23, %ecx
100002ef8:	0f b6 c8	movzbl	%al, %ecx
100002efb:	0f 43 cb	cmovael	%ebx, %ecx
100002efe:	83 ff 0a	cmpl	$10, %edi
100002f01:	0f 42 cf	cmovbl	%edi, %ecx
100002f04:	b8 01 00 00 00	movl	$1, %eax
100002f09:	d3 e0	shll	%cl, %eax
100002f0b:	f2 0f 2a c8	cvtsi2sd	%eax, %xmm1
100002f0f:	f2 0f 10 05 19 38 01 00	movsd	79897(%rip), %xmm0
100002f17:	f2 0f 5e c1	divsd	%xmm1, %xmm0
100002f1b:	b0 01	movb	$1, %al
100002f1d:	81 fe 37 37 70 73	cmpl	$1936734007, %esi
100002f23:	7f 1a	jg	0x100002f3f
100002f25:	81 fe 37 38 70 66	cmpl	$1718630455, %esi
100002f2b:	7f 2c	jg	0x100002f59
100002f2d:	81 fe 61 36 70 66	cmpl	$1718629985, %esi
100002f33:	74 34	je	0x100002f69
100002f35:	81 fe 39 37 70 66	cmpl	$1718630201, %esi
100002f3b:	74 2c	je	0x100002f69
100002f3d:	eb 75	jmp	0x100002fb4
100002f3f:	81 fe 35 39 70 73	cmpl	$1936734517, %esi
100002f45:	7f 32	jg	0x100002f79
100002f47:	81 fe 38 37 70 73	cmpl	$1936734008, %esi
100002f4d:	74 3a	je	0x100002f89
100002f4f:	81 fe 37 38 70 73	cmpl	$1936734263, %esi
100002f55:	74 32	je	0x100002f89
100002f57:	eb 5b	jmp	0x100002fb4
100002f59:	81 fe 38 38 70 66	cmpl	$1718630456, %esi
100002f5f:	74 08	je	0x100002f69
100002f61:	81 fe 32 65 70 66	cmpl	$1718641970, %esi
100002f67:	75 4b	jne	0x100002fb4
100002f69:	0f b7 c2	movzwl	%dx, %eax
100002f6c:	0f 57 c9	xorps	%xmm1, %xmm1
100002f6f:	f2 0f 2a c8	cvtsi2sd	%eax, %xmm1
100002f73:	f2 0f 59 c1	mulsd	%xmm1, %xmm0
100002f77:	eb 34	jmp	0x100002fad
100002f79:	81 fe 35 61 70 73	cmpl	$1936744757, %esi
100002f7f:	74 08	je	0x100002f89
100002f81:	81 fe 36 39 70 73	cmpl	$1936734518, %esi
100002f87:	75 2b	jne	0x100002fb4
100002f89:	89 d0	movl	%edx, %eax
100002f8b:	66 f7 d8	negw	%ax
100002f8e:	66 0f 48 c2	cmovsw	%dx, %ax
100002f92:	0f b7 c0	movzwl	%ax, %eax
100002f95:	0f 57 c9	xorps	%xmm1, %xmm1
100002f98:	f2 0f 2a c8	cvtsi2sd	%eax, %xmm1
100002f9c:	f2 0f 59 c1	mulsd	%xmm1, %xmm0
100002fa0:	66 85 d2	testw	%dx, %dx
100002fa3:	79 08	jns	0x100002fad
100002fa5:	66 0f 57 05 93 37 01 00	xorpd	79763(%rip), %xmm0
100002fad:	f2 41 0f 11 06	movsd	%xmm0, (%r14)
100002fb2:	b0 01	movb	$1, %al
100002fb4:	48 8b 0d ad 52 01 00	movq	86701(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100002fbb:	48 8b 09	movq	(%rcx), %rcx
100002fbe:	48 3b 4d e0	cmpq	-32(%rbp), %rcx
100002fc2:	75 0b	jne	0x100002fcf
100002fc4:	48 8d 65 e8	leaq	-24(%rbp), %rsp
100002fc8:	5b	popq	%rbx
100002fc9:	41 5e	popq	%r14
100002fcb:	41 5f	popq	%r15
100002fcd:	5d	popq	%rbp
100002fce:	c3	retq
100002fcf:	e8 24 d3 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100002fd4:	90	nop
100002fd5:	90	nop
100002fd6:	90	nop
100002fd7:	90	nop
100002fd8:	90	nop
100002fd9:	90	nop
100002fda:	90	nop
100002fdb:	90	nop
100002fdc:	90	nop
100002fdd:	90	nop
100002fde:	90	nop
100002fdf:	90	nop
100002fe0:	51	pushq	%rcx
100002fe1:	50	pushq	%rax
100002fe2:	48 8b 0d 47 52 01 00	movq	86599(%rip), %rcx ## literal pool symbol address: ____chkstk_darwin
100002fe9:	48 85 c9	testq	%rcx, %rcx
100002fec:	75 07	jne	0x100002ff5
100002fee:	48 8d 0d 0b 00 00 00	leaq	11(%rip), %rcx
100002ff5:	ff d1	callq	*%rcx
100002ff7:	58	popq	%rax
100002ff8:	59	popq	%rcx
100002ff9:	c3	retq
100002ffa:	66 0f 1f 44 00 00	nopw	(%rax,%rax)
100003000:	48 3d 00 10 00 00	cmpq	$4096, %rax
100003006:	48 8d 4c 24 18	leaq	24(%rsp), %rcx
10000300b:	72 17	jb	0x100003024
10000300d:	48 81 e9 00 10 00 00	subq	$4096, %rcx
100003014:	84 09	testb	%cl, (%rcx)
100003016:	48 2d 00 10 00 00	subq	$4096, %rax
10000301c:	48 3d 00 10 00 00	cmpq	$4096, %rax
100003022:	77 e9	ja	0x10000300d
100003024:	48 29 c1	subq	%rax, %rcx
100003027:	84 09	testb	%cl, (%rcx)
100003029:	c3	retq
10000302a:	55	pushq	%rbp
10000302b:	48 89 e5	movq	%rsp, %rbp
10000302e:	41 57	pushq	%r15
100003030:	41 56	pushq	%r14
100003032:	41 55	pushq	%r13
100003034:	41 54	pushq	%r12
100003036:	53	pushq	%rbx
100003037:	48 81 ec c8 01 00 00	subq	$456, %rsp
10000303e:	48 8b 05 23 52 01 00	movq	86563(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100003045:	48 8b 00	movq	(%rax), %rax
100003048:	48 89 45 d0	movq	%rax, -48(%rbp)
10000304c:	c7 85 4c fe ff ff 00 00 00 00	movl	$0, -436(%rbp)
100003056:	48 c7 85 38 fe ff ff 04 00 00 00	movq	$4, -456(%rbp)
100003061:	48 8b 05 08 53 01 00	movq	86792(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
100003068:	8b 18	movl	(%rax), %ebx
10000306a:	48 8d 3d ce e5 00 00	leaq	58830(%rip), %rdi ## literal pool for: "IOInterruptController"
100003071:	e8 46 d2 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
100003076:	48 8d 95 d0 fe ff ff	leaq	-304(%rbp), %rdx
10000307d:	89 df	movl	%ebx, %edi
10000307f:	48 89 c6	movq	%rax, %rsi
100003082:	e8 2f d2 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
100003087:	85 c0	testl	%eax, %eax
100003089:	74 2a	je	0x1000030b5
10000308b:	48 8b 0d de 51 01 00	movq	86494(%rip), %rcx ## literal pool symbol address: ___stderrp
100003092:	4c 8b 31	movq	(%rcx), %r14
100003095:	89 c7	movl	%eax, %edi
100003097:	e8 0a d3 00 00	callq	0x1000103a6 ## symbol stub for: _mach_error_string
10000309c:	48 8d 35 dc e5 00 00	leaq	58844(%rip), %rsi ## literal pool for: "failed to get IOInterruptController service: %s\n"
1000030a3:	4c 89 f7	movq	%r14, %rdi
1000030a6:	48 89 c2	movq	%rax, %rdx
1000030a9:	31 c0	xorl	%eax, %eax
1000030ab:	e8 a2 d2 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000030b0:	e9 3a 02 00 00	jmp	0x1000032ef
1000030b5:	89 9d 30 fe ff ff	movl	%ebx, -464(%rbp)
1000030bb:	8b bd d0 fe ff ff	movl	-304(%rbp), %edi
1000030c1:	e8 12 d1 00 00	callq	0x1000101d8 ## symbol stub for: _IOIteratorReset
1000030c6:	8b bd d0 fe ff ff	movl	-304(%rbp), %edi
1000030cc:	e8 01 d1 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
1000030d1:	85 c0	testl	%eax, %eax
1000030d3:	0f 84 05 02 00 00	je	0x1000032de
1000030d9:	41 89 c4	movl	%eax, %r12d
1000030dc:	48 8b 05 7d 52 01 00	movq	86653(%rip), %rax ## literal pool symbol address: _kCFAllocatorDefault
1000030e3:	4c 8b 28	movq	(%rax), %r13
1000030e6:	4c 8d 35 48 e5 00 00	leaq	58696(%rip), %r14 ## literal pool for: "IOService"
1000030ed:	4c 89 ad 40 fe ff ff	movq	%r13, -448(%rbp)
1000030f4:	44 89 e7	movl	%r12d, %edi
1000030f7:	4c 89 f6	movq	%r14, %rsi
1000030fa:	48 8d 95 50 fe ff ff	leaq	-432(%rbp), %rdx
100003101:	e8 20 d1 00 00	callq	0x100010226 ## symbol stub for: _IORegistryEntryGetParentEntry
100003106:	85 c0	testl	%eax, %eax
100003108:	74 2a	je	0x100003134
10000310a:	48 8b 0d 5f 51 01 00	movq	86367(%rip), %rcx ## literal pool symbol address: ___stderrp
100003111:	48 8b 19	movq	(%rcx), %rbx
100003114:	89 c7	movl	%eax, %edi
100003116:	e8 8b d2 00 00	callq	0x1000103a6 ## symbol stub for: _mach_error_string
10000311b:	48 89 df	movq	%rbx, %rdi
10000311e:	48 8d 35 30 e5 00 00	leaq	58672(%rip), %rsi ## literal pool for: "IORegistryEntryGetParentEntry failed: %s\n"
100003125:	48 89 c2	movq	%rax, %rdx
100003128:	31 c0	xorl	%eax, %eax
10000312a:	e8 23 d2 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000312f:	e9 8c 01 00 00	jmp	0x1000032c0
100003134:	83 3d 35 b2 01 00 10	cmpl	$16, 111157(%rip)
10000313b:	7c 11	jl	0x10000314e
10000313d:	48 8d 3d dc e7 00 00	leaq	59356(%rip), %rdi ## literal pool for: "*** too many interrupt controllers ***"
100003144:	e8 17 d3 00 00	callq	0x100010460 ## symbol stub for: _puts
100003149:	e9 72 01 00 00	jmp	0x1000032c0
10000314e:	44 8b bd 50 fe ff ff	movl	-432(%rbp), %r15d
100003155:	44 89 ff	movl	%r15d, %edi
100003158:	48 8d 35 51 66 01 00	leaq	91729(%rip), %rsi ## Objc cfstring ref: @"Base Vector Number"
10000315f:	4c 89 ea	movq	%r13, %rdx
100003162:	31 c9	xorl	%ecx, %ecx
100003164:	e8 99 d0 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
100003169:	49 89 c6	movq	%rax, %r14
10000316c:	48 85 c0	testq	%rax, %rax
10000316f:	75 17	jne	0x100003188
100003171:	44 89 e7	movl	%r12d, %edi
100003174:	48 8d 35 35 66 01 00	leaq	91701(%rip), %rsi ## Objc cfstring ref: @"Base Vector Number"
10000317b:	4c 89 ea	movq	%r13, %rdx
10000317e:	31 c9	xorl	%ecx, %ecx
100003180:	e8 7d d0 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
100003185:	49 89 c6	movq	%rax, %r14
100003188:	44 89 ff	movl	%r15d, %edi
10000318b:	48 8d 35 3e 66 01 00	leaq	91710(%rip), %rsi ## Objc cfstring ref: @"InterruptControllerName"
100003192:	4c 89 ea	movq	%r13, %rdx
100003195:	31 c9	xorl	%ecx, %ecx
100003197:	e8 66 d0 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000319c:	49 89 c7	movq	%rax, %r15
10000319f:	48 85 c0	testq	%rax, %rax
1000031a2:	75 20	jne	0x1000031c4
1000031a4:	44 89 e7	movl	%r12d, %edi
1000031a7:	48 8d 35 22 66 01 00	leaq	91682(%rip), %rsi ## Objc cfstring ref: @"InterruptControllerName"
1000031ae:	4c 89 ea	movq	%r13, %rdx
1000031b1:	31 c9	xorl	%ecx, %ecx
1000031b3:	e8 4a d0 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
1000031b8:	49 89 c7	movq	%rax, %r15
1000031bb:	48 85 c0	testq	%rax, %rax
1000031be:	0f 84 d7 00 00 00	je	0x10000329b
1000031c4:	4c 89 ff	movq	%r15, %rdi
1000031c7:	e8 b2 cf 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
1000031cc:	49 89 c5	movq	%rax, %r13
1000031cf:	e8 da cf 00 00	callq	0x1000101ae ## symbol stub for: _CFStringGetTypeID
1000031d4:	49 39 c5	cmpq	%rax, %r13
1000031d7:	75 7f	jne	0x100003258
1000031d9:	c7 85 50 ff ff ff 00 00 00 00	movl	$0, -176(%rbp)
1000031e3:	48 63 05 86 b1 01 00	movslq	110982(%rip), %rax
1000031ea:	48 89 c1	movq	%rax, %rcx
1000031ed:	48 c1 e1 07	shlq	$7, %rcx
1000031f1:	48 8d 34 81	leaq	(%rcx,%rax,4), %rsi
1000031f5:	48 8d 05 54 91 03 00	leaq	233812(%rip), %rax
1000031fc:	48 01 c6	addq	%rax, %rsi
1000031ff:	ba 80 00 00 00	movl	$128, %edx
100003204:	4c 89 ff	movq	%r15, %rdi
100003207:	b9 00 01 00 08	movl	$134217984, %ecx
10000320c:	e8 8b cf 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
100003211:	84 c0	testb	%al, %al
100003213:	0f 84 33 05 00 00	je	0x10000374c
100003219:	31 db	xorl	%ebx, %ebx
10000321b:	4d 85 f6	testq	%r14, %r14
10000321e:	74 43	je	0x100003263
100003220:	4c 89 f7	movq	%r14, %rdi
100003223:	e8 56 cf 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
100003228:	49 89 c5	movq	%rax, %r13
10000322b:	e8 54 cf 00 00	callq	0x100010184 ## symbol stub for: _CFNumberGetTypeID
100003230:	49 39 c5	cmpq	%rax, %r13
100003233:	4c 8b ad 40 fe ff ff	movq	-448(%rbp), %r13
10000323a:	75 2e	jne	0x10000326a
10000323c:	be 09 00 00 00	movl	$9, %esi
100003241:	4c 89 f7	movq	%r14, %rdi
100003244:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
10000324b:	e8 3a cf 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
100003250:	8b 9d 50 ff ff ff	movl	-176(%rbp), %ebx
100003256:	eb 12	jmp	0x10000326a
100003258:	31 db	xorl	%ebx, %ebx
10000325a:	4c 8b ad 40 fe ff ff	movq	-448(%rbp), %r13
100003261:	eb 3d	jmp	0x1000032a0
100003263:	4c 8b ad 40 fe ff ff	movq	-448(%rbp), %r13
10000326a:	48 63 05 ff b0 01 00	movslq	110847(%rip), %rax
100003271:	48 89 c1	movq	%rax, %rcx
100003274:	48 c1 e1 07	shlq	$7, %rcx
100003278:	48 8d 0c 81	leaq	(%rcx,%rax,4), %rcx
10000327c:	48 8d 15 cd 90 03 00	leaq	233677(%rip), %rdx
100003283:	c6 44 0a 7f 00	movb	$0, 127(%rdx,%rcx)
100003288:	89 9c 0a 80 00 00 00	movl	%ebx, 128(%rdx,%rcx)
10000328f:	ff c0	incl	%eax
100003291:	89 05 d9 b0 01 00	movl	%eax, 110809(%rip)
100003297:	31 db	xorl	%ebx, %ebx
100003299:	eb 05	jmp	0x1000032a0
10000329b:	b3 01	movb	$1, %bl
10000329d:	45 31 ff	xorl	%r15d, %r15d
1000032a0:	4d 85 f6	testq	%r14, %r14
1000032a3:	74 08	je	0x1000032ad
1000032a5:	4c 89 f7	movq	%r14, %rdi
1000032a8:	e8 e3 ce 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000032ad:	84 db	testb	%bl, %bl
1000032af:	4c 8d 35 7f e3 00 00	leaq	58239(%rip), %r14 ## literal pool for: "IOService"
1000032b6:	75 08	jne	0x1000032c0
1000032b8:	4c 89 ff	movq	%r15, %rdi
1000032bb:	e8 d0 ce 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000032c0:	44 89 e7	movl	%r12d, %edi
1000032c3:	e8 1c cf 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000032c8:	8b bd d0 fe ff ff	movl	-304(%rbp), %edi
1000032ce:	e8 ff ce 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
1000032d3:	41 89 c4	movl	%eax, %r12d
1000032d6:	85 c0	testl	%eax, %eax
1000032d8:	0f 85 16 fe ff ff	jne	0x1000030f4
1000032de:	8b bd d0 fe ff ff	movl	-304(%rbp), %edi
1000032e4:	e8 fb ce 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000032e9:	8b 9d 30 fe ff ff	movl	-464(%rbp), %ebx
1000032ef:	48 8d 35 3f e3 00 00	leaq	58175(%rip), %rsi ## literal pool for: "IOService"
1000032f6:	48 8d 8d 48 fe ff ff	leaq	-440(%rbp), %rcx
1000032fd:	89 df	movl	%ebx, %edi
1000032ff:	ba 01 00 00 00	movl	$1, %edx
100003304:	e8 ed ce 00 00	callq	0x1000101f6 ## symbol stub for: _IORegistryCreateIterator
100003309:	85 c0	testl	%eax, %eax
10000330b:	0f 85 0d 03 00 00	jne	0x10000361e
100003311:	8b bd 48 fe ff ff	movl	-440(%rbp), %edi
100003317:	e8 bc ce 00 00	callq	0x1000101d8 ## symbol stub for: _IOIteratorReset
10000331c:	8b bd 48 fe ff ff	movl	-440(%rbp), %edi
100003322:	e8 ab ce 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
100003327:	85 c0	testl	%eax, %eax
100003329:	0f 84 e4 02 00 00	je	0x100003613
10000332f:	41 89 c6	movl	%eax, %r14d
100003332:	48 8b 05 27 50 01 00	movq	86055(%rip), %rax ## literal pool symbol address: _kCFAllocatorDefault
100003339:	48 8b 00	movq	(%rax), %rax
10000333c:	48 89 85 30 fe ff ff	movq	%rax, -464(%rbp)
100003343:	44 89 f7	movl	%r14d, %edi
100003346:	48 8d b5 d0 fe ff ff	leaq	-304(%rbp), %rsi
10000334d:	e8 c8 ce 00 00	callq	0x10001021a ## symbol stub for: _IORegistryEntryGetName
100003352:	c6 85 50 fe ff ff 00	movb	$0, -432(%rbp)
100003359:	44 89 f7	movl	%r14d, %edi
10000335c:	48 8d 35 d2 e2 00 00	leaq	58066(%rip), %rsi ## literal pool for: "IOService"
100003363:	48 8d 95 50 fe ff ff	leaq	-432(%rbp), %rdx
10000336a:	e8 a5 ce 00 00	callq	0x100010214 ## symbol stub for: _IORegistryEntryGetLocationInPlane
10000336f:	44 89 f7	movl	%r14d, %edi
100003372:	48 8d 35 77 64 01 00	leaq	91255(%rip), %rsi ## Objc cfstring ref: @"IOInterruptSpecifiers"
100003379:	48 8b 9d 30 fe ff ff	movq	-464(%rbp), %rbx
100003380:	48 89 da	movq	%rbx, %rdx
100003383:	31 c9	xorl	%ecx, %ecx
100003385:	e8 78 ce 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000338a:	49 89 c4	movq	%rax, %r12
10000338d:	44 89 f7	movl	%r14d, %edi
100003390:	48 8d 35 79 64 01 00	leaq	91257(%rip), %rsi ## Objc cfstring ref: @"IOInterruptControllers"
100003397:	48 89 da	movq	%rbx, %rdx
10000339a:	31 c9	xorl	%ecx, %ecx
10000339c:	e8 61 ce 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
1000033a1:	49 89 c7	movq	%rax, %r15
1000033a4:	44 89 f7	movl	%r14d, %edi
1000033a7:	48 8d 35 82 64 01 00	leaq	91266(%rip), %rsi ## Objc cfstring ref: @"IOPCIMSIMode"
1000033ae:	48 89 da	movq	%rbx, %rdx
1000033b1:	31 c9	xorl	%ecx, %ecx
1000033b3:	e8 4a ce 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
1000033b8:	48 85 c0	testq	%rax, %rax
1000033bb:	74 08	je	0x1000033c5
1000033bd:	48 89 c7	movq	%rax, %rdi
1000033c0:	e8 cb cd 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000033c5:	4d 85 e4	testq	%r12, %r12
1000033c8:	0f 84 1a 02 00 00	je	0x1000035e8
1000033ce:	4c 89 e7	movq	%r12, %rdi
1000033d1:	e8 a8 cd 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
1000033d6:	4c 89 a5 40 fe ff ff	movq	%r12, -448(%rbp)
1000033dd:	49 89 c4	movq	%rax, %r12
1000033e0:	e8 69 cd 00 00	callq	0x10001014e ## symbol stub for: _CFArrayGetTypeID
1000033e5:	49 39 c4	cmpq	%rax, %r12
1000033e8:	48 8b 9d 40 fe ff ff	movq	-448(%rbp), %rbx
1000033ef:	0f 85 eb 01 00 00	jne	0x1000035e0
1000033f5:	4d 85 ff	testq	%r15, %r15
1000033f8:	0f 84 e2 01 00 00	je	0x1000035e0
1000033fe:	4c 89 ff	movq	%r15, %rdi
100003401:	e8 78 cd 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
100003406:	49 89 c4	movq	%rax, %r12
100003409:	e8 40 cd 00 00	callq	0x10001014e ## symbol stub for: _CFArrayGetTypeID
10000340e:	49 39 c4	cmpq	%rax, %r12
100003411:	48 8b 9d 40 fe ff ff	movq	-448(%rbp), %rbx
100003418:	0f 85 c2 01 00 00	jne	0x1000035e0
10000341e:	48 89 df	movq	%rbx, %rdi
100003421:	e8 22 cd 00 00	callq	0x100010148 ## symbol stub for: _CFArrayGetCount
100003426:	49 89 c4	movq	%rax, %r12
100003429:	4c 89 ff	movq	%r15, %rdi
10000342c:	e8 17 cd 00 00	callq	0x100010148 ## symbol stub for: _CFArrayGetCount
100003431:	49 39 c4	cmpq	%rax, %r12
100003434:	48 8b 9d 40 fe ff ff	movq	-448(%rbp), %rbx
10000343b:	0f 85 9f 01 00 00	jne	0x1000035e0
100003441:	48 89 df	movq	%rbx, %rdi
100003444:	e8 ff cc 00 00	callq	0x100010148 ## symbol stub for: _CFArrayGetCount
100003449:	48 85 c0	testq	%rax, %rax
10000344c:	0f 8e 8e 01 00 00	jle	0x1000035e0
100003452:	48 89 df	movq	%rbx, %rdi
100003455:	e8 ee cc 00 00	callq	0x100010148 ## symbol stub for: _CFArrayGetCount
10000345a:	48 85 c0	testq	%rax, %rax
10000345d:	0f 8e 7d 01 00 00	jle	0x1000035e0
100003463:	45 31 ed	xorl	%r13d, %r13d
100003466:	44 89 b5 2c fe ff ff	movl	%r14d, -468(%rbp)
10000346d:	4c 89 bd 18 fe ff ff	movq	%r15, -488(%rbp)
100003474:	48 89 df	movq	%rbx, %rdi
100003477:	4c 89 ee	movq	%r13, %rsi
10000347a:	e8 d5 cc 00 00	callq	0x100010154 ## symbol stub for: _CFArrayGetValueAtIndex
10000347f:	4c 89 ff	movq	%r15, %rdi
100003482:	49 89 c7	movq	%rax, %r15
100003485:	4c 89 ee	movq	%r13, %rsi
100003488:	e8 c7 cc 00 00	callq	0x100010154 ## symbol stub for: _CFArrayGetValueAtIndex
10000348d:	4d 85 ff	testq	%r15, %r15
100003490:	0f 84 28 01 00 00	je	0x1000035be
100003496:	49 89 c4	movq	%rax, %r12
100003499:	4c 89 ff	movq	%r15, %rdi
10000349c:	e8 dd cc 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
1000034a1:	48 89 c3	movq	%rax, %rbx
1000034a4:	e8 c3 cc 00 00	callq	0x10001016c ## symbol stub for: _CFDataGetTypeID
1000034a9:	48 39 c3	cmpq	%rax, %rbx
1000034ac:	0f 85 0c 01 00 00	jne	0x1000035be
1000034b2:	4d 85 e4	testq	%r12, %r12
1000034b5:	0f 84 03 01 00 00	je	0x1000035be
1000034bb:	4c 89 e7	movq	%r12, %rdi
1000034be:	e8 bb cc 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
1000034c3:	48 89 c3	movq	%rax, %rbx
1000034c6:	e8 e3 cc 00 00	callq	0x1000101ae ## symbol stub for: _CFStringGetTypeID
1000034cb:	48 39 c3	cmpq	%rax, %rbx
1000034ce:	0f 85 ea 00 00 00	jne	0x1000035be
1000034d4:	4c 89 ff	movq	%r15, %rdi
1000034d7:	e8 8a cc 00 00	callq	0x100010166 ## symbol stub for: _CFDataGetLength
1000034dc:	48 83 f8 04	cmpq	$4, %rax
1000034e0:	0f 8c d8 00 00 00	jl	0x1000035be
1000034e6:	ba 80 00 00 00	movl	$128, %edx
1000034eb:	4c 89 e7	movq	%r12, %rdi
1000034ee:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
1000034f5:	b9 00 01 00 08	movl	$134217984, %ecx
1000034fa:	e8 9d cc 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
1000034ff:	84 c0	testb	%al, %al
100003501:	0f 84 4a 02 00 00	je	0x100003751
100003507:	8b 05 63 ae 01 00	movl	110179(%rip), %eax
10000350d:	85 c0	testl	%eax, %eax
10000350f:	0f 8e a9 00 00 00	jle	0x1000035be
100003515:	4c 89 bd 20 fe ff ff	movq	%r15, -480(%rbp)
10000351c:	41 bc ff ff ff ff	movl	$4294967295, %r12d
100003522:	48 8d 1d 27 8e 03 00	leaq	232999(%rip), %rbx
100003529:	45 31 ff	xorl	%r15d, %r15d
10000352c:	48 89 df	movq	%rbx, %rdi
10000352f:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
100003536:	49 89 c6	movq	%rax, %r14
100003539:	e8 76 cf 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
10000353e:	85 c0	testl	%eax, %eax
100003540:	4c 89 f0	movq	%r14, %rax
100003543:	45 0f 44 e7	cmovel	%r15d, %r12d
100003547:	49 ff c7	incq	%r15
10000354a:	48 81 c3 84 00 00 00	addq	$132, %rbx
100003551:	4d 39 fe	cmpq	%r15, %r14
100003554:	75 d6	jne	0x10000352c
100003556:	45 85 e4	testl	%r12d, %r12d
100003559:	44 8b b5 2c fe ff ff	movl	-468(%rbp), %r14d
100003560:	48 8b bd 20 fe ff ff	movq	-480(%rbp), %rdi
100003567:	78 55	js	0x1000035be
100003569:	e8 ec cb 00 00	callq	0x10001015a ## symbol stub for: _CFDataGetBytePtr
10000356e:	44 89 e1	movl	%r12d, %ecx
100003571:	48 89 ca	movq	%rcx, %rdx
100003574:	48 c1 e2 07	shlq	$7, %rdx
100003578:	48 8d 0c 8a	leaq	(%rdx,%rcx,4), %rcx
10000357c:	48 8d 15 cd 8d 03 00	leaq	232909(%rip), %rdx
100003583:	8b 8c 0a 80 00 00 00	movl	128(%rdx,%rcx), %ecx
10000358a:	03 08	addl	(%rax), %ecx
10000358c:	48 c1 e1 09	shlq	$9, %rcx
100003590:	48 8d 05 f9 95 03 00	leaq	235001(%rip), %rax
100003597:	48 8d 1c 08	leaq	(%rax,%rcx), %rbx
10000359b:	80 3c 01 00	cmpb	$0, (%rcx,%rax)
10000359f:	74 0e	je	0x1000035af
1000035a1:	48 89 df	movq	%rbx, %rdi
1000035a4:	e8 23 cf 00 00	callq	0x1000104cc ## symbol stub for: _strlen
1000035a9:	66 c7 04 18 2f 00	movw	$47, (%rax,%rbx)
1000035af:	48 89 df	movq	%rbx, %rdi
1000035b2:	48 8d b5 d0 fe ff ff	leaq	-304(%rbp), %rsi
1000035b9:	e8 ea ce 00 00	callq	0x1000104a8 ## symbol stub for: _strcat
1000035be:	49 ff c5	incq	%r13
1000035c1:	48 8b 9d 40 fe ff ff	movq	-448(%rbp), %rbx
1000035c8:	48 89 df	movq	%rbx, %rdi
1000035cb:	e8 78 cb 00 00	callq	0x100010148 ## symbol stub for: _CFArrayGetCount
1000035d0:	4c 39 e8	cmpq	%r13, %rax
1000035d3:	4c 8b bd 18 fe ff ff	movq	-488(%rbp), %r15
1000035da:	0f 8f 94 fe ff ff	jg	0x100003474
1000035e0:	48 89 df	movq	%rbx, %rdi
1000035e3:	e8 a8 cb 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000035e8:	4d 85 ff	testq	%r15, %r15
1000035eb:	74 08	je	0x1000035f5
1000035ed:	4c 89 ff	movq	%r15, %rdi
1000035f0:	e8 9b cb 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000035f5:	44 89 f7	movl	%r14d, %edi
1000035f8:	e8 e7 cb 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000035fd:	8b bd 48 fe ff ff	movl	-440(%rbp), %edi
100003603:	e8 ca cb 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
100003608:	41 89 c6	movl	%eax, %r14d
10000360b:	85 c0	testl	%eax, %eax
10000360d:	0f 85 30 fd ff ff	jne	0x100003343
100003613:	8b bd 48 fe ff ff	movl	-440(%rbp), %edi
100003619:	e8 c6 cb 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000361e:	48 8d 05 6b 95 05 00	leaq	365931(%rip), %rax
100003625:	48 89 05 74 9b 08 00	movq	%rax, 564084(%rip)
10000362c:	48 8d 05 61 97 06 00	leaq	431969(%rip), %rax
100003633:	48 89 05 6e 9b 08 00	movq	%rax, 564078(%rip)
10000363a:	c7 05 74 9b 08 00 7f 00 00 00	movl	$127, 564084(%rip)
100003644:	c7 05 72 9b 08 00 85 00 00 00	movl	$133, 564082(%rip)
10000364e:	b8 ff 00 00 00	movl	$255, %eax
100003653:	89 05 63 9b 08 00	movl	%eax, 564067(%rip)
100003659:	89 05 65 9b 08 00	movl	%eax, 564069(%rip)
10000365f:	c7 05 5f 9b 08 00 20 00 00 00	movl	$32, 564063(%rip)
100003669:	48 8d 3d 55 df 00 00	leaq	57173(%rip), %rdi ## literal pool for: "machdep.vectors.IPI"
100003670:	48 8d b5 4c fe ff ff	leaq	-436(%rbp), %rsi
100003677:	48 8d 95 38 fe ff ff	leaq	-456(%rbp), %rdx
10000367e:	31 c9	xorl	%ecx, %ecx
100003680:	45 31 c0	xorl	%r8d, %r8d
100003683:	e8 68 ce 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
100003688:	85 c0	testl	%eax, %eax
10000368a:	74 09	je	0x100003695
10000368c:	48 8d 05 fd 4e 05 00	leaq	347901(%rip), %rax
100003693:	eb 22	jmp	0x1000036b7
100003695:	48 83 bd 38 fe ff ff 04	cmpq	$4, -456(%rbp)
10000369d:	0f 85 b3 00 00 00	jne	0x100003756
1000036a3:	8b 8d 4c fe ff ff	movl	-436(%rbp), %ecx
1000036a9:	48 c1 e1 09	shlq	$9, %rcx
1000036ad:	48 8d 05 dc 94 03 00	leaq	234716(%rip), %rax
1000036b4:	48 01 c8	addq	%rcx, %rax
1000036b7:	c7 00 49 50 49 00	movl	$4804681, (%rax)
1000036bd:	48 8d 3d 55 df 00 00	leaq	57173(%rip), %rdi ## literal pool for: "machdep.vectors.timer"
1000036c4:	48 8d b5 4c fe ff ff	leaq	-436(%rbp), %rsi
1000036cb:	48 8d 95 38 fe ff ff	leaq	-456(%rbp), %rdx
1000036d2:	31 c9	xorl	%ecx, %ecx
1000036d4:	45 31 c0	xorl	%r8d, %r8d
1000036d7:	e8 14 ce 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
1000036dc:	85 c0	testl	%eax, %eax
1000036de:	74 09	je	0x1000036e9
1000036e0:	48 8d 05 a9 50 05 00	leaq	348329(%rip), %rax
1000036e7:	eb 1e	jmp	0x100003707
1000036e9:	48 83 bd 38 fe ff ff 04	cmpq	$4, -456(%rbp)
1000036f1:	75 68	jne	0x10000375b
1000036f3:	8b 8d 4c fe ff ff	movl	-436(%rbp), %ecx
1000036f9:	48 c1 e1 09	shlq	$9, %rcx
1000036fd:	48 8d 05 8c 94 03 00	leaq	234636(%rip), %rax
100003704:	48 01 c8	addq	%rcx, %rax
100003707:	c7 00 54 4d 52 00	movl	$5393748, (%rax)
10000370d:	66 c7 05 7e 4c 05 00 4d 00	movw	$77, 347262(%rip)
100003716:	c7 05 70 4c 05 00 54 48 45 52	movl	$1380272212, 347248(%rip)
100003720:	c7 05 66 52 05 00 50 4d 49 00	movl	$4803920, 348774(%rip)
10000372a:	48 8b 05 37 4b 01 00	movq	84791(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100003731:	48 8b 00	movq	(%rax), %rax
100003734:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100003738:	75 26	jne	0x100003760
10000373a:	48 81 c4 c8 01 00 00	addq	$456, %rsp
100003741:	5b	popq	%rbx
100003742:	41 5c	popq	%r12
100003744:	41 5d	popq	%r13
100003746:	41 5e	popq	%r14
100003748:	41 5f	popq	%r15
10000374a:	5d	popq	%rbp
10000374b:	c3	retq
10000374c:	e8 28 c3 00 00	callq	0x10000fa79
100003751:	e8 00 c3 00 00	callq	0x10000fa56
100003756:	e8 d8 c2 00 00	callq	0x10000fa33
10000375b:	e8 b0 c2 00 00	callq	0x10000fa10
100003760:	e8 93 cb 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100003765:	55	pushq	%rbp
100003766:	48 89 e5	movq	%rsp, %rbp
100003769:	41 57	pushq	%r15
10000376b:	41 56	pushq	%r14
10000376d:	41 55	pushq	%r13
10000376f:	41 54	pushq	%r12
100003771:	53	pushq	%rbx
100003772:	48 81 ec 38 02 00 00	subq	$568, %rsp
100003779:	48 8b 05 e8 4a 01 00	movq	84712(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100003780:	48 8b 00	movq	(%rax), %rax
100003783:	48 89 45 d0	movq	%rax, -48(%rbp)
100003787:	48 8b 05 12 9a 08 00	movq	563730(%rip), %rax
10000378e:	44 8b 30	movl	(%rax), %r14d
100003791:	48 8d 15 00 a8 01 00	leaq	108544(%rip), %rdx
100003798:	80 3a 00	cmpb	$0, (%rdx)
10000379b:	74 34	je	0x1000037d1
10000379d:	e8 fe cb 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
1000037a2:	48 8d 15 ef a7 01 00	leaq	108527(%rip), %rdx
1000037a9:	66 48 0f 6e c8	movq	%rax, %xmm1
1000037ae:	66 0f 62 0d 4a 2f 01 00	punpckldq	77642(%rip), %xmm1
1000037b6:	66 0f 5c 0d 52 2f 01 00	subpd	77650(%rip), %xmm1
1000037be:	66 0f 7c c9	haddpd	%xmm1, %xmm1
1000037c2:	f2 0f 59 4a 08	mulsd	8(%rdx), %xmm1
1000037c7:	f2 0f 5e 0d 51 2f 01 00	divsd	77649(%rip), %xmm1
1000037cf:	eb 12	jmp	0x1000037e3
1000037d1:	80 7a 02 00	cmpb	$0, 2(%rdx)
1000037d5:	74 07	je	0x1000037de
1000037d7:	f2 0f 10 4a 28	movsd	40(%rdx), %xmm1
1000037dc:	eb 05	jmp	0x1000037e3
1000037de:	f2 0f 10 4a 20	movsd	32(%rdx), %xmm1
1000037e3:	66 0f 57 c0	xorpd	%xmm0, %xmm0
1000037e7:	66 0f 2e c8	ucomisd	%xmm0, %xmm1
1000037eb:	0f 86 e2 02 00 00	jbe	0x100003ad3
1000037f1:	48 8d 05 f8 a7 01 00	leaq	108536(%rip), %rax
1000037f8:	8b 40 28	movl	40(%rax), %eax
1000037fb:	83 f8 01	cmpl	$1, %eax
1000037fe:	66 0f 29 8d c0 fd ff ff	movapd	%xmm1, -576(%rbp)
100003806:	74 2d	je	0x100003835
100003808:	85 c0	testl	%eax, %eax
10000380a:	75 48	jne	0x100003854
10000380c:	48 8b 7a 50	movq	80(%rdx), %rdi
100003810:	80 3a 00	cmpb	$0, (%rdx)
100003813:	48 8d 05 6c dd 00 00	leaq	56684(%rip), %rax ## literal pool for: ""
10000381a:	48 8d 15 7d df 00 00	leaq	57213(%rip), %rdx ## literal pool for: "Session"
100003821:	48 0f 44 d0	cmoveq	%rax, %rdx
100003825:	48 8d 35 4b df 00 00	leaq	57163(%rip), %rsi ## literal pool for: "\n**** %s Interrupt distribution ****\n\n"
10000382c:	31 c0	xorl	%eax, %eax
10000382e:	e8 1f cb 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100003833:	eb 10	jmp	0x100003845
100003835:	48 8b 72 50	movq	80(%rdx), %rsi
100003839:	48 8d 3d 66 df 00 00	leaq	57190(%rip), %rdi ## literal pool for: "<key>interrupts</key>\n<array>\n"
100003840:	e8 19 cb 00 00	callq	0x10001035e ## symbol stub for: _fputs
100003845:	66 0f 28 8d c0 fd ff ff	movapd	-576(%rbp), %xmm1
10000384d:	48 8d 15 44 a7 01 00	leaq	108356(%rip), %rdx
100003854:	4d 85 f6	testq	%r14, %r14
100003857:	0f 84 28 02 00 00	je	0x100003a85
10000385d:	48 8d 3d 34 97 07 00	leaq	497460(%rip), %rdi
100003864:	45 31 ed	xorl	%r13d, %r13d
100003867:	31 db	xorl	%ebx, %ebx
100003869:	31 f6	xorl	%esi, %esi
10000386b:	4c 89 b5 a8 fd ff ff	movq	%r14, -600(%rbp)
100003872:	44 8b 25 4f 99 08 00	movl	563535(%rip), %r12d
100003879:	49 81 fc ff 00 00 00	cmpq	$255, %r12
100003880:	0f 87 ec 01 00 00	ja	0x100003a72
100003886:	48 89 9d b0 fd ff ff	movq	%rbx, -592(%rbp)
10000388d:	4d 89 e6	movq	%r12, %r14
100003890:	49 c1 e6 09	shlq	$9, %r14
100003894:	48 8d 05 f5 92 03 00	leaq	234229(%rip), %rax
10000389b:	49 01 c6	addq	%rax, %r14
10000389e:	31 db	xorl	%ebx, %ebx
1000038a0:	48 8b 05 f9 98 08 00	movq	563449(%rip), %rax
1000038a7:	4c 01 e8	addq	%r13, %rax
1000038aa:	80 7a 02 00	cmpb	$0, 2(%rdx)
1000038ae:	48 89 f9	movq	%rdi, %rcx
1000038b1:	75 07	jne	0x1000038ba
1000038b3:	48 8b 0d ee 98 08 00	movq	563438(%rip), %rcx
1000038ba:	46 8b 7c a0 0c	movl	12(%rax,%r12,4), %r15d
1000038bf:	4c 01 e9	addq	%r13, %rcx
1000038c2:	46 2b 7c a1 0c	subl	12(%rcx,%r12,4), %r15d
1000038c7:	8b 05 eb 98 08 00	movl	563435(%rip), %eax
1000038cd:	49 39 c4	cmpq	%rax, %r12
1000038d0:	72 0f	jb	0x1000038e1
1000038d2:	8b 05 e8 98 08 00	movl	563432(%rip), %eax
1000038d8:	49 39 c4	cmpq	%rax, %r12
1000038db:	0f 86 33 01 00 00	jbe	0x100003a14
1000038e1:	8b 05 d5 98 08 00	movl	563413(%rip), %eax
1000038e7:	49 39 c4	cmpq	%rax, %r12
1000038ea:	72 0f	jb	0x1000038fb
1000038ec:	8b 05 d2 98 08 00	movl	563410(%rip), %eax
1000038f2:	49 39 c4	cmpq	%rax, %r12
1000038f5:	0f 86 19 01 00 00	jbe	0x100003a14
1000038fb:	45 85 ff	testl	%r15d, %r15d
1000038fe:	0f 84 10 01 00 00	je	0x100003a14
100003904:	40 f6 c6 01	testb	$1, %sil
100003908:	75 4f	jne	0x100003959
10000390a:	48 8d 05 df a6 01 00	leaq	108255(%rip), %rax
100003911:	8b 40 28	movl	40(%rax), %eax
100003914:	48 8d 35 aa de 00 00	leaq	57002(%rip), %rsi ## literal pool for: "CPU %u:\n"
10000391b:	85 c0	testl	%eax, %eax
10000391d:	74 0f	je	0x10000392e
10000391f:	40 b6 01	movb	$1, %sil
100003922:	83 f8 01	cmpl	$1, %eax
100003925:	75 3c	jne	0x100003963
100003927:	48 8d 35 a0 de 00 00	leaq	56992(%rip), %rsi ## literal pool for: "<dict>\n<key>cpu</key><integer>%u</integer>\n<key>vectors</key>\n<array>\n"
10000392e:	48 8b 7a 50	movq	80(%rdx), %rdi
100003932:	48 8b 95 b0 fd ff ff	movq	-592(%rbp), %rdx
100003939:	31 c0	xorl	%eax, %eax
10000393b:	e8 12 ca 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100003940:	48 8d 3d 51 96 07 00	leaq	497233(%rip), %rdi
100003947:	66 0f 28 8d c0 fd ff ff	movapd	-576(%rbp), %xmm1
10000394f:	48 8d 15 42 a6 01 00	leaq	108098(%rip), %rdx
100003956:	40 b6 01	movb	$1, %sil
100003959:	48 8d 05 90 a6 01 00	leaq	108176(%rip), %rax
100003960:	8b 40 28	movl	40(%rax), %eax
100003963:	83 f8 01	cmpl	$1, %eax
100003966:	74 3b	je	0x1000039a3
100003968:	85 c0	testl	%eax, %eax
10000396a:	0f 85 a2 00 00 00	jne	0x100003a12
100003970:	48 8b 7a 50	movq	80(%rdx), %rdi
100003974:	44 89 f8	movl	%r15d, %eax
100003977:	0f 57 c0	xorps	%xmm0, %xmm0
10000397a:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
10000397f:	f2 0f 5e c1	divsd	%xmm1, %xmm0
100003983:	41 89 df	movl	%ebx, %r15d
100003986:	89 f3	movl	%esi, %ebx
100003988:	48 8d 35 86 de 00 00	leaq	56966(%rip), %rsi ## literal pool for: "\tVector 0x%x(%s): %.2f interrupts/sec\n"
10000398f:	44 89 e2	movl	%r12d, %edx
100003992:	4c 89 f1	movq	%r14, %rcx
100003995:	b0 01	movb	$1, %al
100003997:	e8 b6 c9 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000399c:	89 de	movl	%ebx, %esi
10000399e:	44 89 fb	movl	%r15d, %ebx
1000039a1:	eb 59	jmp	0x1000039fc
1000039a3:	ba 00 02 00 00	movl	$512, %edx
1000039a8:	4c 89 f7	movq	%r14, %rdi
1000039ab:	89 9d bc fd ff ff	movl	%ebx, -580(%rbp)
1000039b1:	89 f3	movl	%esi, %ebx
1000039b3:	48 8d b5 d0 fd ff ff	leaq	-560(%rbp), %rsi
1000039ba:	e8 37 84 00 00	callq	0x10000bdf6
1000039bf:	48 8d 0d d2 a5 01 00	leaq	107986(%rip), %rcx
1000039c6:	48 8b 79 50	movq	80(%rcx), %rdi
1000039ca:	44 89 f9	movl	%r15d, %ecx
1000039cd:	0f 57 c0	xorps	%xmm0, %xmm0
1000039d0:	f2 48 0f 2a c1	cvtsi2sd	%rcx, %xmm0
1000039d5:	f2 0f 5e 85 c0 fd ff ff	divsd	-576(%rbp), %xmm0
1000039dd:	48 8d 35 58 de 00 00	leaq	56920(%rip), %rsi ## literal pool for: "<dict>\n<key>name</key><string>%s</string>\n<key>vector</key><integer>%u</integer>\n<key>events</key><integer>%u</integer>\n<key>events_per_s</key><real>%g</real>\n</dict>\n"
1000039e4:	48 89 c2	movq	%rax, %rdx
1000039e7:	44 89 e1	movl	%r12d, %ecx
1000039ea:	45 89 f8	movl	%r15d, %r8d
1000039ed:	b0 01	movb	$1, %al
1000039ef:	e8 5e c9 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000039f4:	89 de	movl	%ebx, %esi
1000039f6:	8b 9d bc fd ff ff	movl	-580(%rbp), %ebx
1000039fc:	48 8d 3d 95 95 07 00	leaq	497045(%rip), %rdi
100003a03:	66 0f 28 8d c0 fd ff ff	movapd	-576(%rbp), %xmm1
100003a0b:	48 8d 15 86 a5 01 00	leaq	107910(%rip), %rdx
100003a12:	ff c3	incl	%ebx
100003a14:	49 ff c4	incq	%r12
100003a17:	49 81 c6 00 02 00 00	addq	$512, %r14
100003a1e:	41 81 fc 00 01 00 00	cmpl	$256, %r12d
100003a25:	0f 85 75 fe ff ff	jne	0x1000038a0
100003a2b:	85 db	testl	%ebx, %ebx
100003a2d:	4c 8b b5 a8 fd ff ff	movq	-600(%rbp), %r14
100003a34:	48 8b 9d b0 fd ff ff	movq	-592(%rbp), %rbx
100003a3b:	74 35	je	0x100003a72
100003a3d:	48 8d 05 ac a5 01 00	leaq	107948(%rip), %rax
100003a44:	83 78 28 01	cmpl	$1, 40(%rax)
100003a48:	75 26	jne	0x100003a70
100003a4a:	48 8b 72 50	movq	80(%rdx), %rsi
100003a4e:	48 8d 3d 8f de 00 00	leaq	56975(%rip), %rdi ## literal pool for: "</array>\n</dict>\n"
100003a55:	e8 04 c9 00 00	callq	0x10001035e ## symbol stub for: _fputs
100003a5a:	48 8d 3d 37 95 07 00	leaq	496951(%rip), %rdi
100003a61:	66 0f 28 8d c0 fd ff ff	movapd	-576(%rbp), %xmm1
100003a69:	48 8d 15 28 a5 01 00	leaq	107816(%rip), %rdx
100003a70:	31 f6	xorl	%esi, %esi
100003a72:	48 ff c3	incq	%rbx
100003a75:	49 81 c5 08 04 00 00	addq	$1032, %r13
100003a7c:	4c 39 f3	cmpq	%r14, %rbx
100003a7f:	0f 85 ed fd ff ff	jne	0x100003872
100003a85:	48 8d 05 64 a5 01 00	leaq	107876(%rip), %rax
100003a8c:	8b 40 28	movl	40(%rax), %eax
100003a8f:	85 c0	testl	%eax, %eax
100003a91:	74 0e	je	0x100003aa1
100003a93:	83 f8 01	cmpl	$1, %eax
100003a96:	75 19	jne	0x100003ab1
100003a98:	48 8d 3d 5a de 00 00	leaq	56922(%rip), %rdi ## literal pool for: "</array>\n"
100003a9f:	eb 07	jmp	0x100003aa8
100003aa1:	48 8d 3d 4e de 00 00	leaq	56910(%rip), %rdi ## literal pool for: "\n\n"
100003aa8:	48 8b 72 50	movq	80(%rdx), %rsi
100003aac:	e8 ad c8 00 00	callq	0x10001035e ## symbol stub for: _fputs
100003ab1:	48 8b 05 b0 47 01 00	movq	83888(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100003ab8:	48 8b 00	movq	(%rax), %rax
100003abb:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100003abf:	75 17	jne	0x100003ad8
100003ac1:	48 81 c4 38 02 00 00	addq	$568, %rsp
100003ac8:	5b	popq	%rbx
100003ac9:	41 5c	popq	%r12
100003acb:	41 5d	popq	%r13
100003acd:	41 5e	popq	%r14
100003acf:	41 5f	popq	%r15
100003ad1:	5d	popq	%rbp
100003ad2:	c3	retq
100003ad3:	e8 c2 bf 00 00	callq	0x10000fa9a
100003ad8:	e8 1b c8 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100003add:	55	pushq	%rbp
100003ade:	48 89 e5	movq	%rsp, %rbp
100003ae1:	48 8b 05 b8 96 08 00	movq	562872(%rip), %rax
100003ae8:	48 89 05 c1 96 08 00	movq	%rax, 562881(%rip)
100003aef:	48 8b 35 b2 96 08 00	movq	562866(%rip), %rsi
100003af6:	48 89 35 a3 96 08 00	movq	%rsi, 562851(%rip)
100003afd:	48 89 05 a4 96 08 00	movq	%rax, 562852(%rip)
100003b04:	b8 00 00 00 04	movl	$67108864, %eax
100003b09:	bf 19 00 00 00	movl	$25, %edi
100003b0e:	0f 05	syscall
100003b10:	85 c0	testl	%eax, %eax
100003b12:	74 25	je	0x100003b39
100003b14:	48 8d 05 7d a4 01 00	leaq	107645(%rip), %rax
100003b1b:	80 38 00	cmpb	$0, (%rax)
100003b1e:	74 3a	je	0x100003b5a
100003b20:	48 8b 35 79 96 08 00	movq	562809(%rip), %rsi
100003b27:	48 8d 3d 6a 94 07 00	leaq	496746(%rip), %rdi
100003b2e:	ba 04 02 01 00	movl	$66052, %edx
100003b33:	5d	popq	%rbp
100003b34:	e9 97 c8 00 00	jmp	0x1000103d0 ## symbol stub for: _memcpy
100003b39:	48 8b 05 30 47 01 00	movq	83760(%rip), %rax ## literal pool symbol address: ___stderrp
100003b40:	48 8b 08	movq	(%rax), %rcx
100003b43:	48 8d 3d b9 dd 00 00	leaq	56761(%rip), %rdi ## literal pool for: "dgRuptStat diag call failed\n"
100003b4a:	be 1c 00 00 00	movl	$28, %esi
100003b4f:	ba 01 00 00 00	movl	$1, %edx
100003b54:	5d	popq	%rbp
100003b55:	e9 10 c8 00 00	jmp	0x10001036a ## symbol stub for: _fwrite
100003b5a:	5d	popq	%rbp
100003b5b:	c3	retq
100003b5c:	90	nop
100003b5d:	90	nop
100003b5e:	90	nop
100003b5f:	90	nop
100003b60:	55	pushq	%rbp
100003b61:	48 89 e5	movq	%rsp, %rbp
100003b64:	41 57	pushq	%r15
100003b66:	41 56	pushq	%r14
100003b68:	41 55	pushq	%r13
100003b6a:	41 54	pushq	%r12
100003b6c:	53	pushq	%rbx
100003b6d:	48 81 ec a8 00 00 00	subq	$168, %rsp
100003b74:	49 89 f5	movq	%rsi, %r13
100003b77:	89 7d b8	movl	%edi, -72(%rbp)
100003b7a:	48 8b 05 e7 46 01 00	movq	83687(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100003b81:	48 8b 00	movq	(%rax), %rax
100003b84:	48 89 45 d0	movq	%rax, -48(%rbp)
100003b88:	c7 45 9c ff ff ff ff	movl	$4294967295, -100(%rbp)
100003b8f:	48 8b 05 e2 46 01 00	movq	83682(%rip), %rax ## literal pool symbol address: ___stdoutp
100003b96:	48 8b 00	movq	(%rax), %rax
100003b99:	48 89 05 48 a4 01 00	movq	%rax, 107592(%rip)
100003ba0:	48 8d 7d a8	leaq	-88(%rbp), %rdi
100003ba4:	e8 93 c8 00 00	callq	0x10001043c ## symbol stub for: _posix_spawnattr_init
100003ba9:	89 c3	movl	%eax, %ebx
100003bab:	e8 36 c7 00 00	callq	0x1000102e6 ## symbol stub for: ___error
100003bb0:	89 18	movl	%ebx, (%rax)
100003bb2:	85 db	testl	%ebx, %ebx
100003bb4:	0f 85 49 0f 00 00	jne	0x100004b03
100003bba:	48 8d 7d a8	leaq	-88(%rbp), %rdi
100003bbe:	be 40 00 00 00	movl	$64, %esi
100003bc3:	e8 80 c8 00 00	callq	0x100010448 ## symbol stub for: _posix_spawnattr_setflags
100003bc8:	89 c3	movl	%eax, %ebx
100003bca:	e8 17 c7 00 00	callq	0x1000102e6 ## symbol stub for: ___error
100003bcf:	89 18	movl	%ebx, (%rax)
100003bd1:	85 db	testl	%ebx, %ebx
100003bd3:	0f 85 2f 0f 00 00	jne	0x100004b08
100003bd9:	48 8d b5 70 ff ff ff	leaq	-144(%rbp), %rsi
100003be0:	c7 06 00 00 00 00	movl	$0, (%rsi)
100003be6:	48 8d 55 c0	leaq	-64(%rbp), %rdx
100003bea:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
100003bf1:	48 8d 3d b3 e1 00 00	leaq	57779(%rip), %rdi ## literal pool for: "sysctl.proc_translated"
100003bf8:	31 c9	xorl	%ecx, %ecx
100003bfa:	45 31 c0	xorl	%r8d, %r8d
100003bfd:	e8 ee c8 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
100003c02:	83 f8 ff	cmpl	$-1, %eax
100003c05:	8b 5d b8	movl	-72(%rbp), %ebx
100003c08:	74 47	je	0x100003c51
100003c0a:	83 bd 70 ff ff ff 01	cmpl	$1, -144(%rbp)
100003c11:	0f 94 05 68 a7 01 00	sete	108392(%rip)
100003c18:	75 43	jne	0x100003c5d
100003c1a:	48 8d 55 9c	leaq	-100(%rbp), %rdx
100003c1e:	c7 02 0c 00 00 01	movl	$16777228, (%rdx)
100003c24:	48 8d 7d a8	leaq	-88(%rbp), %rdi
100003c28:	48 8d 8d 48 ff ff ff	leaq	-184(%rbp), %rcx
100003c2f:	be 01 00 00 00	movl	$1, %esi
100003c34:	e8 09 c8 00 00	callq	0x100010442 ## symbol stub for: _posix_spawnattr_setbinpref_np
100003c39:	83 f8 ff	cmpl	$-1, %eax
100003c3c:	0f 84 02 0f 00 00	je	0x100004b44
100003c42:	48 83 bd 48 ff ff ff 01	cmpq	$1, -184(%rbp)
100003c4a:	74 11	je	0x100003c5d
100003c4c:	e8 bf bf 00 00	callq	0x10000fc10
100003c51:	e8 90 c6 00 00	callq	0x1000102e6 ## symbol stub for: ___error
100003c56:	c6 05 23 a7 01 00 00	movb	$0, 108323(%rip)
100003c5d:	e8 fe 0f 00 00	callq	0x100004c60
100003c62:	84 c0	testb	%al, %al
100003c64:	74 09	je	0x100003c6f
100003c66:	e8 3d 10 00 00	callq	0x100004ca8
100003c6b:	84 c0	testb	%al, %al
100003c6d:	74 1c	je	0x100003c8b
100003c6f:	e8 ec 0f 00 00	callq	0x100004c60
100003c74:	84 c0	testb	%al, %al
100003c76:	74 52	je	0x100003cca
100003c78:	e8 2b 10 00 00	callq	0x100004ca8
100003c7d:	8a 0d fd a6 01 00	movb	108285(%rip), %cl
100003c83:	84 c0	testb	%al, %al
100003c85:	74 49	je	0x100003cd0
100003c87:	84 c9	testb	%cl, %cl
100003c89:	74 45	je	0x100003cd0
100003c8b:	e8 44 c6 00 00	callq	0x1000102d4 ## symbol stub for: __NSGetEnviron
100003c90:	4c 8b 08	movq	(%rax), %r9
100003c93:	48 8d 35 5c dd 00 00	leaq	56668(%rip), %rsi ## literal pool for: "/usr/appleinternal/bin/powermetrics_internal"
100003c9a:	48 8d 4d a8	leaq	-88(%rbp), %rcx
100003c9e:	31 ff	xorl	%edi, %edi
100003ca0:	31 d2	xorl	%edx, %edx
100003ca2:	4d 89 e8	movq	%r13, %r8
100003ca5:	e8 8c c7 00 00	callq	0x100010436 ## symbol stub for: _posix_spawn
100003caa:	48 8b 05 bf 45 01 00	movq	83391(%rip), %rax ## literal pool symbol address: ___stderrp
100003cb1:	48 8b 08	movq	(%rax), %rcx
100003cb4:	48 8d 3d 68 dd 00 00	leaq	56680(%rip), %rdi ## literal pool for: "Failed to launch /usr/appleinternal/bin/powermetrics_internal\n"
100003cbb:	be 3e 00 00 00	movl	$62, %esi
100003cc0:	ba 01 00 00 00	movl	$1, %edx
100003cc5:	e8 a0 c6 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100003cca:	8a 0d b0 a6 01 00	movb	108208(%rip), %cl
100003cd0:	84 c9	testb	%cl, %cl
100003cd2:	74 3f	je	0x100003d13
100003cd4:	e8 fb c5 00 00	callq	0x1000102d4 ## symbol stub for: __NSGetEnviron
100003cd9:	4c 8b 08	movq	(%rax), %r9
100003cdc:	48 8d 35 7f dd 00 00	leaq	56703(%rip), %rsi ## literal pool for: "/usr/bin/powermetrics"
100003ce3:	48 8d 4d a8	leaq	-88(%rbp), %rcx
100003ce7:	31 ff	xorl	%edi, %edi
100003ce9:	31 d2	xorl	%edx, %edx
100003ceb:	4d 89 e8	movq	%r13, %r8
100003cee:	e8 43 c7 00 00	callq	0x100010436 ## symbol stub for: _posix_spawn
100003cf3:	48 8b 05 76 45 01 00	movq	83318(%rip), %rax ## literal pool symbol address: ___stderrp
100003cfa:	48 8b 08	movq	(%rax), %rcx
100003cfd:	48 8d 3d 74 dd 00 00	leaq	56692(%rip), %rdi ## literal pool for: "Failed to launch /usr/bin/powermetrics\n"
100003d04:	be 27 00 00 00	movl	$39, %esi
100003d09:	ba 01 00 00 00	movl	$1, %edx
100003d0e:	e8 57 c6 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100003d13:	31 c9	xorl	%ecx, %ecx
100003d15:	4c 89 ad 68 ff ff ff	movq	%r13, -152(%rbp)
100003d1c:	41 89 cf	movl	%ecx, %r15d
100003d1f:	89 df	movl	%ebx, %edi
100003d21:	4c 89 ee	movq	%r13, %rsi
100003d24:	48 8d 15 95 3c 01 00	leaq	81045(%rip), %rdx
100003d2b:	48 8d 0d 7e 4d 01 00	leaq	85374(%rip), %rcx
100003d32:	45 31 c0	xorl	%r8d, %r8d
100003d35:	e8 3c c6 00 00	callq	0x100010376 ## symbol stub for: _getopt_long
100003d3a:	3d 44 01 00 00	cmpl	$324, %eax
100003d3f:	7e 2b	jle	0x100003d6c
100003d41:	8d 88 bb fe ff ff	leal	-325(%rax), %ecx
100003d47:	83 f9 24	cmpl	$36, %ecx
100003d4a:	0f 87 99 00 00 00	ja	0x100003de9
100003d50:	48 8d 15 59 0e 00 00	leaq	3673(%rip), %rdx
100003d57:	48 63 04 8a	movslq	(%rdx,%rcx,4), %rax
100003d5b:	48 01 d0	addq	%rdx, %rax
100003d5e:	ff e0	jmpq	*%rax
100003d60:	c6 05 ce a2 01 00 01	movb	$1, 107214(%rip)
100003d67:	44 89 f9	movl	%r15d, %ecx
100003d6a:	eb b0	jmp	0x100003d1c
100003d6c:	83 f8 54	cmpl	$84, %eax
100003d6f:	7e 53	jle	0x100003dc4
100003d71:	8d 48 9f	leal	-97(%rax), %ecx
100003d74:	83 f9 17	cmpl	$23, %ecx
100003d77:	0f 87 a9 00 00 00	ja	0x100003e26
100003d7d:	48 8d 15 cc 0d 00 00	leaq	3532(%rip), %rdx
100003d84:	48 63 04 8a	movslq	(%rdx,%rcx,4), %rax
100003d88:	48 01 d0	addq	%rdx, %rax
100003d8b:	ff e0	jmpq	*%rax
100003d8d:	48 8b 05 7c 46 01 00	movq	83580(%rip), %rax ## literal pool symbol address: _optarg
100003d94:	48 8b 38	movq	(%rax), %rdi
100003d97:	48 8d 35 72 a2 01 00	leaq	107122(%rip), %rsi
100003d9e:	e8 f7 7f 00 00	callq	0x10000bd9a
100003da3:	44 89 f9	movl	%r15d, %ecx
100003da6:	84 c0	testb	%al, %al
100003da8:	0f 85 6e ff ff ff	jne	0x100003d1c
100003dae:	48 83 3d 5a a2 01 00 00	cmpq	$0, 107098(%rip)
100003db6:	44 89 f9	movl	%r15d, %ecx
100003db9:	0f 89 5d ff ff ff	jns	0x100003d1c
100003dbf:	e9 21 0d 00 00	jmp	0x100004ae5
100003dc4:	83 f8 42	cmpl	$66, %eax
100003dc7:	7e 4d	jle	0x100003e16
100003dc9:	83 f8 43	cmpl	$67, %eax
100003dcc:	74 7c	je	0x100003e4a
100003dce:	83 f8 4f	cmpl	$79, %eax
100003dd1:	0f 85 a2 0c 00 00	jne	0x100004a79
100003dd7:	c7 05 3b a2 01 00 02 00 00 00	movl	$2, 107067(%rip)
100003de1:	44 89 f9	movl	%r15d, %ecx
100003de4:	e9 33 ff ff ff	jmp	0x100003d1c
100003de9:	05 8f fe ff ff	addl	$4294966927, %eax
100003dee:	83 f8 06	cmpl	$6, %eax
100003df1:	0f 87 82 0c 00 00	ja	0x100004a79
100003df7:	48 8d 0d 46 0e 00 00	leaq	3654(%rip), %rcx
100003dfe:	48 63 04 81	movslq	(%rcx,%rax,4), %rax
100003e02:	48 01 c8	addq	%rcx, %rax
100003e05:	ff e0	jmpq	*%rax
100003e07:	c6 05 1b a2 01 00 01	movb	$1, 107035(%rip)
100003e0e:	44 89 f9	movl	%r15d, %ecx
100003e11:	e9 06 ff ff ff	jmp	0x100003d1c
100003e16:	b1 01	movb	$1, %cl
100003e18:	83 f8 41	cmpl	$65, %eax
100003e1b:	0f 84 fb fe ff ff	je	0x100003d1c
100003e21:	e9 ea 05 00 00	jmp	0x100004410
100003e26:	83 f8 55	cmpl	$85, %eax
100003e29:	0f 84 f7 04 00 00	je	0x100004326
100003e2f:	83 f8 57	cmpl	$87, %eax
100003e32:	0f 85 41 0c 00 00	jne	0x100004a79
100003e38:	c7 05 da a1 01 00 01 00 00 00	movl	$1, 106970(%rip)
100003e42:	44 89 f9	movl	%r15d, %ecx
100003e45:	e9 d2 fe ff ff	jmp	0x100003d1c
100003e4a:	c7 05 c8 a1 01 00 00 00 00 00	movl	$0, 106952(%rip)
100003e54:	44 89 f9	movl	%r15d, %ecx
100003e57:	e9 c0 fe ff ff	jmp	0x100003d1c
100003e5c:	c6 05 d0 a1 01 00 01	movb	$1, 106960(%rip)
100003e63:	44 89 f9	movl	%r15d, %ecx
100003e66:	e9 b1 fe ff ff	jmp	0x100003d1c
100003e6b:	c6 05 c8 a1 01 00 01	movb	$1, 106952(%rip)
100003e72:	44 89 f9	movl	%r15d, %ecx
100003e75:	e9 a2 fe ff ff	jmp	0x100003d1c
100003e7a:	c6 05 b0 a1 01 00 01	movb	$1, 106928(%rip)
100003e81:	44 89 f9	movl	%r15d, %ecx
100003e84:	e9 93 fe ff ff	jmp	0x100003d1c
100003e89:	c6 05 a2 a1 01 00 01	movb	$1, 106914(%rip)
100003e90:	44 89 f9	movl	%r15d, %ecx
100003e93:	e9 84 fe ff ff	jmp	0x100003d1c
100003e98:	c6 05 90 a1 01 00 01	movb	$1, 106896(%rip)
100003e9f:	44 89 f9	movl	%r15d, %ecx
100003ea2:	e9 75 fe ff ff	jmp	0x100003d1c
100003ea7:	c6 05 86 a1 01 00 01	movb	$1, 106886(%rip)
100003eae:	44 89 f9	movl	%r15d, %ecx
100003eb1:	e9 66 fe ff ff	jmp	0x100003d1c
100003eb6:	c6 05 6d a1 01 00 01	movb	$1, 106861(%rip)
100003ebd:	44 89 f9	movl	%r15d, %ecx
100003ec0:	e9 57 fe ff ff	jmp	0x100003d1c
100003ec5:	c6 05 6a a1 01 00 01	movb	$1, 106858(%rip)
100003ecc:	44 89 f9	movl	%r15d, %ecx
100003ecf:	e9 48 fe ff ff	jmp	0x100003d1c
100003ed4:	c6 05 5e a1 01 00 01	movb	$1, 106846(%rip)
100003edb:	44 89 f9	movl	%r15d, %ecx
100003ede:	e9 39 fe ff ff	jmp	0x100003d1c
100003ee3:	c6 05 4d a1 01 00 01	movb	$1, 106829(%rip)
100003eea:	44 89 f9	movl	%r15d, %ecx
100003eed:	e9 2a fe ff ff	jmp	0x100003d1c
100003ef2:	c6 05 37 a1 01 00 01	movb	$1, 106807(%rip)
100003ef9:	44 89 f9	movl	%r15d, %ecx
100003efc:	e9 1b fe ff ff	jmp	0x100003d1c
100003f01:	c6 05 00 a1 01 00 00	movb	$0, 106752(%rip)
100003f08:	44 89 f9	movl	%r15d, %ecx
100003f0b:	e9 0c fe ff ff	jmp	0x100003d1c
100003f10:	c6 05 f2 a0 01 00 01	movb	$1, 106738(%rip)
100003f17:	44 89 f9	movl	%r15d, %ecx
100003f1a:	e9 fd fd ff ff	jmp	0x100003d1c
100003f1f:	c6 05 06 a1 01 00 01	movb	$1, 106758(%rip)
100003f26:	44 89 f9	movl	%r15d, %ecx
100003f29:	e9 ee fd ff ff	jmp	0x100003d1c
100003f2e:	c6 05 f8 a0 01 00 01	movb	$1, 106744(%rip)
100003f35:	44 89 f9	movl	%r15d, %ecx
100003f38:	e9 df fd ff ff	jmp	0x100003d1c
100003f3d:	c6 05 c6 a0 01 00 01	movb	$1, 106694(%rip)
100003f44:	44 89 f9	movl	%r15d, %ecx
100003f47:	e9 d0 fd ff ff	jmp	0x100003d1c
100003f4c:	c6 05 db a0 01 00 01	movb	$1, 106715(%rip)
100003f53:	44 89 f9	movl	%r15d, %ecx
100003f56:	e9 c1 fd ff ff	jmp	0x100003d1c
100003f5b:	c6 05 c9 a0 01 00 01	movb	$1, 106697(%rip)
100003f62:	44 89 f9	movl	%r15d, %ecx
100003f65:	e9 b2 fd ff ff	jmp	0x100003d1c
100003f6a:	48 8b 05 9f 44 01 00	movq	83103(%rip), %rax ## literal pool symbol address: _optarg
100003f71:	48 8b 38	movq	(%rax), %rdi
100003f74:	48 8d 35 fe db 00 00	leaq	56318(%rip), %rsi ## literal pool for: "w"
100003f7b:	e8 cc c3 00 00	callq	0x10001034c ## symbol stub for: _fopen
100003f80:	48 89 05 61 a0 01 00	movq	%rax, 106593(%rip)
100003f87:	44 89 f9	movl	%r15d, %ecx
100003f8a:	48 85 c0	testq	%rax, %rax
100003f8d:	0f 85 89 fd ff ff	jne	0x100003d1c
100003f93:	e9 52 0b 00 00	jmp	0x100004aea
100003f98:	48 8b 05 71 44 01 00	movq	83057(%rip), %rax ## literal pool symbol address: _optarg
100003f9f:	48 8b 18	movq	(%rax), %rbx
100003fa2:	48 89 df	movq	%rbx, %rdi
100003fa5:	48 8d 35 f2 db 00 00	leaq	56306(%rip), %rsi ## literal pool for: "cputime"
100003fac:	e8 f1 c4 00 00	callq	0x1000104a2 ## symbol stub for: _strcasecmp
100003fb1:	85 c0	testl	%eax, %eax
100003fb3:	0f 84 1e 04 00 00	je	0x1000043d7
100003fb9:	48 89 df	movq	%rbx, %rdi
100003fbc:	48 8d 35 e3 db 00 00	leaq	56291(%rip), %rsi ## literal pool for: "wakeups"
100003fc3:	e8 da c4 00 00	callq	0x1000104a2 ## symbol stub for: _strcasecmp
100003fc8:	85 c0	testl	%eax, %eax
100003fca:	0f 84 1f 04 00 00	je	0x1000043ef
100003fd0:	48 89 df	movq	%rbx, %rdi
100003fd3:	48 8d 35 d4 db 00 00	leaq	56276(%rip), %rsi ## literal pool for: "composite"
100003fda:	e8 c3 c4 00 00	callq	0x1000104a2 ## symbol stub for: _strcasecmp
100003fdf:	85 c0	testl	%eax, %eax
100003fe1:	0f 84 14 04 00 00	je	0x1000043fb
100003fe7:	48 89 df	movq	%rbx, %rdi
100003fea:	48 8d 35 c7 db 00 00	leaq	56263(%rip), %rsi ## literal pool for: "pid"
100003ff1:	e8 ac c4 00 00	callq	0x1000104a2 ## symbol stub for: _strcasecmp
100003ff6:	85 c0	testl	%eax, %eax
100003ff8:	0f 85 6a 0a 00 00	jne	0x100004a68
100003ffe:	c7 05 14 a0 01 00 03 00 00 00	movl	$3, 106516(%rip)
100004008:	e9 f8 03 00 00	jmp	0x100004405
10000400d:	48 8b 05 fc 43 01 00	movq	82940(%rip), %rax ## literal pool symbol address: _optarg
100004014:	48 8b 38	movq	(%rax), %rdi
100004017:	48 8d b5 40 ff ff ff	leaq	-192(%rbp), %rsi
10000401e:	e8 77 7d 00 00	callq	0x10000bd9a
100004023:	48 8b 8d 40 ff ff ff	movq	-192(%rbp), %rcx
10000402a:	84 c0	testb	%al, %al
10000402c:	75 09	jne	0x100004037
10000402e:	48 85 c9	testq	%rcx, %rcx
100004031:	0f 8e b8 0a 00 00	jle	0x100004aef
100004037:	48 69 c1 e8 03 00 00	imulq	$1000, %rcx, %rax
10000403e:	48 89 05 db 9f 01 00	movq	%rax, 106459(%rip)
100004045:	44 89 f9	movl	%r15d, %ecx
100004048:	e9 cf fc ff ff	jmp	0x100003d1c
10000404d:	48 8b 05 bc 43 01 00	movq	82876(%rip), %rax ## literal pool symbol address: _optarg
100004054:	48 8b 38	movq	(%rax), %rdi
100004057:	48 8d 35 a2 9f 01 00	leaq	106402(%rip), %rsi
10000405e:	e8 37 7d 00 00	callq	0x10000bd9a
100004063:	44 89 f9	movl	%r15d, %ecx
100004066:	84 c0	testb	%al, %al
100004068:	0f 85 ae fc ff ff	jne	0x100003d1c
10000406e:	48 83 3d 8a 9f 01 00 fe	cmpq	$-2, 106378(%rip)
100004076:	44 89 f9	movl	%r15d, %ecx
100004079:	0f 8f 9d fc ff ff	jg	0x100003d1c
10000407f:	e9 70 0a 00 00	jmp	0x100004af4
100004084:	48 8b 05 85 43 01 00	movq	82821(%rip), %rax ## literal pool symbol address: _optarg
10000408b:	48 8b 18	movq	(%rax), %rbx
10000408e:	48 89 df	movq	%rbx, %rdi
100004091:	48 8d 35 6d da 00 00	leaq	55917(%rip), %rsi ## literal pool for: "text"
100004098:	e8 05 c4 00 00	callq	0x1000104a2 ## symbol stub for: _strcasecmp
10000409d:	85 c0	testl	%eax, %eax
10000409f:	0f 84 3e 03 00 00	je	0x1000043e3
1000040a5:	48 89 df	movq	%rbx, %rdi
1000040a8:	48 8d 35 5b da 00 00	leaq	55899(%rip), %rsi ## literal pool for: "plist"
1000040af:	e8 ee c3 00 00	callq	0x1000104a2 ## symbol stub for: _strcasecmp
1000040b4:	44 89 f9	movl	%r15d, %ecx
1000040b7:	85 c0	testl	%eax, %eax
1000040b9:	8b 5d b8	movl	-72(%rbp), %ebx
1000040bc:	0f 85 5a fc ff ff	jne	0x100003d1c
1000040c2:	c7 05 4c 9f 01 00 01 00 00 00	movl	$1, 106316(%rip)
1000040cc:	44 89 f9	movl	%r15d, %ecx
1000040cf:	e9 48 fc ff ff	jmp	0x100003d1c
1000040d4:	48 8b 05 35 43 01 00	movq	82741(%rip), %rax ## literal pool symbol address: _optarg
1000040db:	48 8b 38	movq	(%rax), %rdi
1000040de:	48 8d 35 13 9f 01 00	leaq	106259(%rip), %rsi
1000040e5:	e8 b0 7c 00 00	callq	0x10000bd9a
1000040ea:	44 89 f9	movl	%r15d, %ecx
1000040ed:	84 c0	testb	%al, %al
1000040ef:	0f 85 27 fc ff ff	jne	0x100003d1c
1000040f5:	48 83 3d fb 9e 01 00 00	cmpq	$0, 106235(%rip)
1000040fd:	44 89 f9	movl	%r15d, %ecx
100004100:	0f 89 16 fc ff ff	jns	0x100003d1c
100004106:	e9 ee 09 00 00	jmp	0x100004af9
10000410b:	48 8b 05 fe 42 01 00	movq	82686(%rip), %rax ## literal pool symbol address: _optarg
100004112:	48 8b 38	movq	(%rax), %rdi
100004115:	48 8d 35 d4 9e 01 00	leaq	106196(%rip), %rsi
10000411c:	e8 79 7c 00 00	callq	0x10000bd9a
100004121:	44 89 f9	movl	%r15d, %ecx
100004124:	84 c0	testb	%al, %al
100004126:	0f 85 f0 fb ff ff	jne	0x100003d1c
10000412c:	48 83 3d bc 9e 01 00 fe	cmpq	$-2, 106172(%rip)
100004134:	44 89 f9	movl	%r15d, %ecx
100004137:	0f 8f df fb ff ff	jg	0x100003d1c
10000413d:	e9 bc 09 00 00	jmp	0x100004afe
100004142:	48 8b 05 c7 42 01 00	movq	82631(%rip), %rax ## literal pool symbol address: _optarg
100004149:	48 8b 18	movq	(%rax), %rbx
10000414c:	48 89 df	movq	%rbx, %rdi
10000414f:	e8 78 c3 00 00	callq	0x1000104cc ## symbol stub for: _strlen
100004154:	48 89 45 88	movq	%rax, -120(%rbp)
100004158:	48 85 db	testq	%rbx, %rbx
10000415b:	0f 84 fd 08 00 00	je	0x100004a5e
100004161:	48 89 df	movq	%rbx, %rdi
100004164:	be 2c 00 00 00	movl	$44, %esi
100004169:	e8 40 c3 00 00	callq	0x1000104ae ## symbol stub for: _strchr
10000416e:	48 85 c0	testq	%rax, %rax
100004171:	74 1a	je	0x10000418d
100004173:	c6 00 00	movb	$0, (%rax)
100004176:	48 ff c0	incq	%rax
100004179:	48 89 c7	movq	%rax, %rdi
10000417c:	eb e6	jmp	0x100004164
10000417e:	c6 05 a3 9e 01 00 01	movb	$1, 106147(%rip)
100004185:	44 89 f9	movl	%r15d, %ecx
100004188:	e9 8f fb ff ff	jmp	0x100003d1c
10000418d:	48 89 5d 90	movq	%rbx, -112(%rbp)
100004191:	48 8b 45 88	movq	-120(%rbp), %rax
100004195:	48 8d 0c 03	leaq	(%rbx,%rax), %rcx
100004199:	48 89 4d 80	movq	%rcx, -128(%rbp)
10000419d:	48 85 c0	testq	%rax, %rax
1000041a0:	7e 71	jle	0x100004213
1000041a2:	4c 8b 75 90	movq	-112(%rbp), %r14
1000041a6:	31 db	xorl	%ebx, %ebx
1000041a8:	48 8d 05 71 4d 01 00	leaq	85361(%rip), %rax
1000041af:	48 8b 04 03	movq	(%rbx,%rax), %rax
1000041b3:	48 8b 30	movq	(%rax), %rsi
1000041b6:	4c 89 f7	movq	%r14, %rdi
1000041b9:	e8 f6 c2 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
1000041be:	85 c0	testl	%eax, %eax
1000041c0:	74 3d	je	0x1000041ff
1000041c2:	48 83 c3 08	addq	$8, %rbx
1000041c6:	48 83 fb 78	cmpq	$120, %rbx
1000041ca:	75 dc	jne	0x1000041a8
1000041cc:	b3 01	movb	$1, %bl
1000041ce:	31 c0	xorl	%eax, %eax
1000041d0:	48 8d 04 40	leaq	(%rax,%rax,2), %rax
1000041d4:	48 8d 0d c5 4d 01 00	leaq	85445(%rip), %rcx
1000041db:	48 8b 34 c1	movq	(%rcx,%rax,8), %rsi
1000041df:	4c 89 f7	movq	%r14, %rdi
1000041e2:	e8 cd c2 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
1000041e7:	85 c0	testl	%eax, %eax
1000041e9:	74 14	je	0x1000041ff
1000041eb:	b8 01 00 00 00	movl	$1, %eax
1000041f0:	f6 c3 01	testb	$1, %bl
1000041f3:	bb 00 00 00 00	movl	$0, %ebx
1000041f8:	75 d6	jne	0x1000041d0
1000041fa:	e9 ad 08 00 00	jmp	0x100004aac
1000041ff:	4c 89 f7	movq	%r14, %rdi
100004202:	e8 c5 c2 00 00	callq	0x1000104cc ## symbol stub for: _strlen
100004207:	49 01 c6	addq	%rax, %r14
10000420a:	49 ff c6	incq	%r14
10000420d:	4c 3b 75 80	cmpq	-128(%rbp), %r14
100004211:	72 93	jb	0x1000041a6
100004213:	44 88 7d bf	movb	%r15b, -65(%rbp)
100004217:	31 c0	xorl	%eax, %eax
100004219:	48 89 45 a0	movq	%rax, -96(%rbp)
10000421d:	48 83 7d 88 00	cmpq	$0, -120(%rbp)
100004222:	0f 8e d2 00 00 00	jle	0x1000042fa
100004228:	48 8d 05 f1 4c 01 00	leaq	85233(%rip), %rax
10000422f:	48 8b 4d a0	movq	-96(%rbp), %rcx
100004233:	4c 8b 3c c8	movq	(%rax,%rcx,8), %r15
100004237:	49 8b 07	movq	(%r15), %rax
10000423a:	48 89 85 60 ff ff ff	movq	%rax, -160(%rbp)
100004241:	31 db	xorl	%ebx, %ebx
100004243:	4c 8b 6d 90	movq	-112(%rbp), %r13
100004247:	4c 89 ef	movq	%r13, %rdi
10000424a:	48 8b b5 60 ff ff ff	movq	-160(%rbp), %rsi
100004251:	e8 5e c2 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
100004256:	85 c0	testl	%eax, %eax
100004258:	0f 84 82 00 00 00	je	0x1000042e0
10000425e:	88 5d b7	movb	%bl, -73(%rbp)
100004261:	45 31 f6	xorl	%r14d, %r14d
100004264:	4f 8d 24 76	leaq	(%r14,%r14,2), %r12
100004268:	48 8d 05 31 4d 01 00	leaq	85297(%rip), %rax
10000426f:	4a 8b 34 e0	movq	(%rax,%r12,8), %rsi
100004273:	4c 89 ef	movq	%r13, %rdi
100004276:	e8 39 c2 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
10000427b:	85 c0	testl	%eax, %eax
10000427d:	75 36	jne	0x1000042b5
10000427f:	48 8d 0d 1a 4d 01 00	leaq	85274(%rip), %rcx
100004286:	4a 8b 44 e1 10	movq	16(%rcx,%r12,8), %rax
10000428b:	b3 01	movb	$1, %bl
10000428d:	4c 39 38	cmpq	%r15, (%rax)
100004290:	74 31	je	0x1000042c3
100004292:	4a 8b 4c e1 08	movq	8(%rcx,%r12,8), %rcx
100004297:	48 8d 51 ff	leaq	-1(%rcx), %rdx
10000429b:	31 f6	xorl	%esi, %esi
10000429d:	48 39 f2	cmpq	%rsi, %rdx
1000042a0:	74 13	je	0x1000042b5
1000042a2:	48 8d 7e 01	leaq	1(%rsi), %rdi
1000042a6:	4c 39 7c f0 08	cmpq	%r15, 8(%rax,%rsi,8)
1000042ab:	48 89 fe	movq	%rdi, %rsi
1000042ae:	75 ed	jne	0x10000429d
1000042b0:	48 39 cf	cmpq	%rcx, %rdi
1000042b3:	72 0e	jb	0x1000042c3
1000042b5:	49 ff c6	incq	%r14
1000042b8:	49 83 fe 02	cmpq	$2, %r14
1000042bc:	75 a6	jne	0x100004264
1000042be:	8a 45 b7	movb	-73(%rbp), %al
1000042c1:	89 c3	movl	%eax, %ebx
1000042c3:	4c 89 ef	movq	%r13, %rdi
1000042c6:	e8 01 c2 00 00	callq	0x1000104cc ## symbol stub for: _strlen
1000042cb:	49 01 c5	addq	%rax, %r13
1000042ce:	49 ff c5	incq	%r13
1000042d1:	4c 3b 6d 80	cmpq	-128(%rbp), %r13
1000042d5:	0f 82 6c ff ff ff	jb	0x100004247
1000042db:	f6 c3 01	testb	$1, %bl
1000042de:	74 1a	je	0x1000042fa
1000042e0:	8b 05 9e a0 01 00	movl	106654(%rip), %eax
1000042e6:	8d 48 01	leal	1(%rax), %ecx
1000042e9:	89 0d 95 a0 01 00	movl	%ecx, 106645(%rip)
1000042ef:	48 8d 0d 9a a0 01 00	leaq	106650(%rip), %rcx
1000042f6:	4c 89 3c c1	movq	%r15, (%rcx,%rax,8)
1000042fa:	48 8b 4d a0	movq	-96(%rbp), %rcx
1000042fe:	48 ff c1	incq	%rcx
100004301:	48 89 c8	movq	%rcx, %rax
100004304:	48 89 4d a0	movq	%rcx, -96(%rbp)
100004308:	48 83 f9 0f	cmpq	$15, %rcx
10000430c:	0f 85 0b ff ff ff	jne	0x10000421d
100004312:	8a 45 bf	movb	-65(%rbp), %al
100004315:	89 c1	movl	%eax, %ecx
100004317:	4c 8b ad 68 ff ff ff	movq	-152(%rbp), %r13
10000431e:	8b 5d b8	movl	-72(%rbp), %ebx
100004321:	e9 f6 f9 ff ff	jmp	0x100003d1c
100004326:	44 88 7d bf	movb	%r15b, -65(%rbp)
10000432a:	48 8b 05 df 40 01 00	movq	82143(%rip), %rax ## literal pool symbol address: _optarg
100004331:	4c 8b 30	movq	(%rax), %r14
100004334:	4c 89 f7	movq	%r14, %rdi
100004337:	e8 90 c1 00 00	callq	0x1000104cc ## symbol stub for: _strlen
10000433c:	4d 85 f6	testq	%r14, %r14
10000433f:	0f 84 1e 07 00 00	je	0x100004a63
100004345:	49 89 c7	movq	%rax, %r15
100004348:	4c 89 f7	movq	%r14, %rdi
10000434b:	be 2c 00 00 00	movl	$44, %esi
100004350:	e8 59 c1 00 00	callq	0x1000104ae ## symbol stub for: _strchr
100004355:	48 85 c0	testq	%rax, %rax
100004358:	74 0b	je	0x100004365
10000435a:	c6 00 00	movb	$0, (%rax)
10000435d:	48 ff c0	incq	%rax
100004360:	48 89 c7	movq	%rax, %rdi
100004363:	eb e6	jmp	0x10000434b
100004365:	8a 45 bf	movb	-65(%rbp), %al
100004368:	89 c1	movl	%eax, %ecx
10000436a:	4d 85 ff	testq	%r15, %r15
10000436d:	0f 8e a9 f9 ff ff	jle	0x100003d1c
100004373:	4d 01 f7	addq	%r14, %r15
100004376:	31 db	xorl	%ebx, %ebx
100004378:	48 8d 05 a1 4b 01 00	leaq	84897(%rip), %rax
10000437f:	4c 8b 24 03	movq	(%rbx,%rax), %r12
100004383:	49 8b 34 24	movq	(%r12), %rsi
100004387:	4c 89 f7	movq	%r14, %rdi
10000438a:	e8 25 c1 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
10000438f:	85 c0	testl	%eax, %eax
100004391:	75 08	jne	0x10000439b
100004393:	41 80 7c 24 10 00	cmpb	$0, 16(%r12)
100004399:	75 0f	jne	0x1000043aa
10000439b:	48 83 c3 08	addq	$8, %rbx
10000439f:	48 83 fb 78	cmpq	$120, %rbx
1000043a3:	75 d3	jne	0x100004378
1000043a5:	e9 9e 06 00 00	jmp	0x100004a48
1000043aa:	49 8b 44 24 18	movq	24(%r12), %rax
1000043af:	48 85 c0	testq	%rax, %rax
1000043b2:	74 03	je	0x1000043b7
1000043b4:	c6 00 01	movb	$1, (%rax)
1000043b7:	4c 89 f7	movq	%r14, %rdi
1000043ba:	e8 0d c1 00 00	callq	0x1000104cc ## symbol stub for: _strlen
1000043bf:	49 01 c6	addq	%rax, %r14
1000043c2:	49 ff c6	incq	%r14
1000043c5:	4d 39 fe	cmpq	%r15, %r14
1000043c8:	72 ac	jb	0x100004376
1000043ca:	8a 45 bf	movb	-65(%rbp), %al
1000043cd:	89 c1	movl	%eax, %ecx
1000043cf:	8b 5d b8	movl	-72(%rbp), %ebx
1000043d2:	e9 45 f9 ff ff	jmp	0x100003d1c
1000043d7:	c7 05 3b 9c 01 00 00 00 00 00	movl	$0, 105531(%rip)
1000043e1:	eb 22	jmp	0x100004405
1000043e3:	c7 05 2b 9c 01 00 00 00 00 00	movl	$0, 105515(%rip)
1000043ed:	eb 16	jmp	0x100004405
1000043ef:	c7 05 23 9c 01 00 01 00 00 00	movl	$1, 105507(%rip)
1000043f9:	eb 0a	jmp	0x100004405
1000043fb:	c7 05 17 9c 01 00 02 00 00 00	movl	$2, 105495(%rip)
100004405:	44 89 f9	movl	%r15d, %ecx
100004408:	8b 5d b8	movl	-72(%rbp), %ebx
10000440b:	e9 0c f9 ff ff	jmp	0x100003d1c
100004410:	83 f8 ff	cmpl	$-1, %eax
100004413:	0f 85 60 06 00 00	jne	0x100004a79
100004419:	44 89 fb	movl	%r15d, %ebx
10000441c:	e8 4f bf 00 00	callq	0x100010370 ## symbol stub for: _geteuid
100004421:	85 c0	testl	%eax, %eax
100004423:	0f 85 e9 06 00 00	jne	0x100004b12
100004429:	84 db	testb	%bl, %bl
10000442b:	0f 84 b4 00 00 00	je	0x1000044e5
100004431:	48 8b 05 58 4b 01 00	movq	84824(%rip), %rax
100004438:	48 89 05 c1 9f 01 00	movq	%rax, 106433(%rip)
10000443f:	0f 28 05 3a 4b 01 00	movaps	84794(%rip), %xmm0
100004446:	0f 29 05 a3 9f 01 00	movaps	%xmm0, 106403(%rip)
10000444d:	0f 28 05 1c 4b 01 00	movaps	84764(%rip), %xmm0
100004454:	0f 29 05 85 9f 01 00	movaps	%xmm0, 106373(%rip)
10000445b:	0f 28 05 fe 4a 01 00	movaps	84734(%rip), %xmm0
100004462:	0f 29 05 67 9f 01 00	movaps	%xmm0, 106343(%rip)
100004469:	0f 28 05 e0 4a 01 00	movaps	84704(%rip), %xmm0
100004470:	0f 29 05 49 9f 01 00	movaps	%xmm0, 106313(%rip)
100004477:	0f 28 05 c2 4a 01 00	movaps	84674(%rip), %xmm0
10000447e:	0f 29 05 2b 9f 01 00	movaps	%xmm0, 106283(%rip)
100004485:	0f 28 05 a4 4a 01 00	movaps	84644(%rip), %xmm0
10000448c:	0f 29 05 0d 9f 01 00	movaps	%xmm0, 106253(%rip)
100004493:	0f 28 05 86 4a 01 00	movaps	84614(%rip), %xmm0
10000449a:	0f 29 05 ef 9e 01 00	movaps	%xmm0, 106223(%rip)
1000044a1:	c7 05 d9 9e 01 00 0f 00 00 00	movl	$15, 106201(%rip)
1000044ab:	c6 05 56 9b 01 00 01	movb	$1, 105302(%rip)
1000044b2:	66 c7 05 7e 9b 01 00 01 01	movw	$257, 105342(%rip)
1000044bb:	48 b8 01 01 01 01 01 01 01 01	movabsq	$72340172838076673, %rax
1000044c5:	48 89 05 63 9b 01 00	movq	%rax, 105315(%rip)
1000044cc:	48 89 05 55 9b 01 00	movq	%rax, 105301(%rip)
1000044d3:	4c 8d 35 b6 9e 01 00	leaq	106166(%rip), %r14
1000044da:	eb 69	jmp	0x100004545
1000044dc:	31 db	xorl	%ebx, %ebx
1000044de:	31 ff	xorl	%edi, %edi
1000044e0:	e9 9e 05 00 00	jmp	0x100004a83
1000044e5:	83 3d 98 9e 01 00 00	cmpl	$0, 106136(%rip)
1000044ec:	4c 8d 35 9d 9e 01 00	leaq	106141(%rip), %r14
1000044f3:	75 50	jne	0x100004545
1000044f5:	0f 28 05 14 4a 01 00	movaps	84500(%rip), %xmm0
1000044fc:	0f 29 05 cd 9e 01 00	movaps	%xmm0, 106189(%rip)
100004503:	0f 28 05 f6 49 01 00	movaps	84470(%rip), %xmm0
10000450a:	0f 29 05 af 9e 01 00	movaps	%xmm0, 106159(%rip)
100004511:	0f 28 05 d8 49 01 00	movaps	84440(%rip), %xmm0
100004518:	0f 29 05 91 9e 01 00	movaps	%xmm0, 106129(%rip)
10000451f:	0f 28 05 ba 49 01 00	movaps	84410(%rip), %xmm0
100004526:	0f 29 05 73 9e 01 00	movaps	%xmm0, 106099(%rip)
10000452d:	0f 28 05 9c 49 01 00	movaps	84380(%rip), %xmm0
100004534:	0f 29 05 55 9e 01 00	movaps	%xmm0, 106069(%rip)
10000453b:	c7 05 3f 9e 01 00 0a 00 00 00	movl	$10, 106047(%rip)
100004545:	48 8b 0d b4 9a 01 00	movq	105140(%rip), %rcx
10000454c:	48 83 f9 01	cmpq	$1, %rcx
100004550:	74 15	je	0x100004567
100004552:	48 85 c9	testq	%rcx, %rcx
100004555:	75 22	jne	0x100004579
100004557:	48 8b 3d 8a 9a 01 00	movq	105098(%rip), %rdi
10000455e:	31 f6	xorl	%esi, %esi
100004560:	ba 02 00 00 00	movl	$2, %edx
100004565:	eb 0e	jmp	0x100004575
100004567:	48 8b 3d 7a 9a 01 00	movq	105082(%rip), %rdi
10000456e:	31 f6	xorl	%esi, %esi
100004570:	ba 01 00 00 00	movl	$1, %edx
100004575:	31 c9	xorl	%ecx, %ecx
100004577:	eb 0d	jmp	0x100004586
100004579:	7e 10	jle	0x10000458b
10000457b:	48 8b 3d 66 9a 01 00	movq	105062(%rip), %rdi
100004582:	31 f6	xorl	%esi, %esi
100004584:	31 d2	xorl	%edx, %edx
100004586:	e8 f3 be 00 00	callq	0x10001047e ## symbol stub for: _setvbuf
10000458b:	48 8d 9d 38 ff ff ff	leaq	-200(%rbp), %rbx
100004592:	48 89 df	movq	%rbx, %rdi
100004595:	e8 24 be 00 00	callq	0x1000103be ## symbol stub for: _mach_timebase_info
10000459a:	8b 03	movl	(%rbx), %eax
10000459c:	8b 4b 04	movl	4(%rbx), %ecx
10000459f:	0f 57 c0	xorps	%xmm0, %xmm0
1000045a2:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
1000045a7:	f2 48 0f 2a c9	cvtsi2sd	%rcx, %xmm1
1000045ac:	f2 0f 5e c1	divsd	%xmm1, %xmm0
1000045b0:	f2 0f 11 05 e8 99 01 00	movsd	%xmm0, 104936(%rip)
1000045b8:	48 8d 3d 66 d6 00 00	leaq	54886(%rip), %rdi ## literal pool for: "machdep.tsc.frequency"
1000045bf:	48 8d 35 e2 99 01 00	leaq	104930(%rip), %rsi
1000045c6:	ba 08 00 00 00	movl	$8, %edx
1000045cb:	e8 c8 08 00 00	callq	0x100004e98
1000045d0:	48 8d 3d 64 d6 00 00	leaq	54884(%rip), %rdi ## literal pool for: "hw.model"
1000045d7:	48 8d 35 32 9e 01 00	leaq	106034(%rip), %rsi
1000045de:	ba 40 00 00 00	movl	$64, %edx
1000045e3:	e8 b0 08 00 00	callq	0x100004e98
1000045e8:	48 8d 3d 55 d6 00 00	leaq	54869(%rip), %rdi ## literal pool for: "kern.osversion"
1000045ef:	48 8d 35 5a 9e 01 00	leaq	106074(%rip), %rsi
1000045f6:	ba 40 00 00 00	movl	$64, %edx
1000045fb:	e8 98 08 00 00	callq	0x100004e98
100004600:	48 8d 3d 4c d6 00 00	leaq	54860(%rip), %rdi ## literal pool for: "kern.bootargs"
100004607:	48 8d 35 82 9e 01 00	leaq	106114(%rip), %rsi
10000460e:	ba 00 04 00 00	movl	$1024, %edx
100004613:	e8 80 08 00 00	callq	0x100004e98
100004618:	48 8d 8d 70 ff ff ff	leaq	-144(%rbp), %rcx
10000461f:	48 c7 01 10 00 00 00	movq	$16, (%rcx)
100004626:	48 b8 01 00 00 00 15 00 00 00	movabsq	$90194313217, %rax
100004630:	48 8d 7d c0	leaq	-64(%rbp), %rdi
100004634:	48 89 07	movq	%rax, (%rdi)
100004637:	48 8d 15 52 a2 01 00	leaq	107090(%rip), %rdx
10000463e:	be 02 00 00 00	movl	$2, %esi
100004643:	45 31 c0	xorl	%r8d, %r8d
100004646:	45 31 c9	xorl	%r9d, %r9d
100004649:	e8 9c be 00 00	callq	0x1000104ea ## symbol stub for: _sysctl
10000464e:	85 c0	testl	%eax, %eax
100004650:	0f 85 e9 04 00 00	jne	0x100004b3f
100004656:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
10000465d:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
100004664:	48 8d 3d f6 d5 00 00	leaq	54774(%rip), %rdi ## literal pool for: "hw.cpufrequency_max"
10000466b:	48 8d 35 3e 99 01 00	leaq	104766(%rip), %rsi
100004672:	31 c9	xorl	%ecx, %ecx
100004674:	45 31 c0	xorl	%r8d, %r8d
100004677:	e8 74 be 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000467c:	85 c0	testl	%eax, %eax
10000467e:	74 2e	je	0x1000046ae
100004680:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
100004687:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000468e:	48 8d 3d e0 d5 00 00	leaq	54752(%rip), %rdi ## literal pool for: "hw.cpufrequency"
100004695:	48 8d 35 14 99 01 00	leaq	104724(%rip), %rsi
10000469c:	31 c9	xorl	%ecx, %ecx
10000469e:	45 31 c0	xorl	%r8d, %r8d
1000046a1:	e8 4a be 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
1000046a6:	85 c0	testl	%eax, %eax
1000046a8:	0f 85 9b 04 00 00	jne	0x100004b49
1000046ae:	e8 ae 76 00 00	callq	0x10000bd61
1000046b3:	84 c0	testb	%al, %al
1000046b5:	75 27	jne	0x1000046de
1000046b7:	48 8b 05 b2 3b 01 00	movq	80818(%rip), %rax ## literal pool symbol address: ___stderrp
1000046be:	48 8b 08	movq	(%rax), %rcx
1000046c1:	48 8d 3d 03 d6 00 00	leaq	54787(%rip), %rdi ## literal pool for: "This system doesn't support display of c-state info.\n"
1000046c8:	be 35 00 00 00	movl	$53, %esi
1000046cd:	ba 01 00 00 00	movl	$1, %edx
1000046d2:	e8 93 bc 00 00	callq	0x10001036a ## symbol stub for: _fwrite
1000046d7:	c6 05 5a 99 01 00 00	movb	$0, 104794(%rip)
1000046de:	f2 0f 10 05 ba 98 01 00	movsd	104634(%rip), %xmm0
1000046e6:	f2 48 0f 2c c0	cvttsd2si	%xmm0, %rax
1000046eb:	48 89 c1	movq	%rax, %rcx
1000046ee:	48 c1 f9 3f	sarq	$63, %rcx
1000046f2:	f2 0f 5c 05 56 20 01 00	subsd	73814(%rip), %xmm0
1000046fa:	f2 48 0f 2c f0	cvttsd2si	%xmm0, %rsi
1000046ff:	48 21 ce	andq	%rcx, %rsi
100004702:	48 09 c6	orq	%rax, %rsi
100004705:	48 8b 05 14 99 01 00	movq	104724(%rip), %rax
10000470c:	31 d2	xorl	%edx, %edx
10000470e:	48 f7 f6	divq	%rsi
100004711:	48 89 05 08 99 01 00	movq	%rax, 104712(%rip)
100004718:	48 8d 35 a9 07 00 00	leaq	1961(%rip), %rsi
10000471f:	bf 1d 00 00 00	movl	$29, %edi
100004724:	e8 61 bd 00 00	callq	0x10001048a ## symbol stub for: _signal
100004729:	48 8d 35 9e 07 00 00	leaq	1950(%rip), %rsi
100004730:	bf 17 00 00 00	movl	$23, %edi
100004735:	e8 50 bd 00 00	callq	0x10001048a ## symbol stub for: _signal
10000473a:	80 3d c9 98 01 00 00	cmpb	$0, 104649(%rip)
100004741:	48 8d 05 bf 07 00 00	leaq	1983(%rip), %rax
100004748:	48 8d 1d 98 07 00 00	leaq	1944(%rip), %rbx
10000474f:	48 0f 44 d8	cmoveq	%rax, %rbx
100004753:	bf 02 00 00 00	movl	$2, %edi
100004758:	48 89 de	movq	%rbx, %rsi
10000475b:	e8 2a bd 00 00	callq	0x10001048a ## symbol stub for: _signal
100004760:	bf 0f 00 00 00	movl	$15, %edi
100004765:	48 89 de	movq	%rbx, %rsi
100004768:	e8 1d bd 00 00	callq	0x10001048a ## symbol stub for: _signal
10000476d:	bf 01 00 00 00	movl	$1, %edi
100004772:	48 89 de	movq	%rbx, %rsi
100004775:	e8 10 bd 00 00	callq	0x10001048a ## symbol stub for: _signal
10000477a:	c7 45 98 03 40 40 10	movl	$272646147, -104(%rbp)
100004781:	8b 05 fd 9b 01 00	movl	105469(%rip), %eax
100004787:	85 c0	testl	%eax, %eax
100004789:	74 30	je	0x1000047bb
10000478b:	31 db	xorl	%ebx, %ebx
10000478d:	49 8b 0e	movq	(%r14), %rcx
100004790:	80 79 10 00	cmpb	$0, 16(%rcx)
100004794:	74 0e	je	0x1000047a4
100004796:	48 8b 51 18	movq	24(%rcx), %rdx
10000479a:	48 85 d2	testq	%rdx, %rdx
10000479d:	74 0e	je	0x1000047ad
10000479f:	80 3a 00	cmpb	$0, (%rdx)
1000047a2:	74 09	je	0x1000047ad
1000047a4:	ff 51 20	callq	*32(%rcx)
1000047a7:	8b 05 d7 9b 01 00	movl	105431(%rip), %eax
1000047ad:	48 ff c3	incq	%rbx
1000047b0:	89 c1	movl	%eax, %ecx
1000047b2:	49 83 c6 08	addq	$8, %r14
1000047b6:	48 39 cb	cmpq	%rcx, %rbx
1000047b9:	72 d2	jb	0x10000478d
1000047bb:	83 3d 56 98 01 00 00	cmpl	$0, 104534(%rip)
1000047c2:	0f 85 d5 00 00 00	jne	0x10000489d
1000047c8:	48 8b 3d 19 98 01 00	movq	104473(%rip), %rdi
1000047cf:	48 8d 35 2b d5 00 00	leaq	54571(%rip), %rsi ## literal pool for: "Machine model: %s\n"
1000047d6:	48 8d 15 33 9c 01 00	leaq	105523(%rip), %rdx
1000047dd:	31 c0	xorl	%eax, %eax
1000047df:	e8 6e bb 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000047e4:	48 8b 1d fd 97 01 00	movq	104445(%rip), %rbx
1000047eb:	48 83 3d bd a0 01 00 ff	cmpq	$-1, 106685(%rip)
1000047f3:	0f 85 bc 02 00 00	jne	0x100004ab5
1000047f9:	48 8b 15 40 98 01 00	movq	104512(%rip), %rdx
100004800:	48 8d 35 0d d5 00 00	leaq	54541(%rip), %rsi ## literal pool for: "SMC version: %s\n"
100004807:	48 89 df	movq	%rbx, %rdi
10000480a:	31 c0	xorl	%eax, %eax
10000480c:	e8 41 bb 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100004811:	48 8b 1d d0 97 01 00	movq	104400(%rip), %rbx
100004818:	48 83 3d 98 a0 01 00 ff	cmpq	$-1, 106648(%rip)
100004820:	0f 85 a7 02 00 00	jne	0x100004acd
100004826:	48 8b 15 1b 98 01 00	movq	104475(%rip), %rdx
10000482d:	48 8d 35 f1 d4 00 00	leaq	54513(%rip), %rsi ## literal pool for: "EFI version: %s\n"
100004834:	48 89 df	movq	%rbx, %rdi
100004837:	31 c0	xorl	%eax, %eax
100004839:	e8 14 bb 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000483e:	48 8b 3d a3 97 01 00	movq	104355(%rip), %rdi
100004845:	48 8d 35 ea d4 00 00	leaq	54506(%rip), %rsi ## literal pool for: "OS version: %s\n"
10000484c:	48 8d 15 fd 9b 01 00	leaq	105469(%rip), %rdx
100004853:	31 c0	xorl	%eax, %eax
100004855:	e8 f8 ba 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000485a:	48 8b 3d 87 97 01 00	movq	104327(%rip), %rdi
100004861:	48 8d 35 de d4 00 00	leaq	54494(%rip), %rsi ## literal pool for: "Boot arguments: %s\n"
100004868:	48 8d 15 21 9c 01 00	leaq	105505(%rip), %rdx
10000486f:	31 c0	xorl	%eax, %eax
100004871:	e8 dc ba 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100004876:	48 8b 1d 6b 97 01 00	movq	104299(%rip), %rbx
10000487d:	48 8d 3d 0c a0 01 00	leaq	106508(%rip), %rdi
100004884:	e8 9f ba 00 00	callq	0x100010328 ## symbol stub for: _ctime
100004889:	48 8d 35 ca d4 00 00	leaq	54474(%rip), %rsi ## literal pool for: "Boot time: %s\n"
100004890:	48 89 df	movq	%rbx, %rdi
100004893:	48 89 c2	movq	%rax, %rdx
100004896:	31 c0	xorl	%eax, %eax
100004898:	e8 b5 ba 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000489d:	48 8d 9d 58 ff ff ff	leaq	-168(%rbp), %rbx
1000048a4:	c7 03 0f 00 00 00	movl	$15, (%rbx)
1000048aa:	e8 09 bb 00 00	callq	0x1000103b8 ## symbol stub for: _mach_thread_self
1000048af:	89 c7	movl	%eax, %edi
1000048b1:	be 03 00 00 00	movl	$3, %esi
1000048b6:	48 89 da	movq	%rbx, %rdx
1000048b9:	b9 01 00 00 00	movl	$1, %ecx
1000048be:	e8 3f bc 00 00	callq	0x100010502 ## symbol stub for: _thread_policy_set
1000048c3:	85 c0	testl	%eax, %eax
1000048c5:	74 20	je	0x1000048e7
1000048c7:	48 8b 05 a2 39 01 00	movq	80290(%rip), %rax ## literal pool symbol address: ___stderrp
1000048ce:	48 8b 08	movq	(%rax), %rcx
1000048d1:	48 8d 3d 91 d4 00 00	leaq	54417(%rip), %rdi ## literal pool for: "Could not elevate thread priority. Samples may be less accurate.\n"
1000048d8:	be 41 00 00 00	movl	$65, %esi
1000048dd:	ba 01 00 00 00	movl	$1, %edx
1000048e2:	e8 83 ba 00 00	callq	0x10001036a ## symbol stub for: _fwrite
1000048e7:	e8 b4 ba 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
1000048ec:	48 89 05 ad 9f 01 00	movq	%rax, 106413(%rip)
1000048f3:	45 31 e4	xorl	%r12d, %r12d
1000048f6:	4c 8d 75 98	leaq	-104(%rbp), %r14
1000048fa:	49 bd 53 5a 9b a0 2f b8 44 00	movabsq	$19342813113834067, %r13
100004904:	4c 8d 7d c0	leaq	-64(%rbp), %r15
100004908:	48 8d 9d 70 ff ff ff	leaq	-144(%rbp), %rbx
10000490f:	e8 8c ba 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
100004914:	48 89 05 c5 96 01 00	movq	%rax, 104133(%rip)
10000491b:	bf 01 00 00 00	movl	$1, %edi
100004920:	4c 89 f6	movq	%r14, %rsi
100004923:	31 d2	xorl	%edx, %edx
100004925:	e8 66 bb 00 00	callq	0x100010490 ## symbol stub for: _sigprocmask
10000492a:	e8 e3 05 00 00	callq	0x100004f12
10000492f:	bf 02 00 00 00	movl	$2, %edi
100004934:	4c 89 f6	movq	%r14, %rsi
100004937:	31 d2	xorl	%edx, %edx
100004939:	e8 52 bb 00 00	callq	0x100010490 ## symbol stub for: _sigprocmask
10000493e:	44 88 25 53 96 01 00	movb	%r12b, 104019(%rip)
100004945:	44 88 25 5c 9f 01 00	movb	%r12b, 106332(%rip)
10000494c:	48 8b 3d 95 96 01 00	movq	104085(%rip), %rdi
100004953:	e8 ee b9 00 00	callq	0x100010346 ## symbol stub for: _fflush
100004958:	48 8b 05 79 96 01 00	movq	104057(%rip), %rax
10000495f:	48 8d 48 01	leaq	1(%rax), %rcx
100004963:	48 89 0d 6e 96 01 00	movq	%rcx, 104046(%rip)
10000496a:	48 8b 0d 7f 96 01 00	movq	104063(%rip), %rcx
100004971:	48 83 f9 ff	cmpq	$-1, %rcx
100004975:	74 09	je	0x100004980
100004977:	48 39 c8	cmpq	%rcx, %rax
10000497a:	0f 8d af 00 00 00	jge	0x100004a2f
100004980:	48 8b 0d 71 96 01 00	movq	104049(%rip), %rcx
100004987:	48 89 c8	movq	%rcx, %rax
10000498a:	48 ba cf f7 53 e3 a5 9b c4 20	movabsq	$2361183241434822607, %rdx
100004994:	48 f7 ea	imulq	%rdx
100004997:	48 89 d0	movq	%rdx, %rax
10000499a:	48 c1 e8 3f	shrq	$63, %rax
10000499e:	48 c1 fa 07	sarq	$7, %rdx
1000049a2:	48 01 c2	addq	%rax, %rdx
1000049a5:	48 89 55 c0	movq	%rdx, -64(%rbp)
1000049a9:	48 69 f1 40 42 0f 00	imulq	$1000000, %rcx, %rsi
1000049b0:	48 89 f0	movq	%rsi, %rax
1000049b3:	48 c1 e8 09	shrq	$9, %rax
1000049b7:	49 f7 e5	mulq	%r13
1000049ba:	48 c1 ea 0b	shrq	$11, %rdx
1000049be:	48 69 c2 00 ca 9a 3b	imulq	$1000000000, %rdx, %rax
1000049c5:	48 29 c6	subq	%rax, %rsi
1000049c8:	48 89 75 c8	movq	%rsi, -56(%rbp)
1000049cc:	48 85 c9	testq	%rcx, %rcx
1000049cf:	74 3c	je	0x100004a0d
1000049d1:	4c 89 ff	movq	%r15, %rdi
1000049d4:	48 89 de	movq	%rbx, %rsi
1000049d7:	e8 0c ba 00 00	callq	0x1000103e8 ## symbol stub for: _nanosleep
1000049dc:	85 c0	testl	%eax, %eax
1000049de:	79 14	jns	0x1000049f4
1000049e0:	e8 01 b9 00 00	callq	0x1000102e6 ## symbol stub for: ___error
1000049e5:	8b 00	movl	(%rax), %eax
1000049e7:	66 0f 10 85 70 ff ff ff	movupd	-144(%rbp), %xmm0
1000049ef:	66 0f 29 45 c0	movapd	%xmm0, -64(%rbp)
1000049f4:	8a 0d ae 9e 01 00	movb	106158(%rip), %cl
1000049fa:	83 f8 04	cmpl	$4, %eax
1000049fd:	0f 85 0c ff ff ff	jne	0x10000490f
100004a03:	f6 c1 01	testb	$1, %cl
100004a06:	75 c9	jne	0x1000049d1
100004a08:	e9 02 ff ff ff	jmp	0x10000490f
100004a0d:	e8 ee b9 00 00	callq	0x100010400 ## symbol stub for: _pause
100004a12:	e8 cf b8 00 00	callq	0x1000102e6 ## symbol stub for: ___error
100004a17:	83 38 04	cmpl	$4, (%rax)
100004a1a:	8a 05 88 9e 01 00	movb	106120(%rip), %al
100004a20:	0f 85 e9 fe ff ff	jne	0x10000490f
100004a26:	a8 01	testb	$1, %al
100004a28:	75 e3	jne	0x100004a0d
100004a2a:	e9 e0 fe ff ff	jmp	0x10000490f
100004a2f:	80 3d d4 95 01 00 00	cmpb	$0, 103892(%rip)
100004a36:	74 0c	je	0x100004a44
100004a38:	c6 05 5b 95 01 00 01	movb	$1, 103771(%rip)
100004a3f:	e8 ce 04 00 00	callq	0x100004f12
100004a44:	31 db	xorl	%ebx, %ebx
100004a46:	eb 40	jmp	0x100004a88
100004a48:	48 8d 35 7c d6 00 00	leaq	54908(%rip), %rsi ## literal pool for: "unrecognized unhide option: %s"
100004a4f:	bf 40 00 00 00	movl	$64, %edi
100004a54:	4c 89 f2	movq	%r14, %rdx
100004a57:	31 c0	xorl	%eax, %eax
100004a59:	e8 d6 b8 00 00	callq	0x100010334 ## symbol stub for: _errx
100004a5e:	e8 2c b1 00 00	callq	0x10000fb8f
100004a63:	e8 69 b1 00 00	callq	0x10000fbd1
100004a68:	48 8d 3d 4d d1 00 00	leaq	53581(%rip), %rdi ## literal pool for: "unrecognized order: %s"
100004a6f:	48 89 de	movq	%rbx, %rsi
100004a72:	31 c0	xorl	%eax, %eax
100004a74:	e8 95 ba 00 00	callq	0x10001050e ## symbol stub for: _warnx
100004a79:	bb 40 00 00 00	movl	$64, %ebx
100004a7e:	bf 40 00 00 00	movl	$64, %edi
100004a83:	e8 95 02 00 00	callq	0x100004d1d
100004a88:	48 8b 05 d9 37 01 00	movq	79833(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100004a8f:	48 8b 00	movq	(%rax), %rax
100004a92:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100004a96:	75 75	jne	0x100004b0d
100004a98:	89 d8	movl	%ebx, %eax
100004a9a:	48 81 c4 a8 00 00 00	addq	$168, %rsp
100004aa1:	5b	popq	%rbx
100004aa2:	41 5c	popq	%r12
100004aa4:	41 5d	popq	%r13
100004aa6:	41 5e	popq	%r14
100004aa8:	41 5f	popq	%r15
100004aaa:	5d	popq	%rbp
100004aab:	c3	retq
100004aac:	48 8d 35 ee d5 00 00	leaq	54766(%rip), %rsi ## literal pool for: "unrecognized sampler: %s"
100004ab3:	eb 9a	jmp	0x100004a4f
100004ab5:	48 8d 3d f4 9d 01 00	leaq	105972(%rip), %rdi
100004abc:	48 8d 35 2d 45 01 00	leaq	83245(%rip), %rsi
100004ac3:	e8 66 b8 00 00	callq	0x10001032e ## symbol stub for: _dispatch_once
100004ac8:	e9 2c fd ff ff	jmp	0x1000047f9
100004acd:	48 8d 3d e4 9d 01 00	leaq	105956(%rip), %rdi
100004ad4:	48 8d 35 55 45 01 00	leaq	83285(%rip), %rsi
100004adb:	e8 4e b8 00 00	callq	0x10001032e ## symbol stub for: _dispatch_once
100004ae0:	e9 41 fd ff ff	jmp	0x100004826
100004ae5:	e8 14 b0 00 00	callq	0x10000fafe
100004aea:	e8 8b b0 00 00	callq	0x10000fb7a
100004aef:	e8 be b0 00 00	callq	0x10000fbb2
100004af4:	e8 24 b0 00 00	callq	0x10000fb1d
100004af9:	e8 3e b0 00 00	callq	0x10000fb3c
100004afe:	e8 58 b0 00 00	callq	0x10000fb5b
100004b03:	e8 39 b1 00 00	callq	0x10000fc41
100004b08:	e8 18 b1 00 00	callq	0x10000fc25
100004b0d:	e8 e6 b7 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100004b12:	48 8b 05 57 37 01 00	movq	79703(%rip), %rax ## literal pool symbol address: ___stderrp
100004b19:	48 8b 18	movq	(%rax), %rbx
100004b1c:	e8 61 b8 00 00	callq	0x100010382 ## symbol stub for: _getprogname
100004b21:	48 8d 35 d8 d0 00 00	leaq	53464(%rip), %rsi ## literal pool for: "%s must be invoked as the superuser\n"
100004b28:	48 89 df	movq	%rbx, %rdi
100004b2b:	48 89 c2	movq	%rax, %rdx
100004b2e:	31 c0	xorl	%eax, %eax
100004b30:	e8 1d b8 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100004b35:	bf 01 00 00 00	movl	$1, %edi
100004b3a:	e8 fb b7 00 00	callq	0x10001033a ## symbol stub for: _exit
100004b3f:	e8 9e af 00 00	callq	0x10000fae2
100004b44:	e8 ab b0 00 00	callq	0x10000fbf4
100004b49:	e8 78 af 00 00	callq	0x10000fac6
100004b4e:	66 90	nop
3d f2 ff ff	.long 4294963773	@ KIND_JUMP_TABLE32
fd f4 ff ff	.long 4294964477	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
34 f5 ff ff	.long 4294964532	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
8c f9 ff ff	.long 4294965644	@ KIND_JUMP_TABLE32
84 f5 ff ff	.long 4294964612	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
bb f5 ff ff	.long 4294964667	@ KIND_JUMP_TABLE32
1a f4 ff ff	.long 4294964250	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
48 f4 ff ff	.long 4294964296	@ KIND_JUMP_TABLE32
f2 f5 ff ff	.long 4294964722	@ KIND_JUMP_TABLE32
bd f4 ff ff	.long 4294964413	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
29 ff ff ff	.long 4294967081	@ KIND_JUMP_TABLE32
2e f6 ff ff	.long 4294964782	@ KIND_JUMP_TABLE32
b0 f1 ff ff	.long 4294963632	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
ac f2 ff ff	.long 4294963884	@ KIND_JUMP_TABLE32
bb f2 ff ff	.long 4294963899	@ KIND_JUMP_TABLE32
ca f2 ff ff	.long 4294963914	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
d9 f2 ff ff	.long 4294963929	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
e8 f2 ff ff	.long 4294963944	@ KIND_JUMP_TABLE32
f7 f2 ff ff	.long 4294963959	@ KIND_JUMP_TABLE32
06 f3 ff ff	.long 4294963974	@ KIND_JUMP_TABLE32
15 f3 ff ff	.long 4294963989	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
24 f3 ff ff	.long 4294964004	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
33 f3 ff ff	.long 4294964019	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
42 f3 ff ff	.long 4294964034	@ KIND_JUMP_TABLE32
51 f3 ff ff	.long 4294964049	@ KIND_JUMP_TABLE32
6f f3 ff ff	.long 4294964079	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
c9 fe ff ff	.long 4294966985	@ KIND_JUMP_TABLE32
60 f3 ff ff	.long 4294964064	@ KIND_JUMP_TABLE32
c3 f1 ff ff	.long 4294963651	@ KIND_JUMP_TABLE32
ea f2 ff ff	.long 4294963946	@ KIND_JUMP_TABLE32
f9 f2 ff ff	.long 4294963961	@ KIND_JUMP_TABLE32
08 f3 ff ff	.long 4294963976	@ KIND_JUMP_TABLE32
35 fe ff ff	.long 4294966837	@ KIND_JUMP_TABLE32
35 fe ff ff	.long 4294966837	@ KIND_JUMP_TABLE32
17 f3 ff ff	.long 4294963991	@ KIND_JUMP_TABLE32
100004c60:	55	pushq	%rbp
100004c61:	48 89 e5	movq	%rsp, %rbp
100004c64:	48 81 ec 90 00 00 00	subq	$144, %rsp
100004c6b:	48 8d 3d 84 cd 00 00	leaq	52612(%rip), %rdi ## literal pool for: "/usr/appleinternal/bin/powermetrics_internal"
100004c72:	48 8d b5 70 ff ff ff	leaq	-144(%rbp), %rsi
100004c79:	e8 1e b8 00 00	callq	0x10001049c ## symbol stub for: _stat$INODE64
100004c7e:	83 f8 ff	cmpl	$-1, %eax
100004c81:	74 1a	je	0x100004c9d
100004c83:	48 8d 3d 38 d1 00 00	leaq	53560(%rip), %rdi ## literal pool for: "/var/db/disableAppleInternal"
100004c8a:	48 8d b5 70 ff ff ff	leaq	-144(%rbp), %rsi
100004c91:	e8 06 b8 00 00	callq	0x10001049c ## symbol stub for: _stat$INODE64
100004c96:	85 c0	testl	%eax, %eax
100004c98:	0f 95 c0	setne	%al
100004c9b:	eb 02	jmp	0x100004c9f
100004c9d:	31 c0	xorl	%eax, %eax
100004c9f:	48 81 c4 90 00 00 00	addq	$144, %rsp
100004ca6:	5d	popq	%rbp
100004ca7:	c3	retq
100004ca8:	55	pushq	%rbp
100004ca9:	48 89 e5	movq	%rsp, %rbp
100004cac:	53	pushq	%rbx
100004cad:	50	pushq	%rax
100004cae:	b8 08 10 00 00	movl	$4104, %eax
100004cb3:	e8 28 e3 ff ff	callq	0x100002fe0
100004cb8:	48 29 c4	subq	%rax, %rsp
100004cbb:	58	popq	%rax
100004cbc:	48 8b 05 a5 35 01 00	movq	79269(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100004cc3:	48 8b 00	movq	(%rax), %rax
100004cc6:	48 89 45 f0	movq	%rax, -16(%rbp)
100004cca:	e8 ad b6 00 00	callq	0x10001037c ## symbol stub for: _getpid
100004ccf:	48 8d 9d f0 ef ff ff	leaq	-4112(%rbp), %rbx
100004cd6:	89 c7	movl	%eax, %edi
100004cd8:	48 89 de	movq	%rbx, %rsi
100004cdb:	ba 00 10 00 00	movl	$4096, %edx
100004ce0:	e8 75 b7 00 00	callq	0x10001045a ## symbol stub for: _proc_pidpath
100004ce5:	48 8d 35 0a cd 00 00	leaq	52490(%rip), %rsi ## literal pool for: "/usr/appleinternal/bin/powermetrics_internal"
100004cec:	ba 2d 00 00 00	movl	$45, %edx
100004cf1:	48 89 df	movq	%rbx, %rdi
100004cf4:	e8 d1 b6 00 00	callq	0x1000103ca ## symbol stub for: _memcmp
100004cf9:	85 c0	testl	%eax, %eax
100004cfb:	0f 94 c0	sete	%al
100004cfe:	48 8b 0d 63 35 01 00	movq	79203(%rip), %rcx ## literal pool symbol address: ___stack_chk_guard
100004d05:	48 8b 09	movq	(%rcx), %rcx
100004d08:	48 3b 4d f0	cmpq	-16(%rbp), %rcx
100004d0c:	75 0a	jne	0x100004d18
100004d0e:	48 81 c4 08 10 00 00	addq	$4104, %rsp
100004d15:	5b	popq	%rbx
100004d16:	5d	popq	%rbp
100004d17:	c3	retq
100004d18:	e8 db b5 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100004d1d:	55	pushq	%rbp
100004d1e:	48 89 e5	movq	%rsp, %rbp
100004d21:	41 57	pushq	%r15
100004d23:	41 56	pushq	%r14
100004d25:	41 55	pushq	%r13
100004d27:	41 54	pushq	%r12
100004d29:	53	pushq	%rbx
100004d2a:	48 83 ec 18	subq	$24, %rsp
100004d2e:	89 7d d4	movl	%edi, -44(%rbp)
100004d31:	85 ff	testl	%edi, %edi
100004d33:	75 09	jne	0x100004d3e
100004d35:	48 8b 05 3c 35 01 00	movq	79164(%rip), %rax ## literal pool symbol address: ___stdoutp
100004d3c:	eb 07	jmp	0x100004d45
100004d3e:	48 8b 05 2b 35 01 00	movq	79147(%rip), %rax ## literal pool symbol address: ___stderrp
100004d45:	4c 8b 30	movq	(%rax), %r14
100004d48:	e8 35 b6 00 00	callq	0x100010382 ## symbol stub for: _getprogname
100004d4d:	48 8d 35 4c 1a 01 00	leaq	72268(%rip), %rsi
100004d54:	4c 89 f7	movq	%r14, %rdi
100004d57:	48 89 c2	movq	%rax, %rdx
100004d5a:	31 c0	xorl	%eax, %eax
100004d5c:	e8 f1 b5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100004d61:	48 8d 3d 78 1a 01 00	leaq	72312(%rip), %rdi
100004d68:	4c 89 f6	movq	%r14, %rsi
100004d6b:	e8 ee b5 00 00	callq	0x10001035e ## symbol stub for: _fputs
100004d70:	48 8d 3d 63 d2 00 00	leaq	53859(%rip), %rdi ## literal pool for: "The following samplers are supported by --samplers:\n\n"
100004d77:	be 35 00 00 00	movl	$53, %esi
100004d7c:	ba 01 00 00 00	movl	$1, %edx
100004d81:	4c 89 f1	movq	%r14, %rcx
100004d84:	e8 e1 b5 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100004d89:	4c 8d 25 90 41 01 00	leaq	82320(%rip), %r12
100004d90:	4c 8d 3d 79 d2 00 00	leaq	53881(%rip), %r15 ## literal pool for: "    %-15s   %s\n"
100004d97:	31 db	xorl	%ebx, %ebx
100004d99:	4a 8b 04 23	movq	(%rbx,%r12), %rax
100004d9d:	80 78 10 00	cmpb	$0, 16(%rax)
100004da1:	75 14	jne	0x100004db7
100004da3:	48 8b 10	movq	(%rax), %rdx
100004da6:	48 8b 48 08	movq	8(%rax), %rcx
100004daa:	4c 89 f7	movq	%r14, %rdi
100004dad:	4c 89 fe	movq	%r15, %rsi
100004db0:	31 c0	xorl	%eax, %eax
100004db2:	e8 9b b5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100004db7:	48 83 c3 08	addq	$8, %rbx
100004dbb:	48 83 fb 78	cmpq	$120, %rbx
100004dbf:	75 d8	jne	0x100004d99
100004dc1:	48 8d 3d aa c2 00 00	leaq	49834(%rip), %rdi ## literal pool for: "\n"
100004dc8:	4c 89 f6	movq	%r14, %rsi
100004dcb:	e8 8e b5 00 00	callq	0x10001035e ## symbol stub for: _fputs
100004dd0:	48 8d 3d 49 d2 00 00	leaq	53833(%rip), %rdi ## literal pool for: "and the following sampler groups are supported by --samplers:\n\n"
100004dd7:	be 3f 00 00 00	movl	$63, %esi
100004ddc:	ba 01 00 00 00	movl	$1, %edx
100004de1:	4c 89 f1	movq	%r14, %rcx
100004de4:	e8 81 b5 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100004de9:	31 c0	xorl	%eax, %eax
100004deb:	48 89 45 c8	movq	%rax, -56(%rbp)
100004def:	48 8d 1c 40	leaq	(%rax,%rax,2), %rbx
100004df3:	4c 8d 3d a6 41 01 00	leaq	82342(%rip), %r15
100004dfa:	49 8b 14 df	movq	(%r15,%rbx,8), %rdx
100004dfe:	4d 8b 64 df 08	movq	8(%r15,%rbx,8), %r12
100004e03:	4c 89 f7	movq	%r14, %rdi
100004e06:	48 8d 35 53 d2 00 00	leaq	53843(%rip), %rsi ## literal pool for: "    %-11s   "
100004e0d:	31 c0	xorl	%eax, %eax
100004e0f:	e8 3e b5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100004e14:	4d 8b 7c df 10	movq	16(%r15,%rbx,8), %r15
100004e19:	49 83 fc 02	cmpq	$2, %r12
100004e1d:	b8 01 00 00 00	movl	$1, %eax
100004e22:	4c 0f 42 e0	cmovbq	%rax, %r12
100004e26:	45 31 ed	xorl	%r13d, %r13d
100004e29:	4b 8b 04 ef	movq	(%r15,%r13,8), %rax
100004e2d:	80 78 10 00	cmpb	$0, 16(%rax)
100004e31:	75 23	jne	0x100004e56
100004e33:	4d 85 ed	testq	%r13, %r13
100004e36:	74 13	je	0x100004e4b
100004e38:	48 8d 3d 2e d2 00 00	leaq	53806(%rip), %rdi ## literal pool for: ","
100004e3f:	4c 89 f6	movq	%r14, %rsi
100004e42:	e8 17 b5 00 00	callq	0x10001035e ## symbol stub for: _fputs
100004e47:	4b 8b 04 ef	movq	(%r15,%r13,8), %rax
100004e4b:	48 8b 38	movq	(%rax), %rdi
100004e4e:	4c 89 f6	movq	%r14, %rsi
100004e51:	e8 08 b5 00 00	callq	0x10001035e ## symbol stub for: _fputs
100004e56:	49 ff c5	incq	%r13
100004e59:	4d 39 ec	cmpq	%r13, %r12
100004e5c:	75 cb	jne	0x100004e29
100004e5e:	48 8d 3d 0d c2 00 00	leaq	49677(%rip), %rdi ## literal pool for: "\n"
100004e65:	4c 89 f6	movq	%r14, %rsi
100004e68:	e8 f1 b4 00 00	callq	0x10001035e ## symbol stub for: _fputs
100004e6d:	48 8b 45 c8	movq	-56(%rbp), %rax
100004e71:	48 ff c0	incq	%rax
100004e74:	48 83 f8 02	cmpq	$2, %rax
100004e78:	0f 85 6d ff ff ff	jne	0x100004deb
100004e7e:	4c 89 f7	movq	%r14, %rdi
100004e81:	e8 c0 b4 00 00	callq	0x100010346 ## symbol stub for: _fflush
100004e86:	8b 45 d4	movl	-44(%rbp), %eax
100004e89:	48 83 c4 18	addq	$24, %rsp
100004e8d:	5b	popq	%rbx
100004e8e:	41 5c	popq	%r12
100004e90:	41 5d	popq	%r13
100004e92:	41 5e	popq	%r14
100004e94:	41 5f	popq	%r15
100004e96:	5d	popq	%rbp
100004e97:	c3	retq
100004e98:	55	pushq	%rbp
100004e99:	48 89 e5	movq	%rsp, %rbp
100004e9c:	53	pushq	%rbx
100004e9d:	50	pushq	%rax
100004e9e:	48 89 fb	movq	%rdi, %rbx
100004ea1:	48 8d 45 f0	leaq	-16(%rbp), %rax
100004ea5:	48 89 10	movq	%rdx, (%rax)
100004ea8:	48 89 c2	movq	%rax, %rdx
100004eab:	31 c9	xorl	%ecx, %ecx
100004ead:	45 31 c0	xorl	%r8d, %r8d
100004eb0:	e8 3b b6 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
100004eb5:	85 c0	testl	%eax, %eax
100004eb7:	75 07	jne	0x100004ec0
100004eb9:	48 83 c4 08	addq	$8, %rsp
100004ebd:	5b	popq	%rbx
100004ebe:	5d	popq	%rbp
100004ebf:	c3	retq
100004ec0:	48 89 df	movq	%rbx, %rdi
100004ec3:	e8 95 ad 00 00	callq	0x10000fc5d
100004ec8:	55	pushq	%rbp
100004ec9:	48 89 e5	movq	%rsp, %rbp
100004ecc:	5d	popq	%rbp
100004ecd:	c3	retq
100004ece:	55	pushq	%rbp
100004ecf:	48 89 e5	movq	%rsp, %rbp
100004ed2:	48 8b 3d 0f 91 01 00	movq	102671(%rip), %rdi
100004ed9:	e8 68 b4 00 00	callq	0x100010346 ## symbol stub for: _fflush
100004ede:	c6 05 c3 99 01 00 01	movb	$1, 104899(%rip)
100004ee5:	5d	popq	%rbp
100004ee6:	c3	retq
100004ee7:	55	pushq	%rbp
100004ee8:	48 89 e5	movq	%rsp, %rbp
100004eeb:	80 3d a6 90 01 00 00	cmpb	$0, 102566(%rip)
100004ef2:	75 0c	jne	0x100004f00
100004ef4:	c6 05 9f 90 01 00 01	movb	$1, 102559(%rip)
100004efb:	e8 12 00 00 00	callq	0x100004f12
100004f00:	31 ff	xorl	%edi, %edi
100004f02:	e8 33 b4 00 00	callq	0x10001033a ## symbol stub for: _exit
100004f07:	55	pushq	%rbp
100004f08:	48 89 e5	movq	%rsp, %rbp
100004f0b:	31 ff	xorl	%edi, %edi
100004f0d:	e8 28 b4 00 00	callq	0x10001033a ## symbol stub for: _exit
100004f12:	55	pushq	%rbp
100004f13:	48 89 e5	movq	%rsp, %rbp
100004f16:	41 57	pushq	%r15
100004f18:	41 56	pushq	%r14
100004f1a:	41 55	pushq	%r13
100004f1c:	41 54	pushq	%r12
100004f1e:	53	pushq	%rbx
100004f1f:	48 81 ec a8 00 00 00	subq	$168, %rsp
100004f26:	48 8b 05 3b 33 01 00	movq	78651(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100004f2d:	48 8b 00	movq	(%rax), %rax
100004f30:	48 89 45 d0	movq	%rax, -48(%rbp)
100004f34:	66 0f 57 c0	xorpd	%xmm0, %xmm0
100004f38:	66 0f 29 45 c0	movapd	%xmm0, -64(%rbp)
100004f3d:	66 0f 29 45 b0	movapd	%xmm0, -80(%rbp)
100004f42:	66 0f 29 45 a0	movapd	%xmm0, -96(%rbp)
100004f47:	66 0f 29 45 90	movapd	%xmm0, -112(%rbp)
100004f4c:	31 ff	xorl	%edi, %edi
100004f4e:	e8 b5 b5 00 00	callq	0x100010508 ## symbol stub for: _time
100004f53:	48 89 45 88	movq	%rax, -120(%rbp)
100004f57:	e8 44 b4 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
100004f5c:	8a 0d 36 90 01 00	movb	102454(%rip), %cl
100004f62:	84 c9	testb	%cl, %cl
100004f64:	75 71	jne	0x100004fd7
100004f66:	66 48 0f 6e c0	movq	%rax, %xmm0
100004f6b:	66 0f 70 c0 44	pshufd	$68, %xmm0, %xmm0
100004f70:	f3 0f 7e 0d 28 99 01 00	movq	104744(%rip), %xmm1
100004f78:	f3 0f 7e 15 40 99 01 00	movq	104768(%rip), %xmm2
100004f80:	66 0f 6c d1	punpcklqdq	%xmm1, %xmm2
100004f84:	66 0f fb c2	psubq	%xmm2, %xmm0
100004f88:	66 0f ef c9	pxor	%xmm1, %xmm1
100004f8c:	66 0f 3a 0e c8 33	pblendw	$51, %xmm0, %xmm1
100004f92:	66 0f eb 0d c6 17 01 00	por	71622(%rip), %xmm1
100004f9a:	f3 0f 7f 05 26 90 01 00	movdqu	%xmm0, 102438(%rip)
100004fa2:	66 0f 73 d0 20	psrlq	$32, %xmm0
100004fa7:	66 0f eb 05 c1 17 01 00	por	71617(%rip), %xmm0
100004faf:	66 0f 5c 05 c9 17 01 00	subpd	71625(%rip), %xmm0
100004fb7:	66 0f 58 c1	addpd	%xmm1, %xmm0
100004fbb:	f2 0f 12 0d dd 8f 01 00	movddup	102365(%rip), %xmm1
100004fc3:	66 0f 59 c8	mulpd	%xmm0, %xmm1
100004fc7:	66 0f 5e 0d c1 17 01 00	divpd	71617(%rip), %xmm1
100004fcf:	66 0f 11 0d e1 8f 01 00	movupd	%xmm1, 102369(%rip)
100004fd7:	48 89 05 e2 98 01 00	movq	%rax, 104674(%rip)
100004fde:	8b 05 a0 93 01 00	movl	103328(%rip), %eax
100004fe4:	85 c0	testl	%eax, %eax
100004fe6:	74 3d	je	0x100005025
100004fe8:	4c 8d 35 a1 93 01 00	leaq	103329(%rip), %r14
100004fef:	31 db	xorl	%ebx, %ebx
100004ff1:	49 8b 0e	movq	(%r14), %rcx
100004ff4:	80 79 10 00	cmpb	$0, 16(%rcx)
100004ff8:	74 0e	je	0x100005008
100004ffa:	48 8b 51 18	movq	24(%rcx), %rdx
100004ffe:	48 85 d2	testq	%rdx, %rdx
100005001:	74 0e	je	0x100005011
100005003:	80 3a 00	cmpb	$0, (%rdx)
100005006:	74 09	je	0x100005011
100005008:	ff 51 30	callq	*48(%rcx)
10000500b:	8b 05 73 93 01 00	movl	103283(%rip), %eax
100005011:	48 ff c3	incq	%rbx
100005014:	89 c1	movl	%eax, %ecx
100005016:	49 83 c6 08	addq	$8, %r14
10000501a:	48 39 cb	cmpq	%rcx, %rbx
10000501d:	72 d2	jb	0x100004ff1
10000501f:	8a 0d 73 8f 01 00	movb	102259(%rip), %cl
100005025:	84 c9	testb	%cl, %cl
100005027:	74 0d	je	0x100005036
100005029:	80 3d d9 8f 01 00 00	cmpb	$0, 102361(%rip)
100005030:	0f 84 53 02 00 00	je	0x100005289
100005036:	84 c9	testb	%cl, %cl
100005038:	74 0d	je	0x100005047
10000503a:	48 8d 1d 37 d1 00 00	leaq	53559(%rip), %rbx ## literal pool for: "Lifetime"
100005041:	66 0f 57 c0	xorpd	%xmm0, %xmm0
100005045:	eb 29	jmp	0x100005070
100005047:	80 3d 4c 8f 01 00 00	cmpb	$0, 102220(%rip)
10000504e:	74 11	je	0x100005061
100005050:	48 8d 1d 2a d1 00 00	leaq	53546(%rip), %rbx ## literal pool for: "Summary"
100005057:	f2 0f 10 05 61 8f 01 00	movsd	102241(%rip), %xmm0
10000505f:	eb 0f	jmp	0x100005070
100005061:	48 8d 1d 21 d1 00 00	leaq	53537(%rip), %rbx ## literal pool for: "Sampled"
100005068:	f2 0f 10 05 48 8f 01 00	movsd	102216(%rip), %xmm0
100005070:	8b 05 a2 8f 01 00	movl	102306(%rip), %eax
100005076:	85 c0	testl	%eax, %eax
100005078:	0f 84 42 01 00 00	je	0x1000051c0
10000507e:	83 f8 01	cmpl	$1, %eax
100005081:	0f 85 9e 01 00 00	jne	0x100005225
100005087:	66 0f 29 85 70 ff ff ff	movapd	%xmm0, -144(%rbp)
10000508f:	80 3d 03 8f 01 00 00	cmpb	$0, 102147(%rip)
100005096:	75 0e	jne	0x1000050a6
100005098:	48 8b 35 49 8f 01 00	movq	102217(%rip), %rsi
10000509f:	31 ff	xorl	%edi, %edi
1000050a1:	e8 b2 b2 00 00	callq	0x100010358 ## symbol stub for: _fputc
1000050a6:	48 8b 35 3b 8f 01 00	movq	102203(%rip), %rsi
1000050ad:	48 8d 3d 2c 29 01 00	leaq	76076(%rip), %rdi
1000050b4:	e8 a5 b2 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000050b9:	4c 8b 35 28 8f 01 00	movq	102184(%rip), %r14
1000050c0:	8a 05 d4 8e 01 00	movb	102100(%rip), %al
1000050c6:	24 01	andb	$1, %al
1000050c8:	48 8d 0d 84 c4 00 00	leaq	50308(%rip), %rcx ## literal pool for: "false"
1000050cf:	4c 8d 3d 78 c4 00 00	leaq	50296(%rip), %r15 ## literal pool for: "true"
1000050d6:	0a 05 bc 8e 01 00	orb	102076(%rip), %al
1000050dc:	4c 0f 45 f9	cmovneq	%rcx, %r15
1000050e0:	66 0f 28 85 70 ff ff ff	movapd	-144(%rbp), %xmm0
1000050e8:	f2 0f 59 05 30 16 01 00	mulsd	71216(%rip), %xmm0
1000050f0:	f2 4c 0f 2c e8	cvttsd2si	%xmm0, %r13
1000050f5:	4c 89 e8	movq	%r13, %rax
1000050f8:	f2 0f 5c 05 50 16 01 00	subsd	71248(%rip), %xmm0
100005100:	f2 48 0f 2c d8	cvttsd2si	%xmm0, %rbx
100005105:	48 c1 f8 3f	sarq	$63, %rax
100005109:	48 21 c3	andq	%rax, %rbx
10000510c:	48 83 3d 9c 97 01 00 ff	cmpq	$-1, 104348(%rip)
100005114:	0f 85 91 01 00 00	jne	0x1000052ab
10000511a:	49 09 dd	orq	%rbx, %r13
10000511d:	4c 8b 25 1c 8f 01 00	movq	102172(%rip), %r12
100005124:	48 83 3d 8c 97 01 00 ff	cmpq	$-1, 104332(%rip)
10000512c:	0f 85 91 01 00 00	jne	0x1000052c3
100005132:	48 8d 1d 57 93 01 00	leaq	103255(%rip), %rbx
100005139:	4c 8d 15 10 93 01 00	leaq	103184(%rip), %r10
100005140:	48 8d 35 4a d0 00 00	leaq	53322(%rip), %rsi ## literal pool for: "<key>is_delta</key><%s/>\n<key>elapsed_ns</key><integer>%llu</integer>\n<key>hw_model</key><string>%s</string>\n<key>smc_version</key><string>%s</string>\n<key>efi_version</key><string>%s</string>\n<key>kern_osversion</key><string>%s</string>\n<key>kern_bootargs</key><string>%s</string>\n<key>kern_boottime</key><integer>%ld</integer>\n"
100005147:	4c 8d 05 c2 92 01 00	leaq	103106(%rip), %r8
10000514e:	4c 89 f7	movq	%r14, %rdi
100005151:	4c 89 fa	movq	%r15, %rdx
100005154:	4c 89 e9	movq	%r13, %rcx
100005157:	4d 89 e1	movq	%r12, %r9
10000515a:	31 c0	xorl	%eax, %eax
10000515c:	ff 35 2e 97 01 00	pushq	104238(%rip)
100005162:	53	pushq	%rbx
100005163:	41 52	pushq	%r10
100005165:	ff 35 dd 8e 01 00	pushq	102109(%rip)
10000516b:	e8 e2 b1 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005170:	48 83 c4 20	addq	$32, %rsp
100005174:	48 8d 7d 88	leaq	-120(%rbp), %rdi
100005178:	48 8d b5 38 ff ff ff	leaq	-200(%rbp), %rsi
10000517f:	e8 04 b2 00 00	callq	0x100010388 ## symbol stub for: _gmtime_r
100005184:	48 8d 15 50 d1 00 00	leaq	53584(%rip), %rdx ## literal pool for: "%FT%TZ"
10000518b:	48 8d 7d 90	leaq	-112(%rbp), %rdi
10000518f:	be 40 00 00 00	movl	$64, %esi
100005194:	48 89 c1	movq	%rax, %rcx
100005197:	e8 2a b3 00 00	callq	0x1000104c6 ## symbol stub for: _strftime
10000519c:	48 85 c0	testq	%rax, %rax
10000519f:	0f 84 80 00 00 00	je	0x100005225
1000051a5:	48 8b 3d 3c 8e 01 00	movq	101948(%rip), %rdi
1000051ac:	48 8d 35 2f d1 00 00	leaq	53551(%rip), %rsi ## literal pool for: "<key>timestamp</key><date>%s</date>\n"
1000051b3:	48 8d 55 90	leaq	-112(%rbp), %rdx
1000051b7:	31 c0	xorl	%eax, %eax
1000051b9:	e8 94 b1 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000051be:	eb 65	jmp	0x100005225
1000051c0:	66 0f 29 85 70 ff ff ff	movapd	%xmm0, -144(%rbp)
1000051c8:	48 8d 7d 88	leaq	-120(%rbp), %rdi
1000051cc:	48 8d b5 38 ff ff ff	leaq	-200(%rbp), %rsi
1000051d3:	e8 c2 b1 00 00	callq	0x10001039a ## symbol stub for: _localtime_r
1000051d8:	48 8d 15 28 d1 00 00	leaq	53544(%rip), %rdx ## literal pool for: "%a %b %e %T %Y %z"
1000051df:	48 8d 7d 90	leaq	-112(%rbp), %rdi
1000051e3:	be 40 00 00 00	movl	$64, %esi
1000051e8:	48 89 c1	movq	%rax, %rcx
1000051eb:	e8 d6 b2 00 00	callq	0x1000104c6 ## symbol stub for: _strftime
1000051f0:	48 85 c0	testq	%rax, %rax
1000051f3:	75 04	jne	0x1000051f9
1000051f5:	c6 45 90 00	movb	$0, -112(%rbp)
1000051f9:	48 8b 3d e8 8d 01 00	movq	101864(%rip), %rdi
100005200:	66 0f 28 85 70 ff ff ff	movapd	-144(%rbp), %xmm0
100005208:	f2 0f 59 05 48 15 01 00	mulsd	70984(%rip), %xmm0
100005210:	48 8d 35 02 d1 00 00	leaq	53506(%rip), %rsi ## literal pool for: "\n\n*** %s system activity (%s) (%.2fms elapsed) ***\n\n"
100005217:	48 8d 4d 90	leaq	-112(%rbp), %rcx
10000521b:	48 89 da	movq	%rbx, %rdx
10000521e:	b0 01	movb	$1, %al
100005220:	e8 2d b1 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005225:	8b 05 59 91 01 00	movl	102745(%rip), %eax
10000522b:	85 c0	testl	%eax, %eax
10000522d:	74 37	je	0x100005266
10000522f:	4c 8d 35 5a 91 01 00	leaq	102746(%rip), %r14
100005236:	31 db	xorl	%ebx, %ebx
100005238:	49 8b 0e	movq	(%r14), %rcx
10000523b:	80 79 10 00	cmpb	$0, 16(%rcx)
10000523f:	74 0e	je	0x10000524f
100005241:	48 8b 51 18	movq	24(%rcx), %rdx
100005245:	48 85 d2	testq	%rdx, %rdx
100005248:	74 0e	je	0x100005258
10000524a:	80 3a 00	cmpb	$0, (%rdx)
10000524d:	74 09	je	0x100005258
10000524f:	ff 51 28	callq	*40(%rcx)
100005252:	8b 05 2c 91 01 00	movl	102700(%rip), %eax
100005258:	48 ff c3	incq	%rbx
10000525b:	89 c1	movl	%eax, %ecx
10000525d:	49 83 c6 08	addq	$8, %r14
100005261:	48 39 cb	cmpq	%rcx, %rbx
100005264:	72 d2	jb	0x100005238
100005266:	83 3d ab 8d 01 00 01	cmpl	$1, 101803(%rip)
10000526d:	75 13	jne	0x100005282
10000526f:	48 8b 35 72 8d 01 00	movq	101746(%rip), %rsi
100005276:	48 8d 3d 13 28 01 00	leaq	75795(%rip), %rdi
10000527d:	e8 dc b0 00 00	callq	0x10001035e ## symbol stub for: _fputs
100005282:	c6 05 10 8d 01 00 00	movb	$0, 101648(%rip)
100005289:	48 8b 05 d8 2f 01 00	movq	77784(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100005290:	48 8b 00	movq	(%rax), %rax
100005293:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100005297:	75 42	jne	0x1000052db
100005299:	48 81 c4 a8 00 00 00	addq	$168, %rsp
1000052a0:	5b	popq	%rbx
1000052a1:	41 5c	popq	%r12
1000052a3:	41 5d	popq	%r13
1000052a5:	41 5e	popq	%r14
1000052a7:	41 5f	popq	%r15
1000052a9:	5d	popq	%rbp
1000052aa:	c3	retq
1000052ab:	48 8d 3d fe 95 01 00	leaq	103934(%rip), %rdi
1000052b2:	48 8d 35 37 3d 01 00	leaq	81207(%rip), %rsi
1000052b9:	e8 70 b0 00 00	callq	0x10001032e ## symbol stub for: _dispatch_once
1000052be:	e9 57 fe ff ff	jmp	0x10000511a
1000052c3:	48 8d 3d ee 95 01 00	leaq	103918(%rip), %rdi
1000052ca:	48 8d 35 5f 3d 01 00	leaq	81247(%rip), %rsi
1000052d1:	e8 58 b0 00 00	callq	0x10001032e ## symbol stub for: _dispatch_once
1000052d6:	e9 57 fe ff ff	jmp	0x100005132
1000052db:	e8 18 b0 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
1000052e0:	55	pushq	%rbp
1000052e1:	48 89 e5	movq	%rsp, %rbp
1000052e4:	41 57	pushq	%r15
1000052e6:	41 56	pushq	%r14
1000052e8:	41 55	pushq	%r13
1000052ea:	41 54	pushq	%r12
1000052ec:	53	pushq	%rbx
1000052ed:	48 83 ec 18	subq	$24, %rsp
1000052f1:	4c 8d 75 d4	leaq	-44(%rbp), %r14
1000052f5:	41 c7 06 00 00 00 00	movl	$0, (%r14)
1000052fc:	48 8b 05 6d 30 01 00	movq	77933(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
100005303:	8b 18	movl	(%rax), %ebx
100005305:	48 8d 3d 01 bd 00 00	leaq	48385(%rip), %rdi ## literal pool for: "AppleSMC"
10000530c:	e8 ab af 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
100005311:	89 df	movl	%ebx, %edi
100005313:	48 89 c6	movq	%rax, %rsi
100005316:	4c 89 f2	movq	%r14, %rdx
100005319:	e8 98 af 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
10000531e:	85 c0	testl	%eax, %eax
100005320:	0f 85 a7 00 00 00	jne	0x1000053cd
100005326:	8b 7d d4	movl	-44(%rbp), %edi
100005329:	e8 a4 ae 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000532e:	85 c0	testl	%eax, %eax
100005330:	0f 84 8f 00 00 00	je	0x1000053c5
100005336:	41 89 c5	movl	%eax, %r13d
100005339:	48 8d 5d c8	leaq	-56(%rbp), %rbx
10000533d:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100005344:	89 c7	movl	%eax, %edi
100005346:	48 89 de	movq	%rbx, %rsi
100005349:	31 d2	xorl	%edx, %edx
10000534b:	31 c9	xorl	%ecx, %ecx
10000534d:	e8 aa ae 00 00	callq	0x1000101fc ## symbol stub for: _IORegistryEntryCreateCFProperties
100005352:	48 8b 3b	movq	(%rbx), %rdi
100005355:	48 85 ff	testq	%rdi, %rdi
100005358:	74 63	je	0x1000053bd
10000535a:	48 8d 35 ef 44 01 00	leaq	83183(%rip), %rsi ## Objc cfstring ref: @"smc-version"
100005361:	e8 12 ae 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
100005366:	48 85 c0	testq	%rax, %rax
100005369:	74 49	je	0x1000053b4
10000536b:	49 89 c6	movq	%rax, %r14
10000536e:	48 89 c7	movq	%rax, %rdi
100005371:	e8 32 ae 00 00	callq	0x1000101a8 ## symbol stub for: _CFStringGetLength
100005376:	49 89 c4	movq	%rax, %r12
100005379:	49 ff c4	incq	%r12
10000537c:	44 89 e7	movl	%r12d, %edi
10000537f:	e8 40 b0 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
100005384:	48 85 c0	testq	%rax, %rax
100005387:	74 2b	je	0x1000053b4
100005389:	49 89 c7	movq	%rax, %r15
10000538c:	4c 89 f7	movq	%r14, %rdi
10000538f:	48 89 c6	movq	%rax, %rsi
100005392:	4c 89 e2	movq	%r12, %rdx
100005395:	b9 00 06 00 00	movl	$1536, %ecx
10000539a:	e8 fd ad 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
10000539f:	84 c0	testb	%al, %al
1000053a1:	74 09	je	0x1000053ac
1000053a3:	4c 89 3d 96 8c 01 00	movq	%r15, 101526(%rip)
1000053aa:	eb 08	jmp	0x1000053b4
1000053ac:	4c 89 ff	movq	%r15, %rdi
1000053af:	e8 b0 af 00 00	callq	0x100010364 ## symbol stub for: _free
1000053b4:	48 8b 7d c8	movq	-56(%rbp), %rdi
1000053b8:	e8 d3 ad 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
1000053bd:	44 89 ef	movl	%r13d, %edi
1000053c0:	e8 1f ae 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000053c5:	8b 7d d4	movl	-44(%rbp), %edi
1000053c8:	e8 17 ae 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
1000053cd:	48 83 c4 18	addq	$24, %rsp
1000053d1:	5b	popq	%rbx
1000053d2:	41 5c	popq	%r12
1000053d4:	41 5d	popq	%r13
1000053d6:	41 5e	popq	%r14
1000053d8:	41 5f	popq	%r15
1000053da:	5d	popq	%rbp
1000053db:	c3	retq
1000053dc:	55	pushq	%rbp
1000053dd:	48 89 e5	movq	%rsp, %rbp
1000053e0:	41 57	pushq	%r15
1000053e2:	41 56	pushq	%r14
1000053e4:	41 55	pushq	%r13
1000053e6:	41 54	pushq	%r12
1000053e8:	53	pushq	%rbx
1000053e9:	50	pushq	%rax
1000053ea:	48 8b 05 7f 2f 01 00	movq	77695(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
1000053f1:	8b 38	movl	(%rax), %edi
1000053f3:	48 8d 35 57 cd 00 00	leaq	52567(%rip), %rsi ## literal pool for: "IODeviceTree:/rom"
1000053fa:	e8 09 ae 00 00	callq	0x100010208 ## symbol stub for: _IORegistryEntryFromPath
1000053ff:	85 c0	testl	%eax, %eax
100005401:	0f 84 20 01 00 00	je	0x100005527
100005407:	41 89 c5	movl	%eax, %r13d
10000540a:	48 8d 5d d0	leaq	-48(%rbp), %rbx
10000540e:	48 c7 03 00 00 00 00	movq	$0, (%rbx)
100005415:	89 c7	movl	%eax, %edi
100005417:	48 89 de	movq	%rbx, %rsi
10000541a:	31 d2	xorl	%edx, %edx
10000541c:	31 c9	xorl	%ecx, %ecx
10000541e:	e8 d9 ad 00 00	callq	0x1000101fc ## symbol stub for: _IORegistryEntryCreateCFProperties
100005423:	48 8b 3b	movq	(%rbx), %rdi
100005426:	48 85 ff	testq	%rdi, %rdi
100005429:	0f 84 f0 00 00 00	je	0x10000551f
10000542f:	48 8d 35 3a 44 01 00	leaq	83002(%rip), %rsi ## Objc cfstring ref: @"version"
100005436:	e8 3d ad 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000543b:	48 89 c3	movq	%rax, %rbx
10000543e:	48 8b 7d d0	movq	-48(%rbp), %rdi
100005442:	48 8d 35 47 44 01 00	leaq	83015(%rip), %rsi ## Objc cfstring ref: @"vendor"
100005449:	e8 2a ad 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000544e:	48 85 db	testq	%rbx, %rbx
100005451:	0f 84 bf 00 00 00	je	0x100005516
100005457:	49 89 c4	movq	%rax, %r12
10000545a:	48 89 df	movq	%rbx, %rdi
10000545d:	e8 04 ad 00 00	callq	0x100010166 ## symbol stub for: _CFDataGetLength
100005462:	49 89 c6	movq	%rax, %r14
100005465:	44 89 f7	movl	%r14d, %edi
100005468:	e8 57 af 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000546d:	48 85 c0	testq	%rax, %rax
100005470:	0f 84 a0 00 00 00	je	0x100005516
100005476:	49 89 c7	movq	%rax, %r15
100005479:	48 89 df	movq	%rbx, %rdi
10000547c:	e8 d9 ac 00 00	callq	0x10001015a ## symbol stub for: _CFDataGetBytePtr
100005481:	4c 89 ff	movq	%r15, %rdi
100005484:	48 89 c6	movq	%rax, %rsi
100005487:	4c 89 f2	movq	%r14, %rdx
10000548a:	e8 41 af 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000548f:	4c 89 3d b2 8b 01 00	movq	%r15, 101298(%rip)
100005496:	4d 85 e4	testq	%r12, %r12
100005499:	74 7b	je	0x100005516
10000549b:	4c 89 e7	movq	%r12, %rdi
10000549e:	e8 b7 ac 00 00	callq	0x10001015a ## symbol stub for: _CFDataGetBytePtr
1000054a3:	48 8d 3d c8 cc 00 00	leaq	52424(%rip), %rdi ## literal pool for: "Apple"
1000054aa:	ba 05 00 00 00	movl	$5, %edx
1000054af:	48 89 c6	movq	%rax, %rsi
1000054b2:	e8 1b b0 00 00	callq	0x1000104d2 ## symbol stub for: _strncmp
1000054b7:	85 c0	testl	%eax, %eax
1000054b9:	75 5b	jne	0x100005516
1000054bb:	4d 85 f6	testq	%r14, %r14
1000054be:	7e 56	jle	0x100005516
1000054c0:	31 c9	xorl	%ecx, %ecx
1000054c2:	31 d2	xorl	%edx, %edx
1000054c4:	41 80 3c 0f 2e	cmpb	$46, (%r15,%rcx)
1000054c9:	75 1c	jne	0x1000054e7
1000054cb:	48 8d 72 01	leaq	1(%rdx), %rsi
1000054cf:	48 85 d2	testq	%rdx, %rdx
1000054d2:	48 0f 44 f9	cmoveq	%rcx, %rdi
1000054d6:	48 83 fe 02	cmpq	$2, %rsi
1000054da:	48 0f 44 c1	cmoveq	%rcx, %rax
1000054de:	48 83 fe 04	cmpq	$4, %rsi
1000054e2:	74 13	je	0x1000054f7
1000054e4:	48 89 f2	movq	%rsi, %rdx
1000054e7:	48 ff c1	incq	%rcx
1000054ea:	49 39 ce	cmpq	%rcx, %r14
1000054ed:	75 d5	jne	0x1000054c4
1000054ef:	48 83 fa 04	cmpq	$4, %rdx
1000054f3:	7d 0a	jge	0x1000054ff
1000054f5:	eb 1f	jmp	0x100005516
1000054f7:	41 c6 04 0f 00	movb	$0, (%r15,%rcx)
1000054fc:	49 89 ce	movq	%rcx, %r14
1000054ff:	4c 01 ff	addq	%r15, %rdi
100005502:	49 01 c7	addq	%rax, %r15
100005505:	49 29 c6	subq	%rax, %r14
100005508:	49 ff c6	incq	%r14
10000550b:	4c 89 fe	movq	%r15, %rsi
10000550e:	4c 89 f2	movq	%r14, %rdx
100005511:	e8 c0 ae 00 00	callq	0x1000103d6 ## symbol stub for: _memmove
100005516:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000551a:	e8 71 ac 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000551f:	44 89 ef	movl	%r13d, %edi
100005522:	e8 bd ac 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
100005527:	48 83 c4 08	addq	$8, %rsp
10000552b:	5b	popq	%rbx
10000552c:	41 5c	popq	%r12
10000552e:	41 5d	popq	%r13
100005530:	41 5e	popq	%r14
100005532:	41 5f	popq	%r15
100005534:	5d	popq	%rbp
100005535:	c3	retq
100005536:	55	pushq	%rbp
100005537:	48 89 e5	movq	%rsp, %rbp
10000553a:	41 57	pushq	%r15
10000553c:	41 56	pushq	%r14
10000553e:	53	pushq	%rbx
10000553f:	48 83 ec 18	subq	$24, %rsp
100005543:	48 8d 3d 86 93 01 00	leaq	103302(%rip), %rdi
10000554a:	e8 3d 71 00 00	callq	0x10000c68c
10000554f:	48 8d 3d 8a 93 01 00	leaq	103306(%rip), %rdi
100005556:	e8 31 71 00 00	callq	0x10000c68c
10000555b:	48 8d 3d 8e 93 01 00	leaq	103310(%rip), %rdi
100005562:	e8 25 71 00 00	callq	0x10000c68c
100005567:	48 8d 3d 92 93 01 00	leaq	103314(%rip), %rdi
10000556e:	e8 19 71 00 00	callq	0x10000c68c
100005573:	48 8d 3d 96 93 01 00	leaq	103318(%rip), %rdi
10000557a:	e8 0d 71 00 00	callq	0x10000c68c
10000557f:	48 8d 1d 6a 8a 01 00	leaq	100970(%rip), %rbx
100005586:	80 7b 40 00	cmpb	$0, 64(%rbx)
10000558a:	74 3c	je	0x1000055c8
10000558c:	48 8d 3d 8d 93 01 00	leaq	103309(%rip), %rdi
100005593:	e8 5c 72 00 00	callq	0x10000c7f4
100005598:	48 8d 3d 91 93 01 00	leaq	103313(%rip), %rdi
10000559f:	e8 50 72 00 00	callq	0x10000c7f4
1000055a4:	48 8d 3d 95 93 01 00	leaq	103317(%rip), %rdi
1000055ab:	e8 44 72 00 00	callq	0x10000c7f4
1000055b0:	48 8d 3d 99 93 01 00	leaq	103321(%rip), %rdi
1000055b7:	e8 38 72 00 00	callq	0x10000c7f4
1000055bc:	48 8d 3d 9d 93 01 00	leaq	103325(%rip), %rdi
1000055c3:	e8 90 73 00 00	callq	0x10000c958
1000055c8:	48 63 43 2c	movslq	44(%rbx), %rax
1000055cc:	48 83 f8 05	cmpq	$5, %rax
1000055d0:	0f 83 c2 00 00 00	jae	0x100005698
1000055d6:	48 8d 0d bb 3b 01 00	leaq	80827(%rip), %rcx
1000055dd:	48 8b 04 c1	movq	(%rcx,%rax,8), %rax
1000055e1:	48 89 05 e8 7b 08 00	movq	%rax, 556008(%rip)
1000055e8:	8a 43 42	movb	66(%rbx), %al
1000055eb:	31 c9	xorl	%ecx, %ecx
1000055ed:	0a 43 45	orb	69(%rbx), %al
1000055f0:	0f 95 c1	setne	%cl
1000055f3:	c1 e1 03	shll	$3, %ecx
1000055f6:	48 83 c9 f7	orq	$-9, %rcx
1000055fa:	48 89 cf	movq	%rcx, %rdi
1000055fd:	48 81 e7 7f ff ff ff	andq	$-129, %rdi
100005604:	80 7b 3b 00	cmpb	$0, 59(%rbx)
100005608:	48 0f 45 f9	cmovneq	%rcx, %rdi
10000560c:	e8 0d ae 00 00	callq	0x10001041e ## symbol stub for: _pm_samples_init
100005611:	48 89 05 58 93 01 00	movq	%rax, 103256(%rip)
100005618:	48 8d 4d dc	leaq	-36(%rbp), %rcx
10000561c:	48 89 48 18	movq	%rcx, 24(%rax)
100005620:	e8 87 ad 00 00	callq	0x1000103ac ## symbol stub for: _mach_host_self
100005625:	89 05 4d 93 01 00	movl	%eax, 103245(%rip)
10000562b:	f2 48 0f 2a 43 08	cvtsi2sdq	8(%rbx), %xmm0
100005631:	f2 0f 5e 05 1f 11 01 00	divsd	69919(%rip), %xmm0
100005639:	f2 0f 11 45 e0	movsd	%xmm0, -32(%rbp)
10000563e:	31 db	xorl	%ebx, %ebx
100005640:	4c 8d 35 79 24 01 00	leaq	74873(%rip), %r14
100005647:	4c 8d 3d 32 93 01 00	leaq	103218(%rip), %r15
10000564e:	f2 42 0f 10 0c 33	movsd	(%rbx,%r14), %xmm1
100005654:	0f 14 0d a5 10 01 00	unpcklps	69797(%rip), %xmm1
10000565b:	66 0f 5c 0d ad 10 01 00	subpd	69805(%rip), %xmm1
100005663:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100005667:	f2 0f 5e 4d e0	divsd	-32(%rbp), %xmm1
10000566c:	f2 0f 10 05 34 24 01 00	movsd	74804(%rip), %xmm0
100005674:	f2 0f 5e c1	divsd	%xmm1, %xmm0
100005678:	e8 c3 ac 00 00	callq	0x100010340 ## symbol stub for: _exp
10000567d:	f2 42 0f 11 04 3b	movsd	%xmm0, (%rbx,%r15)
100005683:	48 83 c3 08	addq	$8, %rbx
100005687:	48 83 fb 28	cmpq	$40, %rbx
10000568b:	75 c1	jne	0x10000564e
10000568d:	48 83 c4 18	addq	$24, %rsp
100005691:	5b	popq	%rbx
100005692:	41 5e	popq	%r14
100005694:	41 5f	popq	%r15
100005696:	5d	popq	%rbp
100005697:	c3	retq
100005698:	e8 f3 a5 00 00	callq	0x10000fc90
10000569d:	55	pushq	%rbp
10000569e:	48 89 e5	movq	%rsp, %rbp
1000056a1:	41 57	pushq	%r15
1000056a3:	41 56	pushq	%r14
1000056a5:	41 55	pushq	%r13
1000056a7:	41 54	pushq	%r12
1000056a9:	53	pushq	%rbx
1000056aa:	48 81 ec 18 03 00 00	subq	$792, %rsp
1000056b1:	48 8b 05 b0 2b 01 00	movq	76720(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000056b8:	48 8b 00	movq	(%rax), %rax
1000056bb:	48 89 45 d0	movq	%rax, -48(%rbp)
1000056bf:	48 8d 9d 68 fd ff ff	leaq	-664(%rbp), %rbx
1000056c6:	be 08 02 00 00	movl	$520, %esi
1000056cb:	48 89 df	movq	%rbx, %rdi
1000056ce:	e8 0d ac 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
1000056d3:	c7 03 fe ff ff ff	movl	$4294967294, (%rbx)
1000056d9:	48 8d bd 6c fd ff ff	leaq	-660(%rbp), %rdi
1000056e0:	48 8d 35 b4 cc 00 00	leaq	52404(%rip), %rsi ## literal pool for: "ALL_TASKS"
1000056e7:	ba 0a 00 00 00	movl	$10, %edx
1000056ec:	b9 80 00 00 00	movl	$128, %ecx
1000056f1:	e8 0e ac 00 00	callq	0x100010304 ## symbol stub for: ___strlcpy_chk
1000056f6:	48 8d 1d f3 88 01 00	leaq	100595(%rip), %rbx
1000056fd:	8b 43 28	movl	40(%rbx), %eax
100005700:	83 f8 01	cmpl	$1, %eax
100005703:	74 48	je	0x10000574d
100005705:	85 c0	testl	%eax, %eax
100005707:	0f 85 a4 01 00 00	jne	0x1000058b1
10000570d:	4c 8d 35 84 88 01 00	leaq	100484(%rip), %r14
100005714:	49 8b 76 50	movq	80(%r14), %rsi
100005718:	48 8d 3d 86 cc 00 00	leaq	52358(%rip), %rdi ## literal pool for: "*** Running tasks ***\n\n"
10000571f:	e8 3a ac 00 00	callq	0x10001035e ## symbol stub for: _fputs
100005724:	41 80 7e 02 00	cmpb	$0, 2(%r14)
100005729:	49 8b 7e 50	movq	80(%r14), %rdi
10000572d:	74 3f	je	0x10000576e
10000572f:	48 8d 35 f0 cc 00 00	leaq	52464(%rip), %rsi ## literal pool for: "%-32s%s ID     CPU ms/s  samp ms/s [total]     User%%  Deadlines/s [total] (<2 ms, 2-5 ms)  Wakeups/s [total] (Intr, Pkg idle)  Dead"
100005736:	48 8d 15 98 cc 00 00	leaq	52376(%rip), %rdx ## literal pool for: "Name"
10000573d:	48 8d 0d 96 cc 00 00	leaq	52374(%rip), %rcx ## literal pool for: "  "
100005744:	31 c0	xorl	%eax, %eax
100005746:	e8 07 ac 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000574b:	eb 69	jmp	0x1000057b6
10000574d:	80 7b 40 00	cmpb	$0, 64(%rbx)
100005751:	48 8d 05 40 88 01 00	leaq	100416(%rip), %rax
100005758:	48 8b 70 50	movq	80(%rax), %rsi
10000575c:	0f 84 43 01 00 00	je	0x1000058a5
100005762:	48 8d 3d 18 ce 00 00	leaq	52760(%rip), %rdi ## literal pool for: "<key>coalitions</key>\n<array>\n"
100005769:	e9 3e 01 00 00	jmp	0x1000058ac
10000576e:	48 8d 35 48 cc 00 00	leaq	52296(%rip), %rsi ## literal pool for: "%-32s%s ID     CPU ms/s"
100005775:	48 8d 15 59 cc 00 00	leaq	52313(%rip), %rdx ## literal pool for: "Name"
10000577c:	48 8d 0d 57 cc 00 00	leaq	52311(%rip), %rcx ## literal pool for: "  "
100005783:	31 c0	xorl	%eax, %eax
100005785:	e8 c8 ab 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000578a:	80 7b 46 00	cmpb	$0, 70(%rbx)
10000578e:	74 16	je	0x1000057a6
100005790:	41 80 3e 00	cmpb	$0, (%r14)
100005794:	75 10	jne	0x1000057a6
100005796:	49 8b 76 50	movq	80(%r14), %rsi
10000579a:	48 8d 3d 3c cc 00 00	leaq	52284(%rip), %rdi ## literal pool for: "  samp ms/s"
1000057a1:	e8 b8 ab 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000057a6:	49 8b 76 50	movq	80(%r14), %rsi
1000057aa:	48 8d 3d 38 cc 00 00	leaq	52280(%rip), %rdi ## literal pool for: "  User%  Deadlines (<2 ms, 2-5 ms)  Wakeups (Intr, Pkg idle)"
1000057b1:	e8 a8 ab 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000057b6:	80 7b 3b 00	cmpb	$0, 59(%rbx)
1000057ba:	74 10	je	0x1000057cc
1000057bc:	49 8b 76 50	movq	80(%r14), %rsi
1000057c0:	48 8d 3d e4 cc 00 00	leaq	52452(%rip), %rdi ## literal pool for: "  SFI ms/s"
1000057c7:	e8 92 ab 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000057cc:	80 7b 39 00	cmpb	$0, 57(%rbx)
1000057d0:	74 10	je	0x1000057e2
1000057d2:	49 8b 76 50	movq	80(%r14), %rsi
1000057d6:	48 8d 3d d9 cc 00 00	leaq	52441(%rip), %rdi ## literal pool for: "  QoS (L/T)"
1000057dd:	e8 7c ab 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000057e2:	80 7b 3d 00	cmpb	$0, 61(%rbx)
1000057e6:	74 10	je	0x1000057f8
1000057e8:	49 8b 76 50	movq	80(%r14), %rsi
1000057ec:	48 8d 3d cf cc 00 00	leaq	52431(%rip), %rdi ## literal pool for: "  RPID  PPID"
1000057f3:	e8 66 ab 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000057f8:	80 7b 41 00	cmpb	$0, 65(%rbx)
1000057fc:	74 1a	je	0x100005818
1000057fe:	49 8b 4e 50	movq	80(%r14), %rcx
100005802:	48 8d 3d c6 cc 00 00	leaq	52422(%rip), %rdi ## literal pool for: "  Bytes Read  Bytes Written  Pageins"
100005809:	be 24 00 00 00	movl	$36, %esi
10000580e:	ba 01 00 00 00	movl	$1, %edx
100005813:	e8 52 ab 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100005818:	80 7b 42 00	cmpb	$0, 66(%rbx)
10000581c:	74 1a	je	0x100005838
10000581e:	49 8b 4e 50	movq	80(%r14), %rcx
100005822:	48 8d 3d cb cc 00 00	leaq	52427(%rip), %rdi ## literal pool for: "  Packets (In/Out)       Bytes (In/Out)      "
100005829:	be 2d 00 00 00	movl	$45, %esi
10000582e:	ba 01 00 00 00	movl	$1, %edx
100005833:	e8 32 ab 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100005838:	80 7b 43 00	cmpb	$0, 67(%rbx)
10000583c:	74 1a	je	0x100005858
10000583e:	49 8b 4e 50	movq	80(%r14), %rcx
100005842:	48 8d 3d d9 cc 00 00	leaq	52441(%rip), %rdi ## literal pool for: "  GPU ms/s"
100005849:	be 0a 00 00 00	movl	$10, %esi
10000584e:	ba 01 00 00 00	movl	$1, %edx
100005853:	e8 12 ab 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100005858:	80 7b 44 00	cmpb	$0, 68(%rbx)
10000585c:	74 1a	je	0x100005878
10000585e:	49 8b 4e 50	movq	80(%r14), %rcx
100005862:	48 8d 3d c4 cc 00 00	leaq	52420(%rip), %rdi ## literal pool for: " QOS (ms/s) Disabled Maint   BG      Util   Default  U-Init  U-Intr"
100005869:	be 43 00 00 00	movl	$67, %esi
10000586e:	ba 01 00 00 00	movl	$1, %edx
100005873:	e8 f2 aa 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100005878:	80 7b 45 00	cmpb	$0, 69(%rbx)
10000587c:	74 1a	je	0x100005898
10000587e:	49 8b 4e 50	movq	80(%r14), %rcx
100005882:	48 8d 3d e8 cc 00 00	leaq	52456(%rip), %rdi ## literal pool for: "  Energy Impact"
100005889:	be 0f 00 00 00	movl	$15, %esi
10000588e:	ba 01 00 00 00	movl	$1, %edx
100005893:	e8 d2 aa 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100005898:	49 8b 76 50	movq	80(%r14), %rsi
10000589c:	48 8d 3d cf b7 00 00	leaq	47055(%rip), %rdi ## literal pool for: "\n"
1000058a3:	eb 07	jmp	0x1000058ac
1000058a5:	48 8d 3d f4 cc 00 00	leaq	52468(%rip), %rdi ## literal pool for: "<key>tasks</key>\n<array>\n"
1000058ac:	e8 ad aa 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000058b1:	80 7b 40 00	cmpb	$0, 64(%rbx)
1000058b5:	0f 84 76 07 00 00	je	0x100006031
1000058bb:	83 3d 6a 90 01 00 00	cmpl	$0, 102506(%rip)
1000058c2:	0f 84 b1 07 00 00	je	0x100006079
1000058c8:	4c 8d 3d 51 90 01 00	leaq	102481(%rip), %r15
1000058cf:	4c 8d 25 c2 86 01 00	leaq	100034(%rip), %r12
1000058d6:	45 31 f6	xorl	%r14d, %r14d
1000058d9:	4c 89 ff	movq	%r15, %rdi
1000058dc:	44 89 f6	movl	%r14d, %esi
1000058df:	e8 74 6f 00 00	callq	0x10000c858
1000058e4:	48 89 c3	movq	%rax, %rbx
1000058e7:	48 8b 80 14 01 00 00	movq	276(%rax), %rax
1000058ee:	f2 0f 10 ab f8 01 00 00	movsd	504(%rbx), %xmm5
1000058f6:	66 0f 28 1d 02 0e 01 00	movapd	69122(%rip), %xmm3
1000058fe:	0f 14 eb	unpcklps	%xmm3, %xmm5
100005901:	66 0f 28 25 07 0e 01 00	movapd	69127(%rip), %xmm4
100005909:	66 0f 5c ec	subpd	%xmm4, %xmm5
10000590d:	66 0f 7c ed	haddpd	%xmm5, %xmm5
100005911:	f2 41 0f 10 4c 24 08	movsd	8(%r12), %xmm1
100005918:	48 03 83 0c 01 00 00	addq	268(%rbx), %rax
10000591f:	66 48 0f 6e c0	movq	%rax, %xmm0
100005924:	66 0f 62 c3	punpckldq	%xmm3, %xmm0
100005928:	66 0f 5c c4	subpd	%xmm4, %xmm0
10000592c:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100005930:	f2 0f 59 e9	mulsd	%xmm1, %xmm5
100005934:	f2 0f 5e 2d e4 0d 01 00	divsd	69092(%rip), %xmm5
10000593c:	f2 0f 59 c1	mulsd	%xmm1, %xmm0
100005940:	66 44 0f 28 cd	movapd	%xmm5, %xmm9
100005945:	f2 44 0f 59 0d 62 21 01 00	mulsd	74082(%rip), %xmm9
10000594e:	41 0f b6 44 24 02	movzbl	2(%r12), %eax
100005954:	f2 41 0f 10 54 c4 30	movsd	48(%r12,%rax,8), %xmm2
10000595b:	0f 14 d3	unpcklps	%xmm3, %xmm2
10000595e:	66 0f 5c d4	subpd	%xmm4, %xmm2
100005962:	66 0f 7c d2	haddpd	%xmm2, %xmm2
100005966:	f2 0f 59 d1	mulsd	%xmm1, %xmm2
10000596a:	66 44 0f 28 d0	movapd	%xmm0, %xmm10
10000596f:	f2 44 0f 5e d2	divsd	%xmm2, %xmm10
100005974:	f2 44 0f 59 15 db 0d 01 00	mulsd	69083(%rip), %xmm10
10000597d:	66 0f 2e 05 33 21 01 00	ucomisd	74035(%rip), %xmm0
100005985:	75 06	jne	0x10000598d
100005987:	0f 8b 92 06 00 00	jnp	0x10000601f
10000598d:	66 0f 2e 2d 23 21 01 00	ucomisd	74019(%rip), %xmm5
100005995:	75 06	jne	0x10000599d
100005997:	0f 8b 82 06 00 00	jnp	0x10000601f
10000599d:	48 8b 93 1c 01 00 00	movq	284(%rbx), %rdx
1000059a4:	66 48 0f 6e fa	movq	%rdx, %xmm7
1000059a9:	66 44 0f 6f 05 4e 0d 01 00	movdqa	68942(%rip), %xmm8
1000059b2:	66 41 0f 62 f8	punpckldq	%xmm8, %xmm7
1000059b7:	66 44 0f 28 1d 50 0d 01 00	movapd	68944(%rip), %xmm11
1000059c0:	66 41 0f 5c fb	subpd	%xmm11, %xmm7
1000059c5:	66 0f 7c ff	haddpd	%xmm7, %xmm7
1000059c9:	4c 8b ab 24 01 00 00	movq	292(%rbx), %r13
1000059d0:	66 49 0f 6e cd	movq	%r13, %xmm1
1000059d5:	66 41 0f 62 c8	punpckldq	%xmm8, %xmm1
1000059da:	66 41 0f 5c cb	subpd	%xmm11, %xmm1
1000059df:	66 0f 7c c9	haddpd	%xmm1, %xmm1
1000059e3:	4c 8b 3b	movq	(%rbx), %r15
1000059e6:	48 8d 8b 88 00 00 00	leaq	136(%rbx), %rcx
1000059ed:	66 0f 28 d0	movapd	%xmm0, %xmm2
1000059f1:	f3 0f 7e a3 c0 01 00 00	movq	448(%rbx), %xmm4
1000059f9:	66 41 0f 62 e0	punpckldq	%xmm8, %xmm4
1000059fe:	66 41 0f 5c e3	subpd	%xmm11, %xmm4
100005a03:	66 0f 7c e4	haddpd	%xmm4, %xmm4
100005a07:	f2 41 0f 5e d1	divsd	%xmm9, %xmm2
100005a0c:	f2 0f 5e fd	divsd	%xmm5, %xmm7
100005a10:	f3 0f 7e b3 c8 01 00 00	movq	456(%rbx), %xmm6
100005a18:	66 41 0f 62 f0	punpckldq	%xmm8, %xmm6
100005a1d:	66 41 0f 5c f3	subpd	%xmm11, %xmm6
100005a22:	66 0f 7c f6	haddpd	%xmm6, %xmm6
100005a26:	f2 0f 5e cd	divsd	%xmm5, %xmm1
100005a2a:	f2 0f 5e e5	divsd	%xmm5, %xmm4
100005a2e:	f3 0f 7e 9b d8 01 00 00	movq	472(%rbx), %xmm3
100005a36:	66 41 0f 62 d8	punpckldq	%xmm8, %xmm3
100005a3b:	66 41 0f 5c db	subpd	%xmm11, %xmm3
100005a40:	66 0f 7c db	haddpd	%xmm3, %xmm3
100005a44:	f2 0f 5e f5	divsd	%xmm5, %xmm6
100005a48:	f2 41 0f 5e d9	divsd	%xmm9, %xmm3
100005a4d:	48 8d 05 9c 85 01 00	leaq	99740(%rip), %rax
100005a54:	8b 40 28	movl	40(%rax), %eax
100005a57:	83 f8 01	cmpl	$1, %eax
100005a5a:	0f 84 c9 00 00 00	je	0x100005b29
100005a60:	85 c0	testl	%eax, %eax
100005a62:	0f 85 d4 04 00 00	jne	0x100005f3c
100005a68:	66 0f 29 95 d0 fc ff ff	movapd	%xmm2, -816(%rbp)
100005a70:	48 89 95 60 fd ff ff	movq	%rdx, -672(%rbp)
100005a77:	66 0f 29 85 c0 fc ff ff	movapd	%xmm0, -832(%rbp)
100005a7f:	66 44 0f 29 95 30 fd ff ff	movapd	%xmm10, -720(%rbp)
100005a88:	66 0f 29 8d 20 fd ff ff	movapd	%xmm1, -736(%rbp)
100005a90:	66 0f 29 bd 40 fd ff ff	movapd	%xmm7, -704(%rbp)
100005a98:	66 0f 29 b5 00 fd ff ff	movapd	%xmm6, -768(%rbp)
100005aa0:	66 0f 29 a5 f0 fc ff ff	movapd	%xmm4, -784(%rbp)
100005aa8:	66 0f 29 9d 10 fd ff ff	movapd	%xmm3, -752(%rbp)
100005ab0:	48 89 8d 58 fd ff ff	movq	%rcx, -680(%rbp)
100005ab7:	66 0f 29 ad e0 fc ff ff	movapd	%xmm5, -800(%rbp)
100005abf:	48 83 c3 08	addq	$8, %rbx
100005ac3:	ba 21 00 00 00	movl	$33, %edx
100005ac8:	b9 21 00 00 00	movl	$33, %ecx
100005acd:	4c 8d a5 70 ff ff ff	leaq	-144(%rbp), %r12
100005ad4:	4c 89 e7	movq	%r12, %rdi
100005ad7:	48 89 de	movq	%rbx, %rsi
100005ada:	e8 25 a8 00 00	callq	0x100010304 ## symbol stub for: ___strlcpy_chk
100005adf:	48 8d 1d b2 84 01 00	leaq	99506(%rip), %rbx
100005ae6:	48 8b 7b 50	movq	80(%rbx), %rdi
100005aea:	48 8d 35 e8 ca 00 00	leaq	51944(%rip), %rsi ## literal pool for: "%-32s%s "
100005af1:	4c 89 e2	movq	%r12, %rdx
100005af4:	48 8d 0d df c8 00 00	leaq	51423(%rip), %rcx ## literal pool for: "  "
100005afb:	31 c0	xorl	%eax, %eax
100005afd:	e8 50 a8 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005b02:	48 8b 73 50	movq	80(%rbx), %rsi
100005b06:	49 83 ff ff	cmpq	$-1, %r15
100005b0a:	0f 84 d0 01 00 00	je	0x100005ce0
100005b10:	48 89 f7	movq	%rsi, %rdi
100005b13:	48 8d 35 c8 ca 00 00	leaq	51912(%rip), %rsi ## literal pool for: "%-5llu"
100005b1a:	4c 89 fa	movq	%r15, %rdx
100005b1d:	31 c0	xorl	%eax, %eax
100005b1f:	e8 2e a8 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005b24:	e9 c3 01 00 00	jmp	0x100005cec
100005b29:	66 0f 29 95 d0 fc ff ff	movapd	%xmm2, -816(%rbp)
100005b31:	48 89 95 60 fd ff ff	movq	%rdx, -672(%rbp)
100005b38:	66 0f 29 85 c0 fc ff ff	movapd	%xmm0, -832(%rbp)
100005b40:	66 44 0f 29 95 30 fd ff ff	movapd	%xmm10, -720(%rbp)
100005b49:	66 0f 29 8d 20 fd ff ff	movapd	%xmm1, -736(%rbp)
100005b51:	66 0f 29 bd 40 fd ff ff	movapd	%xmm7, -704(%rbp)
100005b59:	66 0f 29 b5 00 fd ff ff	movapd	%xmm6, -768(%rbp)
100005b61:	66 0f 29 a5 f0 fc ff ff	movapd	%xmm4, -784(%rbp)
100005b69:	66 0f 29 9d 10 fd ff ff	movapd	%xmm3, -752(%rbp)
100005b71:	48 89 8d 58 fd ff ff	movq	%rcx, -680(%rbp)
100005b78:	66 0f 29 ad e0 fc ff ff	movapd	%xmm5, -800(%rbp)
100005b80:	4c 8d 25 11 84 01 00	leaq	99345(%rip), %r12
100005b87:	49 8b 74 24 50	movq	80(%r12), %rsi
100005b8c:	48 8d 3d 66 cb 00 00	leaq	52070(%rip), %rdi ## literal pool for: "<dict>\n"
100005b93:	e8 c6 a7 00 00	callq	0x10001035e ## symbol stub for: _fputs
100005b98:	49 83 ff ff	cmpq	$-1, %r15
100005b9c:	74 16	je	0x100005bb4
100005b9e:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005ba3:	48 8d 35 57 cb 00 00	leaq	52055(%rip), %rsi ## literal pool for: "<key>id</key><integer>%llu</integer>\n"
100005baa:	4c 89 fa	movq	%r15, %rdx
100005bad:	31 c0	xorl	%eax, %eax
100005baf:	e8 9e a7 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005bb4:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005bb9:	48 8d 53 08	leaq	8(%rbx), %rdx
100005bbd:	66 0f 28 85 c0 fc ff ff	movapd	-832(%rbp), %xmm0
100005bc5:	f2 48 0f 2c c0	cvttsd2si	%xmm0, %rax
100005bca:	48 89 c6	movq	%rax, %rsi
100005bcd:	48 c1 fe 3f	sarq	$63, %rsi
100005bd1:	f2 0f 5c 05 77 0b 01 00	subsd	68471(%rip), %xmm0
100005bd9:	f2 48 0f 2c c8	cvttsd2si	%xmm0, %rcx
100005bde:	48 21 f1	andq	%rsi, %rcx
100005be1:	48 09 c1	orq	%rax, %rcx
100005be4:	48 8d 35 3c cb 00 00	leaq	52028(%rip), %rsi ## literal pool for: "<key>name</key><string>%s</string>\n<key>cputime_ns</key><integer>%llu</integer>\n<key>cputime_ms_per_s</key><real>%g</real>\n"
100005beb:	0f 28 85 d0 fc ff ff	movaps	-816(%rbp), %xmm0
100005bf2:	b0 01	movb	$1, %al
100005bf4:	e8 59 a7 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005bf9:	41 80 3c 24 00	cmpb	$0, (%r12)
100005bfe:	75 1a	jne	0x100005c1a
100005c00:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005c05:	48 8d 35 97 cb 00 00	leaq	52119(%rip), %rsi ## literal pool for: "<key>cputime_sample_ms_per_s</key><real>%g</real>\n"
100005c0c:	0f 28 85 30 fd ff ff	movaps	-720(%rbp), %xmm0
100005c13:	b0 01	movb	$1, %al
100005c15:	e8 38 a7 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005c1a:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005c1f:	4c 8b 83 c0 01 00 00	movq	448(%rbx), %r8
100005c26:	4c 8b 8b c8 01 00 00	movq	456(%rbx), %r9
100005c2d:	48 8d 35 a2 cb 00 00	leaq	52130(%rip), %rsi ## literal pool for: "<key>intr_wakeups</key><integer>%llu</integer>\n<key>intr_wakeups_per_s</key><real>%g</real>\n<key>idle_wakeups</key><integer>%llu</integer>\n<key>idle_wakeups_per_s</key><real>%g</real>\n<key>diskio_bytesread</key><integer>%llu</integer>\n<key>diskio_bytesread_per_s</key><real>%g</real>\n<key>diskio_byteswritten</key><integer>%llu</integer>\n<key>diskio_byteswritten_per_s</key><real>%g</real>\n"
100005c34:	48 8b 95 60 fd ff ff	movq	-672(%rbp), %rdx
100005c3b:	66 0f 28 85 40 fd ff ff	movapd	-704(%rbp), %xmm0
100005c43:	4c 89 e9	movq	%r13, %rcx
100005c46:	0f 28 8d 20 fd ff ff	movaps	-736(%rbp), %xmm1
100005c4d:	66 0f 28 95 f0 fc ff ff	movapd	-784(%rbp), %xmm2
100005c55:	66 0f 28 9d 00 fd ff ff	movapd	-768(%rbp), %xmm3
100005c5d:	b0 04	movb	$4, %al
100005c5f:	e8 ee a6 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005c64:	48 8b 93 d8 01 00 00	movq	472(%rbx), %rdx
100005c6b:	48 85 d2	testq	%rdx, %rdx
100005c6e:	74 1b	je	0x100005c8b
100005c70:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005c75:	48 8d 35 e1 cc 00 00	leaq	52449(%rip), %rsi ## literal pool for: "<key>gputime_ns</key><integer>%llu</integer>\n<key>gputime_ms_per_s</key><real>%g</real>\n"
100005c7c:	66 0f 28 85 10 fd ff ff	movapd	-752(%rbp), %xmm0
100005c84:	b0 01	movb	$1, %al
100005c86:	e8 c7 a6 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005c8b:	4d 8b 6c 24 50	movq	80(%r12), %r13
100005c90:	48 8b 9d 58 fd ff ff	movq	-680(%rbp), %rbx
100005c97:	48 89 df	movq	%rbx, %rdi
100005c9a:	e8 6d a7 00 00	callq	0x10001040c ## symbol stub for: _pm_energy_impact
100005c9f:	f2 0f 11 85 40 fd ff ff	movsd	%xmm0, -704(%rbp)
100005ca7:	48 89 df	movq	%rbx, %rdi
100005caa:	e8 5d a7 00 00	callq	0x10001040c ## symbol stub for: _pm_energy_impact
100005caf:	66 0f 28 c8	movapd	%xmm0, %xmm1
100005cb3:	f2 0f 5e 8d e0 fc ff ff	divsd	-800(%rbp), %xmm1
100005cbb:	4c 89 ef	movq	%r13, %rdi
100005cbe:	48 8d 35 f1 cc 00 00	leaq	52465(%rip), %rsi ## literal pool for: "<key>energy_impact</key><real>%g</real>\n<key>energy_impact_per_s</key><real>%g</real>\n"
100005cc5:	f2 0f 10 85 40 fd ff ff	movsd	-704(%rbp), %xmm0
100005ccd:	b0 02	movb	$2, %al
100005ccf:	e8 7e a6 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005cd4:	48 8d 3d c5 c8 00 00	leaq	51397(%rip), %rdi ## literal pool for: "<key>tasks</key>\n<array>\n"
100005cdb:	e9 52 02 00 00	jmp	0x100005f32
100005ce0:	48 8d 3d 02 c9 00 00	leaq	51458(%rip), %rdi ## literal pool for: "     "
100005ce7:	e8 72 a6 00 00	callq	0x10001035e ## symbol stub for: _fputs
100005cec:	48 8d 05 a5 82 01 00	leaq	98981(%rip), %rax
100005cf3:	80 78 02 00	cmpb	$0, 2(%rax)
100005cf7:	48 8b 78 50	movq	80(%rax), %rdi
100005cfb:	66 0f 28 9d 40 fd ff ff	movapd	-704(%rbp), %xmm3
100005d03:	66 0f 28 a5 20 fd ff ff	movapd	-736(%rbp), %xmm4
100005d0b:	66 0f 28 8d 30 fd ff ff	movapd	-720(%rbp), %xmm1
100005d13:	66 0f 28 95 c0 fc ff ff	movapd	-832(%rbp), %xmm2
100005d1b:	66 0f 28 85 d0 fc ff ff	movapd	-816(%rbp), %xmm0
100005d23:	74 30	je	0x100005d55
100005d25:	f2 0f 5e 15 83 1d 01 00	divsd	73091(%rip), %xmm2
100005d2d:	48 8d 35 0d c9 00 00	leaq	51469(%rip), %rsi ## literal pool for: "  %-7.2f   %-7.2f   [%-9.2f]                                             %-7.2f [%-7llu] %-7.2f [%-7llu]       "
100005d34:	48 8b 95 60 fd ff ff	movq	-672(%rbp), %rdx
100005d3b:	4c 89 e9	movq	%r13, %rcx
100005d3e:	b0 05	movb	$5, %al
100005d40:	e8 0d a6 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005d45:	48 8d 1d a4 82 01 00	leaq	98980(%rip), %rbx
100005d4c:	4c 8d 25 45 82 01 00	leaq	98885(%rip), %r12
100005d53:	eb 67	jmp	0x100005dbc
100005d55:	48 8d 35 93 c8 00 00	leaq	51347(%rip), %rsi ## literal pool for: "  %-7.2f"
100005d5c:	b0 01	movb	$1, %al
100005d5e:	e8 ef a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005d63:	48 8d 1d 86 82 01 00	leaq	98950(%rip), %rbx
100005d6a:	80 7b 46 00	cmpb	$0, 70(%rbx)
100005d6e:	4c 8d 25 23 82 01 00	leaq	98851(%rip), %r12
100005d75:	74 22	je	0x100005d99
100005d77:	41 80 3c 24 00	cmpb	$0, (%r12)
100005d7c:	75 1b	jne	0x100005d99
100005d7e:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005d83:	48 8d 35 6e c8 00 00	leaq	51310(%rip), %rsi ## literal pool for: "   %-7.2f "
100005d8a:	66 0f 28 85 30 fd ff ff	movapd	-720(%rbp), %xmm0
100005d92:	b0 01	movb	$1, %al
100005d94:	e8 b9 a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005d99:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005d9e:	48 8d 35 5e c8 00 00	leaq	51294(%rip), %rsi ## literal pool for: "                                     %-7.2f %-7.2f           "
100005da5:	66 0f 28 85 40 fd ff ff	movapd	-704(%rbp), %xmm0
100005dad:	66 0f 28 8d 20 fd ff ff	movapd	-736(%rbp), %xmm1
100005db5:	b0 02	movb	$2, %al
100005db7:	e8 96 a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005dbc:	80 7b 3b 00	cmpb	$0, 59(%rbx)
100005dc0:	74 1a	je	0x100005ddc
100005dc2:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005dc7:	48 8d 35 e3 c8 00 00	leaq	51427(%rip), %rsi ## literal pool for: "%11s"
100005dce:	48 8d 15 b1 b7 00 00	leaq	47025(%rip), %rdx ## literal pool for: ""
100005dd5:	31 c0	xorl	%eax, %eax
100005dd7:	e8 76 a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005ddc:	80 7b 39 00	cmpb	$0, 57(%rbx)
100005de0:	74 1a	je	0x100005dfc
100005de2:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005de7:	48 8d 35 c3 c8 00 00	leaq	51395(%rip), %rsi ## literal pool for: "%11s"
100005dee:	48 8d 15 91 b7 00 00	leaq	46993(%rip), %rdx ## literal pool for: ""
100005df5:	31 c0	xorl	%eax, %eax
100005df7:	e8 56 a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005dfc:	80 7b 3d 00	cmpb	$0, 61(%rbx)
100005e00:	74 1a	je	0x100005e1c
100005e02:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005e07:	48 8d 35 a3 c8 00 00	leaq	51363(%rip), %rsi ## literal pool for: "%11s"
100005e0e:	48 8d 15 71 b7 00 00	leaq	46961(%rip), %rdx ## literal pool for: ""
100005e15:	31 c0	xorl	%eax, %eax
100005e17:	e8 36 a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005e1c:	8a 43 41	movb	65(%rbx), %al
100005e1f:	84 c0	testb	%al, %al
100005e21:	74 2b	je	0x100005e4e
100005e23:	49 83 ff ff	cmpq	$-1, %r15
100005e27:	74 25	je	0x100005e4e
100005e29:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005e2e:	48 8d 35 81 c8 00 00	leaq	51329(%rip), %rsi ## literal pool for: "%10.1f %14.1f           "
100005e35:	66 0f 28 85 f0 fc ff ff	movapd	-784(%rbp), %xmm0
100005e3d:	66 0f 28 8d 00 fd ff ff	movapd	-768(%rbp), %xmm1
100005e45:	b0 02	movb	$2, %al
100005e47:	e8 06 a5 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005e4c:	eb 1e	jmp	0x100005e6c
100005e4e:	84 c0	testb	%al, %al
100005e50:	74 1a	je	0x100005e6c
100005e52:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005e57:	48 8d 35 71 c8 00 00	leaq	51313(%rip), %rsi ## literal pool for: "%36s"
100005e5e:	48 8d 15 21 b7 00 00	leaq	46881(%rip), %rdx ## literal pool for: ""
100005e65:	31 c0	xorl	%eax, %eax
100005e67:	e8 e6 a4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005e6c:	80 7b 42 00	cmpb	$0, 66(%rbx)
100005e70:	74 1a	je	0x100005e8c
100005e72:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005e77:	48 8d 35 56 c8 00 00	leaq	51286(%rip), %rsi ## literal pool for: "%45s"
100005e7e:	48 8d 15 01 b7 00 00	leaq	46849(%rip), %rdx ## literal pool for: ""
100005e85:	31 c0	xorl	%eax, %eax
100005e87:	e8 c6 a4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005e8c:	8a 43 43	movb	67(%rbx), %al
100005e8f:	84 c0	testb	%al, %al
100005e91:	74 23	je	0x100005eb6
100005e93:	49 83 ff ff	cmpq	$-1, %r15
100005e97:	74 1d	je	0x100005eb6
100005e99:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005e9e:	48 8d 35 34 c8 00 00	leaq	51252(%rip), %rsi ## literal pool for: "%-7.2f   "
100005ea5:	66 0f 28 85 10 fd ff ff	movapd	-752(%rbp), %xmm0
100005ead:	b0 01	movb	$1, %al
100005eaf:	e8 9e a4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005eb4:	eb 1e	jmp	0x100005ed4
100005eb6:	84 c0	testb	%al, %al
100005eb8:	74 1a	je	0x100005ed4
100005eba:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005ebf:	48 8d 35 1d c8 00 00	leaq	51229(%rip), %rsi ## literal pool for: "%10s"
100005ec6:	48 8d 15 b9 b6 00 00	leaq	46777(%rip), %rdx ## literal pool for: ""
100005ecd:	31 c0	xorl	%eax, %eax
100005ecf:	e8 7e a4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005ed4:	80 7b 42 00	cmpb	$0, 66(%rbx)
100005ed8:	74 1a	je	0x100005ef4
100005eda:	49 8b 7c 24 50	movq	80(%r12), %rdi
100005edf:	48 8d 35 02 c8 00 00	leaq	51202(%rip), %rsi ## literal pool for: "%67s"
100005ee6:	48 8d 15 99 b6 00 00	leaq	46745(%rip), %rdx ## literal pool for: ""
100005eed:	31 c0	xorl	%eax, %eax
100005eef:	e8 5e a4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005ef4:	80 7b 45 00	cmpb	$0, 69(%rbx)
100005ef8:	48 8d 3d 73 b1 00 00	leaq	45427(%rip), %rdi ## literal pool for: "\n"
100005eff:	74 31	je	0x100005f32
100005f01:	49 8b 5c 24 50	movq	80(%r12), %rbx
100005f06:	48 8b bd 58 fd ff ff	movq	-680(%rbp), %rdi
100005f0d:	e8 fa a4 00 00	callq	0x10001040c ## symbol stub for: _pm_energy_impact
100005f12:	f2 0f 5e 85 e0 fc ff ff	divsd	-800(%rbp), %xmm0
100005f1a:	48 89 df	movq	%rbx, %rdi
100005f1d:	48 8d 35 c9 c7 00 00	leaq	51145(%rip), %rsi ## literal pool for: "%-7.2f     "
100005f24:	b0 01	movb	$1, %al
100005f26:	e8 27 a4 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100005f2b:	48 8d 3d 40 b1 00 00	leaq	45376(%rip), %rdi ## literal pool for: "\n"
100005f32:	49 8b 74 24 50	movq	80(%r12), %rsi
100005f37:	e8 22 a4 00 00	callq	0x10001035e ## symbol stub for: _fputs
100005f3c:	48 8b 05 dd 22 01 00	movq	74461(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100005f43:	48 89 45 a0	movq	%rax, -96(%rbp)
100005f47:	48 c7 45 a8 00 00 00 40	movq	$1073741824, -88(%rbp)
100005f4f:	48 8d 05 2e 22 00 00	leaq	8750(%rip), %rax
100005f56:	48 89 45 b0	movq	%rax, -80(%rbp)
100005f5a:	48 8d 05 27 31 01 00	leaq	78119(%rip), %rax
100005f61:	48 89 45 b8	movq	%rax, -72(%rbp)
100005f65:	4c 89 7d c0	movq	%r15, -64(%rbp)
100005f69:	48 8d 3d 60 89 01 00	leaq	100704(%rip), %rdi
100005f70:	31 f6	xorl	%esi, %esi
100005f72:	48 8d 55 a0	leaq	-96(%rbp), %rdx
100005f76:	e8 5b 68 00 00	callq	0x10000c7d6
100005f7b:	48 85 c0	testq	%rax, %rax
100005f7e:	0f 84 70 03 00 00	je	0x1000062f4
100005f84:	48 89 c3	movq	%rax, %rbx
100005f87:	8b 05 4f 89 01 00	movl	100687(%rip), %eax
100005f8d:	48 89 c1	movq	%rax, %rcx
100005f90:	48 c1 e1 09	shlq	$9, %rcx
100005f94:	48 8d 04 c1	leaq	(%rcx,%rax,8), %rax
100005f98:	48 03 05 31 89 01 00	addq	100657(%rip), %rax
100005f9f:	48 39 c3	cmpq	%rax, %rbx
100005fa2:	4c 8d a5 68 fd ff ff	leaq	-664(%rbp), %r12
100005fa9:	73 48	jae	0x100005ff3
100005fab:	4c 39 bb 90 01 00 00	cmpq	%r15, 400(%rbx)
100005fb2:	75 3f	jne	0x100005ff3
100005fb4:	4c 89 e7	movq	%r12, %rdi
100005fb7:	48 89 de	movq	%rbx, %rsi
100005fba:	4c 89 e2	movq	%r12, %rdx
100005fbd:	e8 68 a4 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
100005fc2:	48 89 df	movq	%rbx, %rdi
100005fc5:	be 01 00 00 00	movl	$1, %esi
100005fca:	e8 2c 13 00 00	callq	0x1000072fb
100005fcf:	48 81 c3 08 02 00 00	addq	$520, %rbx
100005fd6:	8b 05 00 89 01 00	movl	100608(%rip), %eax
100005fdc:	48 89 c1	movq	%rax, %rcx
100005fdf:	48 c1 e1 09	shlq	$9, %rcx
100005fe3:	48 8d 04 c1	leaq	(%rcx,%rax,8), %rax
100005fe7:	48 03 05 e2 88 01 00	addq	100578(%rip), %rax
100005fee:	48 39 c3	cmpq	%rax, %rbx
100005ff1:	72 b8	jb	0x100005fab
100005ff3:	48 8d 05 f6 7f 01 00	leaq	98294(%rip), %rax
100005ffa:	83 78 28 01	cmpl	$1, 40(%rax)
100005ffe:	4c 8d 3d 1b 89 01 00	leaq	100635(%rip), %r15
100006005:	4c 8d 25 8c 7f 01 00	leaq	98188(%rip), %r12
10000600c:	75 11	jne	0x10000601f
10000600e:	49 8b 74 24 50	movq	80(%r12), %rsi
100006013:	48 8d 3d ca b8 00 00	leaq	47306(%rip), %rdi ## literal pool for: "</array>\n</dict>\n"
10000601a:	e8 3f a3 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000601f:	41 ff c6	incl	%r14d
100006022:	44 3b 35 03 89 01 00	cmpl	100611(%rip), %r14d
100006029:	0f 82 aa f8 ff ff	jb	0x1000058d9
10000602f:	eb 48	jmp	0x100006079
100006031:	83 3d a4 88 01 00 00	cmpl	$0, 100516(%rip)
100006038:	74 3f	je	0x100006079
10000603a:	31 db	xorl	%ebx, %ebx
10000603c:	4c 8d 35 8d 88 01 00	leaq	100493(%rip), %r14
100006043:	4c 8d bd 68 fd ff ff	leaq	-664(%rbp), %r15
10000604a:	4c 89 f7	movq	%r14, %rdi
10000604d:	89 de	movl	%ebx, %esi
10000604f:	e8 9c 66 00 00	callq	0x10000c6f0
100006054:	49 89 c4	movq	%rax, %r12
100006057:	4c 89 ff	movq	%r15, %rdi
10000605a:	48 89 c6	movq	%rax, %rsi
10000605d:	4c 89 fa	movq	%r15, %rdx
100006060:	e8 c5 a3 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
100006065:	4c 89 e7	movq	%r12, %rdi
100006068:	31 f6	xorl	%esi, %esi
10000606a:	e8 8c 12 00 00	callq	0x1000072fb
10000606f:	ff c3	incl	%ebx
100006071:	3b 1d 65 88 01 00	cmpl	100453(%rip), %ebx
100006077:	72 d1	jb	0x10000604a
100006079:	48 8d 1d 70 7f 01 00	leaq	98160(%rip), %rbx
100006080:	83 7b 28 01	cmpl	$1, 40(%rbx)
100006084:	75 17	jne	0x10000609d
100006086:	48 8d 05 0b 7f 01 00	leaq	98059(%rip), %rax
10000608d:	48 8b 70 50	movq	80(%rax), %rsi
100006091:	48 8d 3d 22 c5 00 00	leaq	50466(%rip), %rdi ## literal pool for: "</array>\n<key>all_tasks</key>\n"
100006098:	e8 c1 a2 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000609d:	4c 8d 35 f4 7e 01 00	leaq	98036(%rip), %r14
1000060a4:	41 0f b6 46 02	movzbl	2(%r14), %eax
1000060a9:	49 8b 44 c6 30	movq	48(%r14,%rax,8), %rax
1000060ae:	48 8d bd 68 fd ff ff	leaq	-664(%rbp), %rdi
1000060b5:	48 89 87 70 01 00 00	movq	%rax, 368(%rdi)
1000060bc:	31 f6	xorl	%esi, %esi
1000060be:	e8 38 12 00 00	callq	0x1000072fb
1000060c3:	41 80 3e 00	cmpb	$0, (%r14)
1000060c7:	74 26	je	0x1000060ef
1000060c9:	48 8b 05 98 21 01 00	movq	74136(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000060d0:	48 8b 00	movq	(%rax), %rax
1000060d3:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000060d7:	0f 85 1c 02 00 00	jne	0x1000062f9
1000060dd:	48 81 c4 18 03 00 00	addq	$792, %rsp
1000060e4:	5b	popq	%rbx
1000060e5:	41 5c	popq	%r12
1000060e7:	41 5d	popq	%r13
1000060e9:	41 5e	popq	%r14
1000060eb:	41 5f	popq	%r15
1000060ed:	5d	popq	%rbp
1000060ee:	c3	retq
1000060ef:	41 80 7e 02 00	cmpb	$0, 2(%r14)
1000060f4:	75 d3	jne	0x1000060c9
1000060f6:	83 7b 28 01	cmpl	$1, 40(%rbx)
1000060fa:	74 cd	je	0x1000060c9
1000060fc:	48 8b 4b 20	movq	32(%rbx), %rcx
100006100:	48 85 c9	testq	%rcx, %rcx
100006103:	74 c4	je	0x1000060c9
100006105:	49 8b 46 40	movq	64(%r14), %rax
100006109:	48 99	cqto
10000610b:	48 f7 f9	idivq	%rcx
10000610e:	48 85 d2	testq	%rdx, %rdx
100006111:	75 b6	jne	0x1000060c9
100006113:	49 8b 76 50	movq	80(%r14), %rsi
100006117:	48 8d 3d 61 d5 00 00	leaq	54625(%rip), %rdi ## literal pool for: "\n\n**** Average cumulatively decayed power score ****\n\n"
10000611e:	e8 3b a2 00 00	callq	0x10001035e ## symbol stub for: _fputs
100006123:	48 8d 3d a6 87 01 00	leaq	100262(%rip), %rdi
10000612a:	48 8d 35 71 20 00 00	leaq	8305(%rip), %rsi
100006131:	e8 e9 65 00 00	callq	0x10000c71f
100006136:	49 8b 7e 50	movq	80(%r14), %rdi
10000613a:	48 8d 35 75 d5 00 00	leaq	54645(%rip), %rsi ## literal pool for: "      %-32s"
100006141:	48 8d 15 7a d5 00 00	leaq	54650(%rip), %rdx ## literal pool for: " "
100006148:	31 c0	xorl	%eax, %eax
10000614a:	e8 03 a2 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000614f:	4c 8d 3d 5a 2f 01 00	leaq	77658(%rip), %r15
100006156:	4c 8d 25 67 d5 00 00	leaq	54631(%rip), %r12 ## literal pool for: "\t   %-10s"
10000615d:	31 db	xorl	%ebx, %ebx
10000615f:	48 c7 44 1d a0 00 00 00 00	movq	$0, -96(%rbp,%rbx)
100006168:	49 8b 7e 50	movq	80(%r14), %rdi
10000616c:	4a 8b 14 3b	movq	(%rbx,%r15), %rdx
100006170:	4c 89 e6	movq	%r12, %rsi
100006173:	31 c0	xorl	%eax, %eax
100006175:	e8 d8 a1 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000617a:	48 83 c3 08	addq	$8, %rbx
10000617e:	48 83 fb 28	cmpq	$40, %rbx
100006182:	75 db	jne	0x10000615f
100006184:	49 8b 76 50	movq	80(%r14), %rsi
100006188:	48 8d 3d e3 ae 00 00	leaq	44771(%rip), %rdi ## literal pool for: "\n"
10000618f:	e8 ca a1 00 00	callq	0x10001035e ## symbol stub for: _fputs
100006194:	83 3d 41 87 01 00 00	cmpl	$0, 100161(%rip)
10000619b:	0f 84 28 ff ff ff	je	0x1000060c9
1000061a1:	48 8d 1d 28 87 01 00	leaq	100136(%rip), %rbx
1000061a8:	4c 8d 25 3a d5 00 00	leaq	54586(%rip), %r12 ## literal pool for: "\t%10g"
1000061af:	45 31 ff	xorl	%r15d, %r15d
1000061b2:	48 89 df	movq	%rbx, %rdi
1000061b5:	44 89 fe	movl	%r15d, %esi
1000061b8:	e8 33 65 00 00	callq	0x10000c6f0
1000061bd:	49 89 c5	movq	%rax, %r13
1000061c0:	48 8d 70 04	leaq	4(%rax), %rsi
1000061c4:	ba 21 00 00 00	movl	$33, %edx
1000061c9:	b9 21 00 00 00	movl	$33, %ecx
1000061ce:	48 8d bd 70 ff ff ff	leaq	-144(%rbp), %rdi
1000061d5:	e8 2a a1 00 00	callq	0x100010304 ## symbol stub for: ___strlcpy_chk
1000061da:	31 c0	xorl	%eax, %eax
1000061dc:	f2 41 0f 10 84 c5 98 01 00 00	movsd	408(%r13,%rax,8), %xmm0
1000061e6:	f2 0f 58 44 c5 a0	addsd	-96(%rbp,%rax,8), %xmm0
1000061ec:	f2 0f 11 44 c5 a0	movsd	%xmm0, -96(%rbp,%rax,8)
1000061f2:	48 ff c0	incq	%rax
1000061f5:	48 83 f8 05	cmpq	$5, %rax
1000061f9:	75 e1	jne	0x1000061dc
1000061fb:	41 83 ff 0f	cmpl	$15, %r15d
1000061ff:	0f 87 da 00 00 00	ja	0x1000062df
100006205:	49 8b 7e 50	movq	80(%r14), %rdi
100006209:	41 8b 55 00	movl	(%r13), %edx
10000620d:	48 8d 35 ba d4 00 00	leaq	54458(%rip), %rsi ## literal pool for: "[%-5i]%-32s"
100006214:	48 8d 8d 70 ff ff ff	leaq	-144(%rbp), %rcx
10000621b:	31 c0	xorl	%eax, %eax
10000621d:	e8 30 a1 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100006222:	31 db	xorl	%ebx, %ebx
100006224:	49 8b 46 38	movq	56(%r14), %rax
100006228:	49 8b 4e 48	movq	72(%r14), %rcx
10000622c:	49 2b 8d 80 01 00 00	subq	384(%r13), %rcx
100006233:	48 39 c1	cmpq	%rax, %rcx
100006236:	48 0f 43 c8	cmovaeq	%rax, %rcx
10000623a:	66 48 0f 6e c1	movq	%rcx, %xmm0
10000623f:	66 0f 6f 15 b9 04 01 00	movdqa	66745(%rip), %xmm2
100006247:	66 0f 62 c2	punpckldq	%xmm2, %xmm0
10000624b:	66 0f 28 1d bd 04 01 00	movapd	66749(%rip), %xmm3
100006253:	66 0f 5c c3	subpd	%xmm3, %xmm0
100006257:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000625b:	f2 41 0f 59 46 08	mulsd	8(%r14), %xmm0
100006261:	48 8d 05 58 18 01 00	leaq	71768(%rip), %rax
100006268:	f3 0f 7e 0c 03	movq	(%rbx,%rax), %xmm1
10000626d:	66 0f 62 ca	punpckldq	%xmm2, %xmm1
100006271:	66 0f 5c cb	subpd	%xmm3, %xmm1
100006275:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100006279:	f2 0f 5e 05 9f 04 01 00	divsd	66719(%rip), %xmm0
100006281:	66 0f 2e c8	ucomisd	%xmm0, %xmm1
100006285:	49 8b 4e 50	movq	80(%r14), %rcx
100006289:	77 27	ja	0x1000062b2
10000628b:	f2 41 0f 10 84 1d 98 01 00 00	movsd	408(%r13,%rbx), %xmm0
100006295:	48 89 cf	movq	%rcx, %rdi
100006298:	4c 89 e6	movq	%r12, %rsi
10000629b:	b0 01	movb	$1, %al
10000629d:	e8 b0 a0 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000062a2:	48 83 c3 08	addq	$8, %rbx
1000062a6:	48 83 fb 28	cmpq	$40, %rbx
1000062aa:	0f 85 74 ff ff ff	jne	0x100006224
1000062b0:	eb 16	jmp	0x1000062c8
1000062b2:	be 0e 00 00 00	movl	$14, %esi
1000062b7:	ba 01 00 00 00	movl	$1, %edx
1000062bc:	48 8d 3d 17 d4 00 00	leaq	54295(%rip), %rdi ## literal pool for: "\t<calculating>"
1000062c3:	e8 a2 a0 00 00	callq	0x10001036a ## symbol stub for: _fwrite
1000062c8:	49 8b 76 50	movq	80(%r14), %rsi
1000062cc:	48 8d 3d 9f ad 00 00	leaq	44447(%rip), %rdi ## literal pool for: "\n"
1000062d3:	e8 86 a0 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000062d8:	48 8d 1d f1 85 01 00	leaq	99825(%rip), %rbx
1000062df:	41 ff c7	incl	%r15d
1000062e2:	44 3b 3d f3 85 01 00	cmpl	99827(%rip), %r15d
1000062e9:	0f 82 c3 fe ff ff	jb	0x1000061b2
1000062ef:	e9 d5 fd ff ff	jmp	0x1000060c9
1000062f4:	e8 ba 99 00 00	callq	0x10000fcb3
1000062f9:	e8 fa 9f 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
1000062fe:	55	pushq	%rbp
1000062ff:	48 89 e5	movq	%rsp, %rbp
100006302:	41 57	pushq	%r15
100006304:	41 56	pushq	%r14
100006306:	41 55	pushq	%r13
100006308:	41 54	pushq	%r12
10000630a:	53	pushq	%rbx
10000630b:	48 81 ec e8 0a 00 00	subq	$2792, %rsp
100006312:	48 8b 05 4f 1f 01 00	movq	73551(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100006319:	48 8b 00	movq	(%rax), %rax
10000631c:	48 89 45 d0	movq	%rax, -48(%rbp)
100006320:	48 8d 3d b9 85 01 00	leaq	99769(%rip), %rdi
100006327:	48 8d 1d c2 85 01 00	leaq	99778(%rip), %rbx
10000632e:	48 89 de	movq	%rbx, %rsi
100006331:	e8 da 63 00 00	callq	0x10000c710
100006336:	48 89 df	movq	%rbx, %rdi
100006339:	e8 a5 63 00 00	callq	0x10000c6e3
10000633e:	48 8d 3d 63 86 01 00	leaq	99939(%rip), %rdi
100006345:	be 08 02 00 00	movl	$520, %esi
10000634a:	e8 91 9f 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000634f:	4c 8d 3d 9a 7c 01 00	leaq	97434(%rip), %r15
100006356:	41 80 7f 40 00	cmpb	$0, 64(%r15)
10000635b:	74 2a	je	0x100006387
10000635d:	48 8d 3d cc 85 01 00	leaq	99788(%rip), %rdi
100006364:	48 8d 1d d5 85 01 00	leaq	99797(%rip), %rbx
10000636b:	48 89 de	movq	%rbx, %rsi
10000636e:	e8 01 65 00 00	callq	0x10000c874
100006373:	48 8d 3d e6 85 01 00	leaq	99814(%rip), %rdi
10000637a:	e8 30 66 00 00	callq	0x10000c9af
10000637f:	48 89 df	movq	%rbx, %rdi
100006382:	e8 c4 64 00 00	callq	0x10000c84b
100006387:	83 3d 6e 85 01 00 00	cmpl	$0, 99694(%rip)
10000638e:	0f 85 4b 0e 00 00	jne	0x1000071df
100006394:	48 8d 9d 38 fb ff ff	leaq	-1224(%rbp), %rbx
10000639b:	48 89 df	movq	%rbx, %rdi
10000639e:	e8 2c 1e 00 00	callq	0x1000081cf
1000063a3:	48 8d 3d 46 85 01 00	leaq	99654(%rip), %rdi
1000063aa:	48 89 de	movq	%rbx, %rsi
1000063ad:	e8 22 63 00 00	callq	0x10000c6d4
1000063b2:	48 8b 3d b7 85 01 00	movq	99767(%rip), %rdi
1000063b9:	e8 66 a0 00 00	callq	0x100010424 ## symbol stub for: _pm_samples_sample
1000063be:	85 c0	testl	%eax, %eax
1000063c0:	0f 8e 1e 0e 00 00	jle	0x1000071e4
1000063c6:	89 85 0c f5 ff ff	movl	%eax, -2804(%rbp)
1000063cc:	4c 8d ad 28 f7 ff ff	leaq	-2264(%rbp), %r13
1000063d3:	45 31 e4	xorl	%r12d, %r12d
1000063d6:	48 8b 3d 93 85 01 00	movq	99731(%rip), %rdi
1000063dd:	44 89 e6	movl	%r12d, %esi
1000063e0:	e8 33 a0 00 00	callq	0x100010418 ## symbol stub for: _pm_samples_get
1000063e5:	48 89 c3	movq	%rax, %rbx
1000063e8:	48 8b 80 78 01 00 00	movq	376(%rax), %rax
1000063ef:	8b 00	movl	(%rax), %eax
1000063f1:	89 85 00 f5 ff ff	movl	%eax, -2816(%rbp)
1000063f7:	c7 85 08 f5 ff ff 10 00 00 00	movl	$16, -2808(%rbp)
100006401:	c7 85 fc f4 ff ff 00 00 00 00	movl	$0, -2820(%rbp)
10000640b:	be 08 02 00 00	movl	$520, %esi
100006410:	4c 89 ef	movq	%r13, %rdi
100006413:	e8 c8 9e 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
100006418:	0f 57 c0	xorps	%xmm0, %xmm0
10000641b:	0f 29 85 40 f5 ff ff	movaps	%xmm0, -2752(%rbp)
100006422:	0f 29 85 30 f5 ff ff	movaps	%xmm0, -2768(%rbp)
100006429:	0f 29 85 20 f5 ff ff	movaps	%xmm0, -2784(%rbp)
100006430:	0f 29 85 10 f5 ff ff	movaps	%xmm0, -2800(%rbp)
100006437:	0f 29 85 30 f9 ff ff	movaps	%xmm0, -1744(%rbp)
10000643e:	0f 29 85 40 f9 ff ff	movaps	%xmm0, -1728(%rbp)
100006445:	48 c7 85 50 f9 ff ff 00 00 00 00	movq	$0, -1712(%rbp)
100006450:	4c 89 ef	movq	%r13, %rdi
100006453:	44 8b 33	movl	(%rbx), %r14d
100006456:	ba 80 01 00 00	movl	$384, %edx
10000645b:	48 89 de	movq	%rbx, %rsi
10000645e:	e8 6d 9f 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100006463:	41 80 7f 40 00	cmpb	$0, 64(%r15)
100006468:	74 36	je	0x1000064a0
10000646a:	ba 01 00 00 00	movl	$1, %edx
10000646f:	44 89 f7	movl	%r14d, %edi
100006472:	be 14 00 00 00	movl	$20, %esi
100006477:	48 8d 8d 30 f9 ff ff	leaq	-1744(%rbp), %rcx
10000647e:	41 b8 28 00 00 00	movl	$40, %r8d
100006484:	e8 cb 9f 00 00	callq	0x100010454 ## symbol stub for: _proc_pidinfo
100006489:	83 f8 28	cmpl	$40, %eax
10000648c:	0f 85 c1 00 00 00	jne	0x100006553
100006492:	48 8b 85 30 f9 ff ff	movq	-1744(%rbp), %rax
100006499:	48 89 85 b8 f8 ff ff	movq	%rax, -1864(%rbp)
1000064a0:	45 85 f6	testl	%r14d, %r14d
1000064a3:	74 5b	je	0x100006500
1000064a5:	41 80 7f 39 00	cmpb	$0, 57(%r15)
1000064aa:	74 54	je	0x100006500
1000064ac:	8b bd 00 f5 ff ff	movl	-2816(%rbp), %edi
1000064b2:	be 04 00 00 00	movl	$4, %esi
1000064b7:	48 8d 95 10 f5 ff ff	leaq	-2800(%rbp), %rdx
1000064be:	48 8d 8d 08 f5 ff ff	leaq	-2808(%rbp), %rcx
1000064c5:	4c 8d 85 fc f4 ff ff	leaq	-2820(%rbp), %r8
1000064cc:	e8 2b a0 00 00	callq	0x1000104fc ## symbol stub for: _task_policy_get
1000064d1:	85 c0	testl	%eax, %eax
1000064d3:	74 2b	je	0x100006500
1000064d5:	89 c3	movl	%eax, %ebx
1000064d7:	48 8b 05 92 1d 01 00	movq	73106(%rip), %rax ## literal pool symbol address: ___stderrp
1000064de:	4c 8b 30	movq	(%rax), %r14
1000064e1:	89 df	movl	%ebx, %edi
1000064e3:	e8 be 9e 00 00	callq	0x1000103a6 ## symbol stub for: _mach_error_string
1000064e8:	4c 89 f7	movq	%r14, %rdi
1000064eb:	48 8d 35 f3 d2 00 00	leaq	54003(%rip), %rsi ## literal pool for: "task_policy_get(TASK_POLICY_STATE) failed %u %s\n"
1000064f2:	89 da	movl	%ebx, %edx
1000064f4:	48 89 c1	movq	%rax, %rcx
1000064f7:	31 c0	xorl	%eax, %eax
1000064f9:	e8 54 9e 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000064fe:	eb 73	jmp	0x100006573
100006500:	41 80 7f 3d 00	cmpb	$0, 61(%r15)
100006505:	74 77	je	0x10000657e
100006507:	44 89 f7	movl	%r14d, %edi
10000650a:	e8 69 9f 00 00	callq	0x100010478 ## symbol stub for: _responsibility_get_pid_responsible_for_pid
10000650f:	83 f8 ff	cmpl	$-1, %eax
100006512:	8b 9d 0c f5 ff ff	movl	-2804(%rbp), %ebx
100006518:	0f 84 dc 00 00 00	je	0x1000065fa
10000651e:	41 89 c7	movl	%eax, %r15d
100006521:	48 8d bd 40 fd ff ff	leaq	-704(%rbp), %rdi
100006528:	44 89 f6	movl	%r14d, %esi
10000652b:	e8 db 56 00 00	callq	0x10000bc0b
100006530:	85 c0	testl	%eax, %eax
100006532:	0f 84 e4 00 00 00	je	0x10000661c
100006538:	48 8b 0d 31 1d 01 00	movq	73009(%rip), %rcx ## literal pool symbol address: ___stderrp
10000653f:	48 8b 39	movq	(%rcx), %rdi
100006542:	48 8d 35 ec d2 00 00	leaq	53996(%rip), %rsi ## literal pool for: "kinfo_for_pid %u failed(%u)\n"
100006549:	44 89 f2	movl	%r14d, %edx
10000654c:	89 c1	movl	%eax, %ecx
10000654e:	e9 f3 00 00 00	jmp	0x100006646
100006553:	48 8b 05 16 1d 01 00	movq	72982(%rip), %rax ## literal pool symbol address: ___stderrp
10000655a:	48 8b 08	movq	(%rax), %rcx
10000655d:	be 2b 00 00 00	movl	$43, %esi
100006562:	ba 01 00 00 00	movl	$1, %edx
100006567:	48 8d 3d 4b d2 00 00	leaq	53835(%rip), %rdi ## literal pool for: "proc_pidinfo(PROC_PIDCOALITIONINFO) failed\n"
10000656e:	e8 f7 9d 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100006573:	8b 9d 0c f5 ff ff	movl	-2804(%rbp), %ebx
100006579:	e9 d6 00 00 00	jmp	0x100006654
10000657e:	b8 ff ff ff ff	movl	$4294967295, %eax
100006583:	41 bf ff ff ff ff	movl	$4294967295, %r15d
100006589:	8b 9d 0c f5 ff ff	movl	-2804(%rbp), %ebx
10000658f:	48 8d 0d 02 7a 01 00	leaq	96770(%rip), %rcx
100006596:	48 8b 49 48	movq	72(%rcx), %rcx
10000659a:	48 2b 8d 98 f8 ff ff	subq	-1896(%rbp), %rcx
1000065a1:	48 89 8d a8 f8 ff ff	movq	%rcx, -1880(%rbp)
1000065a8:	44 89 bd 28 f9 ff ff	movl	%r15d, -1752(%rbp)
1000065af:	89 85 2c f9 ff ff	movl	%eax, -1748(%rbp)
1000065b5:	45 85 f6	testl	%r14d, %r14d
1000065b8:	4c 8d 3d 31 7a 01 00	leaq	96817(%rip), %r15
1000065bf:	0f 84 8f 00 00 00	je	0x100006654
1000065c5:	0f 28 85 10 f5 ff ff	movaps	-2800(%rbp), %xmm0
1000065cc:	0f 28 8d 20 f5 ff ff	movaps	-2784(%rbp), %xmm1
1000065d3:	0f 28 95 30 f5 ff ff	movaps	-2768(%rbp), %xmm2
1000065da:	0f 28 9d 40 f5 ff ff	movaps	-2752(%rbp), %xmm3
1000065e1:	48 8d 85 b8 f8 ff ff	leaq	-1864(%rbp), %rax
1000065e8:	0f 11 58 60	movups	%xmm3, 96(%rax)
1000065ec:	0f 11 50 50	movups	%xmm2, 80(%rax)
1000065f0:	0f 11 48 40	movups	%xmm1, 64(%rax)
1000065f4:	0f 11 40 30	movups	%xmm0, 48(%rax)
1000065f8:	eb 5a	jmp	0x100006654
1000065fa:	48 8b 05 6f 1c 01 00	movq	72815(%rip), %rax ## literal pool symbol address: ___stderrp
100006601:	48 8b 08	movq	(%rax), %rcx
100006604:	be 1e 00 00 00	movl	$30, %esi
100006609:	ba 01 00 00 00	movl	$1, %edx
10000660e:	48 8d 3d 01 d2 00 00	leaq	53761(%rip), %rdi ## literal pool for: "failed to get responsible pid\n"
100006615:	e8 50 9d 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000661a:	eb 31	jmp	0x10000664d
10000661c:	8b 8d 68 fd ff ff	movl	-664(%rbp), %ecx
100006622:	41 39 ce	cmpl	%ecx, %r14d
100006625:	75 0b	jne	0x100006632
100006627:	8b 85 70 ff ff ff	movl	-144(%rbp), %eax
10000662d:	e9 5d ff ff ff	jmp	0x10000658f
100006632:	48 8b 05 37 1c 01 00	movq	72759(%rip), %rax ## literal pool symbol address: ___stderrp
100006639:	48 8b 38	movq	(%rax), %rdi
10000663c:	48 8d 35 0f d2 00 00	leaq	53775(%rip), %rsi ## literal pool for: "PID (%u) mismatch with kinfo (%u)\n"
100006643:	44 89 f2	movl	%r14d, %edx
100006646:	31 c0	xorl	%eax, %eax
100006648:	e8 05 9d 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000664d:	4c 8d 3d 9c 79 01 00	leaq	96668(%rip), %r15
100006654:	41 80 7f 40 00	cmpb	$0, 64(%r15)
100006659:	74 13	je	0x10000666e
10000665b:	48 8d 3d fe 82 01 00	leaq	99070(%rip), %rdi
100006662:	48 8d b5 b8 f8 ff ff	leaq	-1864(%rbp), %rsi
100006669:	e8 32 63 00 00	callq	0x10000c9a0
10000666e:	48 8d 3d 7b 82 01 00	leaq	98939(%rip), %rdi
100006675:	4c 89 ee	movq	%r13, %rsi
100006678:	e8 57 60 00 00	callq	0x10000c6d4
10000667d:	48 8b 05 24 1d 01 00	movq	72996(%rip), %rax ## literal pool symbol address: _mach_task_self_
100006684:	8b 38	movl	(%rax), %edi
100006686:	8b b5 00 f5 ff ff	movl	-2816(%rbp), %esi
10000668c:	e8 21 9d 00 00	callq	0x1000103b2 ## symbol stub for: _mach_port_deallocate
100006691:	41 ff c4	incl	%r12d
100006694:	44 39 e3	cmpl	%r12d, %ebx
100006697:	0f 85 39 fd ff ff	jne	0x1000063d6
10000669d:	48 8d 3d bc 82 01 00	leaq	99004(%rip), %rdi
1000066a4:	48 8d 35 4d 2a 01 00	leaq	76365(%rip), %rsi
1000066ab:	e8 6a 63 00 00	callq	0x10000ca1a
1000066b0:	41 80 7f 40 00	cmpb	$0, 64(%r15)
1000066b5:	0f 84 72 01 00 00	je	0x10000682d
1000066bb:	e8 e0 9c 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
1000066c0:	48 89 85 00 f5 ff ff	movq	%rax, -2816(%rbp)
1000066c7:	83 bd 0c f5 ff ff 00	cmpl	$0, -2804(%rbp)
1000066ce:	0f 8e 59 01 00 00	jle	0x10000682d
1000066d4:	45 31 ff	xorl	%r15d, %r15d
1000066d7:	4c 8d 35 82 82 01 00	leaq	98946(%rip), %r14
1000066de:	4c 8d 2d 0b 82 01 00	leaq	98827(%rip), %r13
1000066e5:	4c 89 f7	movq	%r14, %rdi
1000066e8:	44 89 fe	movl	%r15d, %esi
1000066eb:	e8 cc 62 00 00	callq	0x10000c9bc
1000066f0:	4c 8b 20	movq	(%rax), %r12
1000066f3:	45 85 ff	testl	%r15d, %r15d
1000066f6:	74 09	je	0x100006701
1000066f8:	49 39 dc	cmpq	%rbx, %r12
1000066fb:	0f 84 19 01 00 00	je	0x10000681a
100006701:	ba 28 01 00 00	movl	$296, %edx
100006706:	4c 89 e7	movq	%r12, %rdi
100006709:	48 8d b5 40 fd ff ff	leaq	-704(%rbp), %rsi
100006710:	e8 0d 9c 00 00	callq	0x100010322 ## symbol stub for: _coalition_info_resource_usage
100006715:	85 c0	testl	%eax, %eax
100006717:	74 6e	je	0x100006787
100006719:	48 8b 05 50 1b 01 00	movq	72528(%rip), %rax ## literal pool symbol address: ___stderrp
100006720:	48 8b 08	movq	(%rax), %rcx
100006723:	be 2b 00 00 00	movl	$43, %esi
100006728:	ba 01 00 00 00	movl	$1, %edx
10000672d:	48 8d 3d 85 d0 00 00	leaq	53381(%rip), %rdi ## literal pool for: "proc_pidinfo(PROC_PIDCOALITIONINFO) failed\n"
100006734:	e8 31 9c 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100006739:	be 18 02 00 00	movl	$536, %esi
10000673e:	48 8d bd 10 f5 ff ff	leaq	-2800(%rbp), %rdi
100006745:	e8 96 9b 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000674a:	45 31 f6	xorl	%r14d, %r14d
10000674d:	8b 9d 0c f5 ff ff	movl	-2804(%rbp), %ebx
100006753:	4c 89 ef	movq	%r13, %rdi
100006756:	44 89 f6	movl	%r14d, %esi
100006759:	e8 92 5f 00 00	callq	0x10000c6f0
10000675e:	4c 39 a0 90 01 00 00	cmpq	%r12, 400(%rax)
100006765:	75 16	jne	0x10000677d
100006767:	48 8d bd 10 f5 ff ff	leaq	-2800(%rbp), %rdi
10000676e:	48 89 c6	movq	%rax, %rsi
100006771:	48 8b 95 00 f5 ff ff	movq	-2816(%rbp), %rdx
100006778:	e8 38 1b 00 00	callq	0x1000082b5
10000677d:	41 ff c6	incl	%r14d
100006780:	44 39 f3	cmpl	%r14d, %ebx
100006783:	75 ce	jne	0x100006753
100006785:	eb 79	jmp	0x100006800
100006787:	be 00 02 00 00	movl	$512, %esi
10000678c:	48 8d bd 18 f5 ff ff	leaq	-2792(%rbp), %rdi
100006793:	e8 48 9b 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
100006798:	4c 89 a5 10 f5 ff ff	movq	%r12, -2800(%rbp)
10000679f:	0f 28 85 40 fd ff ff	movaps	-704(%rbp), %xmm0
1000067a6:	0f 11 85 18 f7 ff ff	movups	%xmm0, -2280(%rbp)
1000067ad:	48 8b 85 58 fd ff ff	movq	-680(%rbp), %rax
1000067b4:	48 89 85 1c f6 ff ff	movq	%rax, -2532(%rbp)
1000067bb:	0f 28 85 60 fd ff ff	movaps	-672(%rbp), %xmm0
1000067c2:	0f 11 85 2c f6 ff ff	movups	%xmm0, -2516(%rbp)
1000067c9:	0f 28 85 70 fd ff ff	movaps	-656(%rbp), %xmm0
1000067d0:	0f 11 85 d0 f6 ff ff	movups	%xmm0, -2352(%rbp)
1000067d7:	48 8b 85 80 fd ff ff	movq	-640(%rbp), %rax
1000067de:	48 89 85 e8 f6 ff ff	movq	%rax, -2328(%rbp)
1000067e5:	48 8b 8d 00 f5 ff ff	movq	-2816(%rbp), %rcx
1000067ec:	48 89 c8	movq	%rcx, %rax
1000067ef:	48 85 c9	testq	%rcx, %rcx
1000067f2:	75 05	jne	0x1000067f9
1000067f4:	e8 a7 9b 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
1000067f9:	48 89 85 08 f7 ff ff	movq	%rax, -2296(%rbp)
100006800:	48 8d 3d 39 81 01 00	leaq	98617(%rip), %rdi
100006807:	48 8d b5 10 f5 ff ff	leaq	-2800(%rbp), %rsi
10000680e:	e8 29 60 00 00	callq	0x10000c83c
100006813:	4c 8d 35 46 81 01 00	leaq	98630(%rip), %r14
10000681a:	41 ff c7	incl	%r15d
10000681d:	4c 89 e3	movq	%r12, %rbx
100006820:	44 3b bd 0c f5 ff ff	cmpl	-2804(%rbp), %r15d
100006827:	0f 85 b8 fe ff ff	jne	0x1000066e5
10000682d:	48 8d 05 64 77 01 00	leaq	96100(%rip), %rax
100006834:	80 38 00	cmpb	$0, (%rax)
100006837:	74 13	je	0x10000684c
100006839:	48 8d 3d d0 80 01 00	leaq	98512(%rip), %rdi
100006840:	48 8d 35 a9 80 01 00	leaq	98473(%rip), %rsi
100006847:	e8 c4 5e 00 00	callq	0x10000c710
10000684c:	48 8d 3d 7d 80 01 00	leaq	98429(%rip), %rdi
100006853:	e8 8b 5e 00 00	callq	0x10000c6e3
100006858:	48 8d 05 39 77 01 00	leaq	96057(%rip), %rax
10000685f:	80 38 00	cmpb	$0, (%rax)
100006862:	74 48	je	0x1000068ac
100006864:	83 3d 91 80 01 00 00	cmpl	$0, 98449(%rip)
10000686b:	0f 84 40 05 00 00	je	0x100006db1
100006871:	31 db	xorl	%ebx, %ebx
100006873:	4c 8d 35 76 80 01 00	leaq	98422(%rip), %r14
10000687a:	4c 8d 3d 4f 80 01 00	leaq	98383(%rip), %r15
100006881:	4c 89 f7	movq	%r14, %rdi
100006884:	89 de	movl	%ebx, %esi
100006886:	e8 65 5e 00 00	callq	0x10000c6f0
10000688b:	c6 80 89 01 00 00 01	movb	$1, 393(%rax)
100006892:	4c 89 ff	movq	%r15, %rdi
100006895:	48 89 c6	movq	%rax, %rsi
100006898:	e8 37 5e 00 00	callq	0x10000c6d4
10000689d:	ff c3	incl	%ebx
10000689f:	3b 1d 57 80 01 00	cmpl	98391(%rip), %ebx
1000068a5:	72 da	jb	0x100006881
1000068a7:	e9 05 05 00 00	jmp	0x100006db1
1000068ac:	8b 0d 3a 80 01 00	movl	98362(%rip), %ecx
1000068b2:	8b 05 44 80 01 00	movl	98372(%rip), %eax
1000068b8:	85 c0	testl	%eax, %eax
1000068ba:	0f 95 c2	setne	%dl
1000068bd:	45 31 f6	xorl	%r14d, %r14d
1000068c0:	85 c9	testl	%ecx, %ecx
1000068c2:	0f 95 c3	setne	%bl
1000068c5:	0f 84 26 01 00 00	je	0x1000069f1
1000068cb:	41 bc 00 00 00 00	movl	$0, %r12d
1000068d1:	85 c0	testl	%eax, %eax
1000068d3:	0f 84 1b 01 00 00	je	0x1000069f4
1000068d9:	45 31 e4	xorl	%r12d, %r12d
1000068dc:	45 31 f6	xorl	%r14d, %r14d
1000068df:	48 8d 3d 0a 80 01 00	leaq	98314(%rip), %rdi
1000068e6:	44 89 f6	movl	%r14d, %esi
1000068e9:	e8 02 5e 00 00	callq	0x10000c6f0
1000068ee:	49 89 c7	movq	%rax, %r15
1000068f1:	48 8d 3d e8 7f 01 00	leaq	98280(%rip), %rdi
1000068f8:	44 89 e6	movl	%r12d, %esi
1000068fb:	e8 f0 5d 00 00	callq	0x10000c6f0
100006900:	49 89 c5	movq	%rax, %r13
100006903:	8b 00	movl	(%rax), %eax
100006905:	41 2b 07	subl	(%r15), %eax
100006908:	78 34	js	0x10000693e
10000690a:	48 8d 05 87 76 01 00	leaq	95879(%rip), %rax
100006911:	8a 40 02	movb	2(%rax), %al
100006914:	0f 84 9d 00 00 00	je	0x1000069b7
10000691a:	84 c0	testb	%al, %al
10000691c:	0f 85 a7 00 00 00	jne	0x1000069c9
100006922:	41 c6 87 89 01 00 00 01	movb	$1, 393(%r15)
10000692a:	48 8d 3d 9f 7f 01 00	leaq	98207(%rip), %rdi
100006931:	4c 89 fe	movq	%r15, %rsi
100006934:	e8 9b 5d 00 00	callq	0x10000c6d4
100006939:	e9 8b 00 00 00	jmp	0x1000069c9
10000693e:	48 8d 05 53 76 01 00	leaq	95827(%rip), %rax
100006945:	80 78 02 00	cmpb	$0, 2(%rax)
100006949:	75 5f	jne	0x1000069aa
10000694b:	48 8d 3d 56 80 01 00	leaq	98390(%rip), %rdi
100006952:	4c 89 ee	movq	%r13, %rsi
100006955:	48 89 fa	movq	%rdi, %rdx
100006958:	e8 cd 9a 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
10000695d:	0f 57 c0	xorps	%xmm0, %xmm0
100006960:	0f 11 05 79 81 01 00	movups	%xmm0, 98681(%rip)
100006967:	0f 11 05 62 81 01 00	movups	%xmm0, 98658(%rip)
10000696e:	0f 11 05 4b 81 01 00	movups	%xmm0, 98635(%rip)
100006975:	0f 11 05 34 81 01 00	movups	%xmm0, 98612(%rip)
10000697c:	0f 11 05 1d 81 01 00	movups	%xmm0, 98589(%rip)
100006983:	0f 11 05 06 81 01 00	movups	%xmm0, 98566(%rip)
10000698a:	0f 11 05 ef 80 01 00	movups	%xmm0, 98543(%rip)
100006991:	0f 11 05 d8 80 01 00	movups	%xmm0, 98520(%rip)
100006998:	0f 11 05 c1 80 01 00	movups	%xmm0, 98497(%rip)
10000699f:	48 c7 05 46 81 01 00 00 00 00 00	movq	$0, 98630(%rip)
1000069aa:	4c 89 ef	movq	%r13, %rdi
1000069ad:	e8 e0 19 00 00	callq	0x100008392
1000069b2:	41 ff c4	incl	%r12d
1000069b5:	eb 15	jmp	0x1000069cc
1000069b7:	84 c0	testb	%al, %al
1000069b9:	75 0b	jne	0x1000069c6
1000069bb:	4c 89 ff	movq	%r15, %rdi
1000069be:	4c 89 ee	movq	%r13, %rsi
1000069c1:	e8 7d 1a 00 00	callq	0x100008443
1000069c6:	41 ff c4	incl	%r12d
1000069c9:	41 ff c6	incl	%r14d
1000069cc:	8b 0d 1a 7f 01 00	movl	98074(%rip), %ecx
1000069d2:	8b 05 24 7f 01 00	movl	98084(%rip), %eax
1000069d8:	41 39 c6	cmpl	%eax, %r14d
1000069db:	0f 92 c2	setb	%dl
1000069de:	41 39 cc	cmpl	%ecx, %r12d
1000069e1:	0f 92 c3	setb	%bl
1000069e4:	73 0e	jae	0x1000069f4
1000069e6:	41 39 c6	cmpl	%eax, %r14d
1000069e9:	0f 82 f0 fe ff ff	jb	0x1000068df
1000069ef:	eb 03	jmp	0x1000069f4
1000069f1:	45 31 e4	xorl	%r12d, %r12d
1000069f4:	84 db	testb	%bl, %bl
1000069f6:	0f 84 a7 00 00 00	je	0x100006aa3
1000069fc:	41 39 cc	cmpl	%ecx, %r12d
1000069ff:	0f 83 f0 00 00 00	jae	0x100006af5
100006a05:	4c 8d 35 d4 7e 01 00	leaq	98004(%rip), %r14
100006a0c:	4c 8d 3d 95 7f 01 00	leaq	98197(%rip), %r15
100006a13:	4c 89 f7	movq	%r14, %rdi
100006a16:	44 89 e6	movl	%r12d, %esi
100006a19:	e8 d2 5c 00 00	callq	0x10000c6f0
100006a1e:	48 89 c3	movq	%rax, %rbx
100006a21:	48 8d 05 70 75 01 00	leaq	95600(%rip), %rax
100006a28:	80 78 02 00	cmpb	$0, 2(%rax)
100006a2c:	75 5b	jne	0x100006a89
100006a2e:	4c 89 ff	movq	%r15, %rdi
100006a31:	48 89 de	movq	%rbx, %rsi
100006a34:	4c 89 fa	movq	%r15, %rdx
100006a37:	e8 ee 99 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
100006a3c:	0f 57 c0	xorps	%xmm0, %xmm0
100006a3f:	0f 11 05 9a 80 01 00	movups	%xmm0, 98458(%rip)
100006a46:	0f 11 05 83 80 01 00	movups	%xmm0, 98435(%rip)
100006a4d:	0f 11 05 6c 80 01 00	movups	%xmm0, 98412(%rip)
100006a54:	0f 11 05 55 80 01 00	movups	%xmm0, 98389(%rip)
100006a5b:	0f 11 05 3e 80 01 00	movups	%xmm0, 98366(%rip)
100006a62:	0f 11 05 27 80 01 00	movups	%xmm0, 98343(%rip)
100006a69:	0f 11 05 10 80 01 00	movups	%xmm0, 98320(%rip)
100006a70:	0f 11 05 f9 7f 01 00	movups	%xmm0, 98297(%rip)
100006a77:	0f 11 05 e2 7f 01 00	movups	%xmm0, 98274(%rip)
100006a7e:	48 c7 05 67 80 01 00 00 00 00 00	movq	$0, 98407(%rip)
100006a89:	48 89 df	movq	%rbx, %rdi
100006a8c:	e8 01 19 00 00	callq	0x100008392
100006a91:	41 ff c4	incl	%r12d
100006a94:	44 3b 25 51 7e 01 00	cmpl	97873(%rip), %r12d
100006a9b:	0f 82 72 ff ff ff	jb	0x100006a13
100006aa1:	eb 52	jmp	0x100006af5
100006aa3:	48 8d 0d ee 74 01 00	leaq	95470(%rip), %rcx
100006aaa:	8a 49 02	movb	2(%rcx), %cl
100006aad:	84 c9	testb	%cl, %cl
100006aaf:	0f 94 c3	sete	%bl
100006ab2:	20 da	andb	%bl, %dl
100006ab4:	80 fa 01	cmpb	$1, %dl
100006ab7:	75 46	jne	0x100006aff
100006ab9:	41 39 c6	cmpl	%eax, %r14d
100006abc:	73 37	jae	0x100006af5
100006abe:	4c 8d 3d 2b 7e 01 00	leaq	97835(%rip), %r15
100006ac5:	48 8d 1d 04 7e 01 00	leaq	97796(%rip), %rbx
100006acc:	4c 89 ff	movq	%r15, %rdi
100006acf:	44 89 f6	movl	%r14d, %esi
100006ad2:	e8 19 5c 00 00	callq	0x10000c6f0
100006ad7:	c6 80 89 01 00 00 01	movb	$1, 393(%rax)
100006ade:	48 89 df	movq	%rbx, %rdi
100006ae1:	48 89 c6	movq	%rax, %rsi
100006ae4:	e8 eb 5b 00 00	callq	0x10000c6d4
100006ae9:	41 ff c6	incl	%r14d
100006aec:	44 3b 35 09 7e 01 00	cmpl	97801(%rip), %r14d
100006af3:	72 d7	jb	0x100006acc
100006af5:	48 8d 05 9c 74 01 00	leaq	95388(%rip), %rax
100006afc:	8a 48 02	movb	2(%rax), %cl
100006aff:	84 c9	testb	%cl, %cl
100006b01:	0f 84 aa 02 00 00	je	0x100006db1
100006b07:	48 8d 1d d2 7d 01 00	leaq	97746(%rip), %rbx
100006b0e:	4c 8d 35 fb 7d 01 00	leaq	97787(%rip), %r14
100006b15:	48 89 df	movq	%rbx, %rdi
100006b18:	4c 89 f6	movq	%r14, %rsi
100006b1b:	e8 f0 5b 00 00	callq	0x10000c710
100006b20:	48 89 df	movq	%rbx, %rdi
100006b23:	4c 89 f6	movq	%r14, %rsi
100006b26:	e8 e5 5b 00 00	callq	0x10000c710
100006b2b:	8b 05 bb 7d 01 00	movl	97723(%rip), %eax
100006b31:	8b 0d c5 7d 01 00	movl	97733(%rip), %ecx
100006b37:	85 c9	testl	%ecx, %ecx
100006b39:	40 0f 95 c6	setne	%sil
100006b3d:	31 db	xorl	%ebx, %ebx
100006b3f:	85 c0	testl	%eax, %eax
100006b41:	0f 95 c2	setne	%dl
100006b44:	0f 84 f4 00 00 00	je	0x100006c3e
100006b4a:	41 be 00 00 00 00	movl	$0, %r14d
100006b50:	85 c9	testl	%ecx, %ecx
100006b52:	0f 84 e9 00 00 00	je	0x100006c41
100006b58:	45 31 f6	xorl	%r14d, %r14d
100006b5b:	4c 8d 3d 8e 7d 01 00	leaq	97678(%rip), %r15
100006b62:	4c 8d 25 77 7d 01 00	leaq	97655(%rip), %r12
100006b69:	31 db	xorl	%ebx, %ebx
100006b6b:	4c 89 ff	movq	%r15, %rdi
100006b6e:	89 de	movl	%ebx, %esi
100006b70:	e8 7b 5b 00 00	callq	0x10000c6f0
100006b75:	49 89 c5	movq	%rax, %r13
100006b78:	4c 89 e7	movq	%r12, %rdi
100006b7b:	44 89 f6	movl	%r14d, %esi
100006b7e:	e8 6d 5b 00 00	callq	0x10000c6f0
100006b83:	8b 08	movl	(%rax), %ecx
100006b85:	41 2b 4d 00	subl	(%r13), %ecx
100006b89:	78 1b	js	0x100006ba6
100006b8b:	74 7d	je	0x100006c0a
100006b8d:	41 c6 85 89 01 00 00 01	movb	$1, 393(%r13)
100006b95:	48 8d 3d 34 7d 01 00	leaq	97588(%rip), %rdi
100006b9c:	4c 89 ee	movq	%r13, %rsi
100006b9f:	e8 30 5b 00 00	callq	0x10000c6d4
100006ba4:	eb 72	jmp	0x100006c18
100006ba6:	48 8d 3d fb 7d 01 00	leaq	97787(%rip), %rdi
100006bad:	48 89 c6	movq	%rax, %rsi
100006bb0:	48 89 fa	movq	%rdi, %rdx
100006bb3:	e8 72 98 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
100006bb8:	0f 57 c0	xorps	%xmm0, %xmm0
100006bbb:	0f 11 05 1e 7f 01 00	movups	%xmm0, 98078(%rip)
100006bc2:	0f 11 05 07 7f 01 00	movups	%xmm0, 98055(%rip)
100006bc9:	0f 11 05 f0 7e 01 00	movups	%xmm0, 98032(%rip)
100006bd0:	0f 11 05 d9 7e 01 00	movups	%xmm0, 98009(%rip)
100006bd7:	0f 11 05 c2 7e 01 00	movups	%xmm0, 97986(%rip)
100006bde:	0f 11 05 ab 7e 01 00	movups	%xmm0, 97963(%rip)
100006be5:	0f 11 05 94 7e 01 00	movups	%xmm0, 97940(%rip)
100006bec:	0f 11 05 7d 7e 01 00	movups	%xmm0, 97917(%rip)
100006bf3:	0f 11 05 66 7e 01 00	movups	%xmm0, 97894(%rip)
100006bfa:	48 c7 05 eb 7e 01 00 00 00 00 00	movq	$0, 98027(%rip)
100006c05:	41 ff c6	incl	%r14d
100006c08:	eb 10	jmp	0x100006c1a
100006c0a:	4c 89 ef	movq	%r13, %rdi
100006c0d:	48 89 c6	movq	%rax, %rsi
100006c10:	e8 2e 18 00 00	callq	0x100008443
100006c15:	41 ff c6	incl	%r14d
100006c18:	ff c3	incl	%ebx
100006c1a:	8b 05 cc 7c 01 00	movl	97484(%rip), %eax
100006c20:	8b 0d d6 7c 01 00	movl	97494(%rip), %ecx
100006c26:	39 cb	cmpl	%ecx, %ebx
100006c28:	40 0f 92 c6	setb	%sil
100006c2c:	41 39 c6	cmpl	%eax, %r14d
100006c2f:	0f 92 c2	setb	%dl
100006c32:	73 0d	jae	0x100006c41
100006c34:	39 cb	cmpl	%ecx, %ebx
100006c36:	0f 82 2f ff ff ff	jb	0x100006b6b
100006c3c:	eb 03	jmp	0x100006c41
100006c3e:	45 31 f6	xorl	%r14d, %r14d
100006c41:	84 d2	testb	%dl, %dl
100006c43:	0f 84 8b 00 00 00	je	0x100006cd4
100006c49:	41 39 c6	cmpl	%eax, %r14d
100006c4c:	0f 83 c4 00 00 00	jae	0x100006d16
100006c52:	4c 8d 3d 87 7c 01 00	leaq	97415(%rip), %r15
100006c59:	48 8d 1d 48 7d 01 00	leaq	97608(%rip), %rbx
100006c60:	4c 89 ff	movq	%r15, %rdi
100006c63:	44 89 f6	movl	%r14d, %esi
100006c66:	e8 85 5a 00 00	callq	0x10000c6f0
100006c6b:	48 89 df	movq	%rbx, %rdi
100006c6e:	48 89 c6	movq	%rax, %rsi
100006c71:	48 89 da	movq	%rbx, %rdx
100006c74:	e8 b1 97 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
100006c79:	0f 57 c0	xorps	%xmm0, %xmm0
100006c7c:	0f 11 05 5d 7e 01 00	movups	%xmm0, 97885(%rip)
100006c83:	0f 11 05 46 7e 01 00	movups	%xmm0, 97862(%rip)
100006c8a:	0f 11 05 2f 7e 01 00	movups	%xmm0, 97839(%rip)
100006c91:	0f 11 05 18 7e 01 00	movups	%xmm0, 97816(%rip)
100006c98:	0f 11 05 01 7e 01 00	movups	%xmm0, 97793(%rip)
100006c9f:	0f 11 05 ea 7d 01 00	movups	%xmm0, 97770(%rip)
100006ca6:	0f 11 05 d3 7d 01 00	movups	%xmm0, 97747(%rip)
100006cad:	0f 11 05 bc 7d 01 00	movups	%xmm0, 97724(%rip)
100006cb4:	0f 11 05 a5 7d 01 00	movups	%xmm0, 97701(%rip)
100006cbb:	48 c7 05 2a 7e 01 00 00 00 00 00	movq	$0, 97834(%rip)
100006cc6:	41 ff c6	incl	%r14d
100006cc9:	44 3b 35 1c 7c 01 00	cmpl	97308(%rip), %r14d
100006cd0:	72 8e	jb	0x100006c60
100006cd2:	eb 42	jmp	0x100006d16
100006cd4:	39 cb	cmpl	%ecx, %ebx
100006cd6:	0f 92 c0	setb	%al
100006cd9:	40 20 c6	andb	%al, %sil
100006cdc:	40 80 fe 01	cmpb	$1, %sil
100006ce0:	75 34	jne	0x100006d16
100006ce2:	4c 8d 35 07 7c 01 00	leaq	97287(%rip), %r14
100006ce9:	4c 8d 3d e0 7b 01 00	leaq	97248(%rip), %r15
100006cf0:	4c 89 f7	movq	%r14, %rdi
100006cf3:	89 de	movl	%ebx, %esi
100006cf5:	e8 f6 59 00 00	callq	0x10000c6f0
100006cfa:	c6 80 89 01 00 00 01	movb	$1, 393(%rax)
100006d01:	4c 89 ff	movq	%r15, %rdi
100006d04:	48 89 c6	movq	%rax, %rsi
100006d07:	e8 c8 59 00 00	callq	0x10000c6d4
100006d0c:	ff c3	incl	%ebx
100006d0e:	3b 1d e8 7b 01 00	cmpl	97256(%rip), %ebx
100006d14:	72 da	jb	0x100006cf0
100006d16:	83 3d ef 7b 01 00 00	cmpl	$0, 97263(%rip)
100006d1d:	74 7f	je	0x100006d9e
100006d1f:	31 db	xorl	%ebx, %ebx
100006d21:	4c 8d 35 d8 7b 01 00	leaq	97240(%rip), %r14
100006d28:	4c 8d 3d 79 7c 01 00	leaq	97401(%rip), %r15
100006d2f:	4c 89 f7	movq	%r14, %rdi
100006d32:	89 de	movl	%ebx, %esi
100006d34:	e8 b7 59 00 00	callq	0x10000c6f0
100006d39:	4c 89 ff	movq	%r15, %rdi
100006d3c:	48 89 c6	movq	%rax, %rsi
100006d3f:	4c 89 fa	movq	%r15, %rdx
100006d42:	e8 e3 96 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
100006d47:	0f 57 c0	xorps	%xmm0, %xmm0
100006d4a:	0f 11 05 8f 7d 01 00	movups	%xmm0, 97679(%rip)
100006d51:	0f 11 05 78 7d 01 00	movups	%xmm0, 97656(%rip)
100006d58:	0f 11 05 61 7d 01 00	movups	%xmm0, 97633(%rip)
100006d5f:	0f 11 05 4a 7d 01 00	movups	%xmm0, 97610(%rip)
100006d66:	0f 11 05 33 7d 01 00	movups	%xmm0, 97587(%rip)
100006d6d:	0f 11 05 1c 7d 01 00	movups	%xmm0, 97564(%rip)
100006d74:	0f 11 05 05 7d 01 00	movups	%xmm0, 97541(%rip)
100006d7b:	0f 11 05 ee 7c 01 00	movups	%xmm0, 97518(%rip)
100006d82:	0f 11 05 d7 7c 01 00	movups	%xmm0, 97495(%rip)
100006d89:	48 c7 05 5c 7d 01 00 00 00 00 00	movq	$0, 97628(%rip)
100006d94:	ff c3	incl	%ebx
100006d96:	3b 1d 70 7b 01 00	cmpl	97136(%rip), %ebx
100006d9c:	72 91	jb	0x100006d2f
100006d9e:	48 8d 3d 2b 7b 01 00	leaq	97067(%rip), %rdi
100006da5:	48 8d 35 54 7b 01 00	leaq	97108(%rip), %rsi
100006dac:	e8 34 5a 00 00	callq	0x10000c7e5
100006db1:	48 8d 05 38 72 01 00	leaq	94776(%rip), %rax
100006db8:	80 78 40 00	cmpb	$0, 64(%rax)
100006dbc:	0f 84 fc 01 00 00	je	0x100006fbe
100006dc2:	48 8d 3d 57 7b 01 00	leaq	97111(%rip), %rdi
100006dc9:	e8 7d 5a 00 00	callq	0x10000c84b
100006dce:	48 8d 05 c3 71 01 00	leaq	94659(%rip), %rax
100006dd5:	80 38 00	cmpb	$0, (%rax)
100006dd8:	74 5c	je	0x100006e36
100006dda:	83 3d 6b 7b 01 00 00	cmpl	$0, 97131(%rip)
100006de1:	74 29	je	0x100006e0c
100006de3:	31 db	xorl	%ebx, %ebx
100006de5:	4c 8d 35 54 7b 01 00	leaq	97108(%rip), %r14
100006dec:	4c 89 f7	movq	%r14, %rdi
100006def:	89 de	movl	%ebx, %esi
100006df1:	e8 62 5a 00 00	callq	0x10000c858
100006df6:	48 8b 38	movq	(%rax), %rdi
100006df9:	48 8d 70 08	leaq	8(%rax), %rsi
100006dfd:	e8 63 17 00 00	callq	0x100008565
100006e02:	ff c3	incl	%ebx
100006e04:	3b 1d 42 7b 01 00	cmpl	97090(%rip), %ebx
100006e0a:	72 e0	jb	0x100006dec
100006e0c:	48 8d 3d 0d 7b 01 00	leaq	97037(%rip), %rdi
100006e13:	48 8d 1d 26 7b 01 00	leaq	97062(%rip), %rbx
100006e1a:	48 89 de	movq	%rbx, %rsi
100006e1d:	e8 52 5a 00 00	callq	0x10000c874
100006e22:	48 8d 3d 27 7b 01 00	leaq	97063(%rip), %rdi
100006e29:	48 89 de	movq	%rbx, %rsi
100006e2c:	e8 43 5a 00 00	callq	0x10000c874
100006e31:	e9 88 01 00 00	jmp	0x100006fbe
100006e36:	80 78 02 00	cmpb	$0, 2(%rax)
100006e3a:	74 13	je	0x100006e4f
100006e3c:	48 8d 3d ed 7a 01 00	leaq	97005(%rip), %rdi
100006e43:	48 8d 35 06 7b 01 00	leaq	97030(%rip), %rsi
100006e4a:	e8 25 5a 00 00	callq	0x10000c874
100006e4f:	8b 05 f7 7a 01 00	movl	97015(%rip), %eax
100006e55:	85 c0	testl	%eax, %eax
100006e57:	0f 95 c1	setne	%cl
100006e5a:	31 db	xorl	%ebx, %ebx
100006e5c:	83 3d d9 7a 01 00 00	cmpl	$0, 96985(%rip)
100006e63:	0f 84 20 01 00 00	je	0x100006f89
100006e69:	85 c0	testl	%eax, %eax
100006e6b:	0f 84 18 01 00 00	je	0x100006f89
100006e71:	31 db	xorl	%ebx, %ebx
100006e73:	4c 8d 2d c6 7a 01 00	leaq	96966(%rip), %r13
100006e7a:	45 31 f6	xorl	%r14d, %r14d
100006e7d:	4c 89 ef	movq	%r13, %rdi
100006e80:	89 de	movl	%ebx, %esi
100006e82:	e8 d1 59 00 00	callq	0x10000c858
100006e87:	49 89 c7	movq	%rax, %r15
100006e8a:	48 8d 3d 9f 7a 01 00	leaq	96927(%rip), %rdi
100006e91:	44 89 f6	movl	%r14d, %esi
100006e94:	e8 bf 59 00 00	callq	0x10000c858
100006e99:	49 8b 3f	movq	(%r15), %rdi
100006e9c:	48 39 38	cmpq	%rdi, (%rax)
100006e9f:	73 08	jae	0x100006ea9
100006ea1:	41 ff c6	incl	%r14d
100006ea4:	e9 c4 00 00 00	jmp	0x100006f6d
100006ea9:	0f 85 a1 00 00 00	jne	0x100006f50
100006eaf:	49 89 c4	movq	%rax, %r12
100006eb2:	ba 18 02 00 00	movl	$536, %edx
100006eb7:	48 8d bd 40 fd ff ff	leaq	-704(%rbp), %rdi
100006ebe:	4c 89 fe	movq	%r15, %rsi
100006ec1:	e8 0a 95 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100006ec6:	49 83 c7 08	addq	$8, %r15
100006eca:	4d 8d 6c 24 08	leaq	8(%r12), %r13
100006ecf:	ba 80 00 00 00	movl	$128, %edx
100006ed4:	4c 89 ff	movq	%r15, %rdi
100006ed7:	4c 89 ee	movq	%r13, %rsi
100006eda:	e8 1f 94 00 00	callq	0x1000102fe ## symbol stub for: ___strcpy_chk
100006edf:	ba 80 00 00 00	movl	$128, %edx
100006ee4:	48 8d bd 48 fd ff ff	leaq	-696(%rbp), %rdi
100006eeb:	4c 89 ee	movq	%r13, %rsi
100006eee:	4c 8d bd c8 fd ff ff	leaq	-568(%rbp), %r15
100006ef5:	e8 04 94 00 00	callq	0x1000102fe ## symbol stub for: ___strcpy_chk
100006efa:	49 81 c4 88 00 00 00	addq	$136, %r12
100006f01:	4c 89 ff	movq	%r15, %rdi
100006f04:	4c 89 e6	movq	%r12, %rsi
100006f07:	4c 89 fa	movq	%r15, %rdx
100006f0a:	48 8d 8d 30 f9 ff ff	leaq	-1744(%rbp), %rcx
100006f11:	e8 1a 95 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
100006f16:	80 bd 30 f9 ff ff 00	cmpb	$0, -1744(%rbp)
100006f1d:	74 10	je	0x100006f2f
100006f1f:	4c 89 ff	movq	%r15, %rdi
100006f22:	4c 89 fe	movq	%r15, %rsi
100006f25:	4c 89 fa	movq	%r15, %rdx
100006f28:	31 c9	xorl	%ecx, %ecx
100006f2a:	e8 01 95 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
100006f2f:	48 8d 3d ea 79 01 00	leaq	96746(%rip), %rdi
100006f36:	48 8d b5 40 fd ff ff	leaq	-704(%rbp), %rsi
100006f3d:	e8 fa 58 00 00	callq	0x10000c83c
100006f42:	41 ff c6	incl	%r14d
100006f45:	ff c3	incl	%ebx
100006f47:	4c 8d 2d f2 79 01 00	leaq	96754(%rip), %r13
100006f4e:	eb 1d	jmp	0x100006f6d
100006f50:	4c 89 fe	movq	%r15, %rsi
100006f53:	48 83 c6 08	addq	$8, %rsi
100006f57:	e8 09 16 00 00	callq	0x100008565
100006f5c:	48 8d 3d bd 79 01 00	leaq	96701(%rip), %rdi
100006f63:	4c 89 fe	movq	%r15, %rsi
100006f66:	e8 d1 58 00 00	callq	0x10000c83c
100006f6b:	ff c3	incl	%ebx
100006f6d:	8b 05 d9 79 01 00	movl	96729(%rip), %eax
100006f73:	39 c3	cmpl	%eax, %ebx
100006f75:	0f 92 c1	setb	%cl
100006f78:	44 3b 35 bd 79 01 00	cmpl	96701(%rip), %r14d
100006f7f:	73 08	jae	0x100006f89
100006f81:	39 c3	cmpl	%eax, %ebx
100006f83:	0f 82 f4 fe ff ff	jb	0x100006e7d
100006f89:	84 c9	testb	%cl, %cl
100006f8b:	74 31	je	0x100006fbe
100006f8d:	39 c3	cmpl	%eax, %ebx
100006f8f:	73 2d	jae	0x100006fbe
100006f91:	4c 8d 35 a8 79 01 00	leaq	96680(%rip), %r14
100006f98:	4c 8d 3d 81 79 01 00	leaq	96641(%rip), %r15
100006f9f:	4c 89 f7	movq	%r14, %rdi
100006fa2:	89 de	movl	%ebx, %esi
100006fa4:	e8 af 58 00 00	callq	0x10000c858
100006fa9:	4c 89 ff	movq	%r15, %rdi
100006fac:	48 89 c6	movq	%rax, %rsi
100006faf:	e8 88 58 00 00	callq	0x10000c83c
100006fb4:	ff c3	incl	%ebx
100006fb6:	3b 1d 90 79 01 00	cmpl	96656(%rip), %ebx
100006fbc:	72 e1	jb	0x100006f9f
100006fbe:	48 8d 3d 0b 79 01 00	leaq	96523(%rip), %rdi
100006fc5:	31 f6	xorl	%esi, %esi
100006fc7:	e8 24 57 00 00	callq	0x10000c6f0
100006fcc:	48 89 c3	movq	%rax, %rbx
100006fcf:	4c 8d 35 d2 79 01 00	leaq	96722(%rip), %r14
100006fd6:	48 8b 05 3b 7b 01 00	movq	97083(%rip), %rax
100006fdd:	48 89 83 70 01 00 00	movq	%rax, 368(%rbx)
100006fe4:	48 8d bd 30 f9 ff ff	leaq	-1744(%rbp), %rdi
100006feb:	ba 08 02 00 00	movl	$520, %edx
100006ff0:	48 89 de	movq	%rbx, %rsi
100006ff3:	e8 d8 93 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100006ff8:	4c 8d bd 40 fd ff ff	leaq	-704(%rbp), %r15
100006fff:	48 89 df	movq	%rbx, %rdi
100007002:	4c 89 f6	movq	%r14, %rsi
100007005:	48 89 da	movq	%rbx, %rdx
100007008:	4c 89 f9	movq	%r15, %rcx
10000700b:	e8 20 94 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
100007010:	41 8a 07	movb	(%r15), %al
100007013:	88 83 8a 01 00 00	movb	%al, 394(%rbx)
100007019:	84 c0	testb	%al, %al
10000701b:	0f 84 e8 00 00 00	je	0x100007109
100007021:	4c 8d b5 30 f9 ff ff	leaq	-1744(%rbp), %r14
100007028:	ba 08 02 00 00	movl	$520, %edx
10000702d:	48 89 df	movq	%rbx, %rdi
100007030:	4c 89 f6	movq	%r14, %rsi
100007033:	e8 98 93 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100007038:	4c 8d bd 40 fd ff ff	leaq	-704(%rbp), %r15
10000703f:	4c 89 ff	movq	%r15, %rdi
100007042:	e8 88 11 00 00	callq	0x1000081cf
100007047:	ba 08 02 00 00	movl	$520, %edx
10000704c:	4c 89 f7	movq	%r14, %rdi
10000704f:	4c 89 fe	movq	%r15, %rsi
100007052:	e8 79 93 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100007057:	48 8d b5 38 fb ff ff	leaq	-1224(%rbp), %rsi
10000705e:	4c 8d bd 08 f5 ff ff	leaq	-2808(%rbp), %r15
100007065:	4c 89 f7	movq	%r14, %rdi
100007068:	4c 89 f2	movq	%r14, %rdx
10000706b:	4c 89 f9	movq	%r15, %rcx
10000706e:	e8 bd 93 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
100007073:	41 8a 07	movb	(%r15), %al
100007076:	41 88 86 8a 01 00 00	movb	%al, 394(%r14)
10000707d:	48 89 df	movq	%rbx, %rdi
100007080:	4c 89 f6	movq	%r14, %rsi
100007083:	48 89 da	movq	%rbx, %rdx
100007086:	e8 9f 93 00 00	callq	0x10001042a ## symbol stub for: _pm_task_add
10000708b:	4c 8d 3d 16 79 01 00	leaq	96534(%rip), %r15
100007092:	48 8b 05 7f 7a 01 00	movq	96895(%rip), %rax
100007099:	48 89 83 70 01 00 00	movq	%rax, 368(%rbx)
1000070a0:	ba 08 02 00 00	movl	$520, %edx
1000070a5:	4c 89 f7	movq	%r14, %rdi
1000070a8:	48 89 de	movq	%rbx, %rsi
1000070ab:	e8 20 93 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
1000070b0:	4c 8d b5 08 f5 ff ff	leaq	-2808(%rbp), %r14
1000070b7:	48 89 df	movq	%rbx, %rdi
1000070ba:	4c 89 fe	movq	%r15, %rsi
1000070bd:	48 89 da	movq	%rbx, %rdx
1000070c0:	4c 89 f1	movq	%r14, %rcx
1000070c3:	e8 68 93 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
1000070c8:	41 8a 06	movb	(%r14), %al
1000070cb:	88 83 8a 01 00 00	movb	%al, 394(%rbx)
1000070d1:	84 c0	testb	%al, %al
1000070d3:	74 34	je	0x100007109
1000070d5:	48 8b 05 94 11 01 00	movq	70036(%rip), %rax ## literal pool symbol address: ___stderrp
1000070dc:	48 8b 08	movq	(%rax), %rcx
1000070df:	48 8d 3d 65 c6 00 00	leaq	50789(%rip), %rdi ## literal pool for: "Second underflow occured.\n"
1000070e6:	be 1a 00 00 00	movl	$26, %esi
1000070eb:	ba 01 00 00 00	movl	$1, %edx
1000070f0:	e8 75 92 00 00	callq	0x10001036a ## symbol stub for: _fwrite
1000070f5:	48 8d b5 30 f9 ff ff	leaq	-1744(%rbp), %rsi
1000070fc:	ba 08 02 00 00	movl	$520, %edx
100007101:	48 89 df	movq	%rbx, %rdi
100007104:	e8 c7 92 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100007109:	48 8d 0d 88 6e 01 00	leaq	93832(%rip), %rcx
100007110:	0f b6 41 02	movzbl	2(%rcx), %eax
100007114:	48 8b 44 c1 30	movq	48(%rcx,%rax,8), %rax
100007119:	48 89 83 70 01 00 00	movq	%rax, 368(%rbx)
100007120:	4c 8d 3d c9 6e 01 00	leaq	93897(%rip), %r15
100007127:	41 80 7f 40 00	cmpb	$0, 64(%r15)
10000712c:	74 4f	je	0x10000717d
10000712e:	4c 8d b5 10 f5 ff ff	leaq	-2800(%rbp), %r14
100007135:	be 18 02 00 00	movl	$536, %esi
10000713a:	4c 89 f7	movq	%r14, %rdi
10000713d:	e8 9e 91 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
100007142:	48 b8 41 4c 49 54 49 4f 4e 00	movabsq	$22042224548727873, %rax
10000714c:	49 89 46 15	movq	%rax, 21(%r14)
100007150:	0f 10 05 0f c6 00 00	movups	50703(%rip), %xmm0 ## literal pool for: "DEAD_TASKS_COALITION"
100007157:	41 0f 11 46 08	movups	%xmm0, 8(%r14)
10000715c:	48 8b 93 70 01 00 00	movq	368(%rbx), %rdx
100007163:	4c 89 f7	movq	%r14, %rdi
100007166:	48 89 de	movq	%rbx, %rsi
100007169:	e8 47 11 00 00	callq	0x1000082b5
10000716e:	48 8d 3d ab 77 01 00	leaq	96171(%rip), %rdi
100007175:	4c 89 f6	movq	%r14, %rsi
100007178:	e8 bf 56 00 00	callq	0x10000c83c
10000717d:	48 8d 3d 4c 77 01 00	leaq	96076(%rip), %rdi
100007184:	48 8d 35 ad 1f 01 00	leaq	73645(%rip), %rsi
10000718b:	e8 c5 55 00 00	callq	0x10000c755
100007190:	41 80 7f 40 00	cmpb	$0, 64(%r15)
100007195:	74 26	je	0x1000071bd
100007197:	48 8d 3d 32 77 01 00	leaq	96050(%rip), %rdi
10000719e:	48 8d 35 35 01 00 00	leaq	309(%rip), %rsi
1000071a5:	e8 90 55 00 00	callq	0x10000c73a
1000071aa:	48 8d 3d 6f 77 01 00	leaq	96111(%rip), %rdi
1000071b1:	48 8d 35 c0 1f 01 00	leaq	73664(%rip), %rsi
1000071b8:	e8 fc 56 00 00	callq	0x10000c8b9
1000071bd:	48 8b 05 a4 10 01 00	movq	69796(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000071c4:	48 8b 00	movq	(%rax), %rax
1000071c7:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000071cb:	75 1c	jne	0x1000071e9
1000071cd:	48 81 c4 e8 0a 00 00	addq	$2792, %rsp
1000071d4:	5b	popq	%rbx
1000071d5:	41 5c	popq	%r12
1000071d7:	41 5d	popq	%r13
1000071d9:	41 5e	popq	%r14
1000071db:	41 5f	popq	%r15
1000071dd:	5d	popq	%rbp
1000071de:	c3	retq
1000071df:	e8 15 8b 00 00	callq	0x10000fcf9
1000071e4:	e8 ed 8a 00 00	callq	0x10000fcd6
1000071e9:	e8 0a 91 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
1000071ee:	55	pushq	%rbp
1000071ef:	48 89 e5	movq	%rsp, %rbp
1000071f2:	48 8b 87 8c 00 00 00	movq	140(%rdi), %rax
1000071f9:	48 03 87 84 00 00 00	addq	132(%rdi), %rax
100007200:	48 8b 8e 8c 00 00 00	movq	140(%rsi), %rcx
100007207:	48 03 8e 84 00 00 00	addq	132(%rsi), %rcx
10000720e:	31 d2	xorl	%edx, %edx
100007210:	48 39 c8	cmpq	%rcx, %rax
100007213:	0f 92 c2	setb	%dl
100007216:	b8 ff ff ff ff	movl	$4294967295, %eax
10000721b:	0f 46 c2	cmovbel	%edx, %eax
10000721e:	5d	popq	%rbp
10000721f:	c3	retq
100007220:	55	pushq	%rbp
100007221:	48 89 e5	movq	%rsp, %rbp
100007224:	48 8b 87 9c 00 00 00	movq	156(%rdi), %rax
10000722b:	31 c9	xorl	%ecx, %ecx
10000722d:	48 3b 86 9c 00 00 00	cmpq	156(%rsi), %rax
100007234:	0f 92 c1	setb	%cl
100007237:	b8 ff ff ff ff	movl	$4294967295, %eax
10000723c:	0f 46 c1	cmovbel	%ecx, %eax
10000723f:	5d	popq	%rbp
100007240:	c3	retq
100007241:	55	pushq	%rbp
100007242:	48 89 e5	movq	%rsp, %rbp
100007245:	41 56	pushq	%r14
100007247:	53	pushq	%rbx
100007248:	48 83 ec 10	subq	$16, %rsp
10000724c:	4c 8d 35 9d 6d 01 00	leaq	93597(%rip), %r14
100007253:	f2 41 0f 10 46 30	movsd	48(%r14), %xmm0
100007259:	0f 14 05 a0 f4 00 00	unpcklps	62624(%rip), %xmm0
100007260:	66 0f 5c 05 a8 f4 00 00	subpd	62632(%rip), %xmm0
100007268:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000726c:	48 89 f3	movq	%rsi, %rbx
10000726f:	f2 0f 5e 05 a9 f4 00 00	divsd	62633(%rip), %xmm0
100007277:	e8 96 91 00 00	callq	0x100010412 ## symbol stub for: _pm_energy_impact_internal
10000727c:	f2 0f 11 45 e8	movsd	%xmm0, -24(%rbp)
100007281:	f2 41 0f 10 46 30	movsd	48(%r14), %xmm0
100007287:	0f 14 05 72 f4 00 00	unpcklps	62578(%rip), %xmm0
10000728e:	66 0f 5c 05 7a f4 00 00	subpd	62586(%rip), %xmm0
100007296:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000729a:	f2 0f 5e 05 7e f4 00 00	divsd	62590(%rip), %xmm0
1000072a2:	48 89 df	movq	%rbx, %rdi
1000072a5:	e8 68 91 00 00	callq	0x100010412 ## symbol stub for: _pm_energy_impact_internal
1000072aa:	f2 0f 10 4d e8	movsd	-24(%rbp), %xmm1
1000072af:	b8 ff ff ff ff	movl	$4294967295, %eax
1000072b4:	66 0f 2e c8	ucomisd	%xmm0, %xmm1
1000072b8:	77 0d	ja	0x1000072c7
1000072ba:	31 c0	xorl	%eax, %eax
1000072bc:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
1000072c0:	76 05	jbe	0x1000072c7
1000072c2:	b8 01 00 00 00	movl	$1, %eax
1000072c7:	48 83 c4 10	addq	$16, %rsp
1000072cb:	5b	popq	%rbx
1000072cc:	41 5e	popq	%r14
1000072ce:	5d	popq	%rbp
1000072cf:	c3	retq
1000072d0:	55	pushq	%rbp
1000072d1:	48 89 e5	movq	%rsp, %rbp
1000072d4:	8b 07	movl	(%rdi), %eax
1000072d6:	2b 06	subl	(%rsi), %eax
1000072d8:	5d	popq	%rbp
1000072d9:	c3	retq
1000072da:	55	pushq	%rbp
1000072db:	48 89 e5	movq	%rsp, %rbp
1000072de:	48 8b 87 90 01 00 00	movq	400(%rdi), %rax
1000072e5:	31 c9	xorl	%ecx, %ecx
1000072e7:	48 3b 86 90 01 00 00	cmpq	400(%rsi), %rax
1000072ee:	0f 95 c1	setne	%cl
1000072f1:	b8 ff ff ff ff	movl	$4294967295, %eax
1000072f6:	0f 43 c1	cmovael	%ecx, %eax
1000072f9:	5d	popq	%rbp
1000072fa:	c3	retq
1000072fb:	55	pushq	%rbp
1000072fc:	48 89 e5	movq	%rsp, %rbp
1000072ff:	41 57	pushq	%r15
100007301:	41 56	pushq	%r14
100007303:	41 55	pushq	%r13
100007305:	41 54	pushq	%r12
100007307:	53	pushq	%rbx
100007308:	48 81 ec 38 02 00 00	subq	$568, %rsp
10000730f:	41 89 f4	movl	%esi, %r12d
100007312:	48 89 fb	movq	%rdi, %rbx
100007315:	48 8b 05 4c 0f 01 00	movq	69452(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000731c:	48 8b 00	movq	(%rax), %rax
10000731f:	48 89 45 d0	movq	%rax, -48(%rbp)
100007323:	4c 8d 2d 6e 6c 01 00	leaq	93294(%rip), %r13
10000732a:	80 bf 8a 01 00 00 00	cmpb	$0, 394(%rdi)
100007331:	74 78	je	0x1000073ab
100007333:	48 8d 05 b6 6c 01 00	leaq	93366(%rip), %rax
10000733a:	8b 48 28	movl	40(%rax), %ecx
10000733d:	83 f9 01	cmpl	$1, %ecx
100007340:	0f 84 87 06 00 00	je	0x1000079cd
100007346:	85 c9	testl	%ecx, %ecx
100007348:	0f 85 f0 0d 00 00	jne	0x10000813e
10000734e:	49 8b 7d 50	movq	80(%r13), %rdi
100007352:	4c 8d 05 81 b0 00 00	leaq	45185(%rip), %r8 ## literal pool for: "  "
100007359:	48 8d 05 26 a2 00 00	leaq	41510(%rip), %rax ## literal pool for: ""
100007360:	45 84 e4	testb	%r12b, %r12b
100007363:	48 89 c2	movq	%rax, %rdx
100007366:	49 0f 45 d0	cmovneq	%r8, %rdx
10000736a:	4c 0f 45 c0	cmovneq	%rax, %r8
10000736e:	44 8b 0b	movl	(%rbx), %r9d
100007371:	48 8b 05 f0 0e 01 00	movq	69360(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100007378:	48 8b 00	movq	(%rax), %rax
10000737b:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000737f:	0f 85 e0 0d 00 00	jne	0x100008165
100007385:	48 83 c3 04	addq	$4, %rbx
100007389:	48 8d 35 ae b6 00 00	leaq	46766(%rip), %rsi ## literal pool for: "%s%-32s%s %-5d  INVALID\n"
100007390:	48 89 d9	movq	%rbx, %rcx
100007393:	31 c0	xorl	%eax, %eax
100007395:	48 81 c4 38 02 00 00	addq	$568, %rsp
10000739c:	5b	popq	%rbx
10000739d:	41 5c	popq	%r12
10000739f:	41 5d	popq	%r13
1000073a1:	41 5e	popq	%r14
1000073a3:	41 5f	popq	%r15
1000073a5:	5d	popq	%rbp
1000073a6:	e9 a7 8f 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
1000073ab:	48 8b 8b 84 00 00 00	movq	132(%rbx), %rcx
1000073b2:	48 8b 83 8c 00 00 00	movq	140(%rbx), %rax
1000073b9:	48 01 c8	addq	%rcx, %rax
1000073bc:	0f 84 7c 0d 00 00	je	0x10000813e
1000073c2:	f2 44 0f 10 bb 70 01 00 00	movsd	368(%rbx), %xmm15
1000073cb:	66 0f 28 1d 2d f3 00 00	movapd	62253(%rip), %xmm3
1000073d3:	44 0f 14 fb	unpcklps	%xmm3, %xmm15
1000073d7:	66 44 0f 28 25 30 f3 00 00	movapd	62256(%rip), %xmm12
1000073e0:	66 45 0f 5c fc	subpd	%xmm12, %xmm15
1000073e5:	66 45 0f 7c ff	haddpd	%xmm15, %xmm15
1000073ea:	f2 45 0f 10 45 08	movsd	8(%r13), %xmm8
1000073f0:	f2 45 0f 59 f8	mulsd	%xmm8, %xmm15
1000073f5:	66 41 0f 28 ef	movapd	%xmm15, %xmm5
1000073fa:	f2 0f 5e 2d 1e f3 00 00	divsd	62238(%rip), %xmm5
100007402:	66 0f 57 d2	xorpd	%xmm2, %xmm2
100007406:	66 0f 2e ea	ucomisd	%xmm2, %xmm5
10000740a:	75 06	jne	0x100007412
10000740c:	0f 8b 2c 0d 00 00	jnp	0x10000813e
100007412:	4c 8b 83 94 00 00 00	movq	148(%rbx), %r8
100007419:	4c 8b 8b 9c 00 00 00	movq	156(%rbx), %r9
100007420:	48 8b b3 a4 00 00 00	movq	164(%rbx), %rsi
100007427:	48 8b bb ac 00 00 00	movq	172(%rbx), %rdi
10000742e:	f2 0f 10 93 38 01 00 00	movsd	312(%rbx), %xmm2
100007436:	0f 29 95 20 ff ff ff	movaps	%xmm2, -224(%rbp)
10000743d:	f2 0f 10 93 40 01 00 00	movsd	320(%rbx), %xmm2
100007445:	0f 29 95 10 ff ff ff	movaps	%xmm2, -240(%rbp)
10000744c:	f2 0f 10 93 48 01 00 00	movsd	328(%rbx), %xmm2
100007454:	0f 29 95 00 ff ff ff	movaps	%xmm2, -256(%rbp)
10000745b:	f2 0f 10 8b c0 00 00 00	movsd	192(%rbx), %xmm1
100007463:	0f 29 8d 60 ff ff ff	movaps	%xmm1, -160(%rbp)
10000746a:	f2 0f 10 93 c8 00 00 00	movsd	200(%rbx), %xmm2
100007472:	0f 29 95 50 ff ff ff	movaps	%xmm2, -176(%rbp)
100007479:	f2 0f 10 93 d0 00 00 00	movsd	208(%rbx), %xmm2
100007481:	0f 29 95 40 ff ff ff	movaps	%xmm2, -192(%rbp)
100007488:	f2 0f 10 8b d8 00 00 00	movsd	216(%rbx), %xmm1
100007490:	0f 29 8d 30 ff ff ff	movaps	%xmm1, -208(%rbp)
100007497:	f2 44 0f 10 ab e8 00 00 00	movsd	232(%rbx), %xmm13
1000074a0:	44 8b b3 c8 01 00 00	movl	456(%rbx), %r14d
1000074a7:	f2 0f 10 b3 50 01 00 00	movsd	336(%rbx), %xmm6
1000074af:	f2 0f 10 93 00 01 00 00	movsd	256(%rbx), %xmm2
1000074b7:	f2 0f 10 bb 08 01 00 00	movsd	264(%rbx), %xmm7
1000074bf:	f2 0f 10 8b 10 01 00 00	movsd	272(%rbx), %xmm1
1000074c7:	f2 0f 10 83 18 01 00 00	movsd	280(%rbx), %xmm0
1000074cf:	0f 29 85 f0 fe ff ff	movaps	%xmm0, -272(%rbp)
1000074d6:	f2 0f 10 83 20 01 00 00	movsd	288(%rbx), %xmm0
1000074de:	f2 44 0f 10 93 28 01 00 00	movsd	296(%rbx), %xmm10
1000074e7:	f2 44 0f 10 8b 30 01 00 00	movsd	304(%rbx), %xmm9
1000074f0:	41 0f b6 55 02	movzbl	2(%r13), %edx
1000074f5:	f2 41 0f 10 64 d5 30	movsd	48(%r13,%rdx,8), %xmm4
1000074fc:	0f 29 65 90	movaps	%xmm4, -112(%rbp)
100007500:	84 d2	testb	%dl, %dl
100007502:	75 0d	jne	0x100007511
100007504:	80 bb 88 01 00 00 00	cmpb	$0, 392(%rbx)
10000750b:	0f 85 4f 0c 00 00	jne	0x100008160
100007511:	66 48 0f 6e e1	movq	%rcx, %xmm4
100007516:	66 0f 62 e3	punpckldq	%xmm3, %xmm4
10000751a:	66 41 0f 5c e4	subpd	%xmm12, %xmm4
10000751f:	66 0f 7c e4	haddpd	%xmm4, %xmm4
100007523:	66 4c 0f 6e d8	movq	%rax, %xmm11
100007528:	66 44 0f 62 db	punpckldq	%xmm3, %xmm11
10000752d:	66 45 0f 5c dc	subpd	%xmm12, %xmm11
100007532:	66 45 0f 7c db	haddpd	%xmm11, %xmm11
100007537:	66 41 0f 28 df	movapd	%xmm15, %xmm3
10000753c:	f2 41 0f 5e e3	divsd	%xmm11, %xmm4
100007541:	66 0f 29 a5 40 fe ff ff	movapd	%xmm4, -448(%rbp)
100007549:	f2 45 0f 59 d8	mulsd	%xmm8, %xmm11
10000754e:	f2 44 0f 10 35 59 05 01 00	movsd	66905(%rip), %xmm14
100007557:	f2 44 0f 59 f5	mulsd	%xmm5, %xmm14
10000755c:	66 41 0f 28 e3	movapd	%xmm11, %xmm4
100007561:	66 4d 0f 6e e0	movq	%r8, %xmm12
100007566:	66 44 0f 62 25 91 f1 00 00	punpckldq	61841(%rip), %xmm12
10000756f:	66 44 0f 5c 25 98 f1 00 00	subpd	61848(%rip), %xmm12
100007578:	66 45 0f 7c e4	haddpd	%xmm12, %xmm12
10000757d:	44 0f 14 2d 7b f1 00 00	unpcklps	61819(%rip), %xmm13
100007585:	66 44 0f 5c 2d 82 f1 00 00	subpd	61826(%rip), %xmm13
10000758e:	66 45 0f 7c ed	haddpd	%xmm13, %xmm13
100007593:	f2 41 0f 5e e6	divsd	%xmm14, %xmm4
100007598:	66 0f 29 a5 50 fe ff ff	movapd	%xmm4, -432(%rbp)
1000075a0:	f2 45 0f 59 e8	mulsd	%xmm8, %xmm13
1000075a5:	f2 45 0f 5e ee	divsd	%xmm14, %xmm13
1000075aa:	66 44 0f 29 ad e0 fd ff ff	movapd	%xmm13, -544(%rbp)
1000075b3:	0f 14 35 46 f1 00 00	unpcklps	61766(%rip), %xmm6
1000075ba:	66 0f 5c 35 4e f1 00 00	subpd	61774(%rip), %xmm6
1000075c2:	66 0f 7c f6	haddpd	%xmm6, %xmm6
1000075c6:	f2 41 0f 5e f6	divsd	%xmm14, %xmm6
1000075cb:	66 0f 28 25 3d f1 00 00	movapd	61757(%rip), %xmm4
1000075d3:	66 44 0f 28 ee	movapd	%xmm6, %xmm13
1000075d8:	66 0f 28 f4	movapd	%xmm4, %xmm6
1000075dc:	66 49 0f 6e e1	movq	%r9, %xmm4
1000075e1:	66 0f 62 25 17 f1 00 00	punpckldq	61719(%rip), %xmm4
1000075e9:	66 0f 5c e6	subpd	%xmm6, %xmm4
1000075ed:	66 0f 7c e4	haddpd	%xmm4, %xmm4
1000075f1:	0f 14 15 08 f1 00 00	unpcklps	61704(%rip), %xmm2
1000075f8:	66 0f 5c d6	subpd	%xmm6, %xmm2
1000075fc:	66 0f 7c d2	haddpd	%xmm2, %xmm2
100007600:	f2 0f 5e 1d 50 f1 00 00	divsd	61776(%rip), %xmm3
100007608:	f2 41 0f 59 d0	mulsd	%xmm8, %xmm2
10000760d:	0f 14 3d ec f0 00 00	unpcklps	61676(%rip), %xmm7
100007614:	66 0f 5c fe	subpd	%xmm6, %xmm7
100007618:	66 0f 7c ff	haddpd	%xmm7, %xmm7
10000761c:	f2 0f 5e d3	divsd	%xmm3, %xmm2
100007620:	66 0f 29 95 20 fe ff ff	movapd	%xmm2, -480(%rbp)
100007628:	f2 41 0f 59 f8	mulsd	%xmm8, %xmm7
10000762d:	f2 0f 5e fb	divsd	%xmm3, %xmm7
100007631:	66 0f 29 bd 10 fe ff ff	movapd	%xmm7, -496(%rbp)
100007639:	0f 14 0d c0 f0 00 00	unpcklps	61632(%rip), %xmm1
100007640:	66 0f 5c ce	subpd	%xmm6, %xmm1
100007644:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007648:	f2 41 0f 59 c8	mulsd	%xmm8, %xmm1
10000764d:	f2 0f 5e cb	divsd	%xmm3, %xmm1
100007651:	66 0f 29 8d 00 fe ff ff	movapd	%xmm1, -512(%rbp)
100007659:	66 0f 28 95 f0 fe ff ff	movapd	-272(%rbp), %xmm2
100007661:	0f 14 15 98 f0 00 00	unpcklps	61592(%rip), %xmm2
100007668:	66 0f 5c d6	subpd	%xmm6, %xmm2
10000766c:	66 0f 7c d2	haddpd	%xmm2, %xmm2
100007670:	0f 14 05 89 f0 00 00	unpcklps	61577(%rip), %xmm0
100007677:	66 0f 5c c6	subpd	%xmm6, %xmm0
10000767b:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000767f:	f2 41 0f 59 d0	mulsd	%xmm8, %xmm2
100007684:	f2 0f 5e d3	divsd	%xmm3, %xmm2
100007688:	f2 41 0f 59 c0	mulsd	%xmm8, %xmm0
10000768d:	44 0f 14 15 6b f0 00 00	unpcklps	61547(%rip), %xmm10
100007695:	66 44 0f 5c d6	subpd	%xmm6, %xmm10
10000769a:	66 45 0f 7c d2	haddpd	%xmm10, %xmm10
10000769f:	f2 0f 5e c3	divsd	%xmm3, %xmm0
1000076a3:	66 44 0f 28 f0	movapd	%xmm0, %xmm14
1000076a8:	f2 45 0f 59 d0	mulsd	%xmm8, %xmm10
1000076ad:	f2 44 0f 5e d3	divsd	%xmm3, %xmm10
1000076b2:	44 0f 14 0d 46 f0 00 00	unpcklps	61510(%rip), %xmm9
1000076ba:	66 44 0f 5c ce	subpd	%xmm6, %xmm9
1000076bf:	66 45 0f 7c c9	haddpd	%xmm9, %xmm9
1000076c4:	f2 45 0f 59 c8	mulsd	%xmm8, %xmm9
1000076c9:	f2 44 0f 5e cb	divsd	%xmm3, %xmm9
1000076ce:	66 0f 6f 05 2a f0 00 00	movdqa	61482(%rip), %xmm0
1000076d6:	66 48 0f 6e de	movq	%rsi, %xmm3
1000076db:	66 0f 62 d8	punpckldq	%xmm0, %xmm3
1000076df:	66 0f 5c de	subpd	%xmm6, %xmm3
1000076e3:	66 0f 7c db	haddpd	%xmm3, %xmm3
1000076e7:	66 0f 28 4d 90	movapd	-112(%rbp), %xmm1
1000076ec:	0f 14 0d 0d f0 00 00	unpcklps	61453(%rip), %xmm1
1000076f3:	66 0f 5c 0d 15 f0 00 00	subpd	61461(%rip), %xmm1
1000076fb:	f2 44 0f 5e e5	divsd	%xmm5, %xmm12
100007700:	66 44 0f 29 65 90	movapd	%xmm12, -112(%rbp)
100007706:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000770a:	f2 41 0f 59 c8	mulsd	%xmm8, %xmm1
10000770f:	66 44 0f 29 9d f0 fd ff ff	movapd	%xmm11, -528(%rbp)
100007718:	66 41 0f 28 fb	movapd	%xmm11, %xmm7
10000771d:	f2 0f 5e f9	divsd	%xmm1, %xmm7
100007721:	66 48 0f 6e cf	movq	%rdi, %xmm1
100007726:	66 0f 62 c8	punpckldq	%xmm0, %xmm1
10000772a:	66 0f 5c ce	subpd	%xmm6, %xmm1
10000772e:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007732:	f2 0f 5e e5	divsd	%xmm5, %xmm4
100007736:	66 0f 29 a5 60 fe ff ff	movapd	%xmm4, -416(%rbp)
10000773e:	f2 0f 5e dd	divsd	%xmm5, %xmm3
100007742:	66 0f 29 9d 70 fe ff ff	movapd	%xmm3, -400(%rbp)
10000774a:	66 44 0f 6f a5 20 ff ff ff	movdqa	-224(%rbp), %xmm12
100007753:	66 44 0f 62 e0	punpckldq	%xmm0, %xmm12
100007758:	66 44 0f 5c e6	subpd	%xmm6, %xmm12
10000775d:	66 45 0f 7c e4	haddpd	%xmm12, %xmm12
100007762:	66 44 0f 6f 9d 10 ff ff ff	movdqa	-240(%rbp), %xmm11
10000776b:	66 44 0f 62 d8	punpckldq	%xmm0, %xmm11
100007770:	66 44 0f 5c de	subpd	%xmm6, %xmm11
100007775:	66 45 0f 7c db	haddpd	%xmm11, %xmm11
10000777a:	f2 0f 5e cd	divsd	%xmm5, %xmm1
10000777e:	66 0f 29 8d 80 fe ff ff	movapd	%xmm1, -384(%rbp)
100007786:	f2 44 0f 5e e5	divsd	%xmm5, %xmm12
10000778b:	66 44 0f 6f 85 00 ff ff ff	movdqa	-256(%rbp), %xmm8
100007794:	66 44 0f 62 c0	punpckldq	%xmm0, %xmm8
100007799:	66 44 0f 5c c6	subpd	%xmm6, %xmm8
10000779e:	66 45 0f 7c c0	haddpd	%xmm8, %xmm8
1000077a3:	66 0f 6f 8d 60 ff ff ff	movdqa	-160(%rbp), %xmm1
1000077ab:	66 0f 62 c8	punpckldq	%xmm0, %xmm1
1000077af:	66 0f 5c ce	subpd	%xmm6, %xmm1
1000077b3:	66 0f 7c c9	haddpd	%xmm1, %xmm1
1000077b7:	f2 44 0f 5e dd	divsd	%xmm5, %xmm11
1000077bc:	f2 44 0f 5e c5	divsd	%xmm5, %xmm8
1000077c1:	66 0f 6f 9d 50 ff ff ff	movdqa	-176(%rbp), %xmm3
1000077c9:	66 0f 62 d8	punpckldq	%xmm0, %xmm3
1000077cd:	66 0f 5c de	subpd	%xmm6, %xmm3
1000077d1:	66 0f 7c db	haddpd	%xmm3, %xmm3
1000077d5:	66 0f 6f a5 40 ff ff ff	movdqa	-192(%rbp), %xmm4
1000077dd:	66 0f 62 e0	punpckldq	%xmm0, %xmm4
1000077e1:	66 0f 5c e6	subpd	%xmm6, %xmm4
1000077e5:	66 0f 7c e4	haddpd	%xmm4, %xmm4
1000077e9:	f2 0f 5e cd	divsd	%xmm5, %xmm1
1000077ed:	66 0f 29 8d 60 ff ff ff	movapd	%xmm1, -160(%rbp)
1000077f5:	f2 0f 5e dd	divsd	%xmm5, %xmm3
1000077f9:	f2 0f 5e e5	divsd	%xmm5, %xmm4
1000077fd:	66 0f 6f 8d 30 ff ff ff	movdqa	-208(%rbp), %xmm1
100007805:	66 0f 62 c8	punpckldq	%xmm0, %xmm1
100007809:	66 0f 5c ce	subpd	%xmm6, %xmm1
10000780d:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007811:	f2 0f 5e cd	divsd	%xmm5, %xmm1
100007815:	45 89 f7	movl	%r14d, %r15d
100007818:	41 c1 ef 10	shrl	$16, %r15d
10000781c:	41 83 e7 07	andl	$7, %r15d
100007820:	49 ff cf	decq	%r15
100007823:	41 c1 ee 18	shrl	$24, %r14d
100007827:	41 83 e6 07	andl	$7, %r14d
10000782b:	f2 0f 59 3d 25 ef 00 00	mulsd	61221(%rip), %xmm7
100007833:	66 0f 29 bd 90 fe ff ff	movapd	%xmm7, -368(%rbp)
10000783b:	49 ff ce	decq	%r14
10000783e:	48 8d 05 ab 67 01 00	leaq	92075(%rip), %rax
100007845:	8b 40 28	movl	40(%rax), %eax
100007848:	83 f8 01	cmpl	$1, %eax
10000784b:	0f 84 c6 01 00 00	je	0x100007a17
100007851:	85 c0	testl	%eax, %eax
100007853:	0f 85 e5 08 00 00	jne	0x10000813e
100007859:	48 89 bd 38 fe ff ff	movq	%rdi, -456(%rbp)
100007860:	4c 89 4d 88	movq	%r9, -120(%rbp)
100007864:	4c 89 45 80	movq	%r8, -128(%rbp)
100007868:	48 89 b5 78 ff ff ff	movq	%rsi, -136(%rbp)
10000786f:	66 44 0f 29 a5 20 ff ff ff	movapd	%xmm12, -224(%rbp)
100007878:	66 44 0f 29 9d 10 ff ff ff	movapd	%xmm11, -240(%rbp)
100007881:	66 44 0f 29 85 00 ff ff ff	movapd	%xmm8, -256(%rbp)
10000788a:	66 44 0f 29 8d e0 fe ff ff	movapd	%xmm9, -288(%rbp)
100007893:	66 44 0f 29 95 d0 fe ff ff	movapd	%xmm10, -304(%rbp)
10000789c:	66 0f 29 95 f0 fe ff ff	movapd	%xmm2, -272(%rbp)
1000078a4:	66 44 0f 29 b5 c0 fe ff ff	movapd	%xmm14, -320(%rbp)
1000078ad:	66 0f 29 9d 50 ff ff ff	movapd	%xmm3, -176(%rbp)
1000078b5:	66 0f 29 a5 40 ff ff ff	movapd	%xmm4, -192(%rbp)
1000078bd:	66 0f 29 8d 30 ff ff ff	movapd	%xmm1, -208(%rbp)
1000078c5:	66 44 0f 29 ad b0 fe ff ff	movapd	%xmm13, -336(%rbp)
1000078ce:	66 0f 29 ad a0 fe ff ff	movapd	%xmm5, -352(%rbp)
1000078d6:	48 8d 73 04	leaq	4(%rbx), %rsi
1000078da:	48 8d 7d a0	leaq	-96(%rbp), %rdi
1000078de:	ba 21 00 00 00	movl	$33, %edx
1000078e3:	b9 21 00 00 00	movl	$33, %ecx
1000078e8:	e8 17 8a 00 00	callq	0x100010304 ## symbol stub for: ___strlcpy_chk
1000078ed:	48 8d 05 e6 aa 00 00	leaq	43750(%rip), %rax ## literal pool for: "  "
1000078f4:	4c 8d 05 8b 9c 00 00	leaq	40075(%rip), %r8 ## literal pool for: ""
1000078fb:	45 84 e4	testb	%r12b, %r12b
1000078fe:	4c 89 c2	movq	%r8, %rdx
100007901:	48 0f 45 d0	cmovneq	%rax, %rdx
100007905:	4c 0f 44 c0	cmoveq	%rax, %r8
100007909:	41 80 7d 02 00	cmpb	$0, 2(%r13)
10000790e:	49 8b 7d 50	movq	80(%r13), %rdi
100007912:	44 8b 0b	movl	(%rbx), %r9d
100007915:	0f 84 df 05 00 00	je	0x100007efa
10000791b:	66 0f 28 95 f0 fd ff ff	movapd	-528(%rbp), %xmm2
100007923:	f2 0f 5e 15 85 01 01 00	divsd	65925(%rip), %xmm2
10000792b:	66 0f 28 9d 40 fe ff ff	movapd	-448(%rbp), %xmm3
100007933:	f2 0f 59 1d ed ed 00 00	mulsd	60909(%rip), %xmm3
10000793b:	80 bb 88 01 00 00 00	cmpb	$0, 392(%rbx)
100007942:	48 8d 05 99 b2 00 00	leaq	45721(%rip), %rax ## literal pool for: "N"
100007949:	48 8d 0d 90 b2 00 00	leaq	45712(%rip), %rcx ## literal pool for: "Y"
100007950:	48 0f 44 c8	cmoveq	%rax, %rcx
100007954:	48 89 4c 24 20	movq	%rcx, 32(%rsp)
100007959:	48 8b 45 88	movq	-120(%rbp), %rax
10000795d:	48 89 44 24 18	movq	%rax, 24(%rsp)
100007962:	48 8b 45 80	movq	-128(%rbp), %rax
100007966:	48 89 44 24 10	movq	%rax, 16(%rsp)
10000796b:	48 8b 85 38 fe ff ff	movq	-456(%rbp), %rax
100007972:	48 89 44 24 08	movq	%rax, 8(%rsp)
100007977:	48 8b 85 78 ff ff ff	movq	-136(%rbp), %rax
10000797e:	48 89 04 24	movq	%rax, (%rsp)
100007982:	48 8d 35 dc b1 00 00	leaq	45532(%rip), %rsi ## literal pool for: "%s%-32s%s %-5d  %-7.2f   %-7.2f   [%-9.2f] %-6.2f %-7.2f [%-7llu] %-7.2f [%-7llu]  %-7.2f [%-7llu] %-7.2f [%-7llu] %s     "
100007989:	48 8d 4d a0	leaq	-96(%rbp), %rcx
10000798d:	66 0f 28 85 50 fe ff ff	movapd	-432(%rbp), %xmm0
100007995:	66 0f 28 8d 90 fe ff ff	movapd	-368(%rbp), %xmm1
10000799d:	66 0f 28 a5 70 fe ff ff	movapd	-400(%rbp), %xmm4
1000079a5:	66 0f 28 ad 80 fe ff ff	movapd	-384(%rbp), %xmm5
1000079ad:	66 0f 28 75 90	movapd	-112(%rbp), %xmm6
1000079b2:	66 0f 28 bd 60 fe ff ff	movapd	-416(%rbp), %xmm7
1000079ba:	b0 08	movb	$8, %al
1000079bc:	e8 91 89 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000079c1:	4c 8d 25 28 66 01 00	leaq	91688(%rip), %r12
1000079c8:	e9 b4 05 00 00	jmp	0x100007f81
1000079cd:	80 78 47 00	cmpb	$0, 71(%rax)
1000079d1:	49 8b 7d 50	movq	80(%r13), %rdi
1000079d5:	0f 84 8f 07 00 00	je	0x10000816a
1000079db:	8b 13	movl	(%rbx), %edx
1000079dd:	48 8b 05 84 08 01 00	movq	67716(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000079e4:	48 8b 00	movq	(%rax), %rax
1000079e7:	48 3b 45 d0	cmpq	-48(%rbp), %rax
1000079eb:	0f 85 74 07 00 00	jne	0x100008165
1000079f1:	48 83 c3 04	addq	$4, %rbx
1000079f5:	48 8d 35 6f b0 00 00	leaq	45167(%rip), %rsi ## literal pool for: "<dict>\n<key>pid</key><integer>%d</integer>\n<key>name</key><string>%s</string>\n<key>invalid</key><true/>\n</dict>\n"
1000079fc:	48 89 d9	movq	%rbx, %rcx
1000079ff:	31 c0	xorl	%eax, %eax
100007a01:	48 81 c4 38 02 00 00	addq	$568, %rsp
100007a08:	5b	popq	%rbx
100007a09:	41 5c	popq	%r12
100007a0b:	41 5d	popq	%r13
100007a0d:	41 5e	popq	%r14
100007a0f:	41 5f	popq	%r15
100007a11:	5d	popq	%rbp
100007a12:	e9 3b 89 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
100007a17:	49 89 fc	movq	%rdi, %r12
100007a1a:	4c 89 4d 88	movq	%r9, -120(%rbp)
100007a1e:	4c 89 45 80	movq	%r8, -128(%rbp)
100007a22:	48 89 b5 78 ff ff ff	movq	%rsi, -136(%rbp)
100007a29:	66 44 0f 29 a5 20 ff ff ff	movapd	%xmm12, -224(%rbp)
100007a32:	66 44 0f 29 9d 10 ff ff ff	movapd	%xmm11, -240(%rbp)
100007a3b:	66 44 0f 29 85 00 ff ff ff	movapd	%xmm8, -256(%rbp)
100007a44:	66 44 0f 29 8d e0 fe ff ff	movapd	%xmm9, -288(%rbp)
100007a4d:	66 44 0f 29 95 d0 fe ff ff	movapd	%xmm10, -304(%rbp)
100007a56:	66 0f 29 95 f0 fe ff ff	movapd	%xmm2, -272(%rbp)
100007a5e:	66 44 0f 29 b5 c0 fe ff ff	movapd	%xmm14, -320(%rbp)
100007a67:	66 0f 29 9d 50 ff ff ff	movapd	%xmm3, -176(%rbp)
100007a6f:	66 0f 29 a5 40 ff ff ff	movapd	%xmm4, -192(%rbp)
100007a77:	66 0f 29 8d 30 ff ff ff	movapd	%xmm1, -208(%rbp)
100007a7f:	66 44 0f 29 ad b0 fe ff ff	movapd	%xmm13, -336(%rbp)
100007a88:	66 0f 29 ad a0 fe ff ff	movapd	%xmm5, -352(%rbp)
100007a90:	49 8b 7d 50	movq	80(%r13), %rdi
100007a94:	48 63 13	movslq	(%rbx), %rdx
100007a97:	48 8d 4b 04	leaq	4(%rbx), %rcx
100007a9b:	f2 49 0f 2c c7	cvttsd2si	%xmm15, %rax
100007aa0:	f2 0f 10 0d a8 ec 00 00	movsd	60584(%rip), %xmm1
100007aa8:	f2 44 0f 5c f9	subsd	%xmm1, %xmm15
100007aad:	f2 4d 0f 2c d7	cvttsd2si	%xmm15, %r10
100007ab2:	4c 8b 83 80 01 00 00	movq	384(%rbx), %r8
100007ab9:	49 89 c1	movq	%rax, %r9
100007abc:	49 c1 f9 3f	sarq	$63, %r9
100007ac0:	66 0f 28 85 f0 fd ff ff	movapd	-528(%rbp), %xmm0
100007ac8:	f2 48 0f 2c f0	cvttsd2si	%xmm0, %rsi
100007acd:	4d 21 d1	andq	%r10, %r9
100007ad0:	f2 0f 5c c1	subsd	%xmm1, %xmm0
100007ad4:	f2 4c 0f 2c d0	cvttsd2si	%xmm0, %r10
100007ad9:	49 09 c1	orq	%rax, %r9
100007adc:	48 89 f0	movq	%rsi, %rax
100007adf:	48 c1 f8 3f	sarq	$63, %rax
100007ae3:	4c 21 d0	andq	%r10, %rax
100007ae6:	48 09 f0	orq	%rsi, %rax
100007ae9:	48 89 04 24	movq	%rax, (%rsp)
100007aed:	48 8d 35 88 b1 00 00	leaq	45448(%rip), %rsi ## literal pool for: "<dict>\n<key>pid</key><integer>%lld</integer>\n<key>name</key><string>%s</string>\n<key>started_abstime_ns</key><integer>%llu</integer>\n<key>interval_ns</key><integer>%llu</integer>\n<key>cputime_ns</key><integer>%llu</integer>\n<key>cputime_ms_per_s</key><real>%g</real>\n"
100007af4:	0f 28 85 50 fe ff ff	movaps	-432(%rbp), %xmm0
100007afb:	b0 01	movb	$1, %al
100007afd:	e8 50 88 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007b02:	41 80 7d 00 00	cmpb	$0, (%r13)
100007b07:	75 19	jne	0x100007b22
100007b09:	49 8b 7d 50	movq	80(%r13), %rdi
100007b0d:	48 8d 35 8f ac 00 00	leaq	44175(%rip), %rsi ## literal pool for: "<key>cputime_sample_ms_per_s</key><real>%g</real>\n"
100007b14:	0f 28 85 90 fe ff ff	movaps	-368(%rbp), %xmm0
100007b1b:	b0 01	movb	$1, %al
100007b1d:	e8 30 88 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007b22:	49 8b 7d 50	movq	80(%r13), %rdi
100007b26:	80 bb 88 01 00 00 00	cmpb	$0, 392(%rbx)
100007b2d:	48 8d 05 52 9a 00 00	leaq	39506(%rip), %rax ## literal pool for: ""
100007b34:	4c 8d 05 93 b4 00 00	leaq	46227(%rip), %r8 ## literal pool for: "<key>is_dead</key><true/>"
100007b3b:	4c 0f 44 c0	cmoveq	%rax, %r8
100007b3f:	4c 89 24 24	movq	%r12, (%rsp)
100007b43:	48 8d 35 3e b2 00 00	leaq	45630(%rip), %rsi ## literal pool for: "<key>cputime_userland_ratio</key><real>%g</real>\n<key>intr_wakeups</key><integer>%llu</integer>\n<key>intr_wakeups_per_s</key><real>%g</real>\n<key>idle_wakeups</key><integer>%llu</integer>\n<key>idle_wakeups_per_s</key><real>%g</real>\n%s<key>timer_wakeups</key>\n<array>\n<dict>\n  <key>interval_ns</key><integer>2000000</integer>\n  <key>wakeups</key><integer>%llu</integer>\n  <key>wakeups_per_s</key><real>%g</real>\n</dict>\n<dict>\n  <key>interval_ns</key><integer>5000000</integer>\n  <key>wakeups</key><integer>%llu</integer>\n  <key>wakeups_per_s</key><real>%g</real>\n</dict>\n</array>\n"
100007b4a:	66 0f 28 85 40 fe ff ff	movapd	-448(%rbp), %xmm0
100007b52:	48 8b 55 80	movq	-128(%rbp), %rdx
100007b56:	0f 28 4d 90	movaps	-112(%rbp), %xmm1
100007b5a:	48 8b 4d 88	movq	-120(%rbp), %rcx
100007b5e:	66 0f 28 95 60 fe ff ff	movapd	-416(%rbp), %xmm2
100007b66:	4c 8b 8d 78 ff ff ff	movq	-136(%rbp), %r9
100007b6d:	66 0f 28 9d 70 fe ff ff	movapd	-400(%rbp), %xmm3
100007b75:	66 0f 28 a5 80 fe ff ff	movapd	-384(%rbp), %xmm4
100007b7d:	b0 05	movb	$5, %al
100007b7f:	e8 ce 87 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007b84:	83 3b ff	cmpl	$-1, (%rbx)
100007b87:	0f 84 27 02 00 00	je	0x100007db4
100007b8d:	f2 0f 10 8b 00 01 00 00	movsd	256(%rbx), %xmm1
100007b95:	66 0f 28 15 63 eb 00 00	movapd	60259(%rip), %xmm2
100007b9d:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007ba0:	66 0f 28 1d 68 eb 00 00	movapd	60264(%rip), %xmm3
100007ba8:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007bac:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007bb0:	49 8b 7d 50	movq	80(%r13), %rdi
100007bb4:	48 8b 83 38 01 00 00	movq	312(%rbx), %rax
100007bbb:	48 89 45 90	movq	%rax, -112(%rbp)
100007bbf:	f2 41 0f 10 45 08	movsd	8(%r13), %xmm0
100007bc5:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007bc9:	f2 48 0f 2c c1	cvttsd2si	%xmm1, %rax
100007bce:	48 89 c1	movq	%rax, %rcx
100007bd1:	48 c1 f9 3f	sarq	$63, %rcx
100007bd5:	f2 0f 10 25 73 eb 00 00	movsd	60275(%rip), %xmm4
100007bdd:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007be1:	f2 4c 0f 2c c9	cvttsd2si	%xmm1, %r9
100007be6:	f2 0f 10 8b 08 01 00 00	movsd	264(%rbx), %xmm1
100007bee:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007bf1:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007bf5:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007bf9:	49 21 c9	andq	%rcx, %r9
100007bfc:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007c00:	f2 48 0f 2c c9	cvttsd2si	%xmm1, %rcx
100007c05:	49 09 c1	orq	%rax, %r9
100007c08:	48 89 c8	movq	%rcx, %rax
100007c0b:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007c0f:	f2 4c 0f 2c d1	cvttsd2si	%xmm1, %r10
100007c14:	48 c1 f8 3f	sarq	$63, %rax
100007c18:	49 21 c2	andq	%rax, %r10
100007c1b:	f2 0f 10 8b 10 01 00 00	movsd	272(%rbx), %xmm1
100007c23:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007c26:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007c2a:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007c2e:	49 09 ca	orq	%rcx, %r10
100007c31:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007c35:	f2 48 0f 2c c1	cvttsd2si	%xmm1, %rax
100007c3a:	48 89 c1	movq	%rax, %rcx
100007c3d:	48 c1 f9 3f	sarq	$63, %rcx
100007c41:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007c45:	f2 4c 0f 2c d9	cvttsd2si	%xmm1, %r11
100007c4a:	49 21 cb	andq	%rcx, %r11
100007c4d:	49 09 c3	orq	%rax, %r11
100007c50:	f2 0f 10 8b 18 01 00 00	movsd	280(%rbx), %xmm1
100007c58:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007c5b:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007c5f:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007c63:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007c67:	f2 48 0f 2c c1	cvttsd2si	%xmm1, %rax
100007c6c:	48 89 c1	movq	%rax, %rcx
100007c6f:	48 c1 f9 3f	sarq	$63, %rcx
100007c73:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007c77:	f2 4c 0f 2c e1	cvttsd2si	%xmm1, %r12
100007c7c:	49 21 cc	andq	%rcx, %r12
100007c7f:	49 09 c4	orq	%rax, %r12
100007c82:	f2 0f 10 8b 20 01 00 00	movsd	288(%rbx), %xmm1
100007c8a:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007c8d:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007c91:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007c95:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007c99:	f2 48 0f 2c c1	cvttsd2si	%xmm1, %rax
100007c9e:	48 89 c1	movq	%rax, %rcx
100007ca1:	48 c1 f9 3f	sarq	$63, %rcx
100007ca5:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007ca9:	f2 48 0f 2c f1	cvttsd2si	%xmm1, %rsi
100007cae:	f2 0f 10 8b 28 01 00 00	movsd	296(%rbx), %xmm1
100007cb6:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007cb9:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007cbd:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007cc1:	48 21 ce	andq	%rcx, %rsi
100007cc4:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007cc8:	f2 4c 0f 2c c1	cvttsd2si	%xmm1, %r8
100007ccd:	48 09 c6	orq	%rax, %rsi
100007cd0:	4c 89 c1	movq	%r8, %rcx
100007cd3:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007cd7:	f2 48 0f 2c c1	cvttsd2si	%xmm1, %rax
100007cdc:	48 c1 f9 3f	sarq	$63, %rcx
100007ce0:	48 21 c8	andq	%rcx, %rax
100007ce3:	f2 0f 10 8b 30 01 00 00	movsd	304(%rbx), %xmm1
100007ceb:	0f 14 ca	unpcklps	%xmm2, %xmm1
100007cee:	66 0f 5c cb	subpd	%xmm3, %xmm1
100007cf2:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100007cf6:	4c 09 c0	orq	%r8, %rax
100007cf9:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
100007cfd:	f2 4c 0f 2c c1	cvttsd2si	%xmm1, %r8
100007d02:	4c 89 c1	movq	%r8, %rcx
100007d05:	48 c1 f9 3f	sarq	$63, %rcx
100007d09:	f2 0f 5c cc	subsd	%xmm4, %xmm1
100007d0d:	4c 89 ea	movq	%r13, %rdx
100007d10:	f2 4c 0f 2c e9	cvttsd2si	%xmm1, %r13
100007d15:	49 21 cd	andq	%rcx, %r13
100007d18:	48 8b 8b 40 01 00 00	movq	320(%rbx), %rcx
100007d1f:	4d 09 c5	orq	%r8, %r13
100007d22:	4c 8b 83 48 01 00 00	movq	328(%rbx), %r8
100007d29:	0f 28 85 e0 fe ff ff	movaps	-288(%rbp), %xmm0
100007d30:	f2 0f 11 44 24 38	movsd	%xmm0, 56(%rsp)
100007d36:	0f 28 85 d0 fe ff ff	movaps	-304(%rbp), %xmm0
100007d3d:	f2 0f 11 44 24 28	movsd	%xmm0, 40(%rsp)
100007d43:	4c 89 6c 24 30	movq	%r13, 48(%rsp)
100007d48:	49 89 d5	movq	%rdx, %r13
100007d4b:	48 89 44 24 20	movq	%rax, 32(%rsp)
100007d50:	48 89 74 24 18	movq	%rsi, 24(%rsp)
100007d55:	4c 89 64 24 10	movq	%r12, 16(%rsp)
100007d5a:	4c 89 5c 24 08	movq	%r11, 8(%rsp)
100007d5f:	4c 89 14 24	movq	%r10, (%rsp)
100007d63:	48 8d 35 7e b2 00 00	leaq	45694(%rip), %rsi ## literal pool for: "<key>diskio_bytesread</key><integer>%llu</integer>\n<key>diskio_bytesread_per_s</key><real>%g</real>\n<key>diskio_byteswritten</key><integer>%llu</integer>\n<key>diskio_byteswritten_per_s</key><real>%g</real>\n<key>pageins</key><integer>%llu</integer>\n<key>pageins_per_s</key><real>%g</real>\n<key>qos_disabled_ns</key><integer>%llu</integer>\n<key>qos_disabled_ms_per_s</key><real>%g</real>\n<key>qos_maintenance_ns</key><integer>%llu</integer>\n<key>qos_maintenance_ms_per_s</key><real>%g</real>\n<key>qos_background_ns</key><integer>%llu</integer>\n<key>qos_background_ms_per_s</key><real>%g</real>\n<key>qos_utility_ns</key><integer>%llu</integer>\n<key>qos_utility_ms_per_s</key><real>%g</real>\n<key>qos_default_ns</key><integer>%llu</integer>\n<key>qos_default_ms_per_s</key><real>%g</real>\n<key>qos_user_initiated_ns</key><integer>%llu</integer>\n<key>qos_user_initiated_ms_per_s</key><real>%g</real>\n<key>qos_user_interactive_ns</key><integer>%llu</integer>\n<key>qos_user_interactive_ms_per_s</key><real>%g</real>\n"
100007d6a:	48 8b 55 90	movq	-112(%rbp), %rdx
100007d6e:	66 0f 28 85 20 ff ff ff	movapd	-224(%rbp), %xmm0
100007d76:	0f 28 8d 10 ff ff ff	movaps	-240(%rbp), %xmm1
100007d7d:	66 0f 28 95 00 ff ff ff	movapd	-256(%rbp), %xmm2
100007d85:	66 0f 28 9d 20 fe ff ff	movapd	-480(%rbp), %xmm3
100007d8d:	66 0f 28 a5 10 fe ff ff	movapd	-496(%rbp), %xmm4
100007d95:	66 0f 28 ad 00 fe ff ff	movapd	-512(%rbp), %xmm5
100007d9d:	66 0f 28 b5 f0 fe ff ff	movapd	-272(%rbp), %xmm6
100007da5:	66 0f 28 bd c0 fe ff ff	movapd	-320(%rbp), %xmm7
100007dad:	b0 08	movb	$8, %al
100007daf:	e8 9e 85 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007db4:	4c 8d 25 35 62 01 00	leaq	90677(%rip), %r12
100007dbb:	41 80 7c 24 3b 00	cmpb	$0, 59(%r12)
100007dc1:	74 21	je	0x100007de4
100007dc3:	49 8b 7d 50	movq	80(%r13), %rdi
100007dc7:	48 8b 93 e8 00 00 00	movq	232(%rbx), %rdx
100007dce:	48 8d 35 04 b6 00 00	leaq	46596(%rip), %rsi ## literal pool for: "<key>sfi_ns</key><integer>%llu</integer>\n<key>sfi_ms_per_s</key><real>%g</real>\n"
100007dd5:	66 0f 28 85 e0 fd ff ff	movapd	-544(%rbp), %xmm0
100007ddd:	b0 01	movb	$1, %al
100007ddf:	e8 6e 85 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007de4:	41 80 7c 24 39 00	cmpb	$0, 57(%r12)
100007dea:	74 18	je	0x100007e04
100007dec:	49 8b 7d 50	movq	80(%r13), %rdi
100007df0:	48 8d 35 33 b6 00 00	leaq	46643(%rip), %rsi ## literal pool for: "<key>qos</key>\n<dict>\n<key>throughput_tier</key><integer>%lld</integer>\n<key>latency_tier</key><integer>%lld</integer>\n</dict>\n"
100007df7:	4c 89 f2	movq	%r14, %rdx
100007dfa:	4c 89 f9	movq	%r15, %rcx
100007dfd:	31 c0	xorl	%eax, %eax
100007dff:	e8 4e 85 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007e04:	41 80 7c 24 3d 00	cmpb	$0, 61(%r12)
100007e0a:	74 1e	je	0x100007e2a
100007e0c:	49 8b 7d 50	movq	80(%r13), %rdi
100007e10:	8b 93 00 02 00 00	movl	512(%rbx), %edx
100007e16:	8b 8b 04 02 00 00	movl	516(%rbx), %ecx
100007e1c:	48 8d 35 87 b6 00 00	leaq	46727(%rip), %rsi ## literal pool for: "<key>responsible_pid</key><integer>%d</integer>\n<key>parent_pid</key><integer>%d</integer>\n"
100007e23:	31 c0	xorl	%eax, %eax
100007e25:	e8 28 85 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007e2a:	41 8a 44 24 42	movb	66(%r12), %al
100007e2f:	41 0a 44 24 45	orb	69(%r12), %al
100007e34:	74 4d	je	0x100007e83
100007e36:	49 8b 7d 50	movq	80(%r13), %rdi
100007e3a:	48 8b 93 c0 00 00 00	movq	192(%rbx), %rdx
100007e41:	48 8b 8b c8 00 00 00	movq	200(%rbx), %rcx
100007e48:	4c 8b 83 d0 00 00 00	movq	208(%rbx), %r8
100007e4f:	4c 8b 8b d8 00 00 00	movq	216(%rbx), %r9
100007e56:	48 8d 35 a9 b6 00 00	leaq	46761(%rip), %rsi ## literal pool for: "<key>packets_received</key><integer>%llu</integer>\n<key>packets_received_per_s</key><real>%g</real>\n<key>packets_sent</key><integer>%llu</integer>\n<key>packets_sent_per_s</key><real>%g</real>\n<key>bytes_received</key><integer>%llu</integer>\n<key>bytes_received_per_s</key><real>%g</real>\n<key>bytes_sent</key><integer>%llu</integer>\n<key>bytes_sent_per_s</key><real>%g</real>\n"
100007e5d:	66 0f 28 85 60 ff ff ff	movapd	-160(%rbp), %xmm0
100007e65:	0f 28 8d 50 ff ff ff	movaps	-176(%rbp), %xmm1
100007e6c:	66 0f 28 95 40 ff ff ff	movapd	-192(%rbp), %xmm2
100007e74:	66 0f 28 9d 30 ff ff ff	movapd	-208(%rbp), %xmm3
100007e7c:	b0 04	movb	$4, %al
100007e7e:	e8 cf 84 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007e83:	48 8b 93 50 01 00 00	movq	336(%rbx), %rdx
100007e8a:	48 85 d2	testq	%rdx, %rdx
100007e8d:	74 1a	je	0x100007ea9
100007e8f:	49 8b 7d 50	movq	80(%r13), %rdi
100007e93:	48 8d 35 c3 aa 00 00	leaq	43715(%rip), %rsi ## literal pool for: "<key>gputime_ns</key><integer>%llu</integer>\n<key>gputime_ms_per_s</key><real>%g</real>\n"
100007e9a:	66 0f 28 85 b0 fe ff ff	movapd	-336(%rbp), %xmm0
100007ea2:	b0 01	movb	$1, %al
100007ea4:	e8 a9 84 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007ea9:	4d 8b 75 50	movq	80(%r13), %r14
100007ead:	48 89 df	movq	%rbx, %rdi
100007eb0:	e8 57 85 00 00	callq	0x10001040c ## symbol stub for: _pm_energy_impact
100007eb5:	f2 0f 11 85 60 ff ff ff	movsd	%xmm0, -160(%rbp)
100007ebd:	48 89 df	movq	%rbx, %rdi
100007ec0:	e8 47 85 00 00	callq	0x10001040c ## symbol stub for: _pm_energy_impact
100007ec5:	66 0f 28 c8	movapd	%xmm0, %xmm1
100007ec9:	f2 0f 5e 8d a0 fe ff ff	divsd	-352(%rbp), %xmm1
100007ed1:	48 8d 35 de aa 00 00	leaq	43742(%rip), %rsi ## literal pool for: "<key>energy_impact</key><real>%g</real>\n<key>energy_impact_per_s</key><real>%g</real>\n"
100007ed8:	4c 89 f7	movq	%r14, %rdi
100007edb:	f2 0f 10 85 60 ff ff ff	movsd	-160(%rbp), %xmm0
100007ee3:	b0 02	movb	$2, %al
100007ee5:	e8 68 84 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007eea:	49 8b 75 50	movq	80(%r13), %rsi
100007eee:	48 8d 3d b8 88 00 00	leaq	35000(%rip), %rdi ## literal pool for: "</dict>\n"
100007ef5:	e9 3f 02 00 00	jmp	0x100008139
100007efa:	48 8d 35 11 ac 00 00	leaq	44049(%rip), %rsi ## literal pool for: "%s%-32s%s %-5d  %-7.2f"
100007f01:	48 8d 4d a0	leaq	-96(%rbp), %rcx
100007f05:	0f 28 85 50 fe ff ff	movaps	-432(%rbp), %xmm0
100007f0c:	b0 01	movb	$1, %al
100007f0e:	e8 3f 84 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007f13:	4c 8d 25 d6 60 01 00	leaq	90326(%rip), %r12
100007f1a:	41 80 7c 24 46 00	cmpb	$0, 70(%r12)
100007f20:	74 20	je	0x100007f42
100007f22:	41 80 7d 00 00	cmpb	$0, (%r13)
100007f27:	75 19	jne	0x100007f42
100007f29:	49 8b 7d 50	movq	80(%r13), %rdi
100007f2d:	48 8d 35 c4 a6 00 00	leaq	42692(%rip), %rsi ## literal pool for: "   %-7.2f "
100007f34:	0f 28 85 90 fe ff ff	movaps	-368(%rbp), %xmm0
100007f3b:	b0 01	movb	$1, %al
100007f3d:	e8 10 84 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007f42:	49 8b 7d 50	movq	80(%r13), %rdi
100007f46:	66 0f 28 85 40 fe ff ff	movapd	-448(%rbp), %xmm0
100007f4e:	f2 0f 59 05 d2 e7 00 00	mulsd	59346(%rip), %xmm0
100007f56:	48 8d 35 cc ab 00 00	leaq	43980(%rip), %rsi ## literal pool for: "   %-6.2f %-7.2f %-7.2f            %-7.2f %-7.2f           "
100007f5d:	66 0f 28 8d 70 fe ff ff	movapd	-400(%rbp), %xmm1
100007f65:	66 0f 28 95 80 fe ff ff	movapd	-384(%rbp), %xmm2
100007f6d:	66 0f 28 5d 90	movapd	-112(%rbp), %xmm3
100007f72:	66 0f 28 a5 60 fe ff ff	movapd	-416(%rbp), %xmm4
100007f7a:	b0 05	movb	$5, %al
100007f7c:	e8 d1 83 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007f81:	41 80 7c 24 3b 00	cmpb	$0, 59(%r12)
100007f87:	66 0f 28 85 e0 fd ff ff	movapd	-544(%rbp), %xmm0
100007f8f:	74 12	je	0x100007fa3
100007f91:	49 8b 7d 50	movq	80(%r13), %rdi
100007f95:	48 8d 35 48 ac 00 00	leaq	44104(%rip), %rsi ## literal pool for: " %-7.2f   "
100007f9c:	b0 01	movb	$1, %al
100007f9e:	e8 af 83 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007fa3:	41 80 7c 24 39 00	cmpb	$0, 57(%r12)
100007fa9:	74 18	je	0x100007fc3
100007fab:	49 8b 7d 50	movq	80(%r13), %rdi
100007faf:	48 8d 35 39 ac 00 00	leaq	44089(%rip), %rsi ## literal pool for: "% lld/% lld      "
100007fb6:	4c 89 fa	movq	%r15, %rdx
100007fb9:	4c 89 f1	movq	%r14, %rcx
100007fbc:	31 c0	xorl	%eax, %eax
100007fbe:	e8 8f 83 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007fc3:	41 80 7c 24 3d 00	cmpb	$0, 61(%r12)
100007fc9:	74 1e	je	0x100007fe9
100007fcb:	49 8b 7d 50	movq	80(%r13), %rdi
100007fcf:	8b 93 00 02 00 00	movl	512(%rbx), %edx
100007fd5:	8b 8b 04 02 00 00	movl	516(%rbx), %ecx
100007fdb:	48 8d 35 1f ac 00 00	leaq	44063(%rip), %rsi ## literal pool for: "%-5d %-5d"
100007fe2:	31 c0	xorl	%eax, %eax
100007fe4:	e8 69 83 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100007fe9:	41 80 7c 24 41 00	cmpb	$0, 65(%r12)
100007fef:	74 46	je	0x100008037
100007ff1:	83 3b ff	cmpl	$-1, (%rbx)
100007ff4:	49 8b 7d 50	movq	80(%r13), %rdi
100007ff8:	74 28	je	0x100008022
100007ffa:	48 8d 35 0a ac 00 00	leaq	44042(%rip), %rsi ## literal pool for: "%10.1f %14.1f %8.1f  "
100008001:	66 0f 28 85 20 ff ff ff	movapd	-224(%rbp), %xmm0
100008009:	66 0f 28 8d 10 ff ff ff	movapd	-240(%rbp), %xmm1
100008011:	66 0f 28 95 00 ff ff ff	movapd	-256(%rbp), %xmm2
100008019:	b0 03	movb	$3, %al
10000801b:	e8 32 83 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008020:	eb 15	jmp	0x100008037
100008022:	48 8d 35 a6 a6 00 00	leaq	42662(%rip), %rsi ## literal pool for: "%36s"
100008029:	48 8d 15 56 95 00 00	leaq	38230(%rip), %rdx ## literal pool for: ""
100008030:	31 c0	xorl	%eax, %eax
100008032:	e8 1b 83 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008037:	41 80 7c 24 42 00	cmpb	$0, 66(%r12)
10000803d:	74 4e	je	0x10000808d
10000803f:	83 3b ff	cmpl	$-1, (%rbx)
100008042:	49 8b 7d 50	movq	80(%r13), %rdi
100008046:	74 30	je	0x100008078
100008048:	48 8d 35 d2 ab 00 00	leaq	43986(%rip), %rsi ## literal pool for: "%10.1f %10.1f %10.1f %10.1f  "
10000804f:	66 0f 28 85 60 ff ff ff	movapd	-160(%rbp), %xmm0
100008057:	66 0f 28 8d 50 ff ff ff	movapd	-176(%rbp), %xmm1
10000805f:	66 0f 28 95 40 ff ff ff	movapd	-192(%rbp), %xmm2
100008067:	66 0f 28 9d 30 ff ff ff	movapd	-208(%rbp), %xmm3
10000806f:	b0 04	movb	$4, %al
100008071:	e8 dc 82 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008076:	eb 15	jmp	0x10000808d
100008078:	48 8d 35 55 a6 00 00	leaq	42581(%rip), %rsi ## literal pool for: "%45s"
10000807f:	48 8d 15 00 95 00 00	leaq	38144(%rip), %rdx ## literal pool for: ""
100008086:	31 c0	xorl	%eax, %eax
100008088:	e8 c5 82 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000808d:	41 80 7c 24 43 00	cmpb	$0, 67(%r12)
100008093:	74 1a	je	0x1000080af
100008095:	49 8b 7d 50	movq	80(%r13), %rdi
100008099:	48 8d 35 39 a6 00 00	leaq	42553(%rip), %rsi ## literal pool for: "%-7.2f   "
1000080a0:	66 0f 28 85 b0 fe ff ff	movapd	-336(%rbp), %xmm0
1000080a8:	b0 01	movb	$1, %al
1000080aa:	e8 a3 82 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000080af:	41 80 7c 24 44 00	cmpb	$0, 68(%r12)
1000080b5:	74 4a	je	0x100008101
1000080b7:	49 8b 7d 50	movq	80(%r13), %rdi
1000080bb:	48 8d 35 7d ab 00 00	leaq	43901(%rip), %rsi ## literal pool for: "           %-7.2f %-7.2f %-7.2f %-7.2f %-7.2f %-7.2f %-7.2f "
1000080c2:	66 0f 28 85 20 fe ff ff	movapd	-480(%rbp), %xmm0
1000080ca:	66 0f 28 8d 10 fe ff ff	movapd	-496(%rbp), %xmm1
1000080d2:	66 0f 28 95 00 fe ff ff	movapd	-512(%rbp), %xmm2
1000080da:	66 0f 28 9d f0 fe ff ff	movapd	-272(%rbp), %xmm3
1000080e2:	66 0f 28 a5 c0 fe ff ff	movapd	-320(%rbp), %xmm4
1000080ea:	66 0f 28 ad d0 fe ff ff	movapd	-304(%rbp), %xmm5
1000080f2:	66 0f 28 b5 e0 fe ff ff	movapd	-288(%rbp), %xmm6
1000080fa:	b0 07	movb	$7, %al
1000080fc:	e8 51 82 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008101:	41 80 7c 24 45 00	cmpb	$0, 69(%r12)
100008107:	74 25	je	0x10000812e
100008109:	4d 8b 75 50	movq	80(%r13), %r14
10000810d:	48 89 df	movq	%rbx, %rdi
100008110:	e8 f7 82 00 00	callq	0x10001040c ## symbol stub for: _pm_energy_impact
100008115:	f2 0f 5e 85 a0 fe ff ff	divsd	-352(%rbp), %xmm0
10000811d:	48 8d 35 c9 a5 00 00	leaq	42441(%rip), %rsi ## literal pool for: "%-7.2f     "
100008124:	4c 89 f7	movq	%r14, %rdi
100008127:	b0 01	movb	$1, %al
100008129:	e8 24 82 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000812e:	49 8b 75 50	movq	80(%r13), %rsi
100008132:	48 8d 3d 39 8f 00 00	leaq	36665(%rip), %rdi ## literal pool for: "\n"
100008139:	e8 20 82 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000813e:	48 8b 05 23 01 01 00	movq	65827(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008145:	48 8b 00	movq	(%rax), %rax
100008148:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000814c:	75 17	jne	0x100008165
10000814e:	48 81 c4 38 02 00 00	addq	$568, %rsp
100008155:	5b	popq	%rbx
100008156:	41 5c	popq	%r12
100008158:	41 5d	popq	%r13
10000815a:	41 5e	popq	%r14
10000815c:	41 5f	popq	%r15
10000815e:	5d	popq	%rbp
10000815f:	c3	retq
100008160:	e8 b7 7b 00 00	callq	0x10000fd1c
100008165:	e8 8e 81 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000816a:	48 83 c3 04	addq	$4, %rbx
10000816e:	48 8d 35 e2 a8 00 00	leaq	43234(%rip), %rsi ## literal pool for: "task %s is invalid\n"
100008175:	48 89 da	movq	%rbx, %rdx
100008178:	31 c0	xorl	%eax, %eax
10000817a:	e8 d3 81 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000817f:	e8 8c 81 00 00	callq	0x100010310 ## symbol stub for: _abort
100008184:	55	pushq	%rbp
100008185:	48 89 e5	movq	%rsp, %rbp
100008188:	48 8b 47 20	movq	32(%rdi), %rax
10000818c:	31 c9	xorl	%ecx, %ecx
10000818e:	48 3b 82 90 01 00 00	cmpq	400(%rdx), %rax
100008195:	0f 95 c1	setne	%cl
100008198:	b8 ff ff ff ff	movl	$4294967295, %eax
10000819d:	0f 43 c1	cmovael	%ecx, %eax
1000081a0:	5d	popq	%rbp
1000081a1:	c3	retq
1000081a2:	55	pushq	%rbp
1000081a3:	48 89 e5	movq	%rsp, %rbp
1000081a6:	f2 0f 10 87 98 01 00 00	movsd	408(%rdi), %xmm0
1000081ae:	f2 0f 10 8e 98 01 00 00	movsd	408(%rsi), %xmm1
1000081b6:	31 c9	xorl	%ecx, %ecx
1000081b8:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
1000081bc:	0f 97 c1	seta	%cl
1000081bf:	f7 d9	negl	%ecx
1000081c1:	66 0f 2e c8	ucomisd	%xmm0, %xmm1
1000081c5:	b8 01 00 00 00	movl	$1, %eax
1000081ca:	0f 46 c1	cmovbel	%ecx, %eax
1000081cd:	5d	popq	%rbp
1000081ce:	c3	retq
1000081cf:	55	pushq	%rbp
1000081d0:	48 89 e5	movq	%rsp, %rbp
1000081d3:	41 56	pushq	%r14
1000081d5:	53	pushq	%rbx
1000081d6:	48 83 ec 70	subq	$112, %rsp
1000081da:	48 89 fb	movq	%rdi, %rbx
1000081dd:	4c 8d 75 ec	leaq	-20(%rbp), %r14
1000081e1:	41 c7 06 18 00 00 00	movl	$24, (%r14)
1000081e8:	be 08 02 00 00	movl	$520, %esi
1000081ed:	e8 ee 80 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
1000081f2:	8b 3d 80 67 01 00	movl	92032(%rip), %edi
1000081f8:	48 8d 55 88	leaq	-120(%rbp), %rdx
1000081fc:	be 06 00 00 00	movl	$6, %esi
100008201:	4c 89 f1	movq	%r14, %rcx
100008204:	e8 85 81 00 00	callq	0x10001038e ## symbol stub for: _host_statistics
100008209:	85 c0	testl	%eax, %eax
10000820b:	74 1c	je	0x100008229
10000820d:	48 8b 0d 5c 00 01 00	movq	65628(%rip), %rcx ## literal pool symbol address: ___stderrp
100008214:	48 8b 39	movq	(%rcx), %rdi
100008217:	48 8d 35 5d b5 00 00	leaq	46429(%rip), %rsi ## literal pool for: "host_statistics(HOST_EXPIRED_TASK_INFO) failed %u\n"
10000821e:	89 c2	movl	%eax, %edx
100008220:	31 c0	xorl	%eax, %eax
100008222:	e8 2b 81 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008227:	eb 6a	jmp	0x100008293
100008229:	0f 10 45 88	movups	-120(%rbp), %xmm0
10000822d:	0f 10 4d 98	movups	-104(%rbp), %xmm1
100008231:	0f 10 55 a8	movups	-88(%rbp), %xmm2
100008235:	0f 11 93 a4 00 00 00	movups	%xmm2, 164(%rbx)
10000823c:	0f 11 8b 94 00 00 00	movups	%xmm1, 148(%rbx)
100008243:	0f 11 83 84 00 00 00	movups	%xmm0, 132(%rbx)
10000824a:	83 7d ec 18	cmpl	$24, -20(%rbp)
10000824e:	72 0b	jb	0x10000825b
100008250:	48 8b 45 b8	movq	-72(%rbp), %rax
100008254:	48 89 83 50 01 00 00	movq	%rax, 336(%rbx)
10000825b:	c7 03 ff ff ff ff	movl	$4294967295, (%rbx)
100008261:	48 8d 7b 04	leaq	4(%rbx), %rdi
100008265:	48 8d 35 42 b5 00 00	leaq	46402(%rip), %rsi ## literal pool for: "DEAD_TASKS"
10000826c:	ba 0b 00 00 00	movl	$11, %edx
100008271:	b9 80 00 00 00	movl	$128, %ecx
100008276:	e8 89 80 00 00	callq	0x100010304 ## symbol stub for: ___strlcpy_chk
10000827b:	48 8d 05 6e 5d 01 00	leaq	89454(%rip), %rax
100008282:	80 78 40 00	cmpb	$0, 64(%rax)
100008286:	74 0b	je	0x100008293
100008288:	48 c7 83 90 01 00 00 ff ff ff ff	movq	$-1, 400(%rbx)
100008293:	48 83 c4 70	addq	$112, %rsp
100008297:	5b	popq	%rbx
100008298:	41 5e	popq	%r14
10000829a:	5d	popq	%rbp
10000829b:	c3	retq
10000829c:	55	pushq	%rbp
10000829d:	48 89 e5	movq	%rsp, %rbp
1000082a0:	48 8b 06	movq	(%rsi), %rax
1000082a3:	31 c9	xorl	%ecx, %ecx
1000082a5:	48 3b 02	cmpq	(%rdx), %rax
1000082a8:	0f 95 c1	setne	%cl
1000082ab:	b8 ff ff ff ff	movl	$4294967295, %eax
1000082b0:	0f 43 c1	cmovael	%ecx, %eax
1000082b3:	5d	popq	%rbp
1000082b4:	c3	retq
1000082b5:	55	pushq	%rbp
1000082b6:	48 89 e5	movq	%rsp, %rbp
1000082b9:	53	pushq	%rbx
1000082ba:	50	pushq	%rax
1000082bb:	48 89 fb	movq	%rdi, %rbx
1000082be:	48 8b 07	movq	(%rdi), %rax
1000082c1:	48 8b 8e 90 01 00 00	movq	400(%rsi), %rcx
1000082c8:	48 85 c0	testq	%rax, %rax
1000082cb:	74 0a	je	0x1000082d7
1000082cd:	48 39 c8	cmpq	%rcx, %rax
1000082d0:	74 08	je	0x1000082da
1000082d2:	e8 68 7a 00 00	callq	0x10000fd3f
1000082d7:	48 89 0b	movq	%rcx, (%rbx)
1000082da:	48 ff 83 08 02 00 00	incq	520(%rbx)
1000082e1:	48 8b 86 8c 00 00 00	movq	140(%rsi), %rax
1000082e8:	48 03 86 84 00 00 00	addq	132(%rsi), %rax
1000082ef:	48 01 83 0c 01 00 00	addq	%rax, 268(%rbx)
1000082f6:	f3 0f 6f 86 94 00 00 00	movdqu	148(%rsi), %xmm0
1000082fe:	f3 0f 6f 8b 1c 01 00 00	movdqu	284(%rbx), %xmm1
100008306:	66 0f d4 c8	paddq	%xmm0, %xmm1
10000830a:	f3 0f 6f 83 c0 01 00 00	movdqu	448(%rbx), %xmm0
100008312:	f3 0f 7f 8b 1c 01 00 00	movdqu	%xmm1, 284(%rbx)
10000831a:	f3 0f 6f 8e 38 01 00 00	movdqu	312(%rsi), %xmm1
100008322:	66 0f d4 c8	paddq	%xmm0, %xmm1
100008326:	f3 0f 7f 8b c0 01 00 00	movdqu	%xmm1, 448(%rbx)
10000832e:	48 8b 86 50 01 00 00	movq	336(%rsi), %rax
100008335:	48 01 83 d8 01 00 00	addq	%rax, 472(%rbx)
10000833c:	48 85 d2	testq	%rdx, %rdx
10000833f:	75 08	jne	0x100008349
100008341:	e8 5a 80 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
100008346:	48 89 c2	movq	%rax, %rdx
100008349:	48 89 93 f8 01 00 00	movq	%rdx, 504(%rbx)
100008350:	48 83 c4 08	addq	$8, %rsp
100008354:	5b	popq	%rbx
100008355:	5d	popq	%rbp
100008356:	c3	retq
100008357:	55	pushq	%rbp
100008358:	48 89 e5	movq	%rsp, %rbp
10000835b:	48 89 f7	movq	%rsi, %rdi
10000835e:	48 8b 05 6b 4e 08 00	movq	544363(%rip), %rax
100008365:	48 89 d6	movq	%rdx, %rsi
100008368:	5d	popq	%rbp
100008369:	ff e0	jmpq	*%rax
10000836b:	55	pushq	%rbp
10000836c:	48 89 e5	movq	%rsp, %rbp
10000836f:	48 8b 0d 5a 4e 08 00	movq	544346(%rip), %rcx
100008376:	b8 88 00 00 00	movl	$136, %eax
10000837b:	48 8d 3c 06	leaq	(%rsi,%rax), %rdi
10000837f:	48 01 d0	addq	%rdx, %rax
100008382:	48 89 c6	movq	%rax, %rsi
100008385:	5d	popq	%rbp
100008386:	ff e1	jmpq	*%rcx
100008388:	55	pushq	%rbp
100008389:	48 89 e5	movq	%rsp, %rbp
10000838c:	8b 07	movl	(%rdi), %eax
10000838e:	2b 06	subl	(%rsi), %eax
100008390:	5d	popq	%rbp
100008391:	c3	retq
100008392:	55	pushq	%rbp
100008393:	48 89 e5	movq	%rsp, %rbp
100008396:	41 56	pushq	%r14
100008398:	53	pushq	%rbx
100008399:	48 81 ec 20 02 00 00	subq	$544, %rsp
1000083a0:	48 89 fe	movq	%rdi, %rsi
1000083a3:	48 8b 05 be fe 00 00	movq	65214(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000083aa:	48 8b 00	movq	(%rax), %rax
1000083ad:	48 89 45 e8	movq	%rax, -24(%rbp)
1000083b1:	48 8d 9d e0 fd ff ff	leaq	-544(%rbp), %rbx
1000083b8:	ba 08 02 00 00	movl	$520, %edx
1000083bd:	48 89 df	movq	%rbx, %rdi
1000083c0:	e8 0b 80 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
1000083c5:	48 8d 3d 44 65 01 00	leaq	91460(%rip), %rdi
1000083cc:	48 8d 15 b5 ff ff ff	leaq	-75(%rip), %rdx
1000083d3:	48 89 de	movq	%rbx, %rsi
1000083d6:	e8 b0 43 00 00	callq	0x10000c78b
1000083db:	48 85 c0	testq	%rax, %rax
1000083de:	74 28	je	0x100008408
1000083e0:	48 8d 9d e0 fd ff ff	leaq	-544(%rbp), %rbx
1000083e7:	4c 8d b5 df fd ff ff	leaq	-545(%rbp), %r14
1000083ee:	48 89 df	movq	%rbx, %rdi
1000083f1:	48 89 c6	movq	%rax, %rsi
1000083f4:	48 89 da	movq	%rbx, %rdx
1000083f7:	4c 89 f1	movq	%r14, %rcx
1000083fa:	e8 31 80 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
1000083ff:	41 8a 06	movb	(%r14), %al
100008402:	88 83 8a 01 00 00	movb	%al, 394(%rbx)
100008408:	48 8d b5 e0 fd ff ff	leaq	-544(%rbp), %rsi
10000840f:	c6 86 88 01 00 00 01	movb	$1, 392(%rsi)
100008416:	48 8d 3d e3 64 01 00	leaq	91363(%rip), %rdi
10000841d:	e8 b2 42 00 00	callq	0x10000c6d4
100008422:	48 8b 05 3f fe 00 00	movq	65087(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008429:	48 8b 00	movq	(%rax), %rax
10000842c:	48 3b 45 e8	cmpq	-24(%rbp), %rax
100008430:	75 0c	jne	0x10000843e
100008432:	48 81 c4 20 02 00 00	addq	$544, %rsp
100008439:	5b	popq	%rbx
10000843a:	41 5e	popq	%r14
10000843c:	5d	popq	%rbp
10000843d:	c3	retq
10000843e:	e8 b5 7e 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100008443:	55	pushq	%rbp
100008444:	48 89 e5	movq	%rsp, %rbp
100008447:	41 57	pushq	%r15
100008449:	41 56	pushq	%r14
10000844b:	41 54	pushq	%r12
10000844d:	53	pushq	%rbx
10000844e:	48 81 ec 20 02 00 00	subq	$544, %rsp
100008455:	49 89 f6	movq	%rsi, %r14
100008458:	48 89 fb	movq	%rdi, %rbx
10000845b:	48 8b 05 06 fe 00 00	movq	65030(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008462:	48 8b 00	movq	(%rax), %rax
100008465:	48 89 45 d8	movq	%rax, -40(%rbp)
100008469:	4c 8d bd d0 fd ff ff	leaq	-560(%rbp), %r15
100008470:	ba 08 02 00 00	movl	$520, %edx
100008475:	4c 89 ff	movq	%r15, %rdi
100008478:	48 89 de	movq	%rbx, %rsi
10000847b:	e8 50 7f 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100008480:	4c 8d a5 cf fd ff ff	leaq	-561(%rbp), %r12
100008487:	4c 89 ff	movq	%r15, %rdi
10000848a:	4c 89 f6	movq	%r14, %rsi
10000848d:	4c 89 fa	movq	%r15, %rdx
100008490:	4c 89 e1	movq	%r12, %rcx
100008493:	e8 98 7f 00 00	callq	0x100010430 ## symbol stub for: _pm_task_subtract
100008498:	41 8a 04 24	movb	(%r12), %al
10000849c:	41 88 87 8a 01 00 00	movb	%al, 394(%r15)
1000084a3:	48 8d 05 46 5b 01 00	leaq	88902(%rip), %rax
1000084aa:	48 83 78 20 00	cmpq	$0, 32(%rax)
1000084af:	74 7c	je	0x10000852d
1000084b1:	f2 0f 10 40 30	movsd	48(%rax), %xmm0
1000084b6:	0f 14 05 43 e2 00 00	unpcklps	57923(%rip), %xmm0
1000084bd:	66 0f 5c 05 4b e2 00 00	subpd	57931(%rip), %xmm0
1000084c5:	66 0f 7c c0	haddpd	%xmm0, %xmm0
1000084c9:	f2 0f 5e 05 4f e2 00 00	divsd	57935(%rip), %xmm0
1000084d1:	48 8d bd d0 fd ff ff	leaq	-560(%rbp), %rdi
1000084d8:	e8 35 7f 00 00	callq	0x100010412 ## symbol stub for: _pm_energy_impact_internal
1000084dd:	31 c0	xorl	%eax, %eax
1000084df:	48 8d 0d 9a 64 01 00	leaq	91290(%rip), %rcx
1000084e6:	f2 0f 10 0d 42 e2 00 00	movsd	57922(%rip), %xmm1
1000084ee:	f2 0f 10 14 08	movsd	(%rax,%rcx), %xmm2
1000084f3:	f2 41 0f 10 9c 06 98 01 00 00	movsd	408(%r14,%rax), %xmm3
1000084fd:	f2 0f 59 da	mulsd	%xmm2, %xmm3
100008501:	66 0f 28 e1	movapd	%xmm1, %xmm4
100008505:	f2 0f 5c e2	subsd	%xmm2, %xmm4
100008509:	f2 0f 59 e0	mulsd	%xmm0, %xmm4
10000850d:	f2 0f 58 e3	addsd	%xmm3, %xmm4
100008511:	f2 0f 11 a4 05 68 ff ff ff	movsd	%xmm4, -152(%rbp,%rax)
10000851a:	f2 0f 11 a4 03 98 01 00 00	movsd	%xmm4, 408(%rbx,%rax)
100008523:	48 83 c0 08	addq	$8, %rax
100008527:	48 83 f8 28	cmpq	$40, %rax
10000852b:	75 c1	jne	0x1000084ee
10000852d:	48 8d 3d 9c 63 01 00	leaq	91036(%rip), %rdi
100008534:	48 8d b5 d0 fd ff ff	leaq	-560(%rbp), %rsi
10000853b:	e8 94 41 00 00	callq	0x10000c6d4
100008540:	48 8b 05 21 fd 00 00	movq	64801(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008547:	48 8b 00	movq	(%rax), %rax
10000854a:	48 3b 45 d8	cmpq	-40(%rbp), %rax
10000854e:	75 10	jne	0x100008560
100008550:	48 81 c4 20 02 00 00	addq	$544, %rsp
100008557:	5b	popq	%rbx
100008558:	41 5c	popq	%r12
10000855a:	41 5e	popq	%r14
10000855c:	41 5f	popq	%r15
10000855e:	5d	popq	%rbp
10000855f:	c3	retq
100008560:	e8 93 7d 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100008565:	55	pushq	%rbp
100008566:	48 89 e5	movq	%rsp, %rbp
100008569:	41 56	pushq	%r14
10000856b:	53	pushq	%rbx
10000856c:	48 89 f3	movq	%rsi, %rbx
10000856f:	48 83 ff 01	cmpq	$1, %rdi
100008573:	75 09	jne	0x10000857e
100008575:	48 8d 35 42 b3 00 00	leaq	45890(%rip), %rsi ## literal pool for: "kernel_coalition"
10000857c:	eb 2e	jmp	0x1000085ac
10000857e:	e8 91 7f 00 00	callq	0x100010514 ## symbol stub for: _xpc_coalition_copy_info
100008583:	48 85 c0	testq	%rax, %rax
100008586:	74 1d	je	0x1000085a5
100008588:	49 89 c6	movq	%rax, %r14
10000858b:	48 89 c7	movq	%rax, %rdi
10000858e:	e8 8d 7f 00 00	callq	0x100010520 ## symbol stub for: _xpc_get_type
100008593:	48 3b 05 fe fc 00 00	cmpq	64766(%rip), %rax ## literal pool symbol address: __xpc_type_dictionary
10000859a:	74 1f	je	0x1000085bb
10000859c:	48 8d 35 09 b3 00 00	leaq	45833(%rip), %rsi ## literal pool for: "UNNAMED_COALITION"
1000085a3:	eb 50	jmp	0x1000085f5
1000085a5:	48 8d 35 00 b3 00 00	leaq	45824(%rip), %rsi ## literal pool for: "UNNAMED_COALITION"
1000085ac:	ba 7f 00 00 00	movl	$127, %edx
1000085b1:	48 89 df	movq	%rbx, %rdi
1000085b4:	e8 1f 7f 00 00	callq	0x1000104d8 ## symbol stub for: _strncpy
1000085b9:	eb 4f	jmp	0x10000860a
1000085bb:	48 8b 05 3e fc 00 00	movq	64574(%rip), %rax ## literal pool symbol address: _XPC_COALITION_INFO_KEY_BUNDLE_IDENTIFIER
1000085c2:	48 8b 30	movq	(%rax), %rsi
1000085c5:	4c 89 f7	movq	%r14, %rdi
1000085c8:	e8 4d 7f 00 00	callq	0x10001051a ## symbol stub for: _xpc_dictionary_get_string
1000085cd:	48 89 c6	movq	%rax, %rsi
1000085d0:	48 85 c0	testq	%rax, %rax
1000085d3:	75 20	jne	0x1000085f5
1000085d5:	48 8b 05 2c fc 00 00	movq	64556(%rip), %rax ## literal pool symbol address: _XPC_COALITION_INFO_KEY_NAME
1000085dc:	48 8b 30	movq	(%rax), %rsi
1000085df:	4c 89 f7	movq	%r14, %rdi
1000085e2:	e8 33 7f 00 00	callq	0x10001051a ## symbol stub for: _xpc_dictionary_get_string
1000085e7:	48 85 c0	testq	%rax, %rax
1000085ea:	48 8d 35 bb b2 00 00	leaq	45755(%rip), %rsi ## literal pool for: "UNNAMED_COALITION"
1000085f1:	48 0f 45 f0	cmovneq	%rax, %rsi
1000085f5:	ba 7f 00 00 00	movl	$127, %edx
1000085fa:	48 89 df	movq	%rbx, %rdi
1000085fd:	e8 d6 7e 00 00	callq	0x1000104d8 ## symbol stub for: _strncpy
100008602:	4c 89 f7	movq	%r14, %rdi
100008605:	e8 1c 7f 00 00	callq	0x100010526 ## symbol stub for: _xpc_release
10000860a:	c6 43 7f 00	movb	$0, 127(%rbx)
10000860e:	5b	popq	%rbx
10000860f:	41 5e	popq	%r14
100008611:	5d	popq	%rbp
100008612:	c3	retq
100008613:	55	pushq	%rbp
100008614:	48 89 e5	movq	%rsp, %rbp
100008617:	41 56	pushq	%r14
100008619:	53	pushq	%rbx
10000861a:	48 83 ec 30	subq	$48, %rsp
10000861e:	48 8b 05 43 fc 00 00	movq	64579(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100008625:	48 8b 00	movq	(%rax), %rax
100008628:	48 89 45 e8	movq	%rax, -24(%rbp)
10000862c:	48 8d 3d 7d 65 01 00	leaq	91517(%rip), %rdi
100008633:	be a0 4d 00 00	movl	$19872, %esi
100008638:	e8 a3 7c 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000863d:	48 8d 3d 0c b3 01 00	leaq	111372(%rip), %rdi
100008644:	be a0 4d 00 00	movl	$19872, %esi
100008649:	e8 92 7c 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000864e:	48 8d 3d 9b 00 02 00	leaq	131227(%rip), %rdi
100008655:	be a0 4d 00 00	movl	$19872, %esi
10000865a:	e8 81 7c 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000865f:	48 b8 68 77 2e 70 61 63 6b 61	movabsq	$7019813714332120936, %rax
100008669:	48 8d 7d d8	leaq	-40(%rbp), %rdi
10000866d:	48 89 07	movq	%rax, (%rdi)
100008670:	c7 47 08 67 65 73 00	movl	$7562599, 8(%rdi)
100008677:	48 8d 5d c8	leaq	-56(%rbp), %rbx
10000867b:	48 c7 03 04 00 00 00	movq	$4, (%rbx)
100008682:	48 8d 35 4f 4b 08 00	leaq	543567(%rip), %rsi
100008689:	48 89 da	movq	%rbx, %rdx
10000868c:	31 c9	xorl	%ecx, %ecx
10000868e:	45 31 c0	xorl	%r8d, %r8d
100008691:	e8 5a 7e 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
100008696:	41 89 c6	movl	%eax, %r14d
100008699:	48 83 3b 04	cmpq	$4, (%rbx)
10000869d:	74 1c	je	0x1000086bb
10000869f:	48 8b 05 ca fb 00 00	movq	64458(%rip), %rax ## literal pool symbol address: ___stderrp
1000086a6:	48 8b 38	movq	(%rax), %rdi
1000086a9:	48 8d 35 6a b3 00 00	leaq	45930(%rip), %rsi ## literal pool for: "sysctl(%s) returned incomplete data"
1000086b0:	48 8d 55 d8	leaq	-40(%rbp), %rdx
1000086b4:	31 c0	xorl	%eax, %eax
1000086b6:	e8 97 7c 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000086bb:	45 85 f6	testl	%r14d, %r14d
1000086be:	0f 85 bf 02 00 00	jne	0x100008983
1000086c4:	48 8d 3d 35 f4 00 00	leaq	62517(%rip), %rdi
1000086cb:	48 8d 35 0a 4b 08 00	leaq	543498(%rip), %rsi
1000086d2:	48 8d 15 7f 59 01 00	leaq	88447(%rip), %rdx
1000086d9:	31 c9	xorl	%ecx, %ecx
1000086db:	45 31 c0	xorl	%r8d, %r8d
1000086de:	e8 0d 7e 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
1000086e3:	89 c3	movl	%eax, %ebx
1000086e5:	48 83 3d 6b 59 01 00 04	cmpq	$4, 88427(%rip)
1000086ed:	74 1f	je	0x10000870e
1000086ef:	48 8b 05 7a fb 00 00	movq	64378(%rip), %rax ## literal pool symbol address: ___stderrp
1000086f6:	48 8b 38	movq	(%rax), %rdi
1000086f9:	48 8d 35 1a b3 00 00	leaq	45850(%rip), %rsi ## literal pool for: "sysctl(%s) returned incomplete data"
100008700:	48 8d 15 f9 f3 00 00	leaq	62457(%rip), %rdx
100008707:	31 c0	xorl	%eax, %eax
100008709:	e8 44 7c 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000870e:	85 db	testl	%ebx, %ebx
100008710:	0f 85 72 02 00 00	jne	0x100008988
100008716:	48 8d 3d 03 f4 00 00	leaq	62467(%rip), %rdi
10000871d:	48 8d 35 bc 4a 08 00	leaq	543420(%rip), %rsi
100008724:	48 8d 15 35 59 01 00	leaq	88373(%rip), %rdx
10000872b:	31 c9	xorl	%ecx, %ecx
10000872d:	45 31 c0	xorl	%r8d, %r8d
100008730:	e8 bb 7d 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
100008735:	89 c3	movl	%eax, %ebx
100008737:	48 83 3d 21 59 01 00 04	cmpq	$4, 88353(%rip)
10000873f:	74 1f	je	0x100008760
100008741:	48 8b 05 28 fb 00 00	movq	64296(%rip), %rax ## literal pool symbol address: ___stderrp
100008748:	48 8b 38	movq	(%rax), %rdi
10000874b:	48 8d 35 c8 b2 00 00	leaq	45768(%rip), %rsi ## literal pool for: "sysctl(%s) returned incomplete data"
100008752:	48 8d 15 c7 f3 00 00	leaq	62407(%rip), %rdx
100008759:	31 c0	xorl	%eax, %eax
10000875b:	e8 f2 7b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008760:	85 db	testl	%ebx, %ebx
100008762:	0f 85 25 02 00 00	jne	0x10000898d
100008768:	31 db	xorl	%ebx, %ebx
10000876a:	48 8d 75 c8	leaq	-56(%rbp), %rsi
10000876e:	89 1e	movl	%ebx, (%rsi)
100008770:	89 5d d4	movl	%ebx, -44(%rbp)
100008773:	48 8d 55 d8	leaq	-40(%rbp), %rdx
100008777:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
10000877e:	48 8d 3d b9 b2 00 00	leaq	45753(%rip), %rdi ## literal pool for: "machdep.cpu.tsc_ccc.numerator"
100008785:	31 c9	xorl	%ecx, %ecx
100008787:	45 31 c0	xorl	%r8d, %r8d
10000878a:	e8 61 7d 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000878f:	85 c0	testl	%eax, %eax
100008791:	75 36	jne	0x1000087c9
100008793:	48 83 7d d8 04	cmpq	$4, -40(%rbp)
100008798:	75 2f	jne	0x1000087c9
10000879a:	48 8d 3d bb b2 00 00	leaq	45755(%rip), %rdi ## literal pool for: "machdep.cpu.tsc_ccc.denominator"
1000087a1:	31 db	xorl	%ebx, %ebx
1000087a3:	48 8d 75 d4	leaq	-44(%rbp), %rsi
1000087a7:	48 8d 55 d8	leaq	-40(%rbp), %rdx
1000087ab:	31 c9	xorl	%ecx, %ecx
1000087ad:	45 31 c0	xorl	%r8d, %r8d
1000087b0:	e8 3b 7d 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
1000087b5:	85 c0	testl	%eax, %eax
1000087b7:	75 10	jne	0x1000087c9
1000087b9:	48 83 7d d8 04	cmpq	$4, -40(%rbp)
1000087be:	75 09	jne	0x1000087c9
1000087c0:	8b 45 c8	movl	-56(%rbp), %eax
1000087c3:	0b 45 d4	orl	-44(%rbp), %eax
1000087c6:	0f 95 c3	setne	%bl
1000087c9:	88 1d c1 4c 02 00	movb	%bl, 150721(%rip)
1000087cf:	48 8d 1d 1a 58 01 00	leaq	88090(%rip), %rbx
1000087d6:	80 7b 3c 00	cmpb	$0, 60(%rbx)
1000087da:	74 0e	je	0x1000087ea
1000087dc:	b8 00 00 00 04	movl	$67108864, %eax
1000087e1:	bf 16 00 00 00	movl	$22, %edi
1000087e6:	31 f6	xorl	%esi, %esi
1000087e8:	0f 05	syscall
1000087ea:	80 7b 3e 00	cmpb	$0, 62(%rbx)
1000087ee:	75 14	jne	0x100008804
1000087f0:	80 7b 3f 00	cmpb	$0, 63(%rbx)
1000087f4:	75 0e	jne	0x100008804
1000087f6:	80 7b 3a 00	cmpb	$0, 58(%rbx)
1000087fa:	75 08	jne	0x100008804
1000087fc:	8a 05 90 4c 02 00	movb	150672(%rip), %al
100008802:	eb 3a	jmp	0x10000883e
100008804:	48 8d 3d 7a 83 00 00	leaq	33658(%rip), %rdi ## literal pool for: "/dev/xcpm"
10000880b:	31 f6	xorl	%esi, %esi
10000880d:	31 c0	xorl	%eax, %eax
10000880f:	e8 e6 7b 00 00	callq	0x1000103fa ## symbol stub for: _open
100008814:	89 05 36 58 01 00	movl	%eax, 88118(%rip)
10000881a:	83 f8 ff	cmpl	$-1, %eax
10000881d:	0f 84 ac 00 00 00	je	0x1000088cf
100008823:	8a 43 3f	movb	63(%rbx), %al
100008826:	88 05 65 4c 02 00	movb	%al, 150629(%rip)
10000882c:	8a 4b 3a	movb	58(%rbx), %cl
10000882f:	8a 43 3e	movb	62(%rbx), %al
100008832:	88 05 5a 4c 02 00	movb	%al, 150618(%rip)
100008838:	88 0d 55 4c 02 00	movb	%cl, 150613(%rip)
10000883e:	84 c0	testb	%al, %al
100008840:	74 61	je	0x1000088a3
100008842:	8b 3d 08 58 01 00	movl	88072(%rip), %edi
100008848:	48 8d 15 45 4c 02 00	leaq	150597(%rip), %rdx
10000884f:	be 01 58 00 20	movl	$536893441, %esi
100008854:	31 c0	xorl	%eax, %eax
100008856:	e8 39 7b 00 00	callq	0x100010394 ## symbol stub for: _ioctl
10000885b:	83 f8 ff	cmpl	$-1, %eax
10000885e:	0f 84 33 01 00 00	je	0x100008997
100008864:	8b 3d e6 57 01 00	movl	88038(%rip), %edi
10000886a:	48 8d 15 3b 50 02 00	leaq	151611(%rip), %rdx
100008871:	be 02 58 08 c0	movl	$3221772290, %esi
100008876:	31 c0	xorl	%eax, %eax
100008878:	e8 17 7b 00 00	callq	0x100010394 ## symbol stub for: _ioctl
10000887d:	83 f8 ff	cmpl	$-1, %eax
100008880:	0f 84 16 01 00 00	je	0x10000899c
100008886:	8b 3d c4 57 01 00	movl	88004(%rip), %edi
10000888c:	be 0e 58 00 20	movl	$536893454, %esi
100008891:	31 d2	xorl	%edx, %edx
100008893:	31 c0	xorl	%eax, %eax
100008895:	e8 fa 7a 00 00	callq	0x100010394 ## symbol stub for: _ioctl
10000889a:	83 f8 ff	cmpl	$-1, %eax
10000889d:	0f 84 fe 00 00 00	je	0x1000089a1
1000088a3:	80 3d e9 4b 02 00 00	cmpb	$0, 150505(%rip)
1000088aa:	74 37	je	0x1000088e3
1000088ac:	8b 3d 9e 57 01 00	movl	87966(%rip), %edi
1000088b2:	48 8d 15 fb 4f 02 00	leaq	151547(%rip), %rdx
1000088b9:	be 16 58 00 20	movl	$536893462, %esi
1000088be:	31 c0	xorl	%eax, %eax
1000088c0:	e8 cf 7a 00 00	callq	0x100010394 ## symbol stub for: _ioctl
1000088c5:	83 f8 ff	cmpl	$-1, %eax
1000088c8:	75 19	jne	0x1000088e3
1000088ca:	e8 b6 74 00 00	callq	0x10000fd85
1000088cf:	31 c0	xorl	%eax, %eax
1000088d1:	88 05 ba 4b 02 00	movb	%al, 150458(%rip)
1000088d7:	88 05 b5 4b 02 00	movb	%al, 150453(%rip)
1000088dd:	88 05 b0 4b 02 00	movb	%al, 150448(%rip)
1000088e3:	8b 05 f7 48 08 00	movl	542967(%rip), %eax
1000088e9:	3b 05 ed 48 08 00	cmpl	542957(%rip), %eax
1000088ef:	0f 82 89 00 00 00	jb	0x10000897e
1000088f5:	48 8d 1d b4 0f 01 00	leaq	69556(%rip), %rbx ## Objc cfstring ref: @"pmtelemetry_cpu"
1000088fc:	48 8d 35 cd 0f 01 00	leaq	69581(%rip), %rsi ## Objc cfstring ref: @"c7+"
100008903:	48 8d 15 ae 50 02 00	leaq	151726(%rip), %rdx
10000890a:	48 8d 0d af 50 02 00	leaq	151727(%rip), %rcx
100008911:	48 89 df	movq	%rbx, %rdi
100008914:	e8 03 37 00 00	callq	0x10000c01c
100008919:	88 05 a9 50 02 00	movb	%al, 151721(%rip)
10000891f:	48 8d 35 ca 0f 01 00	leaq	69578(%rip), %rsi ## Objc cfstring ref: @"msr"
100008926:	48 8d 15 a3 50 02 00	leaq	151715(%rip), %rdx
10000892d:	48 8d 0d a4 50 02 00	leaq	151716(%rip), %rcx
100008934:	48 89 df	movq	%rbx, %rdi
100008937:	e8 e0 36 00 00	callq	0x10000c01c
10000893c:	88 05 9e 50 02 00	movb	%al, 151710(%rip)
100008942:	48 8d 35 c7 0f 01 00	leaq	69575(%rip), %rsi ## Objc cfstring ref: @"msr limits"
100008949:	48 8d 15 98 50 02 00	leaq	151704(%rip), %rdx
100008950:	48 8d 0d 99 50 02 00	leaq	151705(%rip), %rcx
100008957:	48 89 df	movq	%rbx, %rdi
10000895a:	e8 bd 36 00 00	callq	0x10000c01c
10000895f:	88 05 93 50 02 00	movb	%al, 151699(%rip)
100008965:	48 8b 05 fc f8 00 00	movq	63740(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000896c:	48 8b 00	movq	(%rax), %rax
10000896f:	48 3b 45 e8	cmpq	-24(%rbp), %rax
100008973:	75 1d	jne	0x100008992
100008975:	48 83 c4 30	addq	$48, %rsp
100008979:	5b	popq	%rbx
10000897a:	41 5e	popq	%r14
10000897c:	5d	popq	%rbp
10000897d:	c3	retq
10000897e:	e8 df 73 00 00	callq	0x10000fd62
100008983:	e8 7b 74 00 00	callq	0x10000fe03
100008988:	e8 61 74 00 00	callq	0x10000fdee
10000898d:	e8 47 74 00 00	callq	0x10000fdd9
100008992:	e8 61 79 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100008997:	e8 fe 73 00 00	callq	0x10000fd9a
10000899c:	e8 0e 74 00 00	callq	0x10000fdaf
1000089a1:	e8 1e 74 00 00	callq	0x10000fdc4
1000089a6:	55	pushq	%rbp
1000089a7:	48 89 e5	movq	%rsp, %rbp
1000089aa:	41 57	pushq	%r15
1000089ac:	41 56	pushq	%r14
1000089ae:	41 55	pushq	%r13
1000089b0:	41 54	pushq	%r12
1000089b2:	53	pushq	%rbx
1000089b3:	48 81 ec 38 03 00 00	subq	$824, %rsp
1000089ba:	48 8b 05 a7 f8 00 00	movq	63655(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
1000089c1:	48 8b 00	movq	(%rax), %rax
1000089c4:	48 89 45 d0	movq	%rax, -48(%rbp)
1000089c8:	4c 8d 25 c9 55 01 00	leaq	87497(%rip), %r12
1000089cf:	41 80 3c 24 00	cmpb	$0, (%r12)
1000089d4:	0f 85 c0 14 00 00	jne	0x100009e9a
1000089da:	80 3d 18 50 02 00 01	cmpb	$1, 151576(%rip)
1000089e1:	75 0c	jne	0x1000089ef
1000089e3:	c6 05 0f 50 02 00 00	movb	$0, 151567(%rip)
1000089ea:	e9 ab 14 00 00	jmp	0x100009e9a
1000089ef:	41 0f b6 44 24 02	movzbl	2(%r12), %eax
1000089f5:	f2 41 0f 10 44 c4 20	movsd	32(%r12,%rax,8), %xmm0
1000089fc:	f2 0f 11 85 20 fd ff ff	movsd	%xmm0, -736(%rbp)
100008a04:	4c 8d 3d e5 55 01 00	leaq	87525(%rip), %r15
100008a0b:	41 8b 47 28	movl	40(%r15), %eax
100008a0f:	85 c0	testl	%eax, %eax
100008a11:	74 0e	je	0x100008a21
100008a13:	83 f8 01	cmpl	$1, %eax
100008a16:	75 1a	jne	0x100008a32
100008a18:	48 8d 3d 7a b0 00 00	leaq	45178(%rip), %rdi ## literal pool for: "<key>processor</key>\n<dict>\n"
100008a1f:	eb 07	jmp	0x100008a28
100008a21:	48 8d 3d 54 b0 00 00	leaq	45140(%rip), %rdi ## literal pool for: "\n**** Processor usage ****\n\n"
100008a28:	49 8b 74 24 50	movq	80(%r12), %rsi
100008a2d:	e8 2c 79 00 00	callq	0x10001035e ## symbol stub for: _fputs
100008a32:	8a 0d 91 af 01 00	movb	110481(%rip), %cl
100008a38:	8b 05 32 fd 01 00	movl	130354(%rip), %eax
100008a3e:	80 e1 1f	andb	$31, %cl
100008a41:	ba 01 00 00 00	movl	$1, %edx
100008a46:	48 d3 e2	shlq	%cl, %rdx
100008a49:	0f 57 c0	xorps	%xmm0, %xmm0
100008a4c:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
100008a51:	f2 48 0f 2a ca	cvtsi2sd	%rdx, %xmm1
100008a56:	f2 0f 10 1d d2 dc 00 00	movsd	56530(%rip), %xmm3
100008a5e:	f2 0f 5e d9	divsd	%xmm1, %xmm3
100008a62:	f2 0f 59 c3	mulsd	%xmm3, %xmm0
100008a66:	8b 1d 0c fd 01 00	movl	130316(%rip), %ebx
100008a6c:	44 8b 35 0d fd 01 00	movl	130317(%rip), %r14d
100008a73:	44 8b 2d 0e fd 01 00	movl	130318(%rip), %r13d
100008a7a:	66 0f 28 c8	movapd	%xmm0, %xmm1
100008a7e:	f2 0f 5e 8d 20 fd ff ff	divsd	-736(%rbp), %xmm1
100008a86:	f2 0f 10 3d 02 fd 01 00	movsd	130306(%rip), %xmm7
100008a8e:	f2 41 0f 10 64 24 10	movsd	16(%r12), %xmm4
100008a95:	66 0f 57 d2	xorpd	%xmm2, %xmm2
100008a99:	66 0f 2e ca	ucomisd	%xmm2, %xmm1
100008a9d:	0f 86 81 00 00 00	jbe	0x100008b24
100008aa3:	41 8b 47 28	movl	40(%r15), %eax
100008aa7:	83 f8 01	cmpl	$1, %eax
100008aaa:	74 35	je	0x100008ae1
100008aac:	85 c0	testl	%eax, %eax
100008aae:	75 74	jne	0x100008b24
100008ab0:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008ab5:	48 8d 35 1e b0 00 00	leaq	45086(%rip), %rsi ## literal pool for: "Intel energy model derived package power (CPUs+GT+SA): %.2fW\n\n"
100008abc:	66 0f 28 c1	movapd	%xmm1, %xmm0
100008ac0:	b0 01	movb	$1, %al
100008ac2:	66 0f 29 bd 10 fd ff ff	movapd	%xmm7, -752(%rbp)
100008aca:	f2 0f 11 9d 28 fd ff ff	movsd	%xmm3, -728(%rbp)
100008ad2:	66 0f 29 a5 f0 fc ff ff	movapd	%xmm4, -784(%rbp)
100008ada:	e8 73 78 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008adf:	eb 2b	jmp	0x100008b0c
100008ae1:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008ae6:	48 8d 35 2c b0 00 00	leaq	45100(%rip), %rsi ## literal pool for: "<key>package_joules</key><real>%g</real>\n<key>package_watts</key><real>%g</real>\n"
100008aed:	b0 02	movb	$2, %al
100008aef:	66 0f 29 bd 10 fd ff ff	movapd	%xmm7, -752(%rbp)
100008af7:	f2 0f 11 9d 28 fd ff ff	movsd	%xmm3, -728(%rbp)
100008aff:	66 0f 29 a5 f0 fc ff ff	movapd	%xmm4, -784(%rbp)
100008b07:	e8 46 78 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008b0c:	66 0f 28 a5 f0 fc ff ff	movapd	-784(%rbp), %xmm4
100008b14:	f2 0f 10 9d 28 fd ff ff	movsd	-728(%rbp), %xmm3
100008b1c:	66 0f 28 bd 10 fd ff ff	movapd	-752(%rbp), %xmm7
100008b24:	66 0f 28 35 d4 db 00 00	movapd	56276(%rip), %xmm6
100008b2c:	48 83 3d 5c fc 01 00 ff	cmpq	$-1, 130140(%rip)
100008b34:	0f 84 11 01 00 00	je	0x100008c4b
100008b3a:	0f 14 e6	unpcklps	%xmm6, %xmm4
100008b3d:	0f 14 fe	unpcklps	%xmm6, %xmm7
100008b40:	0f 57 c0	xorps	%xmm0, %xmm0
100008b43:	f2 48 0f 2a c3	cvtsi2sd	%rbx, %xmm0
100008b48:	0f 57 c9	xorps	%xmm1, %xmm1
100008b4b:	f2 49 0f 2a ce	cvtsi2sd	%r14, %xmm1
100008b50:	66 0f 28 15 b8 db 00 00	movapd	56248(%rip), %xmm2
100008b58:	66 0f 5c e2	subpd	%xmm2, %xmm4
100008b5c:	f2 4d 0f 2a c5	cvtsi2sd	%r13, %xmm8
100008b61:	66 0f 5c fa	subpd	%xmm2, %xmm7
100008b65:	66 0f 7c e4	haddpd	%xmm4, %xmm4
100008b69:	f2 0f 59 c3	mulsd	%xmm3, %xmm0
100008b6d:	f2 0f 59 cb	mulsd	%xmm3, %xmm1
100008b71:	66 0f 7c ff	haddpd	%xmm7, %xmm7
100008b75:	f2 44 0f 59 c3	mulsd	%xmm3, %xmm8
100008b7a:	f2 0f 10 ad 20 fd ff ff	movsd	-736(%rbp), %xmm5
100008b82:	f2 0f 59 e5	mulsd	%xmm5, %xmm4
100008b86:	66 0f 28 d0	movapd	%xmm0, %xmm2
100008b8a:	f2 0f 5e d5	divsd	%xmm5, %xmm2
100008b8e:	66 0f 28 d9	movapd	%xmm1, %xmm3
100008b92:	f2 0f 5e dd	divsd	%xmm5, %xmm3
100008b96:	f2 44 0f 5e c5	divsd	%xmm5, %xmm8
100008b9b:	f2 0f 5e fc	divsd	%xmm4, %xmm7
100008b9f:	41 8b 47 28	movl	40(%r15), %eax
100008ba3:	83 f8 01	cmpl	$1, %eax
100008ba6:	74 55	je	0x100008bfd
100008ba8:	85 c0	testl	%eax, %eax
100008baa:	0f 85 9b 00 00 00	jne	0x100008c4b
100008bb0:	41 80 7f 3c 00	cmpb	$0, 60(%r15)
100008bb5:	74 30	je	0x100008be7
100008bb7:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008bbc:	48 8d 35 a8 af 00 00	leaq	44968(%rip), %rsi ## literal pool for: "Intel energy model derived CPU core power: %.03gW\nIntel energy model derived GT power: %.03gW\nIntel energy model derived DRAM power: %.03gW\n"
100008bc3:	66 0f 28 c2	movapd	%xmm2, %xmm0
100008bc7:	66 0f 28 cb	movapd	%xmm3, %xmm1
100008bcb:	66 41 0f 28 d0	movapd	%xmm8, %xmm2
100008bd0:	b0 03	movb	$3, %al
100008bd2:	66 0f 29 bd 10 fd ff ff	movapd	%xmm7, -752(%rbp)
100008bda:	e8 73 77 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008bdf:	66 0f 28 bd 10 fd ff ff	movapd	-752(%rbp), %xmm7
100008be7:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008bec:	f2 0f 59 3d 34 db 00 00	mulsd	56116(%rip), %xmm7
100008bf4:	48 8d 35 fd af 00 00	leaq	45053(%rip), %rsi ## literal pool for: "LLC flushed residency: %.03g%%\n\n"
100008bfb:	eb 3b	jmp	0x100008c38
100008bfd:	41 80 7f 3c 00	cmpb	$0, 60(%r15)
100008c02:	74 28	je	0x100008c2c
100008c04:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008c09:	48 8d 35 09 b0 00 00	leaq	45065(%rip), %rsi ## literal pool for: "<key>cpu_joules</key><real>%g</real>\n<key>igpu_joules</key><real>%g</real>\n<key>cpu_watts</key><real>%g</real>\n<key>igpu_watts</key><real>%g</real>\n<key>dram_watts</key><real>%g</real>\n"
100008c10:	66 41 0f 28 e0	movapd	%xmm8, %xmm4
100008c15:	b0 05	movb	$5, %al
100008c17:	66 0f 29 bd 10 fd ff ff	movapd	%xmm7, -752(%rbp)
100008c1f:	e8 2e 77 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008c24:	66 0f 28 bd 10 fd ff ff	movapd	-752(%rbp), %xmm7
100008c2c:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008c31:	48 8d 35 9b b0 00 00	leaq	45211(%rip), %rsi ## literal pool for: "<key>llc_flushed_ratio</key><real>%g</real>\n"
100008c38:	66 0f 28 c7	movapd	%xmm7, %xmm0
100008c3c:	b0 01	movb	$1, %al
100008c3e:	e8 0f 77 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008c43:	66 0f 28 35 b5 da 00 00	movapd	55989(%rip), %xmm6
100008c4b:	80 3d 3f 48 02 00 00	cmpb	$0, 149567(%rip)
100008c52:	0f 84 ab 00 00 00	je	0x100008d03
100008c58:	f2 0f 10 05 a0 4d 02 00	movsd	150944(%rip), %xmm0
100008c60:	0f 14 c6	unpcklps	%xmm6, %xmm0
100008c63:	66 0f 28 25 a5 da 00 00	movapd	55973(%rip), %xmm4
100008c6b:	66 0f 5c c4	subpd	%xmm4, %xmm0
100008c6f:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100008c73:	f2 0f 10 9d 20 fd ff ff	movsd	-736(%rbp), %xmm3
100008c7b:	f2 0f 5e c3	divsd	%xmm3, %xmm0
100008c7f:	f2 0f 10 0d 81 4d 02 00	movsd	150913(%rip), %xmm1
100008c87:	0f 14 ce	unpcklps	%xmm6, %xmm1
100008c8a:	66 0f 5c cc	subpd	%xmm4, %xmm1
100008c8e:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100008c92:	f2 0f 5e cb	divsd	%xmm3, %xmm1
100008c96:	f2 0f 10 2d 82 da 00 00	movsd	55938(%rip), %xmm5
100008c9e:	f2 0f 5e cd	divsd	%xmm5, %xmm1
100008ca2:	f2 0f 10 15 66 4d 02 00	movsd	150886(%rip), %xmm2
100008caa:	0f 14 d6	unpcklps	%xmm6, %xmm2
100008cad:	66 0f 5c d4	subpd	%xmm4, %xmm2
100008cb1:	66 0f 7c d2	haddpd	%xmm2, %xmm2
100008cb5:	f2 0f 5e d3	divsd	%xmm3, %xmm2
100008cb9:	f2 0f 5e d5	divsd	%xmm5, %xmm2
100008cbd:	41 8b 47 28	movl	40(%r15), %eax
100008cc1:	83 f8 01	cmpl	$1, %eax
100008cc4:	74 2a	je	0x100008cf0
100008cc6:	85 c0	testl	%eax, %eax
100008cc8:	75 39	jne	0x100008d03
100008cca:	f2 0f 5e 05 de ed 00 00	divsd	60894(%rip), %xmm0
100008cd2:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008cd7:	f2 0f 10 1d 49 da 00 00	movsd	55881(%rip), %xmm3
100008cdf:	f2 0f 59 cb	mulsd	%xmm3, %xmm1
100008ce3:	f2 0f 59 d3	mulsd	%xmm3, %xmm2
100008ce7:	48 8d 35 12 b0 00 00	leaq	45074(%rip), %rsi ## literal pool for: "Frequency headroom limited on average by %.0f MHz\nForced idle active for %.2f%% of interval\nMax bus delay asserted for %.2f%% of interval\n\n"
100008cee:	eb 0c	jmp	0x100008cfc
100008cf0:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008cf5:	48 8d 35 90 b0 00 00	leaq	45200(%rip), %rsi ## literal pool for: "<key>plimit_hz</key><real>%.0f</real>\n<key>forced_idle_per_s</key><real>%g</real>\n<key>rmbs_per_s</key><real>%g</real>\n"
100008cfc:	b0 03	movb	$3, %al
100008cfe:	e8 4f 76 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008d03:	8b 15 df ad 01 00	movl	110047(%rip), %edx
100008d09:	48 8d 3d a6 ad 00 00	leaq	44454(%rip), %rdi ## literal pool for: "System"
100008d10:	31 f6	xorl	%esi, %esi
100008d12:	f2 0f 10 85 20 fd ff ff	movsd	-736(%rbp), %xmm0
100008d1a:	e8 cb 19 00 00	callq	0x10000a6ea
100008d1f:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100008d24:	75 11	jne	0x100008d37
100008d26:	49 8b 74 24 50	movq	80(%r12), %rsi
100008d2b:	48 8d 3d 8b ad 00 00	leaq	44427(%rip), %rdi ## literal pool for: "<key>packages</key>\n<array>\n"
100008d32:	e8 27 76 00 00	callq	0x10001035e ## symbol stub for: _fputs
100008d37:	8b 0d 9b 44 08 00	movl	541851(%rip), %ecx
100008d3d:	85 c9	testl	%ecx, %ecx
100008d3f:	66 0f 28 1d b9 d9 00 00	movapd	55737(%rip), %xmm3
100008d47:	0f 84 35 11 00 00	je	0x100009e82
100008d4d:	66 0f 28 25 bb d9 00 00	movapd	55739(%rip), %xmm4
100008d55:	4c 8d 35 94 f9 01 00	leaq	129428(%rip), %r14
100008d5c:	66 0f 28 05 fc d9 00 00	movapd	55804(%rip), %xmm0
100008d64:	66 0f 6f 3d 04 da 00 00	movdqa	55812(%rip), %xmm7
100008d6c:	66 0f 28 2d 0c da 00 00	movapd	55820(%rip), %xmm5
100008d74:	45 31 ed	xorl	%r13d, %r13d
100008d77:	8b 05 5f 44 08 00	movl	541791(%rip), %eax
100008d7d:	31 d2	xorl	%edx, %edx
100008d7f:	f7 f1	divl	%ecx
100008d81:	89 c3	movl	%eax, %ebx
100008d83:	f2 41 0f 10 4c 24 10	movsd	16(%r12), %xmm1
100008d8a:	0f 14 cb	unpcklps	%xmm3, %xmm1
100008d8d:	66 0f 5c 0d 7b d9 00 00	subpd	55675(%rip), %xmm1
100008d95:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100008d99:	66 0f 29 8d 10 fd ff ff	movapd	%xmm1, -752(%rbp)
100008da1:	f2 0f 10 15 07 fa 01 00	movsd	129543(%rip), %xmm2
100008da9:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100008dae:	75 4e	jne	0x100008dfe
100008db0:	49 8b 7c 24 50	movq	80(%r12), %rdi
100008db5:	48 8d 35 a0 b1 00 00	leaq	45472(%rip), %rsi ## literal pool for: "<dict>\n<key>package</key><integer>%d</integer>\n"
100008dbc:	44 89 ea	movl	%r13d, %edx
100008dbf:	31 c0	xorl	%eax, %eax
100008dc1:	66 0f 29 95 d0 fc ff ff	movapd	%xmm2, -816(%rbp)
100008dc9:	e8 84 75 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100008dce:	66 0f 28 95 d0 fc ff ff	movapd	-816(%rbp), %xmm2
100008dd6:	66 0f 28 2d a2 d9 00 00	movapd	55714(%rip), %xmm5
100008dde:	66 0f 6f 3d 8a d9 00 00	movdqa	55690(%rip), %xmm7
100008de6:	66 0f 28 05 72 d9 00 00	movapd	55666(%rip), %xmm0
100008dee:	66 0f 28 25 1a d9 00 00	movapd	55578(%rip), %xmm4
100008df6:	66 0f 28 1d 02 d9 00 00	movapd	55554(%rip), %xmm3
100008dfe:	66 0f 28 8d 10 fd ff ff	movapd	-752(%rbp), %xmm1
100008e06:	f2 0f 59 8d 20 fd ff ff	mulsd	-736(%rbp), %xmm1
100008e0e:	66 0f 29 8d 10 fd ff ff	movapd	%xmm1, -752(%rbp)
100008e16:	41 80 7f 48 00	cmpb	$0, 72(%r15)
100008e1b:	0f 84 a2 07 00 00	je	0x1000095c3
100008e21:	89 9d e8 fc ff ff	movl	%ebx, -792(%rbp)
100008e27:	0f 14 d3	unpcklps	%xmm3, %xmm2
100008e2a:	66 0f 5c 15 de d8 00 00	subpd	55518(%rip), %xmm2
100008e32:	66 0f 7c d2	haddpd	%xmm2, %xmm2
100008e36:	f2 0f 5e 95 20 fd ff ff	divsd	-736(%rbp), %xmm2
100008e3e:	66 0f 29 95 d0 fc ff ff	movapd	%xmm2, -816(%rbp)
100008e46:	66 45 0f 57 c9	xorpd	%xmm9, %xmm9
100008e4b:	31 db	xorl	%ebx, %ebx
100008e4d:	31 ff	xorl	%edi, %edi
100008e4f:	4c 89 ad 08 fd ff ff	movq	%r13, -760(%rbp)
100008e56:	48 89 d8	movq	%rbx, %rax
100008e59:	48 83 fb 04	cmpq	$4, %rbx
100008e5d:	0f 82 06 01 00 00	jb	0x100008f69
100008e63:	0f 85 fd 00 00 00	jne	0x100008f66
100008e69:	4d 85 ed	testq	%r13, %r13
100008e6c:	0f 85 46 01 00 00	jne	0x100008fb8
100008e72:	80 3d 4f 4b 02 00 00	cmpb	$0, 150351(%rip)
100008e79:	0f 84 39 01 00 00	je	0x100008fb8
100008e7f:	48 89 bd f0 fc ff ff	movq	%rdi, -784(%rbp)
100008e86:	f2 44 0f 11 8d 28 fd ff ff	movsd	%xmm9, -728(%rbp)
100008e8f:	31 c0	xorl	%eax, %eax
100008e91:	48 89 85 a8 fc ff ff	movq	%rax, -856(%rbp)
100008e98:	4c 8d ad a8 fc ff ff	leaq	-856(%rbp), %r13
100008e9f:	4c 89 ad b0 fc ff ff	movq	%r13, -848(%rbp)
100008ea6:	48 b9 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rcx
100008eb0:	48 89 8d b8 fc ff ff	movq	%rcx, -840(%rbp)
100008eb7:	48 89 85 c0 fc ff ff	movq	%rax, -832(%rbp)
100008ebe:	48 8b 3d 63 4d 02 00	movq	150883(%rip), %rdi
100008ec5:	48 8b 05 54 f3 00 00	movq	62292(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
100008ecc:	48 89 85 50 fd ff ff	movq	%rax, -688(%rbp)
100008ed3:	48 c7 85 58 fd ff ff 00 00 00 42	movq	$1107296256, -680(%rbp)
100008ede:	48 8d 05 96 1d 00 00	leaq	7574(%rip), %rax
100008ee5:	48 89 85 60 fd ff ff	movq	%rax, -672(%rbp)
100008eec:	48 8d 05 fd 03 01 00	leaq	66557(%rip), %rax
100008ef3:	48 89 85 68 fd ff ff	movq	%rax, -664(%rbp)
100008efa:	4c 89 ad 70 fd ff ff	movq	%r13, -656(%rbp)
100008f01:	48 8d b5 50 fd ff ff	leaq	-688(%rbp), %rsi
100008f08:	e8 67 73 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
100008f0d:	48 8b 85 b0 fc ff ff	movq	-848(%rbp), %rax
100008f14:	4c 8b 70 18	movq	24(%rax), %r14
100008f18:	4c 89 ef	movq	%r13, %rdi
100008f1b:	be 08 00 00 00	movl	$8, %esi
100008f20:	e8 a9 73 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
100008f25:	4c 89 b5 70 ff ff ff	movq	%r14, -144(%rbp)
100008f2c:	49 83 fe ff	cmpq	$-1, %r14
100008f30:	0f 84 8f 00 00 00	je	0x100008fc5
100008f36:	66 49 0f 6e c6	movq	%r14, %xmm0
100008f3b:	66 0f 6f 1d bd d7 00 00	movdqa	55229(%rip), %xmm3
100008f43:	66 0f 62 c3	punpckldq	%xmm3, %xmm0
100008f47:	66 0f 28 25 c1 d7 00 00	movapd	55233(%rip), %xmm4
100008f4f:	66 0f 5c c4	subpd	%xmm4, %xmm0
100008f53:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100008f57:	f2 0f 5e 85 10 fd ff ff	divsd	-752(%rbp), %xmm0
100008f5f:	f2 0f 11 45 b0	movsd	%xmm0, -80(%rbp)
100008f64:	eb 6f	jmp	0x100008fd5
100008f66:	8d 43 ff	leal	-1(%rbx), %eax
100008f69:	49 6b cd 38	imulq	$56, %r13, %rcx
100008f6d:	4c 01 f1	addq	%r14, %rcx
100008f70:	48 8b 44 c1 08	movq	8(%rcx,%rax,8), %rax
100008f75:	48 89 84 dd 50 ff ff ff	movq	%rax, -176(%rbp,%rbx,8)
100008f7d:	48 83 f8 ff	cmpq	$-1, %rax
100008f81:	0f 84 84 00 00 00	je	0x10000900b
100008f87:	66 48 0f 6e c0	movq	%rax, %xmm0
100008f8c:	66 0f 62 c3	punpckldq	%xmm3, %xmm0
100008f90:	66 0f 5c c4	subpd	%xmm4, %xmm0
100008f94:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100008f98:	f2 0f 5e 85 10 fd ff ff	divsd	-752(%rbp), %xmm0
100008fa0:	f2 0f 11 44 dd 90	movsd	%xmm0, -112(%rbp,%rbx,8)
100008fa6:	f2 44 0f 58 c8	addsd	%xmm0, %xmm9
100008fab:	66 0f 28 05 ad d7 00 00	movapd	55213(%rip), %xmm0
100008fb3:	48 01 c7	addq	%rax, %rdi
100008fb6:	eb 53	jmp	0x10000900b
100008fb8:	48 c7 85 70 ff ff ff ff ff ff ff	movq	$-1, -144(%rbp)
100008fc3:	eb 46	jmp	0x10000900b
100008fc5:	66 0f 6f 1d 33 d7 00 00	movdqa	55091(%rip), %xmm3
100008fcd:	66 0f 28 25 3b d7 00 00	movapd	55099(%rip), %xmm4
100008fd5:	4c 8d 35 14 f7 01 00	leaq	128788(%rip), %r14
100008fdc:	66 0f 28 05 7c d7 00 00	movapd	55164(%rip), %xmm0
100008fe4:	66 0f 6f 3d 84 d7 00 00	movdqa	55172(%rip), %xmm7
100008fec:	66 0f 28 2d 8c d7 00 00	movapd	55180(%rip), %xmm5
100008ff4:	4c 8b ad 08 fd ff ff	movq	-760(%rbp), %r13
100008ffb:	f2 44 0f 10 8d 28 fd ff ff	movsd	-728(%rbp), %xmm9
100009004:	48 8b bd f0 fc ff ff	movq	-784(%rbp), %rdi
10000900b:	48 ff c3	incq	%rbx
10000900e:	48 83 fb 08	cmpq	$8, %rbx
100009012:	0f 85 3e fe ff ff	jne	0x100008e56
100009018:	66 45 0f 57 c0	xorpd	%xmm8, %xmm8
10000901d:	66 0f 28 f0	movapd	%xmm0, %xmm6
100009021:	f2 0f 12 85 10 fd ff ff	movddup	-752(%rbp), %xmm0
100009029:	31 c0	xorl	%eax, %eax
10000902b:	48 8d 0d ee 49 02 00	leaq	149998(%rip), %rcx
100009032:	0f 28 0c 08	movaps	(%rax,%rcx), %xmm1
100009036:	0f 28 d1	movaps	%xmm1, %xmm2
100009039:	66 41 0f 3a 0c d0 0a	blendps	$10, %xmm8, %xmm2
100009040:	66 0f 56 d6	orpd	%xmm6, %xmm2
100009044:	66 0f 73 d1 20	psrlq	$32, %xmm1
100009049:	66 0f eb cf	por	%xmm7, %xmm1
10000904d:	66 0f 5c cd	subpd	%xmm5, %xmm1
100009051:	66 0f 58 ca	addpd	%xmm2, %xmm1
100009055:	66 0f 5e c8	divpd	%xmm0, %xmm1
100009059:	66 0f 29 8c 05 50 fd ff ff	movapd	%xmm1, -688(%rbp,%rax)
100009062:	48 83 c0 10	addq	$16, %rax
100009066:	48 3d 00 02 00 00	cmpq	$512, %rax
10000906c:	75 c4	jne	0x100009032
10000906e:	41 8b 47 28	movl	40(%r15), %eax
100009072:	83 f8 01	cmpl	$1, %eax
100009075:	0f 84 80 00 00 00	je	0x1000090fb
10000907b:	85 c0	testl	%eax, %eax
10000907d:	4c 8d 2d 9c 49 02 00	leaq	149916(%rip), %r13
100009084:	0f 85 58 01 00 00	jne	0x1000091e2
10000908a:	41 80 7f 3c 00	cmpb	$0, 60(%r15)
10000908f:	0f 84 fc 00 00 00	je	0x100009191
100009095:	49 8b 7c 24 50	movq	80(%r12), %rdi
10000909a:	44 8b 05 f7 f6 01 00	movl	128759(%rip), %r8d
1000090a1:	41 83 e0 3f	andl	$63, %r8d
1000090a5:	44 8b 15 f4 f6 01 00	movl	128756(%rip), %r10d
1000090ac:	44 8b 1d f5 f6 01 00	movl	128757(%rip), %r11d
1000090b3:	48 83 ec 08	subq	$8, %rsp
1000090b7:	48 8d 35 ce ae 00 00	leaq	44750(%rip), %rsi ## literal pool for: "Package %d idle exit rate: %.2f/s\nPackage %d instantaneous ring ratio: 0x%02x\nPackage %d IA clipping cause: 0x%08x\nPackage %d GT clipping cause: 0x%08x\n"
1000090be:	48 8b 9d 08 fd ff ff	movq	-760(%rbp), %rbx
1000090c5:	89 da	movl	%ebx, %edx
1000090c7:	66 0f 28 85 d0 fc ff ff	movapd	-816(%rbp), %xmm0
1000090cf:	89 d9	movl	%ebx, %ecx
1000090d1:	41 89 d9	movl	%ebx, %r9d
1000090d4:	b0 01	movb	$1, %al
1000090d6:	41 53	pushq	%r11
1000090d8:	53	pushq	%rbx
1000090d9:	41 52	pushq	%r10
1000090db:	f2 44 0f 11 8d 28 fd ff ff	movsd	%xmm9, -728(%rbp)
1000090e4:	e8 69 72 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000090e9:	f2 44 0f 10 8d 28 fd ff ff	movsd	-728(%rbp), %xmm9
1000090f2:	48 83 c4 20	addq	$32, %rsp
1000090f6:	e9 9d 00 00 00	jmp	0x100009198
1000090fb:	f2 44 0f 11 8d 28 fd ff ff	movsd	%xmm9, -728(%rbp)
100009104:	41 80 7f 3c 00	cmpb	$0, 60(%r15)
100009109:	74 37	je	0x100009142
10000910b:	48 89 fb	movq	%rdi, %rbx
10000910e:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009113:	8b 15 7f f6 01 00	movl	128639(%rip), %edx
100009119:	83 e2 3f	andl	$63, %edx
10000911c:	8b 0d 7e f6 01 00	movl	128638(%rip), %ecx
100009122:	44 8b 05 7f f6 01 00	movl	128639(%rip), %r8d
100009129:	48 8d 35 1c af 00 00	leaq	44828(%rip), %rsi ## literal pool for: "<key>pkg_idle_exit_rate</key><real>%.2f</real>\n<key>ring_ratio_instantaneous</key><integer>%d</integer>\n<key>ia_frq_clipping_cause</key><integer>%d</integer>\n<key>gt_frq_clipping_cause</key><integer>%d</integer>\n"
100009130:	66 0f 28 85 d0 fc ff ff	movapd	-816(%rbp), %xmm0
100009138:	b0 01	movb	$1, %al
10000913a:	e8 13 72 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000913f:	48 89 df	movq	%rbx, %rdi
100009142:	49 8b 5c 24 50	movq	80(%r12), %rbx
100009147:	e8 ab 2b 00 00	callq	0x10000bcf7
10000914c:	48 89 df	movq	%rbx, %rdi
10000914f:	48 8d 35 cb af 00 00	leaq	45003(%rip), %rsi ## literal pool for: "<key>c_state_ns</key><integer>%llu</integer>\n<key>c_state_ratio</key><real>%g</real>\n<key>c_states</key>\n<array>\n"
100009156:	48 89 c2	movq	%rax, %rdx
100009159:	f2 0f 10 85 28 fd ff ff	movsd	-728(%rbp), %xmm0
100009161:	b0 01	movb	$1, %al
100009163:	e8 ea 71 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009168:	66 0f 28 1d 90 d5 00 00	movapd	54672(%rip), %xmm3
100009170:	66 0f 28 25 98 d5 00 00	movapd	54680(%rip), %xmm4
100009178:	66 0f 6f 3d f0 d5 00 00	movdqa	54768(%rip), %xmm7
100009180:	66 0f 28 2d f8 d5 00 00	movapd	54776(%rip), %xmm5
100009188:	4c 8d 2d 91 48 02 00	leaq	149649(%rip), %r13
10000918f:	eb 51	jmp	0x1000091e2
100009191:	48 8b 9d 08 fd ff ff	movq	-760(%rbp), %rbx
100009198:	49 8b 7c 24 50	movq	80(%r12), %rdi
10000919d:	f2 44 0f 59 0d 82 d5 00 00	mulsd	54658(%rip), %xmm9
1000091a6:	48 8d 35 78 ae 00 00	leaq	44664(%rip), %rsi ## literal pool for: "Package %d C-state residency: %.2f%% ("
1000091ad:	48 89 9d 08 fd ff ff	movq	%rbx, -760(%rbp)
1000091b4:	89 da	movl	%ebx, %edx
1000091b6:	66 41 0f 28 c1	movapd	%xmm9, %xmm0
1000091bb:	b0 01	movb	$1, %al
1000091bd:	e8 90 71 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000091c2:	66 0f 28 1d 36 d5 00 00	movapd	54582(%rip), %xmm3
1000091ca:	66 0f 28 25 3e d5 00 00	movapd	54590(%rip), %xmm4
1000091d2:	66 0f 6f 3d 96 d5 00 00	movdqa	54678(%rip), %xmm7
1000091da:	66 0f 28 2d 9e d5 00 00	movapd	54686(%rip), %xmm5
1000091e2:	31 db	xorl	%ebx, %ebx
1000091e4:	66 0f 28 05 74 d5 00 00	movapd	54644(%rip), %xmm0
1000091ec:	48 8b bc 1d 50 ff ff ff	movq	-176(%rbp,%rbx), %rdi
1000091f4:	48 83 ff ff	cmpq	$-1, %rdi
1000091f8:	0f 84 a7 00 00 00	je	0x1000092a5
1000091fe:	41 8b 47 28	movl	40(%r15), %eax
100009202:	83 f8 01	cmpl	$1, %eax
100009205:	74 36	je	0x10000923d
100009207:	85 c0	testl	%eax, %eax
100009209:	0f 85 96 00 00 00	jne	0x1000092a5
10000920f:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009214:	48 8d 05 e5 ff 00 00	leaq	65509(%rip), %rax
10000921b:	48 8b 14 03	movq	(%rbx,%rax), %rdx
10000921f:	f2 0f 10 44 1d 90	movsd	-112(%rbp,%rbx), %xmm0
100009225:	f2 0f 59 05 fb d4 00 00	mulsd	54523(%rip), %xmm0
10000922d:	48 8d 35 5f af 00 00	leaq	44895(%rip), %rsi ## literal pool for: "%s: %.2f%% "
100009234:	b0 01	movb	$1, %al
100009236:	e8 17 71 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000923b:	eb 40	jmp	0x10000927d
10000923d:	4d 8b 7c 24 50	movq	80(%r12), %r15
100009242:	48 8d 05 b7 ff 00 00	leaq	65463(%rip), %rax
100009249:	4c 8b 34 03	movq	(%rbx,%rax), %r14
10000924d:	e8 a5 2a 00 00	callq	0x10000bcf7
100009252:	f2 0f 10 44 1d 90	movsd	-112(%rbp,%rbx), %xmm0
100009258:	4c 89 ff	movq	%r15, %rdi
10000925b:	4c 8d 3d 8e 4d 01 00	leaq	85390(%rip), %r15
100009262:	48 8d 35 36 af 00 00	leaq	44854(%rip), %rsi ## literal pool for: "<dict>\n<key>name</key><string>%s</string>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
100009269:	4c 89 f2	movq	%r14, %rdx
10000926c:	4c 8d 35 7d f4 01 00	leaq	128125(%rip), %r14
100009273:	48 89 c1	movq	%rax, %rcx
100009276:	b0 01	movb	$1, %al
100009278:	e8 d5 70 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000927d:	66 0f 28 2d fb d4 00 00	movapd	54523(%rip), %xmm5
100009285:	66 0f 6f 3d e3 d4 00 00	movdqa	54499(%rip), %xmm7
10000928d:	66 0f 28 05 cb d4 00 00	movapd	54475(%rip), %xmm0
100009295:	66 0f 28 25 73 d4 00 00	movapd	54387(%rip), %xmm4
10000929d:	66 0f 28 1d 5b d4 00 00	movapd	54363(%rip), %xmm3
1000092a5:	48 83 c3 08	addq	$8, %rbx
1000092a9:	48 83 fb 40	cmpq	$64, %rbx
1000092ad:	0f 85 39 ff ff ff	jne	0x1000091ec
1000092b3:	41 8b 47 28	movl	40(%r15), %eax
1000092b7:	48 8d 3d 63 af 00 00	leaq	44899(%rip), %rdi ## literal pool for: ")\n"
1000092be:	85 c0	testl	%eax, %eax
1000092c0:	8b 9d e8 fc ff ff	movl	-792(%rbp), %ebx
1000092c6:	74 0c	je	0x1000092d4
1000092c8:	83 f8 01	cmpl	$1, %eax
1000092cb:	75 39	jne	0x100009306
1000092cd:	48 8d 3d 25 86 00 00	leaq	34341(%rip), %rdi ## literal pool for: "</array>\n"
1000092d4:	49 8b 74 24 50	movq	80(%r12), %rsi
1000092d9:	e8 80 70 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000092de:	66 0f 28 2d 9a d4 00 00	movapd	54426(%rip), %xmm5
1000092e6:	66 0f 6f 3d 82 d4 00 00	movdqa	54402(%rip), %xmm7
1000092ee:	66 0f 28 05 6a d4 00 00	movapd	54378(%rip), %xmm0
1000092f6:	66 0f 28 25 12 d4 00 00	movapd	54290(%rip), %xmm4
1000092fe:	66 0f 28 1d fa d3 00 00	movapd	54266(%rip), %xmm3
100009306:	48 83 bd 08 fd ff ff 00	cmpq	$0, -760(%rbp)
10000930e:	0f 85 b4 01 00 00	jne	0x1000094c8
100009314:	80 3d 77 41 02 00 00	cmpb	$0, 147831(%rip)
10000931b:	0f 84 a7 01 00 00	je	0x1000094c8
100009321:	41 8b 47 28	movl	40(%r15), %eax
100009325:	83 f8 01	cmpl	$1, %eax
100009328:	74 1b	je	0x100009345
10000932a:	85 c0	testl	%eax, %eax
10000932c:	75 5a	jne	0x100009388
10000932e:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009333:	48 8d 35 ea ae 00 00	leaq	44778(%rip), %rsi ## literal pool for: "\nPackage %d P-state residency: "
10000933a:	31 d2	xorl	%edx, %edx
10000933c:	31 c0	xorl	%eax, %eax
10000933e:	e8 0f 70 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009343:	eb 1b	jmp	0x100009360
100009345:	49 8b 4c 24 50	movq	80(%r12), %rcx
10000934a:	be 1c 00 00 00	movl	$28, %esi
10000934f:	ba 01 00 00 00	movl	$1, %edx
100009354:	48 8d 3d e9 ae 00 00	leaq	44777(%rip), %rdi ## literal pool for: "<key>p_states</key>\n<array>\n"
10000935b:	e8 0a 70 00 00	callq	0x10001036a ## symbol stub for: _fwrite
100009360:	66 0f 28 2d 18 d4 00 00	movapd	54296(%rip), %xmm5
100009368:	66 0f 6f 3d 00 d4 00 00	movdqa	54272(%rip), %xmm7
100009370:	66 0f 28 05 e8 d3 00 00	movapd	54248(%rip), %xmm0
100009378:	66 0f 28 25 90 d3 00 00	movapd	54160(%rip), %xmm4
100009380:	66 0f 28 1d 78 d3 00 00	movapd	54136(%rip), %xmm3
100009388:	83 3d 19 41 02 00 00	cmpl	$0, 147737(%rip)
10000938f:	0f 84 d9 00 00 00	je	0x10000946e
100009395:	31 db	xorl	%ebx, %ebx
100009397:	45 31 e4	xorl	%r12d, %r12d
10000939a:	41 8b 47 28	movl	40(%r15), %eax
10000939e:	83 f8 01	cmpl	$1, %eax
1000093a1:	74 3f	je	0x1000093e2
1000093a3:	85 c0	testl	%eax, %eax
1000093a5:	0f 85 ad 00 00 00	jne	0x100009458
1000093ab:	48 8d 05 e6 4b 01 00	leaq	84966(%rip), %rax
1000093b2:	48 8b 78 50	movq	80(%rax), %rdi
1000093b6:	48 8d 05 d7 40 02 00	leaq	147671(%rip), %rax
1000093bd:	8b 54 58 1c	movl	28(%rax,%rbx,2), %edx
1000093c1:	f2 0f 10 84 1d 50 fd ff ff	movsd	-688(%rbp,%rbx), %xmm0
1000093ca:	f2 0f 59 05 56 d3 00 00	mulsd	54102(%rip), %xmm0
1000093d2:	48 8d 35 88 ae 00 00	leaq	44680(%rip), %rsi ## literal pool for: "%uMHz: %.2f%% "
1000093d9:	b0 01	movb	$1, %al
1000093db:	e8 72 6f 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000093e0:	eb 4e	jmp	0x100009430
1000093e2:	48 8d 05 af 4b 01 00	leaq	84911(%rip), %rax
1000093e9:	4c 8b 78 50	movq	80(%rax), %r15
1000093ed:	48 8d 05 a0 40 02 00	leaq	147616(%rip), %rax
1000093f4:	44 8b 74 58 1c	movl	28(%rax,%rbx,2), %r14d
1000093f9:	4a 8b 3c 2b	movq	(%rbx,%r13), %rdi
1000093fd:	e8 f5 28 00 00	callq	0x10000bcf7
100009402:	f2 0f 10 84 1d 50 fd ff ff	movsd	-688(%rbp,%rbx), %xmm0
10000940b:	4c 89 ff	movq	%r15, %rdi
10000940e:	4c 8d 3d db 4b 01 00	leaq	84955(%rip), %r15
100009415:	48 8d 35 54 ae 00 00	leaq	44628(%rip), %rsi ## literal pool for: "<dict>\n<key>freq</key><integer>%u</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
10000941c:	44 89 f2	movl	%r14d, %edx
10000941f:	4c 8d 35 ca f2 01 00	leaq	127690(%rip), %r14
100009426:	48 89 c1	movq	%rax, %rcx
100009429:	b0 01	movb	$1, %al
10000942b:	e8 22 6f 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009430:	66 0f 28 2d 48 d3 00 00	movapd	54088(%rip), %xmm5
100009438:	66 0f 6f 3d 30 d3 00 00	movdqa	54064(%rip), %xmm7
100009440:	66 0f 28 05 18 d3 00 00	movapd	54040(%rip), %xmm0
100009448:	66 0f 28 25 c0 d2 00 00	movapd	53952(%rip), %xmm4
100009450:	66 0f 28 1d a8 d2 00 00	movapd	53928(%rip), %xmm3
100009458:	49 ff c4	incq	%r12
10000945b:	8b 05 47 40 02 00	movl	147527(%rip), %eax
100009461:	48 83 c3 08	addq	$8, %rbx
100009465:	49 39 c4	cmpq	%rax, %r12
100009468:	0f 82 2c ff ff ff	jb	0x10000939a
10000946e:	41 8b 47 28	movl	40(%r15), %eax
100009472:	48 8d 3d f9 7b 00 00	leaq	31737(%rip), %rdi ## literal pool for: "\n"
100009479:	85 c0	testl	%eax, %eax
10000947b:	4c 8d 25 16 4b 01 00	leaq	84758(%rip), %r12
100009482:	8b 9d e8 fc ff ff	movl	-792(%rbp), %ebx
100009488:	74 0c	je	0x100009496
10000948a:	83 f8 01	cmpl	$1, %eax
10000948d:	75 39	jne	0x1000094c8
10000948f:	48 8d 3d 63 84 00 00	leaq	33891(%rip), %rdi ## literal pool for: "</array>\n"
100009496:	49 8b 74 24 50	movq	80(%r12), %rsi
10000949b:	e8 be 6e 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000094a0:	66 0f 28 2d d8 d2 00 00	movapd	53976(%rip), %xmm5
1000094a8:	66 0f 6f 3d c0 d2 00 00	movdqa	53952(%rip), %xmm7
1000094b0:	66 0f 28 05 a8 d2 00 00	movapd	53928(%rip), %xmm0
1000094b8:	66 0f 28 25 50 d2 00 00	movapd	53840(%rip), %xmm4
1000094c0:	66 0f 28 1d 38 d2 00 00	movapd	53816(%rip), %xmm3
1000094c8:	4c 8b ad 08 fd ff ff	movq	-760(%rbp), %r13
1000094cf:	4d 85 ed	testq	%r13, %r13
1000094d2:	0f 85 eb 00 00 00	jne	0x1000095c3
1000094d8:	80 3d 19 45 02 00 00	cmpb	$0, 148761(%rip)
1000094df:	0f 84 de 00 00 00	je	0x1000095c3
1000094e5:	48 c7 85 30 fd ff ff 00 00 00 00	movq	$0, -720(%rbp)
1000094f0:	48 8d 85 30 fd ff ff	leaq	-720(%rbp), %rax
1000094f7:	48 89 85 38 fd ff ff	movq	%rax, -712(%rbp)
1000094fe:	48 b9 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rcx
100009508:	48 89 8d 40 fd ff ff	movq	%rcx, -704(%rbp)
10000950f:	c6 85 48 fd ff ff 01	movb	$1, -696(%rbp)
100009516:	48 8b 3d 03 47 02 00	movq	149251(%rip), %rdi
10000951d:	48 8b 0d fc ec 00 00	movq	60668(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
100009524:	48 89 8d a8 fc ff ff	movq	%rcx, -856(%rbp)
10000952b:	48 c7 85 b0 fc ff ff 00 00 00 42	movq	$1107296256, -848(%rbp)
100009536:	48 8d 0d 06 14 00 00	leaq	5126(%rip), %rcx
10000953d:	48 89 8d b8 fc ff ff	movq	%rcx, -840(%rbp)
100009544:	48 8d 0d f5 fc 00 00	leaq	64757(%rip), %rcx
10000954b:	48 89 8d c0 fc ff ff	movq	%rcx, -832(%rbp)
100009552:	48 89 85 c8 fc ff ff	movq	%rax, -824(%rbp)
100009559:	48 8d b5 a8 fc ff ff	leaq	-856(%rbp), %rsi
100009560:	e8 0f 6d 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
100009565:	48 8b 85 38 fd ff ff	movq	-712(%rbp), %rax
10000956c:	80 78 18 00	cmpb	$0, 24(%rax)
100009570:	75 18	jne	0x10000958a
100009572:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100009577:	75 11	jne	0x10000958a
100009579:	49 8b 74 24 50	movq	80(%r12), %rsi
10000957e:	48 8d 3d 74 83 00 00	leaq	33652(%rip), %rdi ## literal pool for: "</array>\n"
100009585:	e8 d4 6d 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000958a:	48 8d bd 30 fd ff ff	leaq	-720(%rbp), %rdi
100009591:	be 08 00 00 00	movl	$8, %esi
100009596:	e8 33 6d 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000959b:	66 0f 28 1d 5d d1 00 00	movapd	53597(%rip), %xmm3
1000095a3:	66 0f 28 25 65 d1 00 00	movapd	53605(%rip), %xmm4
1000095ab:	66 0f 28 05 ad d1 00 00	movapd	53677(%rip), %xmm0
1000095b3:	66 0f 6f 3d b5 d1 00 00	movdqa	53685(%rip), %xmm7
1000095bb:	66 0f 28 2d bd d1 00 00	movapd	53693(%rip), %xmm5
1000095c3:	80 3d 16 44 02 00 00	cmpb	$0, 148502(%rip)
1000095ca:	0f 84 88 00 00 00	je	0x100009658
1000095d0:	48 8d 3d 99 fc 00 00	leaq	64665(%rip), %rdi
1000095d7:	be ff ff ff ff	movl	$4294967295, %esi
1000095dc:	0f 28 85 10 fd ff ff	movaps	-752(%rbp), %xmm0
1000095e3:	e8 a3 14 00 00	callq	0x10000aa8b
1000095e8:	48 8d 3d a1 fc 00 00	leaq	64673(%rip), %rdi
1000095ef:	be ff ff ff ff	movl	$4294967295, %esi
1000095f4:	0f 28 85 10 fd ff ff	movaps	-752(%rbp), %xmm0
1000095fb:	e8 8b 14 00 00	callq	0x10000aa8b
100009600:	48 8d 3d a9 fc 00 00	leaq	64681(%rip), %rdi
100009607:	be ff ff ff ff	movl	$4294967295, %esi
10000960c:	0f 28 85 10 fd ff ff	movaps	-752(%rbp), %xmm0
100009613:	e8 73 14 00 00	callq	0x10000aa8b
100009618:	48 8d 3d b1 fc 00 00	leaq	64689(%rip), %rdi
10000961f:	be ff ff ff ff	movl	$4294967295, %esi
100009624:	0f 28 85 10 fd ff ff	movaps	-752(%rbp), %xmm0
10000962b:	e8 5b 14 00 00	callq	0x10000aa8b
100009630:	66 0f 28 2d 48 d1 00 00	movapd	53576(%rip), %xmm5
100009638:	66 0f 6f 3d 30 d1 00 00	movdqa	53552(%rip), %xmm7
100009640:	66 0f 28 05 18 d1 00 00	movapd	53528(%rip), %xmm0
100009648:	66 0f 28 25 c0 d0 00 00	movapd	53440(%rip), %xmm4
100009650:	66 0f 28 1d a8 d0 00 00	movapd	53416(%rip), %xmm3
100009658:	41 83 7f 28 01	cmpl	$1, 40(%r15)
10000965d:	75 39	jne	0x100009698
10000965f:	49 8b 74 24 50	movq	80(%r12), %rsi
100009664:	48 8d 3d 0a ad 00 00	leaq	44298(%rip), %rdi ## literal pool for: "<key>cores</key>\n<array>\n"
10000966b:	e8 ee 6c 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009670:	66 0f 28 2d 08 d1 00 00	movapd	53512(%rip), %xmm5
100009678:	66 0f 6f 3d f0 d0 00 00	movdqa	53488(%rip), %xmm7
100009680:	66 0f 28 05 d8 d0 00 00	movapd	53464(%rip), %xmm0
100009688:	66 0f 28 25 80 d0 00 00	movapd	53376(%rip), %xmm4
100009690:	66 0f 28 1d 68 d0 00 00	movapd	53352(%rip), %xmm3
100009698:	89 d8	movl	%ebx, %eax
10000969a:	41 0f af c5	imull	%r13d, %eax
10000969e:	49 ff c5	incq	%r13
1000096a1:	44 89 e9	movl	%r13d, %ecx
1000096a4:	0f af cb	imull	%ebx, %ecx
1000096a7:	89 8d d0 fc ff ff	movl	%ecx, -816(%rbp)
1000096ad:	39 c8	cmpl	%ecx, %eax
1000096af:	0f 83 7e 07 00 00	jae	0x100009e33
1000096b5:	4c 89 ad 08 fd ff ff	movq	%r13, -760(%rbp)
1000096bc:	89 c1	movl	%eax, %ecx
1000096be:	8b 05 1c 3b 08 00	movl	539420(%rip), %eax
1000096c4:	31 d2	xorl	%edx, %edx
1000096c6:	f7 35 10 3b 08 00	divl	539408(%rip)
1000096cc:	89 85 10 fd ff ff	movl	%eax, -752(%rbp)
1000096d2:	89 c3	movl	%eax, %ebx
1000096d4:	89 8d 28 fd ff ff	movl	%ecx, -728(%rbp)
1000096da:	0f af d9	imull	%ecx, %ebx
1000096dd:	f2 41 0f 10 54 24 10	movsd	16(%r12), %xmm2
1000096e4:	0f 14 d3	unpcklps	%xmm3, %xmm2
1000096e7:	66 0f 5c d4	subpd	%xmm4, %xmm2
1000096eb:	41 83 7f 28 01	cmpl	$1, 40(%r15)
1000096f0:	75 41	jne	0x100009733
1000096f2:	49 8b 74 24 50	movq	80(%r12), %rsi
1000096f7:	48 8d 3d fb 8f 00 00	leaq	36859(%rip), %rdi ## literal pool for: "<dict>\n"
1000096fe:	66 0f 29 95 f0 fc ff ff	movapd	%xmm2, -784(%rbp)
100009706:	e8 53 6c 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000970b:	66 0f 28 95 f0 fc ff ff	movapd	-784(%rbp), %xmm2
100009713:	66 0f 28 2d 65 d0 00 00	movapd	53349(%rip), %xmm5
10000971b:	66 0f 6f 3d 4d d0 00 00	movdqa	53325(%rip), %xmm7
100009723:	66 0f 28 25 e5 cf 00 00	movapd	53221(%rip), %xmm4
10000972b:	66 0f 28 1d cd cf 00 00	movapd	53197(%rip), %xmm3
100009733:	41 8a 47 48	movb	72(%r15), %al
100009737:	89 9d f0 fc ff ff	movl	%ebx, -784(%rbp)
10000973d:	41 89 dd	movl	%ebx, %r13d
100009740:	84 c0	testb	%al, %al
100009742:	74 56	je	0x10000979a
100009744:	66 0f 7c d2	haddpd	%xmm2, %xmm2
100009748:	f2 0f 59 95 20 fd ff ff	mulsd	-736(%rbp), %xmm2
100009750:	66 0f 57 c0	xorpd	%xmm0, %xmm0
100009754:	31 c9	xorl	%ecx, %ecx
100009756:	31 db	xorl	%ebx, %ebx
100009758:	49 69 d5 30 01 00 00	imulq	$304, %r13, %rdx
10000975f:	4c 01 f2	addq	%r14, %rdx
100009762:	48 8b 94 ca b0 01 00 00	movq	432(%rdx,%rcx,8), %rdx
10000976a:	66 48 0f 6e ca	movq	%rdx, %xmm1
10000976f:	66 0f 62 cb	punpckldq	%xmm3, %xmm1
100009773:	66 0f 5c cc	subpd	%xmm4, %xmm1
100009777:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000977b:	f2 0f 5e ca	divsd	%xmm2, %xmm1
10000977f:	f2 0f 11 8c cd 30 fd ff ff	movsd	%xmm1, -720(%rbp,%rcx,8)
100009788:	f2 0f 58 c1	addsd	%xmm1, %xmm0
10000978c:	48 01 d3	addq	%rdx, %rbx
10000978f:	48 ff c1	incq	%rcx
100009792:	48 83 f9 03	cmpq	$3, %rcx
100009796:	75 c0	jne	0x100009758
100009798:	eb 06	jmp	0x1000097a0
10000979a:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000979e:	31 db	xorl	%ebx, %ebx
1000097a0:	41 8b 4f 28	movl	40(%r15), %ecx
1000097a4:	83 f9 01	cmpl	$1, %ecx
1000097a7:	74 36	je	0x1000097df
1000097a9:	85 c9	testl	%ecx, %ecx
1000097ab:	0f 85 e8 00 00 00	jne	0x100009899
1000097b1:	49 8b 7c 24 50	movq	80(%r12), %rdi
1000097b6:	84 c0	testb	%al, %al
1000097b8:	0f 84 af 00 00 00	je	0x10000986d
1000097be:	f2 0f 59 05 62 cf 00 00	mulsd	53090(%rip), %xmm0
1000097c6:	48 8d 35 3c ad 00 00	leaq	44348(%rip), %rsi ## literal pool for: "\nCore %u C-state residency: %.2f%% ("
1000097cd:	8b 95 28 fd ff ff	movl	-728(%rbp), %edx
1000097d3:	b0 01	movb	$1, %al
1000097d5:	e8 78 6b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000097da:	e9 a2 00 00 00	jmp	0x100009881
1000097df:	f2 0f 11 85 e8 fc ff ff	movsd	%xmm0, -792(%rbp)
1000097e7:	49 8b 7c 24 50	movq	80(%r12), %rdi
1000097ec:	48 8d 35 45 ad 00 00	leaq	44357(%rip), %rsi ## literal pool for: "<key>core</key><integer>%u</integer>\n"
1000097f3:	8b 95 28 fd ff ff	movl	-728(%rbp), %edx
1000097f9:	31 c0	xorl	%eax, %eax
1000097fb:	e8 52 6b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009800:	66 0f 28 2d 78 cf 00 00	movapd	53112(%rip), %xmm5
100009808:	66 0f 6f 3d 60 cf 00 00	movdqa	53088(%rip), %xmm7
100009810:	66 0f 28 25 f8 ce 00 00	movapd	52984(%rip), %xmm4
100009818:	41 80 7f 48 00	cmpb	$0, 72(%r15)
10000981d:	0f 84 a6 01 00 00	je	0x1000099c9
100009823:	4d 8b 74 24 50	movq	80(%r12), %r14
100009828:	48 89 df	movq	%rbx, %rdi
10000982b:	e8 c7 24 00 00	callq	0x10000bcf7
100009830:	4c 89 f7	movq	%r14, %rdi
100009833:	4c 8d 35 b6 ee 01 00	leaq	126646(%rip), %r14
10000983a:	48 8d 35 e0 a8 00 00	leaq	43232(%rip), %rsi ## literal pool for: "<key>c_state_ns</key><integer>%llu</integer>\n<key>c_state_ratio</key><real>%g</real>\n<key>c_states</key>\n<array>\n"
100009841:	48 89 c2	movq	%rax, %rdx
100009844:	f2 0f 10 85 e8 fc ff ff	movsd	-792(%rbp), %xmm0
10000984c:	b0 01	movb	$1, %al
10000984e:	e8 ff 6a 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009853:	66 0f 28 2d 25 cf 00 00	movapd	53029(%rip), %xmm5
10000985b:	66 0f 6f 3d 0d cf 00 00	movdqa	53005(%rip), %xmm7
100009863:	66 0f 28 25 a5 ce 00 00	movapd	52901(%rip), %xmm4
10000986b:	eb 2c	jmp	0x100009899
10000986d:	48 8d 35 ba ac 00 00	leaq	44218(%rip), %rsi ## literal pool for: "\nCore %u:"
100009874:	8b 95 28 fd ff ff	movl	-728(%rbp), %edx
10000987a:	31 c0	xorl	%eax, %eax
10000987c:	e8 d1 6a 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009881:	66 0f 28 25 87 ce 00 00	movapd	52871(%rip), %xmm4
100009889:	66 0f 6f 3d df ce 00 00	movdqa	52959(%rip), %xmm7
100009891:	66 0f 28 2d e7 ce 00 00	movapd	52967(%rip), %xmm5
100009899:	41 80 7f 48 00	cmpb	$0, 72(%r15)
10000989e:	0f 84 25 01 00 00	je	0x1000099c9
1000098a4:	45 31 ff	xorl	%r15d, %r15d
1000098a7:	45 31 e4	xorl	%r12d, %r12d
1000098aa:	48 8d 05 3f 47 01 00	leaq	83775(%rip), %rax
1000098b1:	8b 40 28	movl	40(%rax), %eax
1000098b4:	83 f8 01	cmpl	$1, %eax
1000098b7:	74 40	je	0x1000098f9
1000098b9:	85 c0	testl	%eax, %eax
1000098bb:	0f 85 ac 00 00 00	jne	0x10000996d
1000098c1:	48 8d 05 d0 46 01 00	leaq	83664(%rip), %rax
1000098c8:	48 8b 78 50	movq	80(%rax), %rdi
1000098cc:	48 8d 05 7d fa 00 00	leaq	64125(%rip), %rax
1000098d3:	49 8b 14 07	movq	(%r15,%rax), %rdx
1000098d7:	f2 42 0f 10 84 3d 30 fd ff ff	movsd	-720(%rbp,%r15), %xmm0
1000098e1:	f2 0f 59 05 3f ce 00 00	mulsd	52799(%rip), %xmm0
1000098e9:	48 8d 35 a3 a8 00 00	leaq	43171(%rip), %rsi ## literal pool for: "%s: %.2f%% "
1000098f0:	b0 01	movb	$1, %al
1000098f2:	e8 5b 6a 00 00	callq	0x100010352 ## symbol stub for: _fprintf
1000098f7:	eb 5c	jmp	0x100009955
1000098f9:	48 8d 05 98 46 01 00	leaq	83608(%rip), %rax
100009900:	48 8b 58 50	movq	80(%rax), %rbx
100009904:	48 8d 05 45 fa 00 00	leaq	64069(%rip), %rax
10000990b:	4d 8b 34 07	movq	(%r15,%rax), %r14
10000990f:	49 69 c5 30 01 00 00	imulq	$304, %r13, %rax
100009916:	48 8d 0d d3 ed 01 00	leaq	126419(%rip), %rcx
10000991d:	48 01 c8	addq	%rcx, %rax
100009920:	4a 8b bc e0 b0 01 00 00	movq	432(%rax,%r12,8), %rdi
100009928:	e8 ca 23 00 00	callq	0x10000bcf7
10000992d:	f2 42 0f 10 84 3d 30 fd ff ff	movsd	-720(%rbp,%r15), %xmm0
100009937:	48 89 df	movq	%rbx, %rdi
10000993a:	48 8d 35 5e a8 00 00	leaq	43102(%rip), %rsi ## literal pool for: "<dict>\n<key>name</key><string>%s</string>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
100009941:	4c 89 f2	movq	%r14, %rdx
100009944:	4c 8d 35 a5 ed 01 00	leaq	126373(%rip), %r14
10000994b:	48 89 c1	movq	%rax, %rcx
10000994e:	b0 01	movb	$1, %al
100009950:	e8 fd 69 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009955:	66 0f 28 2d 23 ce 00 00	movapd	52771(%rip), %xmm5
10000995d:	66 0f 6f 3d 0b ce 00 00	movdqa	52747(%rip), %xmm7
100009965:	66 0f 28 25 a3 cd 00 00	movapd	52643(%rip), %xmm4
10000996d:	49 ff c4	incq	%r12
100009970:	49 83 c7 08	addq	$8, %r15
100009974:	49 83 ff 18	cmpq	$24, %r15
100009978:	0f 85 2c ff ff ff	jne	0x1000098aa
10000997e:	4c 8d 3d 6b 46 01 00	leaq	83563(%rip), %r15
100009985:	41 8b 47 28	movl	40(%r15), %eax
100009989:	48 8d 3d 91 a8 00 00	leaq	43153(%rip), %rdi ## literal pool for: ")\n"
100009990:	85 c0	testl	%eax, %eax
100009992:	4c 8d 25 ff 45 01 00	leaq	83455(%rip), %r12
100009999:	74 0c	je	0x1000099a7
10000999b:	83 f8 01	cmpl	$1, %eax
10000999e:	75 59	jne	0x1000099f9
1000099a0:	48 8d 3d 52 7f 00 00	leaq	32594(%rip), %rdi ## literal pool for: "</array>\n"
1000099a7:	49 8b 74 24 50	movq	80(%r12), %rsi
1000099ac:	e8 ad 69 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000099b1:	66 0f 28 2d c7 cd 00 00	movapd	52679(%rip), %xmm5
1000099b9:	66 0f 6f 3d af cd 00 00	movdqa	52655(%rip), %xmm7
1000099c1:	66 0f 28 25 47 cd 00 00	movapd	52551(%rip), %xmm4
1000099c9:	41 83 7f 28 01	cmpl	$1, 40(%r15)
1000099ce:	75 29	jne	0x1000099f9
1000099d0:	49 8b 74 24 50	movq	80(%r12), %rsi
1000099d5:	48 8d 3d 82 ab 00 00	leaq	43906(%rip), %rdi ## literal pool for: "<key>cpus</key>\n<array>\n"
1000099dc:	e8 7d 69 00 00	callq	0x10001035e ## symbol stub for: _fputs
1000099e1:	66 0f 28 2d 97 cd 00 00	movapd	52631(%rip), %xmm5
1000099e9:	66 0f 6f 3d 7f cd 00 00	movdqa	52607(%rip), %xmm7
1000099f1:	66 0f 28 25 17 cd 00 00	movapd	52503(%rip), %xmm4
1000099f9:	8b 85 10 fd ff ff	movl	-752(%rbp), %eax
1000099ff:	8b 8d f0 fc ff ff	movl	-784(%rbp), %ecx
100009a05:	01 c8	addl	%ecx, %eax
100009a07:	39 c1	cmpl	%eax, %ecx
100009a09:	0f 83 c9 03 00 00	jae	0x100009dd8
100009a0f:	89 c0	movl	%eax, %eax
100009a11:	48 89 85 10 fd ff ff	movq	%rax, -752(%rbp)
100009a18:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100009a1d:	75 16	jne	0x100009a35
100009a1f:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009a24:	48 8d 35 4c ab 00 00	leaq	43852(%rip), %rsi ## literal pool for: "<dict>\n<key>cpu</key><integer>%u</integer>\n"
100009a2b:	44 89 ea	movl	%r13d, %edx
100009a2e:	31 c0	xorl	%eax, %eax
100009a30:	e8 1d 69 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009a35:	41 80 7f 18 00	cmpb	$0, 24(%r15)
100009a3a:	0f 84 89 01 00 00	je	0x100009bc9
100009a40:	41 8b 47 28	movl	40(%r15), %eax
100009a44:	83 f8 01	cmpl	$1, %eax
100009a47:	74 1c	je	0x100009a65
100009a49:	85 c0	testl	%eax, %eax
100009a4b:	75 29	jne	0x100009a76
100009a4d:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009a52:	48 8d 35 4e ab 00 00	leaq	43854(%rip), %rsi ## literal pool for: "\nCPU %u duty cycles/s: active/idle "
100009a59:	44 89 ea	movl	%r13d, %edx
100009a5c:	31 c0	xorl	%eax, %eax
100009a5e:	e8 ef 68 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009a63:	eb 11	jmp	0x100009a76
100009a65:	49 8b 74 24 50	movq	80(%r12), %rsi
100009a6a:	48 8d 3d 5a ab 00 00	leaq	43866(%rip), %rdi ## literal pool for: "<key>duty_cycles</key>\n<array>\n"
100009a71:	e8 e8 68 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009a76:	bb 01 00 00 00	movl	$1, %ebx
100009a7b:	45 31 f6	xorl	%r14d, %r14d
100009a7e:	66 0f 28 1d 7a cc 00 00	movapd	52346(%rip), %xmm3
100009a86:	41 8b 47 28	movl	40(%r15), %eax
100009a8a:	83 f8 01	cmpl	$1, %eax
100009a8d:	74 7c	je	0x100009b0b
100009a8f:	85 c0	testl	%eax, %eax
100009a91:	0f 85 f5 00 00 00	jne	0x100009b8c
100009a97:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009a9c:	48 8d 05 2d f9 00 00	leaq	63789(%rip), %rax
100009aa3:	48 8b 54 d8 f8	movq	-8(%rax,%rbx,8), %rdx
100009aa8:	49 69 c5 30 01 00 00	imulq	$304, %r13, %rax
100009aaf:	48 8d 0d 3a ec 01 00	leaq	126010(%rip), %rcx
100009ab6:	48 01 c8	addq	%rcx, %rax
100009ab9:	f2 42 0f 10 84 f0 e0 01 00 00	movsd	480(%rax,%r14,8), %xmm0
100009ac3:	0f 14 c3	unpcklps	%xmm3, %xmm0
100009ac6:	66 0f 28 25 42 cc 00 00	movapd	52290(%rip), %xmm4
100009ace:	66 0f 5c c4	subpd	%xmm4, %xmm0
100009ad2:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100009ad6:	f2 0f 10 95 20 fd ff ff	movsd	-736(%rbp), %xmm2
100009ade:	f2 0f 5e c2	divsd	%xmm2, %xmm0
100009ae2:	f2 42 0f 10 8c f0 40 02 00 00	movsd	576(%rax,%r14,8), %xmm1
100009aec:	0f 14 cb	unpcklps	%xmm3, %xmm1
100009aef:	66 0f 5c cc	subpd	%xmm4, %xmm1
100009af3:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100009af7:	f2 0f 5e ca	divsd	%xmm2, %xmm1
100009afb:	48 8d 35 e9 aa 00 00	leaq	43753(%rip), %rsi ## literal pool for: "[%s: %.2f/%.2f] "
100009b02:	b0 02	movb	$2, %al
100009b04:	e8 49 68 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009b09:	eb 79	jmp	0x100009b84
100009b0b:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009b10:	48 8d 05 b9 f8 00 00	leaq	63673(%rip), %rax
100009b17:	48 8b 14 d8	movq	(%rax,%rbx,8), %rdx
100009b1b:	49 69 c5 30 01 00 00	imulq	$304, %r13, %rax
100009b22:	48 8d 0d c7 eb 01 00	leaq	125895(%rip), %rcx
100009b29:	48 01 c8	addq	%rcx, %rax
100009b2c:	4a 8b 8c f0 e0 01 00 00	movq	480(%rax,%r14,8), %rcx
100009b34:	4e 8b 84 f0 40 02 00 00	movq	576(%rax,%r14,8), %r8
100009b3c:	66 48 0f 6e c1	movq	%rcx, %xmm0
100009b41:	66 0f 62 c3	punpckldq	%xmm3, %xmm0
100009b45:	66 0f 28 25 c3 cb 00 00	movapd	52163(%rip), %xmm4
100009b4d:	66 0f 5c c4	subpd	%xmm4, %xmm0
100009b51:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100009b55:	f2 0f 10 95 20 fd ff ff	movsd	-736(%rbp), %xmm2
100009b5d:	f2 0f 5e c2	divsd	%xmm2, %xmm0
100009b61:	66 49 0f 6e c8	movq	%r8, %xmm1
100009b66:	66 0f 62 cb	punpckldq	%xmm3, %xmm1
100009b6a:	66 0f 5c cc	subpd	%xmm4, %xmm1
100009b6e:	66 0f 7c c9	haddpd	%xmm1, %xmm1
100009b72:	f2 0f 5e ca	divsd	%xmm2, %xmm1
100009b76:	48 8d 35 7f aa 00 00	leaq	43647(%rip), %rsi ## literal pool for: "<dict>\n<key>interval_ns</key><integer>%llu</integer>\n<key>active_count</key><integer>%llu</integer>\n<key>active_per_s</key><real>%g</real>\n<key>idle_count</key><integer>%llu</integer>\n<key>idle_per_s</key><real>%g</real>\n</dict>\n"
100009b7d:	b0 02	movb	$2, %al
100009b7f:	e8 ce 67 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009b84:	66 0f 28 1d 74 cb 00 00	movapd	52084(%rip), %xmm3
100009b8c:	49 ff c6	incq	%r14
100009b8f:	48 83 c3 02	addq	$2, %rbx
100009b93:	48 83 fb 19	cmpq	$25, %rbx
100009b97:	0f 85 e9 fe ff ff	jne	0x100009a86
100009b9d:	41 8b 47 28	movl	40(%r15), %eax
100009ba1:	48 8d 3d ca 74 00 00	leaq	29898(%rip), %rdi ## literal pool for: "\n"
100009ba8:	85 c0	testl	%eax, %eax
100009baa:	4c 8d 35 3f eb 01 00	leaq	125759(%rip), %r14
100009bb1:	74 0c	je	0x100009bbf
100009bb3:	83 f8 01	cmpl	$1, %eax
100009bb6:	75 11	jne	0x100009bc9
100009bb8:	48 8d 3d 3a 7d 00 00	leaq	32058(%rip), %rdi ## literal pool for: "</array>\n"
100009bbf:	49 8b 74 24 50	movq	80(%r12), %rsi
100009bc4:	e8 95 67 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009bc9:	ba 01 00 00 00	movl	$1, %edx
100009bce:	48 8d 3d ce a9 00 00	leaq	43470(%rip), %rdi ## literal pool for: "CPU"
100009bd5:	4c 89 ee	movq	%r13, %rsi
100009bd8:	f2 0f 10 85 20 fd ff ff	movsd	-736(%rbp), %xmm0
100009be0:	e8 05 0b 00 00	callq	0x10000a6ea
100009be5:	80 3d a7 38 02 00 00	cmpb	$0, 145575(%rip)
100009bec:	66 0f 28 0d 0c cb 00 00	movapd	51980(%rip), %xmm1
100009bf4:	66 0f 28 25 14 cb 00 00	movapd	51988(%rip), %xmm4
100009bfc:	0f 84 0b 01 00 00	je	0x100009d0d
100009c02:	41 8b 47 28	movl	40(%r15), %eax
100009c06:	48 8d 3d 46 ab 00 00	leaq	43846(%rip), %rdi ## literal pool for: "QOS Classes:\n"
100009c0d:	85 c0	testl	%eax, %eax
100009c0f:	74 0c	je	0x100009c1d
100009c11:	83 f8 01	cmpl	$1, %eax
100009c14:	75 21	jne	0x100009c37
100009c16:	48 8d 3d 44 ab 00 00	leaq	43844(%rip), %rdi ## literal pool for: "<key>qos</key>\n<dict>\n"
100009c1d:	49 8b 74 24 50	movq	80(%r12), %rsi
100009c22:	e8 37 67 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009c27:	66 0f 28 25 e1 ca 00 00	movapd	51937(%rip), %xmm4
100009c2f:	66 0f 28 0d c9 ca 00 00	movapd	51913(%rip), %xmm1
100009c37:	83 3d 76 3c 02 00 00	cmpl	$0, 146550(%rip)
100009c3e:	0f 84 9a 00 00 00	je	0x100009cde
100009c44:	4c 8d 35 6d 3c 02 00	leaq	146541(%rip), %r14
100009c4b:	31 db	xorl	%ebx, %ebx
100009c4d:	4c 89 e8	movq	%r13, %rax
100009c50:	48 c1 e0 07	shlq	$7, %rax
100009c54:	48 8d 0d e5 3f 02 00	leaq	147429(%rip), %rcx
100009c5b:	48 01 c8	addq	%rcx, %rax
100009c5e:	f2 0f 10 44 d8 04	movsd	4(%rax,%rbx,8), %xmm0
100009c64:	0f 14 c1	unpcklps	%xmm1, %xmm0
100009c67:	66 0f 5c c4	subpd	%xmm4, %xmm0
100009c6b:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100009c6f:	f2 0f 5e 85 20 fd ff ff	divsd	-736(%rbp), %xmm0
100009c77:	f2 0f 5e 05 a1 ca 00 00	divsd	51873(%rip), %xmm0
100009c7f:	41 8b 47 28	movl	40(%r15), %eax
100009c83:	83 f8 01	cmpl	$1, %eax
100009c86:	74 1a	je	0x100009ca2
100009c88:	85 c0	testl	%eax, %eax
100009c8a:	75 3c	jne	0x100009cc8
100009c8c:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009c91:	f2 0f 59 05 8f ca 00 00	mulsd	51855(%rip), %xmm0
100009c99:	48 8d 35 d8 aa 00 00	leaq	43736(%rip), %rsi ## literal pool for: "%s: %.2f%%\n"
100009ca0:	eb 0c	jmp	0x100009cae
100009ca2:	49 8b 7c 24 50	movq	80(%r12), %rdi
100009ca7:	48 8d 35 2b a7 00 00	leaq	42795(%rip), %rsi ## literal pool for: "<key>%s</key><real>%g</real>\n"
100009cae:	4c 89 f2	movq	%r14, %rdx
100009cb1:	b0 01	movb	$1, %al
100009cb3:	e8 9a 66 00 00	callq	0x100010352 ## symbol stub for: _fprintf
100009cb8:	66 0f 28 25 50 ca 00 00	movapd	51792(%rip), %xmm4
100009cc0:	66 0f 28 0d 38 ca 00 00	movapd	51768(%rip), %xmm1
100009cc8:	48 ff c3	incq	%rbx
100009ccb:	8b 05 e3 3b 02 00	movl	146403(%rip), %eax
100009cd1:	49 83 c6 10	addq	$16, %r14
100009cd5:	48 39 c3	cmpq	%rax, %rbx
100009cd8:	0f 82 6f ff ff ff	jb	0x100009c4d
100009cde:	41 83 7f 28 00	cmpl	$0, 40(%r15)
100009ce3:	4c 8d 35 06 ea 01 00	leaq	125446(%rip), %r14
100009cea:	74 21	je	0x100009d0d
100009cec:	49 8b 74 24 50	movq	80(%r12), %rsi
100009cf1:	48 8d 3d b5 6a 00 00	leaq	27317(%rip), %rdi ## literal pool for: "</dict>\n"
100009cf8:	e8 61 66 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009cfd:	66 0f 28 25 0b ca 00 00	movapd	51723(%rip), %xmm4
100009d05:	66 0f 28 0d f3 c9 00 00	movapd	51699(%rip), %xmm1
100009d0d:	8a 05 cd 3c 02 00	movb	146637(%rip), %al
100009d13:	84 c0	testb	%al, %al
100009d15:	74 40	je	0x100009d57
100009d17:	41 80 7f 49 00	cmpb	$0, 73(%r15)
100009d1c:	74 39	je	0x100009d57
100009d1e:	49 69 c5 30 01 00 00	imulq	$304, %r13, %rax
100009d25:	f2 42 0f 10 84 30 a0 01 00 00	movsd	416(%rax,%r14), %xmm0
100009d2f:	0f 14 c1	unpcklps	%xmm1, %xmm0
100009d32:	66 0f 5c c4	subpd	%xmm4, %xmm0
100009d36:	66 0f 7c c0	haddpd	%xmm0, %xmm0
100009d3a:	48 8d 3d 27 f6 00 00	leaq	63015(%rip), %rdi
100009d41:	44 89 ee	movl	%r13d, %esi
100009d44:	e8 42 0d 00 00	callq	0x10000aa8b
100009d49:	66 0f 28 25 bf c9 00 00	movapd	51647(%rip), %xmm4
100009d51:	8a 05 89 3c 02 00	movb	146569(%rip), %al
100009d57:	84 c0	testb	%al, %al
100009d59:	74 3d	je	0x100009d98
100009d5b:	41 80 7f 4a 00	cmpb	$0, 74(%r15)
100009d60:	74 36	je	0x100009d98
100009d62:	48 8d 3d 1f f6 00 00	leaq	63007(%rip), %rdi
100009d69:	44 89 ee	movl	%r13d, %esi
100009d6c:	f2 0f 10 05 bc c9 00 00	movsd	51644(%rip), %xmm0
100009d74:	e8 12 0d 00 00	callq	0x10000aa8b
100009d79:	48 8d 3d 28 f6 00 00	leaq	63016(%rip), %rdi
100009d80:	44 89 ee	movl	%r13d, %esi
100009d83:	f2 0f 10 05 a5 c9 00 00	movsd	51621(%rip), %xmm0
100009d8b:	e8 fb 0c 00 00	callq	0x10000aa8b
100009d90:	66 0f 28 25 78 c9 00 00	movapd	51576(%rip), %xmm4
100009d98:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100009d9d:	75 19	jne	0x100009db8
100009d9f:	49 8b 74 24 50	movq	80(%r12), %rsi
100009da4:	48 8d 3d 02 6a 00 00	leaq	27138(%rip), %rdi ## literal pool for: "</dict>\n"
100009dab:	e8 ae 65 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009db0:	66 0f 28 25 58 c9 00 00	movapd	51544(%rip), %xmm4
100009db8:	49 ff c5	incq	%r13
100009dbb:	4c 3b ad 10 fd ff ff	cmpq	-752(%rbp), %r13
100009dc2:	66 0f 6f 3d a6 c9 00 00	movdqa	51622(%rip), %xmm7
100009dca:	66 0f 28 2d ae c9 00 00	movapd	51630(%rip), %xmm5
100009dd2:	0f 85 40 fc ff ff	jne	0x100009a18
100009dd8:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100009ddd:	75 29	jne	0x100009e08
100009ddf:	49 8b 74 24 50	movq	80(%r12), %rsi
100009de4:	48 8d 3d f9 7a 00 00	leaq	31481(%rip), %rdi ## literal pool for: "</array>\n</dict>\n"
100009deb:	e8 6e 65 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009df0:	66 0f 28 2d 88 c9 00 00	movapd	51592(%rip), %xmm5
100009df8:	66 0f 6f 3d 70 c9 00 00	movdqa	51568(%rip), %xmm7
100009e00:	66 0f 28 25 08 c9 00 00	movapd	51464(%rip), %xmm4
100009e08:	8b 85 28 fd ff ff	movl	-728(%rbp), %eax
100009e0e:	ff c0	incl	%eax
100009e10:	3b 85 d0 fc ff ff	cmpl	-816(%rbp), %eax
100009e16:	66 0f 28 1d e2 c8 00 00	movapd	51426(%rip), %xmm3
100009e1e:	66 0f 28 05 3a c9 00 00	movapd	51514(%rip), %xmm0
100009e26:	4c 8b ad 08 fd ff ff	movq	-760(%rbp), %r13
100009e2d:	0f 85 89 f8 ff ff	jne	0x1000096bc
100009e33:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100009e38:	75 39	jne	0x100009e73
100009e3a:	49 8b 74 24 50	movq	80(%r12), %rsi
100009e3f:	48 8d 3d 9e 7a 00 00	leaq	31390(%rip), %rdi ## literal pool for: "</array>\n</dict>\n"
100009e46:	e8 13 65 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009e4b:	66 0f 28 2d 2d c9 00 00	movapd	51501(%rip), %xmm5
100009e53:	66 0f 6f 3d 15 c9 00 00	movdqa	51477(%rip), %xmm7
100009e5b:	66 0f 28 05 fd c8 00 00	movapd	51453(%rip), %xmm0
100009e63:	66 0f 28 25 a5 c8 00 00	movapd	51365(%rip), %xmm4
100009e6b:	66 0f 28 1d 8d c8 00 00	movapd	51341(%rip), %xmm3
100009e73:	8b 0d 5f 33 08 00	movl	537439(%rip), %ecx
100009e79:	49 39 cd	cmpq	%rcx, %r13
100009e7c:	0f 82 f5 ee ff ff	jb	0x100008d77
100009e82:	41 83 7f 28 01	cmpl	$1, 40(%r15)
100009e87:	75 11	jne	0x100009e9a
100009e89:	49 8b 74 24 50	movq	80(%r12), %rsi
100009e8e:	48 8d 3d 4f 7a 00 00	leaq	31311(%rip), %rdi ## literal pool for: "</array>\n</dict>\n"
100009e95:	e8 c4 64 00 00	callq	0x10001035e ## symbol stub for: _fputs
100009e9a:	48 8b 05 c7 e3 00 00	movq	58311(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
100009ea1:	48 8b 00	movq	(%rax), %rax
100009ea4:	48 3b 45 d0	cmpq	-48(%rbp), %rax
100009ea8:	75 12	jne	0x100009ebc
100009eaa:	48 81 c4 38 03 00 00	addq	$824, %rsp
100009eb1:	5b	popq	%rbx
100009eb2:	41 5c	popq	%r12
100009eb4:	41 5d	popq	%r13
100009eb6:	41 5e	popq	%r14
100009eb8:	41 5f	popq	%r15
100009eba:	5d	popq	%rbp
100009ebb:	c3	retq
100009ebc:	e8 37 64 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
100009ec1:	55	pushq	%rbp
100009ec2:	48 89 e5	movq	%rsp, %rbp
100009ec5:	41 57	pushq	%r15
100009ec7:	41 56	pushq	%r14
100009ec9:	41 55	pushq	%r13
100009ecb:	41 54	pushq	%r12
100009ecd:	53	pushq	%rbx
100009ece:	48 83 ec 28	subq	$40, %rsp
100009ed2:	4c 8d 3d 77 9a 01 00	leaq	105079(%rip), %r15
100009ed9:	b8 00 00 00 04	movl	$67108864, %eax
100009ede:	bf 11 00 00 00	movl	$17, %edi
100009ee3:	4c 89 fe	movq	%r15, %rsi
100009ee6:	0f 05	syscall
100009ee8:	85 c0	testl	%eax, %eax
100009eea:	0f 84 74 01 00 00	je	0x10000a064
100009ef0:	80 3d 9b 35 02 00 00	cmpb	$0, 144795(%rip)
100009ef7:	74 22	je	0x100009f1b
100009ef9:	8b 3d 51 41 01 00	movl	82257(%rip), %edi
100009eff:	48 8d 15 4a 5d 02 00	leaq	154954(%rip), %rdx
100009f06:	be 0d 58 00 20	movl	$536893453, %esi
100009f0b:	31 c0	xorl	%eax, %eax
100009f0d:	e8 82 64 00 00	callq	0x100010394 ## symbol stub for: _ioctl
100009f12:	83 f8 ff	cmpl	$-1, %eax
100009f15:	0f 84 64 01 00 00	je	0x10000a07f
100009f1b:	80 3d 6f 35 02 00 00	cmpb	$0, 144751(%rip)
100009f22:	74 22	je	0x100009f46
100009f24:	8b 3d 26 41 01 00	movl	82214(%rip), %edi
100009f2a:	48 8d 15 1f 5f 02 00	leaq	155423(%rip), %rdx
100009f31:	be 13 58 18 c0	movl	$3222820883, %esi
100009f36:	31 c0	xorl	%eax, %eax
100009f38:	e8 57 64 00 00	callq	0x100010394 ## symbol stub for: _ioctl
100009f3d:	83 f8 ff	cmpl	$-1, %eax
100009f40:	0f 84 4c 01 00 00	je	0x10000a092
100009f46:	80 3d 46 35 02 00 00	cmpb	$0, 144710(%rip)
100009f4d:	74 22	je	0x100009f71
100009f4f:	8b 3d fb 40 01 00	movl	82171(%rip), %edi
100009f55:	48 8d 15 0c 5f 02 00	leaq	155404(%rip), %rdx
100009f5c:	be 17 58 00 20	movl	$536893463, %esi
100009f61:	31 c0	xorl	%eax, %eax
100009f63:	e8 2c 64 00 00	callq	0x100010394 ## symbol stub for: _ioctl
100009f68:	83 f8 ff	cmpl	$-1, %eax
100009f6b:	0f 84 44 03 00 00	je	0x10000a2b5
100009f71:	44 8b 25 70 9b 01 00	movl	105328(%rip), %r12d
100009f78:	48 8d 1d 19 40 01 00	leaq	81945(%rip), %rbx
100009f7f:	8a 03	movb	(%rbx), %al
100009f81:	84 c0	testb	%al, %al
100009f83:	75 0d	jne	0x100009f92
100009f85:	44 3b 25 bc 4d 01 00	cmpl	85436(%rip), %r12d
100009f8c:	0f 85 49 07 00 00	jne	0x10000a6db
100009f92:	84 c0	testb	%al, %al
100009f94:	75 14	jne	0x100009faa
100009f96:	48 8b 0d 8b 4c 01 00	movq	85131(%rip), %rcx
100009f9d:	48 39 0d 24 9a 01 00	cmpq	%rcx, 104996(%rip)
100009fa4:	0f 85 36 07 00 00	jne	0x10000a6e0
100009faa:	84 c0	testb	%al, %al
100009fac:	74 66	je	0x10000a014
100009fae:	48 8d 3d bb 7e 02 00	leaq	163515(%rip), %rdi
100009fb5:	48 8d 35 94 99 01 00	leaq	104852(%rip), %rsi
100009fbc:	ba a0 4d 00 00	movl	$19872, %edx
100009fc1:	e8 0a 64 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100009fc6:	48 8d 3d 43 cc 02 00	leaq	183363(%rip), %rdi
100009fcd:	48 8d 35 7c 5c 02 00	leaq	154748(%rip), %rsi
100009fd4:	ba 00 02 00 00	movl	$512, %edx
100009fd9:	e8 f2 63 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
100009fde:	f3 0f 6f 05 6a 5e 02 00	movdqu	155242(%rip), %xmm0
100009fe6:	f3 0f 7f 05 22 ce 02 00	movdqu	%xmm0, 183842(%rip)
100009fee:	48 8b 05 6b 5e 02 00	movq	155243(%rip), %rax
100009ff5:	48 89 05 24 ce 02 00	movq	%rax, 183844(%rip)
100009ffc:	48 8d 3d 25 ce 02 00	leaq	183845(%rip), %rdi
10000a003:	48 8d 35 5e 5e 02 00	leaq	155230(%rip), %rsi
10000a00a:	ba 04 20 00 00	movl	$8196, %edx
10000a00f:	e8 bc 63 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000a014:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000a018:	0f 84 8f 00 00 00	je	0x10000a0ad
10000a01e:	48 8b 05 fb cd 02 00	movq	183803(%rip), %rax
10000a025:	48 89 05 14 ee 02 00	movq	%rax, 192020(%rip)
10000a02c:	f3 0f 6f 05 dc cd 02 00	movdqu	183772(%rip), %xmm0
10000a034:	66 0f 7f 05 f4 ed 02 00	movdqa	%xmm0, 191988(%rip)
10000a03c:	48 8d 3d 05 ee 02 00	leaq	192005(%rip), %rdi
10000a043:	48 8d 35 de cd 02 00	leaq	183774(%rip), %rsi
10000a04a:	ba 04 20 00 00	movl	$8196, %edx
10000a04f:	e8 7c 63 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000a054:	48 8d 05 b5 cb 02 00	leaq	183221(%rip), %rax
10000a05b:	4c 8d 35 0e 7e 02 00	leaq	163342(%rip), %r14
10000a062:	eb 57	jmp	0x10000a0bb
10000a064:	48 8b 05 05 e2 00 00	movq	57861(%rip), %rax ## literal pool symbol address: ___stderrp
10000a06b:	48 8b 08	movq	(%rax), %rcx
10000a06e:	48 8d 3d de a7 00 00	leaq	42974(%rip), %rdi ## literal pool for: "dgPowerStat diag call failed\n"
10000a075:	be 1d 00 00 00	movl	$29, %esi
10000a07a:	e9 4c 02 00 00	jmp	0x10000a2cb
10000a07f:	48 8b 05 ea e1 00 00	movq	57834(%rip), %rax ## literal pool symbol address: ___stderrp
10000a086:	48 8b 08	movq	(%rax), %rcx
10000a089:	48 8d 3d e1 a7 00 00	leaq	42977(%rip), %rdi ## literal pool for: "xcpm XCPMIO_GET_PSTATE_CTRS ioctl failed\n"
10000a090:	eb 11	jmp	0x10000a0a3
10000a092:	48 8b 05 d7 e1 00 00	movq	57815(%rip), %rax ## literal pool symbol address: ___stderrp
10000a099:	48 8b 08	movq	(%rax), %rcx
10000a09c:	48 8d 3d f8 a7 00 00	leaq	43000(%rip), %rdi ## literal pool for: "xcpm XCPMIO_GET_LIMIT_STATS ioctl failed\n"
10000a0a3:	be 29 00 00 00	movl	$41, %esi
10000a0a8:	e9 1e 02 00 00	jmp	0x10000a2cb
10000a0ad:	48 8d 05 9c 0d 03 00	leaq	200092(%rip), %rax
10000a0b4:	4c 8d 35 f5 4a 01 00	leaq	84725(%rip), %r14
10000a0bb:	31 c9	xorl	%ecx, %ecx
10000a0bd:	48 8d 15 8c 5b 02 00	leaq	154508(%rip), %rdx
10000a0c4:	48 8d 35 55 39 02 00	leaq	145749(%rip), %rsi
10000a0cb:	66 0f 6f 04 11	movdqa	(%rcx,%rdx), %xmm0
10000a0d0:	f3 0f 6f 0c 08	movdqu	(%rax,%rcx), %xmm1
10000a0d5:	66 0f fb c1	psubq	%xmm1, %xmm0
10000a0d9:	66 0f 7f 04 31	movdqa	%xmm0, (%rcx,%rsi)
10000a0de:	48 83 c1 10	addq	$16, %rcx
10000a0e2:	48 81 f9 00 02 00 00	cmpq	$512, %rcx
10000a0e9:	75 e0	jne	0x10000a0cb
10000a0eb:	80 3d 9f 33 02 00 00	cmpb	$0, 144287(%rip)
10000a0f2:	74 3b	je	0x10000a12f
10000a0f4:	0f 10 05 55 5d 02 00	movups	154965(%rip), %xmm0
10000a0fb:	0f 29 05 fe 38 02 00	movaps	%xmm0, 145662(%rip)
10000a102:	48 8b 05 57 5d 02 00	movq	154967(%rip), %rax
10000a109:	66 0f 6f 05 ef 38 02 00	movdqa	145647(%rip), %xmm0
10000a111:	66 0f fb 05 17 ed 02 00	psubq	191767(%rip), %xmm0
10000a119:	66 0f 7f 05 df 38 02 00	movdqa	%xmm0, 145631(%rip)
10000a121:	48 2b 05 18 ed 02 00	subq	191768(%rip), %rax
10000a128:	48 89 05 e1 38 02 00	movq	%rax, 145633(%rip)
10000a12f:	80 3d 5d 33 02 00 00	cmpb	$0, 144221(%rip)
10000a136:	0f 84 82 00 00 00	je	0x10000a1be
10000a13c:	48 8d 3d fd 3a 02 00	leaq	146173(%rip), %rdi
10000a143:	48 8d 35 1e 5d 02 00	leaq	154910(%rip), %rsi
10000a14a:	ba 04 20 00 00	movl	$8196, %edx
10000a14f:	e8 7c 62 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000a154:	44 8b 05 e5 3a 02 00	movl	146149(%rip), %r8d
10000a15b:	8b 05 e7 ec 02 00	movl	191719(%rip), %eax
10000a161:	41 39 c0	cmpl	%eax, %r8d
10000a164:	74 08	je	0x10000a16e
10000a166:	85 c0	testl	%eax, %eax
10000a168:	0f 85 77 05 00 00	jne	0x10000a6e5
10000a16e:	4d 85 c0	testq	%r8, %r8
10000a171:	74 4b	je	0x10000a1be
10000a173:	8b 0d 3b 37 02 00	movl	145211(%rip), %ecx
10000a179:	48 8d 15 cc ec 02 00	leaq	191692(%rip), %rdx
10000a180:	48 8d 35 bd 3a 02 00	leaq	146109(%rip), %rsi
10000a187:	31 ff	xorl	%edi, %edi
10000a189:	41 b9 80 00 00 00	movl	$128, %r9d
10000a18f:	48 85 c9	testq	%rcx, %rcx
10000a192:	74 1c	je	0x10000a1b0
10000a194:	31 c0	xorl	%eax, %eax
10000a196:	48 8b 1c c6	movq	(%rsi,%rax,8), %rbx
10000a19a:	48 2b 1c c2	subq	(%rdx,%rax,8), %rbx
10000a19e:	0f 82 81 04 00 00	jb	0x10000a625
10000a1a4:	48 89 1c c6	movq	%rbx, (%rsi,%rax,8)
10000a1a8:	48 ff c0	incq	%rax
10000a1ab:	48 39 c1	cmpq	%rax, %rcx
10000a1ae:	75 e6	jne	0x10000a196
10000a1b0:	48 ff c7	incq	%rdi
10000a1b3:	4c 01 ca	addq	%r9, %rdx
10000a1b6:	4c 01 ce	addq	%r9, %rsi
10000a1b9:	4c 39 c7	cmpq	%r8, %rdi
10000a1bc:	75 d1	jne	0x10000a18f
10000a1be:	44 8b 05 13 30 08 00	movl	536595(%rip), %r8d
10000a1c5:	45 85 c0	testl	%r8d, %r8d
10000a1c8:	74 4d	je	0x10000a217
10000a1ca:	49 8d 4e 08	leaq	8(%r14), %rcx
10000a1ce:	45 31 c9	xorl	%r9d, %r9d
10000a1d1:	48 8d 35 80 97 01 00	leaq	104320(%rip), %rsi
10000a1d8:	48 8d 3d 19 e5 01 00	leaq	124185(%rip), %rdi
10000a1df:	31 db	xorl	%ebx, %ebx
10000a1e1:	48 8b 14 de	movq	(%rsi,%rbx,8), %rdx
10000a1e5:	48 89 d0	movq	%rdx, %rax
10000a1e8:	48 2b 04 d9	subq	(%rcx,%rbx,8), %rax
10000a1ec:	72 7d	jb	0x10000a26b
10000a1ee:	48 83 fa ff	cmpq	$-1, %rdx
10000a1f2:	48 0f 44 c2	cmoveq	%rdx, %rax
10000a1f6:	48 89 04 df	movq	%rax, (%rdi,%rbx,8)
10000a1fa:	48 ff c3	incq	%rbx
10000a1fd:	48 83 fb 08	cmpq	$8, %rbx
10000a201:	75 de	jne	0x10000a1e1
10000a203:	41 ff c1	incl	%r9d
10000a206:	48 83 c6 38	addq	$56, %rsi
10000a20a:	48 83 c1 38	addq	$56, %rcx
10000a20e:	48 83 c7 38	addq	$56, %rdi
10000a212:	45 39 c1	cmpl	%r8d, %r9d
10000a215:	75 c8	jne	0x10000a1df
10000a217:	f3 0f 6f 05 b1 97 01 00	movdqu	104369(%rip), %xmm0
10000a21f:	f3 41 0f 6f 8e 80 00 00 00	movdqu	128(%r14), %xmm1
10000a228:	66 0f fb c1	psubq	%xmm1, %xmm0
10000a22c:	f3 0f 7f 05 3c e5 01 00	movdqu	%xmm0, 124220(%rip)
10000a234:	f3 0f 6f 05 a4 97 01 00	movdqu	104356(%rip), %xmm0
10000a23c:	f3 41 0f 6f 8e 90 00 00 00	movdqu	144(%r14), %xmm1
10000a245:	66 0f fb c1	psubq	%xmm1, %xmm0
10000a249:	f3 0f 7f 05 2f e5 01 00	movdqu	%xmm0, 124207(%rip)
10000a251:	48 8b 05 98 97 01 00	movq	104344(%rip), %rax
10000a258:	48 83 f8 ff	cmpq	$-1, %rax
10000a25c:	0f 84 81 00 00 00	je	0x10000a2e3
10000a262:	49 2b 86 a0 00 00 00	subq	160(%r14), %rax
10000a269:	eb 7f	jmp	0x10000a2ea
10000a26b:	48 8b 05 fe df 00 00	movq	57342(%rip), %rax ## literal pool symbol address: ___stderrp
10000a272:	48 8b 38	movq	(%rax), %rdi
10000a275:	48 8d 35 12 a7 00 00	leaq	42770(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a27c:	ba a0 04 00 00	movl	$1184, %edx
10000a281:	31 c0	xorl	%eax, %eax
10000a283:	e8 ca 60 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000a288:	c6 05 6a 37 02 00 01	movb	$1, 145258(%rip)
10000a28f:	48 8d 3d 1a 49 01 00	leaq	84250(%rip), %rdi
10000a296:	48 8d 35 b3 96 01 00	leaq	104115(%rip), %rsi
10000a29d:	ba a0 4d 00 00	movl	$19872, %edx
10000a2a2:	48 83 c4 28	addq	$40, %rsp
10000a2a6:	5b	popq	%rbx
10000a2a7:	41 5c	popq	%r12
10000a2a9:	41 5d	popq	%r13
10000a2ab:	41 5e	popq	%r14
10000a2ad:	41 5f	popq	%r15
10000a2af:	5d	popq	%rbp
10000a2b0:	e9 1b 61 00 00	jmp	0x1000103d0 ## symbol stub for: _memcpy
10000a2b5:	48 8b 05 b4 df 00 00	movq	57268(%rip), %rax ## literal pool symbol address: ___stderrp
10000a2bc:	48 8b 08	movq	(%rax), %rcx
10000a2bf:	48 8d 3d ff a5 00 00	leaq	42495(%rip), %rdi ## literal pool for: "xcpm XCPMIO_GET_QOS_TIMES ioctl failed\n"
10000a2c6:	be 27 00 00 00	movl	$39, %esi
10000a2cb:	ba 01 00 00 00	movl	$1, %edx
10000a2d0:	48 83 c4 28	addq	$40, %rsp
10000a2d4:	5b	popq	%rbx
10000a2d5:	41 5c	popq	%r12
10000a2d7:	41 5d	popq	%r13
10000a2d9:	41 5e	popq	%r14
10000a2db:	41 5f	popq	%r15
10000a2dd:	5d	popq	%rbp
10000a2de:	e9 87 60 00 00	jmp	0x10001036a ## symbol stub for: _fwrite
10000a2e3:	48 c7 c0 ff ff ff ff	movq	$-1, %rax
10000a2ea:	48 89 05 9f e4 01 00	movq	%rax, 124063(%rip)
10000a2f1:	48 8b 05 18 97 01 00	movq	104216(%rip), %rax
10000a2f8:	49 2b 86 c0 00 00 00	subq	192(%r14), %rax
10000a2ff:	48 89 05 aa e4 01 00	movq	%rax, 124074(%rip)
10000a306:	f3 0f 6f 05 ea 96 01 00	movdqu	104170(%rip), %xmm0
10000a30e:	f3 0f 7f 05 82 e4 01 00	movdqu	%xmm0, 124034(%rip)
10000a316:	48 8b 05 eb 96 01 00	movq	104171(%rip), %rax
10000a31d:	48 89 05 84 e4 01 00	movq	%rax, 124036(%rip)
10000a324:	44 89 65 d4	movl	%r12d, -44(%rbp)
10000a328:	45 85 e4	testl	%r12d, %r12d
10000a32b:	0f 84 bf 01 00 00	je	0x10000a4f0
10000a331:	b8 b0 01 00 00	movl	$432, %eax
10000a336:	4d 8d 14 06	leaq	(%r14,%rax), %r10
10000a33a:	b9 e0 01 00 00	movl	$480, %ecx
10000a33f:	49 8d 14 0e	leaq	(%r14,%rcx), %rdx
10000a343:	41 bc 40 02 00 00	movl	$576, %r12d
10000a349:	4f 8d 2c 26	leaq	(%r14,%r12), %r13
10000a34d:	48 8d 3d 9c e3 01 00	leaq	123804(%rip), %rdi
10000a354:	48 8d 34 07	leaq	(%rdi,%rax), %rsi
10000a358:	4c 01 f8	addq	%r15, %rax
10000a35b:	4c 8d 04 0f	leaq	(%rdi,%rcx), %r8
10000a35f:	4c 01 f9	addq	%r15, %rcx
10000a362:	4e 8d 1c 27	leaq	(%rdi,%r12), %r11
10000a366:	4d 01 fc	addq	%r15, %r12
10000a369:	31 ff	xorl	%edi, %edi
10000a36b:	89 ff	movl	%edi, %edi
10000a36d:	48 69 df 30 01 00 00	imulq	$304, %rdi, %rbx
10000a374:	4e 8b 8c 3b a0 01 00 00	movq	416(%rbx,%r15), %r9
10000a37c:	4d 2b 8c 1e a0 01 00 00	subq	416(%r14,%rbx), %r9
10000a384:	0f 82 e5 02 00 00	jb	0x10000a66f
10000a38a:	4c 89 45 c0	movq	%r8, -64(%rbp)
10000a38e:	48 89 4d b8	movq	%rcx, -72(%rbp)
10000a392:	4e 8b 84 3b a8 01 00 00	movq	424(%rbx,%r15), %r8
10000a39a:	4d 2b 84 1e a8 01 00 00	subq	424(%r14,%rbx), %r8
10000a3a2:	0f 82 e2 02 00 00	jb	0x10000a68a
10000a3a8:	4c 89 e9	movq	%r13, %rcx
10000a3ab:	4d 89 e5	movq	%r12, %r13
10000a3ae:	4e 8b a4 3b a8 02 00 00	movq	680(%rbx,%r15), %r12
10000a3b6:	4d 2b a4 1e a8 02 00 00	subq	680(%r14,%rbx), %r12
10000a3be:	0f 82 e1 02 00 00	jb	0x10000a6a5
10000a3c4:	48 89 7d c8	movq	%rdi, -56(%rbp)
10000a3c8:	4c 89 ff	movq	%r15, %rdi
10000a3cb:	4e 8b bc 3b a0 02 00 00	movq	672(%rbx,%r15), %r15
10000a3d3:	4d 2b bc 1e a0 02 00 00	subq	672(%r14,%rbx), %r15
10000a3db:	0f 82 df 02 00 00	jb	0x10000a6c0
10000a3e1:	4c 89 5d b0	movq	%r11, -80(%rbp)
10000a3e5:	4c 8d 1d 04 e3 01 00	leaq	123652(%rip), %r11
10000a3ec:	4e 89 8c 1b a0 01 00 00	movq	%r9, 416(%rbx,%r11)
10000a3f4:	4e 89 84 1b a8 01 00 00	movq	%r8, 424(%rbx,%r11)
10000a3fc:	4e 89 a4 1b a8 02 00 00	movq	%r12, 680(%rbx,%r11)
10000a404:	4e 89 bc 1b a0 02 00 00	movq	%r15, 672(%rbx,%r11)
10000a40c:	f3 0f 6f 84 3b b0 02 00 00	movdqu	688(%rbx,%rdi), %xmm0
10000a415:	f3 41 0f 6f 8c 1e b0 02 00 00	movdqu	688(%r14,%rbx), %xmm1
10000a41f:	66 0f fb c1	psubq	%xmm1, %xmm0
10000a423:	f3 42 0f 7f 84 1b b0 02 00 00	movdqu	%xmm0, 688(%rbx,%r11)
10000a42d:	f3 0f 6f 84 3b c0 02 00 00	movdqu	704(%rbx,%rdi), %xmm0
10000a436:	4d 89 f0	movq	%r14, %r8
10000a439:	f3 41 0f 6f 8c 1e c0 02 00 00	movdqu	704(%r14,%rbx), %xmm1
10000a443:	66 0f fb c1	psubq	%xmm1, %xmm0
10000a447:	f3 42 0f 7f 84 1b c0 02 00 00	movdqu	%xmm0, 704(%rbx,%r11)
10000a451:	4c 8b 5d b0	movq	-80(%rbp), %r11
10000a455:	31 db	xorl	%ebx, %ebx
10000a457:	49 89 ff	movq	%rdi, %r15
10000a45a:	4d 89 ec	movq	%r13, %r12
10000a45d:	49 89 cd	movq	%rcx, %r13
10000a460:	48 8b 3c d8	movq	(%rax,%rbx,8), %rdi
10000a464:	49 2b 3c da	subq	(%r10,%rbx,8), %rdi
10000a468:	0f 82 9c 01 00 00	jb	0x10000a60a
10000a46e:	48 89 3c de	movq	%rdi, (%rsi,%rbx,8)
10000a472:	48 ff c3	incq	%rbx
10000a475:	48 83 fb 06	cmpq	$6, %rbx
10000a479:	75 e5	jne	0x10000a460
10000a47b:	31 db	xorl	%ebx, %ebx
10000a47d:	4d 89 c6	movq	%r8, %r14
10000a480:	48 8b 4d b8	movq	-72(%rbp), %rcx
10000a484:	4c 8b 45 c0	movq	-64(%rbp), %r8
10000a488:	48 8b 3c d9	movq	(%rcx,%rbx,8), %rdi
10000a48c:	48 2b 3c da	subq	(%rdx,%rbx,8), %rdi
10000a490:	0f 82 94 01 00 00	jb	0x10000a62a
10000a496:	49 89 3c d8	movq	%rdi, (%r8,%rbx,8)
10000a49a:	48 ff c3	incq	%rbx
10000a49d:	48 83 fb 0c	cmpq	$12, %rbx
10000a4a1:	75 e5	jne	0x10000a488
10000a4a3:	31 db	xorl	%ebx, %ebx
10000a4a5:	49 8b 3c dc	movq	(%r12,%rbx,8), %rdi
10000a4a9:	49 2b 7c dd 00	subq	(%r13,%rbx,8), %rdi
10000a4ae:	0f 82 a0 01 00 00	jb	0x10000a654
10000a4b4:	49 89 3c db	movq	%rdi, (%r11,%rbx,8)
10000a4b8:	48 ff c3	incq	%rbx
10000a4bb:	48 83 fb 0c	cmpq	$12, %rbx
10000a4bf:	75 e4	jne	0x10000a4a5
10000a4c1:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000a4c5:	ff c7	incl	%edi
10000a4c7:	bb 30 01 00 00	movl	$304, %ebx
10000a4cc:	48 01 de	addq	%rbx, %rsi
10000a4cf:	49 01 da	addq	%rbx, %r10
10000a4d2:	48 01 d8	addq	%rbx, %rax
10000a4d5:	49 01 d8	addq	%rbx, %r8
10000a4d8:	48 01 da	addq	%rbx, %rdx
10000a4db:	48 01 d9	addq	%rbx, %rcx
10000a4de:	49 01 db	addq	%rbx, %r11
10000a4e1:	49 01 dd	addq	%rbx, %r13
10000a4e4:	49 01 dc	addq	%rbx, %r12
10000a4e7:	3b 7d d4	cmpl	-44(%rbp), %edi
10000a4ea:	0f 85 7b fe ff ff	jne	0x10000a36b
10000a4f0:	48 8d 3d b9 46 01 00	leaq	83641(%rip), %rdi
10000a4f7:	48 8d 35 52 94 01 00	leaq	103506(%rip), %rsi
10000a4fe:	ba a0 4d 00 00	movl	$19872, %edx
10000a503:	e8 c8 5e 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000a508:	48 8d 3d 41 09 03 00	leaq	198977(%rip), %rdi
10000a50f:	48 8d 35 3a 57 02 00	leaq	153402(%rip), %rsi
10000a516:	ba 00 02 00 00	movl	$512, %edx
10000a51b:	e8 b0 5e 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000a520:	0f 10 05 29 59 02 00	movups	153897(%rip), %xmm0
10000a527:	0f 29 05 02 e9 02 00	movaps	%xmm0, 190722(%rip)
10000a52e:	48 8b 05 2b 59 02 00	movq	153899(%rip), %rax
10000a535:	48 89 05 04 e9 02 00	movq	%rax, 190724(%rip)
10000a53c:	48 8d 3d 05 e9 02 00	leaq	190725(%rip), %rdi
10000a543:	48 8d 35 1e 59 02 00	leaq	153886(%rip), %rsi
10000a54a:	ba 04 20 00 00	movl	$8196, %edx
10000a54f:	e8 7c 5e 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000a554:	80 3d 6d 34 02 00 00	cmpb	$0, 144493(%rip)
10000a55b:	74 2f	je	0x10000a58c
10000a55d:	4c 8b 05 54 34 02 00	movq	144468(%rip), %r8
10000a564:	4c 8b 0d 55 34 02 00	movq	144469(%rip), %r9
10000a56b:	48 8d 3d de 0a 03 00	leaq	199390(%rip), %rdi
10000a572:	48 8d 35 df 0a 03 00	leaq	199391(%rip), %rsi
10000a579:	48 8d 15 e0 0a 03 00	leaq	199392(%rip), %rdx
10000a580:	48 8d 0d a1 36 02 00	leaq	145057(%rip), %rcx
10000a587:	e8 16 1b 00 00	callq	0x10000c0a2
10000a58c:	80 3d 4d 34 02 00 00	cmpb	$0, 144461(%rip)
10000a593:	74 2f	je	0x10000a5c4
10000a595:	4c 8b 05 34 34 02 00	movq	144436(%rip), %r8
10000a59c:	4c 8b 0d 35 34 02 00	movq	144437(%rip), %r9
10000a5a3:	48 8d 3d be 0a 03 00	leaq	199358(%rip), %rdi
10000a5aa:	48 8d 35 87 36 02 00	leaq	145031(%rip), %rsi
10000a5b1:	48 8d 15 b8 0a 03 00	leaq	199352(%rip), %rdx
10000a5b8:	48 8d 0d 71 36 02 00	leaq	145009(%rip), %rcx
10000a5bf:	e8 de 1a 00 00	callq	0x10000c0a2
10000a5c4:	80 3d 2d 34 02 00 00	cmpb	$0, 144429(%rip)
10000a5cb:	74 78	je	0x10000a645
10000a5cd:	4c 8b 05 14 34 02 00	movq	144404(%rip), %r8
10000a5d4:	4c 8b 0d 15 34 02 00	movq	144405(%rip), %r9
10000a5db:	48 8d 3d 96 0a 03 00	leaq	199318(%rip), %rdi
10000a5e2:	48 8d 35 97 0a 03 00	leaq	199319(%rip), %rsi
10000a5e9:	48 8d 15 98 0a 03 00	leaq	199320(%rip), %rdx
10000a5f0:	48 8d 0d 29 36 02 00	leaq	144937(%rip), %rcx
10000a5f7:	48 83 c4 28	addq	$40, %rsp
10000a5fb:	5b	popq	%rbx
10000a5fc:	41 5c	popq	%r12
10000a5fe:	41 5d	popq	%r13
10000a600:	41 5e	popq	%r14
10000a602:	41 5f	popq	%r15
10000a604:	5d	popq	%rbp
10000a605:	e9 98 1a 00 00	jmp	0x10000c0a2
10000a60a:	48 8b 05 5f dc 00 00	movq	56415(%rip), %rax ## literal pool symbol address: ___stderrp
10000a611:	48 8b 38	movq	(%rax), %rdi
10000a614:	48 8d 35 73 a3 00 00	leaq	41843(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a61b:	ba c3 04 00 00	movl	$1219, %edx
10000a620:	e9 5c fc ff ff	jmp	0x10000a281
10000a625:	e8 57 58 00 00	callq	0x10000fe81
10000a62a:	48 8b 05 3f dc 00 00	movq	56383(%rip), %rax ## literal pool symbol address: ___stderrp
10000a631:	48 8b 38	movq	(%rax), %rdi
10000a634:	48 8d 35 53 a3 00 00	leaq	41811(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a63b:	ba c8 04 00 00	movl	$1224, %edx
10000a640:	e9 3c fc ff ff	jmp	0x10000a281
10000a645:	48 83 c4 28	addq	$40, %rsp
10000a649:	5b	popq	%rbx
10000a64a:	41 5c	popq	%r12
10000a64c:	41 5d	popq	%r13
10000a64e:	41 5e	popq	%r14
10000a650:	41 5f	popq	%r15
10000a652:	5d	popq	%rbp
10000a653:	c3	retq
10000a654:	48 8b 05 15 dc 00 00	movq	56341(%rip), %rax ## literal pool symbol address: ___stderrp
10000a65b:	48 8b 38	movq	(%rax), %rdi
10000a65e:	48 8d 35 29 a3 00 00	leaq	41769(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a665:	ba cd 04 00 00	movl	$1229, %edx
10000a66a:	e9 12 fc ff ff	jmp	0x10000a281
10000a66f:	48 8b 05 fa db 00 00	movq	56314(%rip), %rax ## literal pool symbol address: ___stderrp
10000a676:	48 8b 38	movq	(%rax), %rdi
10000a679:	48 8d 35 0e a3 00 00	leaq	41742(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a680:	ba b2 04 00 00	movl	$1202, %edx
10000a685:	e9 f7 fb ff ff	jmp	0x10000a281
10000a68a:	48 8b 05 df db 00 00	movq	56287(%rip), %rax ## literal pool symbol address: ___stderrp
10000a691:	48 8b 38	movq	(%rax), %rdi
10000a694:	48 8d 35 f3 a2 00 00	leaq	41715(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a69b:	ba b3 04 00 00	movl	$1203, %edx
10000a6a0:	e9 dc fb ff ff	jmp	0x10000a281
10000a6a5:	48 8b 05 c4 db 00 00	movq	56260(%rip), %rax ## literal pool symbol address: ___stderrp
10000a6ac:	48 8b 38	movq	(%rax), %rdi
10000a6af:	48 8d 35 d8 a2 00 00	leaq	41688(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a6b6:	ba b4 04 00 00	movl	$1204, %edx
10000a6bb:	e9 c1 fb ff ff	jmp	0x10000a281
10000a6c0:	48 8b 05 a9 db 00 00	movq	56233(%rip), %rax ## literal pool symbol address: ___stderrp
10000a6c7:	48 8b 38	movq	(%rax), %rdi
10000a6ca:	48 8d 35 bd a2 00 00	leaq	41661(%rip), %rsi ## literal pool for: "underflow detected when sampling cpu power info, discarding sample %d\n"
10000a6d1:	ba b5 04 00 00	movl	$1205, %edx
10000a6d6:	e9 a6 fb ff ff	jmp	0x10000a281
10000a6db:	e8 38 57 00 00	callq	0x10000fe18
10000a6e0:	e8 56 57 00 00	callq	0x10000fe3b
10000a6e5:	e8 74 57 00 00	callq	0x10000fe5e
10000a6ea:	55	pushq	%rbp
10000a6eb:	48 89 e5	movq	%rsp, %rbp
10000a6ee:	41 57	pushq	%r15
10000a6f0:	41 56	pushq	%r14
10000a6f2:	41 55	pushq	%r13
10000a6f4:	41 54	pushq	%r12
10000a6f6:	53	pushq	%rbx
10000a6f7:	50	pushq	%rax
10000a6f8:	48 8d 04 32	leaq	(%rdx,%rsi), %rax
10000a6fc:	48 39 f0	cmpq	%rsi, %rax
10000a6ff:	0f 86 08 02 00 00	jbe	0x10000a90d
10000a705:	66 0f 28 e0	movapd	%xmm0, %xmm4
10000a709:	49 89 fe	movq	%rdi, %r14
10000a70c:	48 69 c6 30 01 00 00	imulq	$304, %rsi, %rax
10000a713:	48 8d 0d d6 df 01 00	leaq	122838(%rip), %rcx
10000a71a:	48 8d 34 08	leaq	(%rax,%rcx), %rsi
10000a71e:	48 81 c6 c8 02 00 00	addq	$712, %rsi
10000a725:	31 c9	xorl	%ecx, %ecx
10000a727:	31 c0	xorl	%eax, %eax
10000a729:	31 db	xorl	%ebx, %ebx
10000a72b:	45 31 ff	xorl	%r15d, %r15d
10000a72e:	45 31 e4	xorl	%r12d, %r12d
10000a731:	48 03 8e d8 fe ff ff	addq	-296(%rsi), %rcx
10000a738:	48 03 86 e0 fe ff ff	addq	-288(%rsi), %rax
10000a73f:	48 03 5e f0	addq	-16(%rsi), %rbx
10000a743:	4c 03 7e f8	addq	-8(%rsi), %r15
10000a747:	4c 03 26	addq	(%rsi), %r12
10000a74a:	48 81 c6 30 01 00 00	addq	$304, %rsi
10000a751:	48 ff ca	decq	%rdx
10000a754:	75 db	jne	0x10000a731
10000a756:	48 85 c0	testq	%rax, %rax
10000a759:	0f 84 ae 01 00 00	je	0x10000a90d
10000a75f:	66 0f 6f 35 99 bf 00 00	movdqa	49049(%rip), %xmm6
10000a767:	66 0f 28 2d a1 bf 00 00	movapd	49057(%rip), %xmm5
10000a76f:	66 48 0f 6e c9	movq	%rcx, %xmm1
10000a774:	66 0f 62 ce	punpckldq	%xmm6, %xmm1
10000a778:	66 0f 5c cd	subpd	%xmm5, %xmm1
10000a77c:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000a780:	66 48 0f 6e c0	movq	%rax, %xmm0
10000a785:	66 0f 62 c6	punpckldq	%xmm6, %xmm0
10000a789:	66 0f 5c c5	subpd	%xmm5, %xmm0
10000a78d:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000a791:	f2 0f 5e c8	divsd	%xmm0, %xmm1
10000a795:	80 3d f4 2c 02 00 00	cmpb	$0, 142580(%rip)
10000a79c:	74 25	je	0x10000a7c3
10000a79e:	48 8d 05 f3 37 01 00	leaq	79859(%rip), %rax
10000a7a5:	f2 0f 10 50 18	movsd	24(%rax), %xmm2
10000a7aa:	0f 14 15 4f bf 00 00	unpcklps	48975(%rip), %xmm2
10000a7b1:	66 0f 5c 15 57 bf 00 00	subpd	48983(%rip), %xmm2
10000a7b9:	66 0f 7c d2	haddpd	%xmm2, %xmm2
10000a7bd:	f2 0f 59 d1	mulsd	%xmm1, %xmm2
10000a7c1:	eb 39	jmp	0x10000a7fc
10000a7c3:	48 8d 05 ce 37 01 00	leaq	79822(%rip), %rax
10000a7ca:	f3 0f 7e 40 10	movq	16(%rax), %xmm0
10000a7cf:	66 0f 62 c6	punpckldq	%xmm6, %xmm0
10000a7d3:	66 0f 5c c5	subpd	%xmm5, %xmm0
10000a7d7:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000a7db:	66 0f 28 d1	movapd	%xmm1, %xmm2
10000a7df:	f2 0f 59 d0	mulsd	%xmm0, %xmm2
10000a7e3:	f3 0f 7e 40 18	movq	24(%rax), %xmm0
10000a7e8:	66 0f 62 c6	punpckldq	%xmm6, %xmm0
10000a7ec:	66 0f 5c c5	subpd	%xmm5, %xmm0
10000a7f0:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000a7f4:	66 0f 28 ca	movapd	%xmm2, %xmm1
10000a7f8:	f2 0f 5e c8	divsd	%xmm0, %xmm1
10000a7fc:	4c 8d 2d ed 37 01 00	leaq	79853(%rip), %r13
10000a803:	41 8b 45 28	movl	40(%r13), %eax
10000a807:	83 f8 01	cmpl	$1, %eax
10000a80a:	74 3f	je	0x10000a84b
10000a80c:	85 c0	testl	%eax, %eax
10000a80e:	75 72	jne	0x10000a882
10000a810:	f2 0f 5e 15 98 d2 00 00	divsd	53912(%rip), %xmm2
10000a818:	48 8d 05 79 37 01 00	leaq	79737(%rip), %rax
10000a81f:	48 8b 78 50	movq	80(%rax), %rdi
10000a823:	f2 0f 59 0d fd be 00 00	mulsd	48893(%rip), %xmm1
10000a82b:	48 8d 35 d2 95 00 00	leaq	38354(%rip), %rsi ## literal pool for: "%s Average frequency as fraction of nominal: %.2f%% (%.2f Mhz)\n"
10000a832:	4c 89 f2	movq	%r14, %rdx
10000a835:	66 0f 28 c1	movapd	%xmm1, %xmm0
10000a839:	66 0f 28 ca	movapd	%xmm2, %xmm1
10000a83d:	b0 02	movb	$2, %al
10000a83f:	f2 0f 11 65 d0	movsd	%xmm4, -48(%rbp)
10000a844:	e8 09 5b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000a849:	eb 22	jmp	0x10000a86d
10000a84b:	48 8d 05 46 37 01 00	leaq	79686(%rip), %rax
10000a852:	48 8b 78 50	movq	80(%rax), %rdi
10000a856:	48 8d 35 e7 95 00 00	leaq	38375(%rip), %rsi ## literal pool for: "<key>freq_hz</key><real>%g</real>\n<key>freq_ratio</key><real>%g</real>\n"
10000a85d:	66 0f 28 c2	movapd	%xmm2, %xmm0
10000a861:	b0 02	movb	$2, %al
10000a863:	f2 0f 11 65 d0	movsd	%xmm4, -48(%rbp)
10000a868:	e8 e5 5a 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000a86d:	66 0f 6f 35 8b be 00 00	movdqa	48779(%rip), %xmm6
10000a875:	66 0f 28 2d 93 be 00 00	movapd	48787(%rip), %xmm5
10000a87d:	f2 0f 10 65 d0	movsd	-48(%rbp), %xmm4
10000a882:	41 80 7d 3c 00	cmpb	$0, 60(%r13)
10000a887:	0f 84 80 00 00 00	je	0x10000a90d
10000a88d:	66 48 0f 6e cb	movq	%rbx, %xmm1
10000a892:	66 49 0f 6e d7	movq	%r15, %xmm2
10000a897:	66 49 0f 6e dc	movq	%r12, %xmm3
10000a89c:	66 0f 62 ce	punpckldq	%xmm6, %xmm1
10000a8a0:	66 0f 62 d6	punpckldq	%xmm6, %xmm2
10000a8a4:	66 0f 62 de	punpckldq	%xmm6, %xmm3
10000a8a8:	66 0f 5c cd	subpd	%xmm5, %xmm1
10000a8ac:	66 0f 5c d5	subpd	%xmm5, %xmm2
10000a8b0:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000a8b4:	66 0f 5c dd	subpd	%xmm5, %xmm3
10000a8b8:	66 0f 7c d2	haddpd	%xmm2, %xmm2
10000a8bc:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000a8c0:	66 0f 28 c1	movapd	%xmm1, %xmm0
10000a8c4:	f2 0f 5e c4	divsd	%xmm4, %xmm0
10000a8c8:	f2 0f 5e ca	divsd	%xmm2, %xmm1
10000a8cc:	f2 0f 5e d3	divsd	%xmm3, %xmm2
10000a8d0:	41 8b 45 28	movl	40(%r13), %eax
10000a8d4:	83 f8 01	cmpl	$1, %eax
10000a8d7:	74 43	je	0x10000a91c
10000a8d9:	85 c0	testl	%eax, %eax
10000a8db:	75 30	jne	0x10000a90d
10000a8dd:	48 8d 05 b4 36 01 00	leaq	79540(%rip), %rax
10000a8e4:	48 8b 78 50	movq	80(%rax), %rdi
10000a8e8:	48 8d 35 9d 95 00 00	leaq	38301(%rip), %rsi ## literal pool for: "%s instructions retired: %g/s\n%s instructions per clock: %g\n%s PMC frequency ratio: %g\n"
10000a8ef:	4c 89 f2	movq	%r14, %rdx
10000a8f2:	4c 89 f1	movq	%r14, %rcx
10000a8f5:	4d 89 f0	movq	%r14, %r8
10000a8f8:	b0 03	movb	$3, %al
10000a8fa:	48 83 c4 08	addq	$8, %rsp
10000a8fe:	5b	popq	%rbx
10000a8ff:	41 5c	popq	%r12
10000a901:	41 5d	popq	%r13
10000a903:	41 5e	popq	%r14
10000a905:	41 5f	popq	%r15
10000a907:	5d	popq	%rbp
10000a908:	e9 45 5a 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
10000a90d:	48 83 c4 08	addq	$8, %rsp
10000a911:	5b	popq	%rbx
10000a912:	41 5c	popq	%r12
10000a914:	41 5d	popq	%r13
10000a916:	41 5e	popq	%r14
10000a918:	41 5f	popq	%r15
10000a91a:	5d	popq	%rbp
10000a91b:	c3	retq
10000a91c:	48 8d 05 75 36 01 00	leaq	79477(%rip), %rax
10000a923:	48 8b 78 50	movq	80(%rax), %rdi
10000a927:	48 8d 35 b6 95 00 00	leaq	38326(%rip), %rsi ## literal pool for: "<key>inst_retired</key><real>%g</real>\n<key>inst_per_clk</key><real>%g</real>\n<key>pmc_freq_ratio</key><real>%g</real>\n"
10000a92e:	b0 03	movb	$3, %al
10000a930:	48 83 c4 08	addq	$8, %rsp
10000a934:	5b	popq	%rbx
10000a935:	41 5c	popq	%r12
10000a937:	41 5d	popq	%r13
10000a939:	41 5e	popq	%r14
10000a93b:	41 5f	popq	%r15
10000a93d:	5d	popq	%rbp
10000a93e:	e9 0f 5a 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
10000a943:	55	pushq	%rbp
10000a944:	48 89 e5	movq	%rsp, %rbp
10000a947:	41 56	pushq	%r14
10000a949:	53	pushq	%rbx
10000a94a:	48 83 ec 50	subq	$80, %rsp
10000a94e:	48 89 f3	movq	%rsi, %rbx
10000a951:	49 89 fe	movq	%rdi, %r14
10000a954:	48 8b 05 0d d9 00 00	movq	55565(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000a95b:	48 8b 00	movq	(%rax), %rax
10000a95e:	48 89 45 e8	movq	%rax, -24(%rbp)
10000a962:	48 89 f7	movq	%rsi, %rdi
10000a965:	31 f6	xorl	%esi, %esi
10000a967:	e8 20 59 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000a96c:	48 85 c0	testq	%rax, %rax
10000a96f:	0f 84 c7 00 00 00	je	0x10000aa3c
10000a975:	48 89 df	movq	%rbx, %rdi
10000a978:	e8 bb 58 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
10000a97d:	48 85 c0	testq	%rax, %rax
10000a980:	0f 84 d1 00 00 00	je	0x10000aa57
10000a986:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10000a98a:	ba 41 00 00 00	movl	$65, %edx
10000a98f:	48 89 c7	movq	%rax, %rdi
10000a992:	b9 00 01 00 08	movl	$134217984, %ecx
10000a997:	e8 00 58 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
10000a99c:	49 8b 46 20	movq	32(%r14), %rax
10000a9a0:	48 8b 40 08	movq	8(%rax), %rax
10000a9a4:	80 78 18 00	cmpb	$0, 24(%rax)
10000a9a8:	74 59	je	0x10000aa03
10000a9aa:	48 8d 05 3f 36 01 00	leaq	79423(%rip), %rax
10000a9b1:	8b 40 28	movl	40(%rax), %eax
10000a9b4:	83 f8 01	cmpl	$1, %eax
10000a9b7:	74 1d	je	0x10000a9d6
10000a9b9:	85 c0	testl	%eax, %eax
10000a9bb:	75 3a	jne	0x10000a9f7
10000a9bd:	48 8d 05 d4 35 01 00	leaq	79316(%rip), %rax
10000a9c4:	48 8b 48 50	movq	80(%rax), %rcx
10000a9c8:	48 8d 3d 48 99 00 00	leaq	39240(%rip), %rdi ## literal pool for: "\nPerformance Limited Due to:\n"
10000a9cf:	be 1d 00 00 00	movl	$29, %esi
10000a9d4:	eb 17	jmp	0x10000a9ed
10000a9d6:	48 8d 05 bb 35 01 00	leaq	79291(%rip), %rax
10000a9dd:	48 8b 48 50	movq	80(%rax), %rcx
10000a9e1:	48 8d 3d 4d 99 00 00	leaq	39245(%rip), %rdi ## literal pool for: "<key>perf_limit_reasons</key>\n<array>\n"
10000a9e8:	be 26 00 00 00	movl	$38, %esi
10000a9ed:	ba 01 00 00 00	movl	$1, %edx
10000a9f2:	e8 73 59 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000a9f7:	49 8b 46 20	movq	32(%r14), %rax
10000a9fb:	48 8b 40 08	movq	8(%rax), %rax
10000a9ff:	c6 40 18 00	movb	$0, 24(%rax)
10000aa03:	48 8d 05 e6 35 01 00	leaq	79334(%rip), %rax
10000aa0a:	8b 40 28	movl	40(%rax), %eax
10000aa0d:	85 c0	testl	%eax, %eax
10000aa0f:	74 0e	je	0x10000aa1f
10000aa11:	83 f8 01	cmpl	$1, %eax
10000aa14:	75 26	jne	0x10000aa3c
10000aa16:	48 8d 35 43 99 00 00	leaq	39235(%rip), %rsi ## literal pool for: "<string>%s</string>\n"
10000aa1d:	eb 07	jmp	0x10000aa26
10000aa1f:	48 8d 35 36 99 00 00	leaq	39222(%rip), %rsi ## literal pool for: "%s\n"
10000aa26:	48 8d 05 6b 35 01 00	leaq	79211(%rip), %rax
10000aa2d:	48 8b 78 50	movq	80(%rax), %rdi
10000aa31:	48 8d 55 a0	leaq	-96(%rbp), %rdx
10000aa35:	31 c0	xorl	%eax, %eax
10000aa37:	e8 16 59 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000aa3c:	48 8b 05 25 d8 00 00	movq	55333(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000aa43:	48 8b 00	movq	(%rax), %rax
10000aa46:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10000aa4a:	75 10	jne	0x10000aa5c
10000aa4c:	31 c0	xorl	%eax, %eax
10000aa4e:	48 83 c4 50	addq	$80, %rsp
10000aa52:	5b	popq	%rbx
10000aa53:	41 5e	popq	%r14
10000aa55:	5d	popq	%rbp
10000aa56:	c3	retq
10000aa57:	e8 48 54 00 00	callq	0x10000fea4
10000aa5c:	e8 97 58 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000aa61:	55	pushq	%rbp
10000aa62:	48 89 e5	movq	%rsp, %rbp
10000aa65:	48 83 c7 20	addq	$32, %rdi
10000aa69:	48 8b 76 20	movq	32(%rsi), %rsi
10000aa6d:	ba 08 00 00 00	movl	$8, %edx
10000aa72:	5d	popq	%rbp
10000aa73:	e9 50 58 00 00	jmp	0x1000102c8 ## symbol stub for: __Block_object_assign
10000aa78:	55	pushq	%rbp
10000aa79:	48 89 e5	movq	%rsp, %rbp
10000aa7c:	48 8b 7f 20	movq	32(%rdi), %rdi
10000aa80:	be 08 00 00 00	movl	$8, %esi
10000aa85:	5d	popq	%rbp
10000aa86:	e9 43 58 00 00	jmp	0x1000102ce ## symbol stub for: __Block_object_dispose
10000aa8b:	55	pushq	%rbp
10000aa8c:	48 89 e5	movq	%rsp, %rbp
10000aa8f:	41 57	pushq	%r15
10000aa91:	41 56	pushq	%r14
10000aa93:	53	pushq	%rbx
10000aa94:	48 81 ec f8 00 00 00	subq	$248, %rsp
10000aa9b:	f2 0f 11 45 88	movsd	%xmm0, -120(%rbp)
10000aaa0:	49 89 ff	movq	%rdi, %r15
10000aaa3:	48 8b 05 be d7 00 00	movq	55230(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000aaaa:	48 8b 00	movq	(%rax), %rax
10000aaad:	48 89 45 e0	movq	%rax, -32(%rbp)
10000aab1:	48 8b 0f	movq	(%rdi), %rcx
10000aab4:	83 fe ff	cmpl	$-1, %esi
10000aab7:	74 20	je	0x10000aad9
10000aab9:	41 89 f0	movl	%esi, %r8d
10000aabc:	4c 8d 75 90	leaq	-112(%rbp), %r14
10000aac0:	48 8d 15 fd 98 00 00	leaq	39165(%rip), %rdx ## literal pool for: "%s %d"
10000aac7:	be 41 00 00 00	movl	$65, %esi
10000aacc:	4c 89 f7	movq	%r14, %rdi
10000aacf:	31 c0	xorl	%eax, %eax
10000aad1:	e8 c0 59 00 00	callq	0x100010496 ## symbol stub for: _snprintf
10000aad6:	4c 89 f1	movq	%r14, %rcx
10000aad9:	31 c0	xorl	%eax, %eax
10000aadb:	41 80 7f 08 00	cmpb	$0, 8(%r15)
10000aae0:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
10000aae7:	48 89 02	movq	%rax, (%rdx)
10000aaea:	48 89 52 08	movq	%rdx, 8(%rdx)
10000aaee:	48 be 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rsi
10000aaf8:	48 89 72 10	movq	%rsi, 16(%rdx)
10000aafc:	48 89 42 18	movq	%rax, 24(%rdx)
10000ab00:	48 8d 9d 30 ff ff ff	leaq	-208(%rbp), %rbx
10000ab07:	48 89 03	movq	%rax, (%rbx)
10000ab0a:	48 89 5b 08	movq	%rbx, 8(%rbx)
10000ab0e:	48 89 73 10	movq	%rsi, 16(%rbx)
10000ab12:	c6 43 18 00	movb	$0, 24(%rbx)
10000ab16:	48 8d 05 13 31 02 00	leaq	143635(%rip), %rax
10000ab1d:	48 8d 35 14 31 02 00	leaq	143636(%rip), %rsi
10000ab24:	48 0f 45 f0	cmovneq	%rax, %rsi
10000ab28:	48 8b 3e	movq	(%rsi), %rdi
10000ab2b:	48 8b 05 ee d6 00 00	movq	55022(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000ab32:	48 8d b5 f8 fe ff ff	leaq	-264(%rbp), %rsi
10000ab39:	48 89 06	movq	%rax, (%rsi)
10000ab3c:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10000ab44:	48 8d 05 99 01 00 00	leaq	409(%rip), %rax
10000ab4b:	48 89 46 10	movq	%rax, 16(%rsi)
10000ab4f:	48 8d 05 ca e7 00 00	leaq	59338(%rip), %rax
10000ab56:	48 89 46 18	movq	%rax, 24(%rsi)
10000ab5a:	48 89 4e 30	movq	%rcx, 48(%rsi)
10000ab5e:	48 89 56 20	movq	%rdx, 32(%rsi)
10000ab62:	48 89 5e 28	movq	%rbx, 40(%rsi)
10000ab66:	e8 09 57 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
10000ab6b:	48 8b 43 08	movq	8(%rbx), %rax
10000ab6f:	8a 58 18	movb	24(%rax), %bl
10000ab72:	84 db	testb	%bl, %bl
10000ab74:	74 21	je	0x10000ab97
10000ab76:	48 8b 85 58 ff ff ff	movq	-168(%rbp), %rax
10000ab7d:	f2 0f 10 40 18	movsd	24(%rax), %xmm0
10000ab82:	0f 14 05 77 bb 00 00	unpcklps	47991(%rip), %xmm0
10000ab89:	66 0f 5c 05 7f bb 00 00	subpd	47999(%rip), %xmm0
10000ab91:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000ab95:	eb 04	jmp	0x10000ab9b
10000ab97:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000ab9b:	66 0f 29 85 70 ff ff ff	movapd	%xmm0, -144(%rbp)
10000aba3:	48 8d bd 30 ff ff ff	leaq	-208(%rbp), %rdi
10000abaa:	be 08 00 00 00	movl	$8, %esi
10000abaf:	e8 1a 57 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000abb4:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
10000abbb:	be 08 00 00 00	movl	$8, %esi
10000abc0:	e8 09 57 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000abc5:	84 db	testb	%bl, %bl
10000abc7:	66 0f 28 85 70 ff ff ff	movapd	-144(%rbp), %xmm0
10000abcf:	0f 84 83 00 00 00	je	0x10000ac58
10000abd5:	41 80 7f 08 00	cmpb	$0, 8(%r15)
10000abda:	74 05	je	0x10000abe1
10000abdc:	f2 0f 5e 45 88	divsd	-120(%rbp), %xmm0
10000abe1:	48 8d 05 08 34 01 00	leaq	78856(%rip), %rax
10000abe8:	8b 40 28	movl	40(%rax), %eax
10000abeb:	83 f8 01	cmpl	$1, %eax
10000abee:	74 4b	je	0x10000ac3b
10000abf0:	85 c0	testl	%eax, %eax
10000abf2:	75 64	jne	0x10000ac58
10000abf4:	48 8d 05 9d 33 01 00	leaq	78749(%rip), %rax
10000abfb:	48 8b 78 50	movq	80(%rax), %rdi
10000abff:	49 8b 57 10	movq	16(%r15), %rdx
10000ac03:	31 c0	xorl	%eax, %eax
10000ac05:	41 80 7f 09 00	cmpb	$0, 9(%r15)
10000ac0a:	0f 94 c0	sete	%al
10000ac0d:	48 8d 0d dc ce 00 00	leaq	52956(%rip), %rcx
10000ac14:	f2 0f 59 04 c1	mulsd	(%rcx,%rax,8), %xmm0
10000ac19:	48 8d 05 66 69 00 00	leaq	26982(%rip), %rax ## literal pool for: ""
10000ac20:	48 8d 0d b0 97 00 00	leaq	38832(%rip), %rcx ## literal pool for: "%"
10000ac27:	48 0f 44 c8	cmoveq	%rax, %rcx
10000ac2b:	48 8d 35 98 97 00 00	leaq	38808(%rip), %rsi ## literal pool for: "%s: %.02f%s\n"
10000ac32:	b0 01	movb	$1, %al
10000ac34:	e8 19 57 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000ac39:	eb 1d	jmp	0x10000ac58
10000ac3b:	48 8d 05 56 33 01 00	leaq	78678(%rip), %rax
10000ac42:	48 8b 78 50	movq	80(%rax), %rdi
10000ac46:	49 8b 57 18	movq	24(%r15), %rdx
10000ac4a:	48 8d 35 88 97 00 00	leaq	38792(%rip), %rsi ## literal pool for: "<key>%s</key><real>%g</real>\n"
10000ac51:	b0 01	movb	$1, %al
10000ac53:	e8 fa 56 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000ac58:	48 8b 05 09 d6 00 00	movq	54793(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000ac5f:	48 8b 00	movq	(%rax), %rax
10000ac62:	48 3b 45 e0	cmpq	-32(%rbp), %rax
10000ac66:	75 0e	jne	0x10000ac76
10000ac68:	48 81 c4 f8 00 00 00	addq	$248, %rsp
10000ac6f:	5b	popq	%rbx
10000ac70:	41 5e	popq	%r14
10000ac72:	41 5f	popq	%r15
10000ac74:	5d	popq	%rbp
10000ac75:	c3	retq
10000ac76:	e8 7d 56 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000ac7b:	55	pushq	%rbp
10000ac7c:	48 89 e5	movq	%rsp, %rbp
10000ac7f:	41 57	pushq	%r15
10000ac81:	41 56	pushq	%r14
10000ac83:	53	pushq	%rbx
10000ac84:	50	pushq	%rax
10000ac85:	48 89 f3	movq	%rsi, %rbx
10000ac88:	49 89 fe	movq	%rdi, %r14
10000ac8b:	48 89 f7	movq	%rsi, %rdi
10000ac8e:	31 f6	xorl	%esi, %esi
10000ac90:	e8 f7 55 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000ac95:	49 89 c7	movq	%rax, %r15
10000ac98:	48 89 df	movq	%rbx, %rdi
10000ac9b:	e8 98 55 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
10000aca0:	48 85 c0	testq	%rax, %rax
10000aca3:	74 3a	je	0x10000acdf
10000aca5:	48 8d 5d e3	leaq	-29(%rbp), %rbx
10000aca9:	ba 05 00 00 00	movl	$5, %edx
10000acae:	48 89 c7	movq	%rax, %rdi
10000acb1:	48 89 de	movq	%rbx, %rsi
10000acb4:	b9 00 01 00 08	movl	$134217984, %ecx
10000acb9:	e8 de 54 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
10000acbe:	81 3b 43 37 2b 00	cmpl	$2832195, (%rbx)
10000acc4:	75 0c	jne	0x10000acd2
10000acc6:	49 8b 46 20	movq	32(%r14), %rax
10000acca:	48 8b 40 08	movq	8(%rax), %rax
10000acce:	4c 89 78 18	movq	%r15, 24(%rax)
10000acd2:	31 c0	xorl	%eax, %eax
10000acd4:	48 83 c4 08	addq	$8, %rsp
10000acd8:	5b	popq	%rbx
10000acd9:	41 5e	popq	%r14
10000acdb:	41 5f	popq	%r15
10000acdd:	5d	popq	%rbp
10000acde:	c3	retq
10000acdf:	e8 e3 51 00 00	callq	0x10000fec7
10000ace4:	55	pushq	%rbp
10000ace5:	48 89 e5	movq	%rsp, %rbp
10000ace8:	41 57	pushq	%r15
10000acea:	41 56	pushq	%r14
10000acec:	53	pushq	%rbx
10000aced:	48 83 ec 58	subq	$88, %rsp
10000acf1:	49 89 f6	movq	%rsi, %r14
10000acf4:	49 89 ff	movq	%rdi, %r15
10000acf7:	48 8b 05 6a d5 00 00	movq	54634(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000acfe:	48 8b 00	movq	(%rax), %rax
10000ad01:	48 89 45 e0	movq	%rax, -32(%rbp)
10000ad05:	48 89 f7	movq	%rsi, %rdi
10000ad08:	e8 2b 55 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
10000ad0d:	48 85 c0	testq	%rax, %rax
10000ad10:	74 6d	je	0x10000ad7f
10000ad12:	48 8d 5d 90	leaq	-112(%rbp), %rbx
10000ad16:	ba 41 00 00 00	movl	$65, %edx
10000ad1b:	48 89 c7	movq	%rax, %rdi
10000ad1e:	48 89 de	movq	%rbx, %rsi
10000ad21:	b9 00 01 00 08	movl	$134217984, %ecx
10000ad26:	e8 71 54 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
10000ad2b:	49 8b 77 30	movq	48(%r15), %rsi
10000ad2f:	ba 41 00 00 00	movl	$65, %edx
10000ad34:	48 89 df	movq	%rbx, %rdi
10000ad37:	e8 96 57 00 00	callq	0x1000104d2 ## symbol stub for: _strncmp
10000ad3c:	85 c0	testl	%eax, %eax
10000ad3e:	75 22	jne	0x10000ad62
10000ad40:	4c 89 f7	movq	%r14, %rdi
10000ad43:	31 f6	xorl	%esi, %esi
10000ad45:	e8 42 55 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000ad4a:	49 8b 4f 20	movq	32(%r15), %rcx
10000ad4e:	48 8b 49 08	movq	8(%rcx), %rcx
10000ad52:	48 89 41 18	movq	%rax, 24(%rcx)
10000ad56:	49 8b 47 28	movq	40(%r15), %rax
10000ad5a:	48 8b 40 08	movq	8(%rax), %rax
10000ad5e:	c6 40 18 01	movb	$1, 24(%rax)
10000ad62:	48 8b 05 ff d4 00 00	movq	54527(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000ad69:	48 8b 00	movq	(%rax), %rax
10000ad6c:	48 3b 45 e0	cmpq	-32(%rbp), %rax
10000ad70:	75 12	jne	0x10000ad84
10000ad72:	31 c0	xorl	%eax, %eax
10000ad74:	48 83 c4 58	addq	$88, %rsp
10000ad78:	5b	popq	%rbx
10000ad79:	41 5e	popq	%r14
10000ad7b:	41 5f	popq	%r15
10000ad7d:	5d	popq	%rbp
10000ad7e:	c3	retq
10000ad7f:	e8 66 51 00 00	callq	0x10000feea
10000ad84:	e8 6f 55 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000ad89:	55	pushq	%rbp
10000ad8a:	48 89 e5	movq	%rsp, %rbp
10000ad8d:	41 56	pushq	%r14
10000ad8f:	53	pushq	%rbx
10000ad90:	49 89 f6	movq	%rsi, %r14
10000ad93:	48 89 fb	movq	%rdi, %rbx
10000ad96:	48 83 c7 20	addq	$32, %rdi
10000ad9a:	48 8b 76 20	movq	32(%rsi), %rsi
10000ad9e:	ba 08 00 00 00	movl	$8, %edx
10000ada3:	e8 20 55 00 00	callq	0x1000102c8 ## symbol stub for: __Block_object_assign
10000ada8:	48 83 c3 28	addq	$40, %rbx
10000adac:	49 8b 76 28	movq	40(%r14), %rsi
10000adb0:	48 89 df	movq	%rbx, %rdi
10000adb3:	ba 08 00 00 00	movl	$8, %edx
10000adb8:	5b	popq	%rbx
10000adb9:	41 5e	popq	%r14
10000adbb:	5d	popq	%rbp
10000adbc:	e9 07 55 00 00	jmp	0x1000102c8 ## symbol stub for: __Block_object_assign
10000adc1:	55	pushq	%rbp
10000adc2:	48 89 e5	movq	%rsp, %rbp
10000adc5:	53	pushq	%rbx
10000adc6:	50	pushq	%rax
10000adc7:	48 89 fb	movq	%rdi, %rbx
10000adca:	48 8b 7f 28	movq	40(%rdi), %rdi
10000adce:	be 08 00 00 00	movl	$8, %esi
10000add3:	e8 f6 54 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000add8:	48 8b 7b 20	movq	32(%rbx), %rdi
10000addc:	be 08 00 00 00	movl	$8, %esi
10000ade1:	48 83 c4 08	addq	$8, %rsp
10000ade5:	5b	popq	%rbx
10000ade6:	5d	popq	%rbp
10000ade7:	e9 e2 54 00 00	jmp	0x1000102ce ## symbol stub for: __Block_object_dispose
10000adec:	55	pushq	%rbp
10000aded:	48 89 e5	movq	%rsp, %rbp
10000adf0:	48 8d 3d 91 9c 00 00	leaq	40081(%rip), %rdi ## literal pool for: "IONVMeBlockStorageDevice"
10000adf7:	e8 c0 54 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000adfc:	48 89 05 8d 02 03 00	movq	%rax, 197261(%rip)
10000ae03:	48 85 c0	testq	%rax, %rax
10000ae06:	0f 84 8c 00 00 00	je	0x10000ae98
10000ae0c:	48 89 c7	movq	%rax, %rdi
10000ae0f:	e8 82 53 00 00	callq	0x100010196 ## symbol stub for: _CFRetain
10000ae14:	48 8b 05 55 d5 00 00	movq	54613(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
10000ae1b:	8b 38	movl	(%rax), %edi
10000ae1d:	48 8b 35 6c 02 03 00	movq	197228(%rip), %rsi
10000ae24:	e8 87 54 00 00	callq	0x1000102b0 ## symbol stub for: _IOServiceGetMatchingService
10000ae29:	89 05 69 02 03 00	movl	%eax, 197225(%rip)
10000ae2f:	85 c0	testl	%eax, %eax
10000ae31:	74 65	je	0x10000ae98
10000ae33:	89 c7	movl	%eax, %edi
10000ae35:	31 f6	xorl	%esi, %esi
10000ae37:	31 d2	xorl	%edx, %edx
10000ae39:	e8 0c 54 00 00	callq	0x10001024a ## symbol stub for: _IOReportCopyChannelsForDriver
10000ae3e:	48 89 05 5b 02 03 00	movq	%rax, 197211(%rip)
10000ae45:	48 85 c0	testq	%rax, %rax
10000ae48:	74 4e	je	0x10000ae98
10000ae4a:	48 8d 15 57 02 03 00	leaq	197207(%rip), %rdx
10000ae51:	31 ff	xorl	%edi, %edi
10000ae53:	48 89 c6	movq	%rax, %rsi
10000ae56:	31 c9	xorl	%ecx, %ecx
10000ae58:	45 31 c0	xorl	%r8d, %r8d
10000ae5b:	e8 08 54 00 00	callq	0x100010268 ## symbol stub for: _IOReportCreateSubscription
10000ae60:	48 89 05 49 02 03 00	movq	%rax, 197193(%rip)
10000ae67:	48 85 c0	testq	%rax, %rax
10000ae6a:	74 0c	je	0x10000ae78
10000ae6c:	c6 05 45 02 03 00 01	movb	$1, 197189(%rip)
10000ae73:	e9 a9 00 00 00	jmp	0x10000af21
10000ae78:	48 8b 05 f1 d3 00 00	movq	54257(%rip), %rax ## literal pool symbol address: ___stderrp
10000ae7f:	48 8b 08	movq	(%rax), %rcx
10000ae82:	48 8d 3d 18 9c 00 00	leaq	39960(%rip), %rdi ## literal pool for: "Failed to get IONVMeBlockStorageDevice power state information.\n"
10000ae89:	be 40 00 00 00	movl	$64, %esi
10000ae8e:	ba 01 00 00 00	movl	$1, %edx
10000ae93:	e8 d2 54 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000ae98:	48 8b 3d 11 02 03 00	movq	197137(%rip), %rdi
10000ae9f:	48 85 ff	testq	%rdi, %rdi
10000aea2:	74 10	je	0x10000aeb4
10000aea4:	e8 e7 52 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000aea9:	48 c7 05 fc 01 03 00 00 00 00 00	movq	$0, 197116(%rip)
10000aeb4:	48 8b 3d ed 01 03 00	movq	197101(%rip), %rdi
10000aebb:	48 85 ff	testq	%rdi, %rdi
10000aebe:	74 10	je	0x10000aed0
10000aec0:	e8 cb 52 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000aec5:	48 c7 05 d8 01 03 00 00 00 00 00	movq	$0, 197080(%rip)
10000aed0:	48 8b 3d c9 01 03 00	movq	197065(%rip), %rdi
10000aed7:	48 85 ff	testq	%rdi, %rdi
10000aeda:	74 10	je	0x10000aeec
10000aedc:	e8 af 52 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000aee1:	48 c7 05 b4 01 03 00 00 00 00 00	movq	$0, 197044(%rip)
10000aeec:	48 8b 3d 9d 01 03 00	movq	197021(%rip), %rdi
10000aef3:	48 85 ff	testq	%rdi, %rdi
10000aef6:	74 10	je	0x10000af08
10000aef8:	e8 93 52 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000aefd:	48 c7 05 88 01 03 00 00 00 00 00	movq	$0, 197000(%rip)
10000af08:	8b 3d 8a 01 03 00	movl	197002(%rip), %edi
10000af0e:	85 ff	testl	%edi, %edi
10000af10:	74 0f	je	0x10000af21
10000af12:	e8 cd 52 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000af17:	c7 05 77 01 03 00 00 00 00 00	movl	$0, 196983(%rip)
10000af21:	5d	popq	%rbp
10000af22:	c3	retq
10000af23:	55	pushq	%rbp
10000af24:	48 89 e5	movq	%rsp, %rbp
10000af27:	41 57	pushq	%r15
10000af29:	41 56	pushq	%r14
10000af2b:	41 55	pushq	%r13
10000af2d:	41 54	pushq	%r12
10000af2f:	53	pushq	%rbx
10000af30:	48 83 ec 78	subq	$120, %rsp
10000af34:	80 3d 7d 01 03 00 01	cmpb	$1, 196989(%rip)
10000af3b:	0f 85 56 01 00 00	jne	0x10000b097
10000af41:	48 83 3d 77 01 03 00 00	cmpq	$0, 196983(%rip)
10000af49:	0f 84 48 01 00 00	je	0x10000b097
10000af4f:	48 83 3d 71 01 03 00 00	cmpq	$0, 196977(%rip)
10000af57:	0f 84 3a 01 00 00	je	0x10000b097
10000af5d:	4c 8d 35 8c 30 01 00	leaq	77964(%rip), %r14
10000af64:	41 8b 46 28	movl	40(%r14), %eax
10000af68:	83 f8 01	cmpl	$1, %eax
10000af6b:	74 1d	je	0x10000af8a
10000af6d:	85 c0	testl	%eax, %eax
10000af6f:	75 3a	jne	0x10000afab
10000af71:	48 8d 05 20 30 01 00	leaq	77856(%rip), %rax
10000af78:	48 8b 48 50	movq	80(%rax), %rcx
10000af7c:	48 8d 3d 5f 9b 00 00	leaq	39775(%rip), %rdi ## literal pool for: "\n**** I/O Throttling ****\n"
10000af83:	be 1a 00 00 00	movl	$26, %esi
10000af88:	eb 17	jmp	0x10000afa1
10000af8a:	48 8d 05 07 30 01 00	leaq	77831(%rip), %rax
10000af91:	48 8b 48 50	movq	80(%rax), %rcx
10000af95:	48 8d 3d 61 9b 00 00	leaq	39777(%rip), %rdi ## literal pool for: "<key>io_throttling</key>\n<dict>\n"
10000af9c:	be 20 00 00 00	movl	$32, %esi
10000afa1:	ba 01 00 00 00	movl	$1, %edx
10000afa6:	e8 bf 53 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000afab:	48 8b 3d 16 01 03 00	movq	196886(%rip), %rdi
10000afb2:	48 8b 35 07 01 03 00	movq	196871(%rip), %rsi
10000afb9:	45 31 e4	xorl	%r12d, %r12d
10000afbc:	31 d2	xorl	%edx, %edx
10000afbe:	e8 9f 52 00 00	callq	0x100010262 ## symbol stub for: _IOReportCreateSamplesDelta
10000afc3:	49 89 c7	movq	%rax, %r15
10000afc6:	48 8d 5d b8	leaq	-72(%rbp), %rbx
10000afca:	4c 89 23	movq	%r12, (%rbx)
10000afcd:	48 89 5b 08	movq	%rbx, 8(%rbx)
10000afd1:	48 b8 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rax
10000afdb:	48 89 43 10	movq	%rax, 16(%rbx)
10000afdf:	4c 89 63 18	movq	%r12, 24(%rbx)
10000afe3:	4c 8b 2d 36 d2 00 00	movq	53814(%rip), %r13 ## literal pool symbol address: __NSConcreteStackBlock
10000afea:	48 8d b5 68 ff ff ff	leaq	-152(%rbp), %rsi
10000aff1:	4c 89 2e	movq	%r13, (%rsi)
10000aff4:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10000affc:	48 8d 05 27 01 00 00	leaq	295(%rip), %rax
10000b003:	48 89 46 10	movq	%rax, 16(%rsi)
10000b007:	48 8d 05 ba e4 00 00	leaq	58554(%rip), %rax
10000b00e:	48 89 46 18	movq	%rax, 24(%rsi)
10000b012:	48 89 5e 20	movq	%rbx, 32(%rsi)
10000b016:	4c 89 ff	movq	%r15, %rdi
10000b019:	e8 56 52 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
10000b01e:	48 8b 43 08	movq	8(%rbx), %rax
10000b022:	4c 39 60 18	cmpq	%r12, 24(%rax)
10000b026:	74 61	je	0x10000b089
10000b028:	48 8d 75 90	leaq	-112(%rbp), %rsi
10000b02c:	4c 89 2e	movq	%r13, (%rsi)
10000b02f:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10000b037:	48 8d 05 53 01 00 00	leaq	339(%rip), %rax
10000b03e:	48 89 46 10	movq	%rax, 16(%rsi)
10000b042:	48 8d 05 af e4 00 00	leaq	58543(%rip), %rax
10000b049:	48 89 46 18	movq	%rax, 24(%rsi)
10000b04d:	48 89 5e 20	movq	%rbx, 32(%rsi)
10000b051:	4c 89 ff	movq	%r15, %rdi
10000b054:	e8 1b 52 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
10000b059:	41 83 7e 28 01	cmpl	$1, 40(%r14)
10000b05e:	75 21	jne	0x10000b081
10000b060:	48 8d 05 31 2f 01 00	leaq	77617(%rip), %rax
10000b067:	48 8b 48 50	movq	80(%rax), %rcx
10000b06b:	48 8d 3d 3b 57 00 00	leaq	22331(%rip), %rdi ## literal pool for: "</dict>\n"
10000b072:	be 08 00 00 00	movl	$8, %esi
10000b077:	ba 01 00 00 00	movl	$1, %edx
10000b07c:	e8 e9 52 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000b081:	4c 89 ff	movq	%r15, %rdi
10000b084:	e8 07 51 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000b089:	48 8d 7d b8	leaq	-72(%rbp), %rdi
10000b08d:	be 08 00 00 00	movl	$8, %esi
10000b092:	e8 37 52 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000b097:	48 83 c4 78	addq	$120, %rsp
10000b09b:	5b	popq	%rbx
10000b09c:	41 5c	popq	%r12
10000b09e:	41 5d	popq	%r13
10000b0a0:	41 5e	popq	%r14
10000b0a2:	41 5f	popq	%r15
10000b0a4:	5d	popq	%rbp
10000b0a5:	c3	retq
10000b0a6:	55	pushq	%rbp
10000b0a7:	48 89 e5	movq	%rsp, %rbp
10000b0aa:	53	pushq	%rbx
10000b0ab:	50	pushq	%rax
10000b0ac:	80 3d 05 00 03 00 01	cmpb	$1, 196613(%rip)
10000b0b3:	75 6e	jne	0x10000b123
10000b0b5:	48 8b 3d 0c 00 03 00	movq	196620(%rip), %rdi
10000b0bc:	48 85 ff	testq	%rdi, %rdi
10000b0bf:	74 05	je	0x10000b0c6
10000b0c1:	e8 ca 50 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000b0c6:	48 8d 1d cb 2e 01 00	leaq	77515(%rip), %rbx
10000b0cd:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000b0d1:	48 8d 05 e8 ff 02 00	leaq	196584(%rip), %rax
10000b0d8:	48 8d 0d f1 ff 02 00	leaq	196593(%rip), %rcx
10000b0df:	48 0f 44 c8	cmoveq	%rax, %rcx
10000b0e3:	48 8b 01	movq	(%rcx), %rax
10000b0e6:	48 89 05 db ff 02 00	movq	%rax, 196571(%rip)
10000b0ed:	48 8b 3d bc ff 02 00	movq	196540(%rip), %rdi
10000b0f4:	48 8b 35 ad ff 02 00	movq	196525(%rip), %rsi
10000b0fb:	31 d2	xorl	%edx, %edx
10000b0fd:	e8 5a 51 00 00	callq	0x10001025c ## symbol stub for: _IOReportCreateSamples
10000b102:	48 89 05 b7 ff 02 00	movq	%rax, 196535(%rip)
10000b109:	80 3b 00	cmpb	$0, (%rbx)
10000b10c:	74 15	je	0x10000b123
10000b10e:	48 89 05 bb ff 02 00	movq	%rax, 196539(%rip)
10000b115:	48 89 c7	movq	%rax, %rdi
10000b118:	48 83 c4 08	addq	$8, %rsp
10000b11c:	5b	popq	%rbx
10000b11d:	5d	popq	%rbp
10000b11e:	e9 73 50 00 00	jmp	0x100010196 ## symbol stub for: _CFRetain
10000b123:	48 83 c4 08	addq	$8, %rsp
10000b127:	5b	popq	%rbx
10000b128:	5d	popq	%rbp
10000b129:	c3	retq
10000b12a:	55	pushq	%rbp
10000b12b:	48 89 e5	movq	%rsp, %rbp
10000b12e:	41 57	pushq	%r15
10000b130:	41 56	pushq	%r14
10000b132:	53	pushq	%rbx
10000b133:	50	pushq	%rax
10000b134:	49 89 f7	movq	%rsi, %r15
10000b137:	49 89 fe	movq	%rdi, %r14
10000b13a:	48 89 f7	movq	%rsi, %rdi
10000b13d:	e8 f6 50 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
10000b142:	31 db	xorl	%ebx, %ebx
10000b144:	48 85 c0	testq	%rax, %rax
10000b147:	74 3b	je	0x10000b184
10000b149:	48 89 c7	movq	%rax, %rdi
10000b14c:	be 00 01 00 08	movl	$134217984, %esi
10000b151:	e8 4c 50 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
10000b156:	48 8d 35 c1 99 00 00	leaq	39361(%rip), %rsi ## literal pool for: "Total time elapsed"
10000b15d:	48 89 c7	movq	%rax, %rdi
10000b160:	e8 4f 53 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
10000b165:	85 c0	testl	%eax, %eax
10000b167:	75 1b	jne	0x10000b184
10000b169:	4c 89 ff	movq	%r15, %rdi
10000b16c:	31 f6	xorl	%esi, %esi
10000b16e:	e8 19 51 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000b173:	49 8b 4e 20	movq	32(%r14), %rcx
10000b177:	48 8b 49 08	movq	8(%rcx), %rcx
10000b17b:	48 89 41 18	movq	%rax, 24(%rcx)
10000b17f:	bb 10 00 00 00	movl	$16, %ebx
10000b184:	89 d8	movl	%ebx, %eax
10000b186:	48 83 c4 08	addq	$8, %rsp
10000b18a:	5b	popq	%rbx
10000b18b:	41 5e	popq	%r14
10000b18d:	41 5f	popq	%r15
10000b18f:	5d	popq	%rbp
10000b190:	c3	retq
10000b191:	55	pushq	%rbp
10000b192:	48 89 e5	movq	%rsp, %rbp
10000b195:	41 57	pushq	%r15
10000b197:	41 56	pushq	%r14
10000b199:	53	pushq	%rbx
10000b19a:	50	pushq	%rax
10000b19b:	48 89 f3	movq	%rsi, %rbx
10000b19e:	49 89 fe	movq	%rdi, %r14
10000b1a1:	48 89 f7	movq	%rsi, %rdi
10000b1a4:	e8 8f 50 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
10000b1a9:	48 85 c0	testq	%rax, %rax
10000b1ac:	74 36	je	0x10000b1e4
10000b1ae:	48 89 c7	movq	%rax, %rdi
10000b1b1:	be 00 01 00 08	movl	$134217984, %esi
10000b1b6:	e8 e7 4f 00 00	callq	0x1000101a2 ## symbol stub for: _CFStringGetCStringPtr
10000b1bb:	49 89 c7	movq	%rax, %r15
10000b1be:	48 89 c7	movq	%rax, %rdi
10000b1c1:	e8 06 53 00 00	callq	0x1000104cc ## symbol stub for: _strlen
10000b1c6:	48 83 f8 0d	cmpq	$13, %rax
10000b1ca:	72 18	jb	0x10000b1e4
10000b1cc:	49 8d 3c 07	leaq	(%r15,%rax), %rdi
10000b1d0:	48 83 c7 f3	addq	$-13, %rdi
10000b1d4:	48 8d 35 56 99 00 00	leaq	39254(%rip), %rsi ## literal pool for: "Throttle Time"
10000b1db:	e8 d4 52 00 00	callq	0x1000104b4 ## symbol stub for: _strcmp
10000b1e0:	85 c0	testl	%eax, %eax
10000b1e2:	74 0d	je	0x10000b1f1
10000b1e4:	31 c0	xorl	%eax, %eax
10000b1e6:	48 83 c4 08	addq	$8, %rsp
10000b1ea:	5b	popq	%rbx
10000b1eb:	41 5e	popq	%r14
10000b1ed:	41 5f	popq	%r15
10000b1ef:	5d	popq	%rbp
10000b1f0:	c3	retq
10000b1f1:	48 89 df	movq	%rbx, %rdi
10000b1f4:	31 f6	xorl	%esi, %esi
10000b1f6:	e8 91 50 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000b1fb:	48 8d 0d ee 2d 01 00	leaq	77294(%rip), %rcx
10000b202:	8b 49 28	movl	40(%rcx), %ecx
10000b205:	83 f9 01	cmpl	$1, %ecx
10000b208:	74 4d	je	0x10000b257
10000b20a:	85 c9	testl	%ecx, %ecx
10000b20c:	75 d6	jne	0x10000b1e4
10000b20e:	48 8d 0d 83 2d 01 00	leaq	77187(%rip), %rcx
10000b215:	f2 48 0f 2a c8	cvtsi2sd	%rax, %xmm1
10000b21a:	66 0f 28 c1	movapd	%xmm1, %xmm0
10000b21e:	f2 0f 5e 05 fa b4 00 00	divsd	46330(%rip), %xmm0
10000b226:	49 8b 46 20	movq	32(%r14), %rax
10000b22a:	48 8b 40 08	movq	8(%rax), %rax
10000b22e:	f2 48 0f 2a 50 18	cvtsi2sdq	24(%rax), %xmm2
10000b234:	48 8b 79 50	movq	80(%rcx), %rdi
10000b238:	f2 0f 5e ca	divsd	%xmm2, %xmm1
10000b23c:	f2 0f 59 0d e4 b4 00 00	mulsd	46308(%rip), %xmm1
10000b244:	48 8d 35 17 56 00 00	leaq	22039(%rip), %rsi ## literal pool for: "%16s: %12.3f s (%5.1f%%)\n"
10000b24b:	4c 89 fa	movq	%r15, %rdx
10000b24e:	b0 02	movb	$2, %al
10000b250:	e8 fd 50 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b255:	eb 8d	jmp	0x10000b1e4
10000b257:	48 8d 0d 3a 2d 01 00	leaq	77114(%rip), %rcx
10000b25e:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
10000b263:	49 8b 56 20	movq	32(%r14), %rdx
10000b267:	48 8b 52 08	movq	8(%rdx), %rdx
10000b26b:	f2 48 0f 2a 4a 18	cvtsi2sdq	24(%rdx), %xmm1
10000b271:	48 8b 79 50	movq	80(%rcx), %rdi
10000b275:	f2 0f 5e c1	divsd	%xmm1, %xmm0
10000b279:	f2 0f 59 05 a7 b4 00 00	mulsd	46247(%rip), %xmm0
10000b281:	48 8d 35 b7 98 00 00	leaq	39095(%rip), %rsi ## literal pool for: "<key>%s</key>\n<integer>%llu</integer>\n<key>%s percent</key>\n<real>%.1f</real>\n"
10000b288:	4c 89 fa	movq	%r15, %rdx
10000b28b:	48 89 c1	movq	%rax, %rcx
10000b28e:	4d 89 f8	movq	%r15, %r8
10000b291:	b0 01	movb	$1, %al
10000b293:	e8 ba 50 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b298:	e9 47 ff ff ff	jmp	0x10000b1e4
10000b29d:	55	pushq	%rbp
10000b29e:	48 89 e5	movq	%rsp, %rbp
10000b2a1:	53	pushq	%rbx
10000b2a2:	50	pushq	%rax
10000b2a3:	48 8b 05 fe cf 00 00	movq	53246(%rip), %rax ## literal pool symbol address: _bootstrap_port
10000b2aa:	8b 38	movl	(%rax), %edi
10000b2ac:	48 8d 35 25 fe 02 00	leaq	196133(%rip), %rsi
10000b2b3:	e8 26 4f 00 00	callq	0x1000101de ## symbol stub for: _IOMainPort
10000b2b8:	85 c0	testl	%eax, %eax
10000b2ba:	0f 85 c4 00 00 00	jne	0x10000b384
10000b2c0:	8b 1d 12 fe 02 00	movl	196114(%rip), %ebx
10000b2c6:	48 8d 3d 1d 99 00 00	leaq	39197(%rip), %rdi ## literal pool for: "AppleSmartBattery"
10000b2cd:	e8 ea 4f 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000b2d2:	89 df	movl	%ebx, %edi
10000b2d4:	48 89 c6	movq	%rax, %rsi
10000b2d7:	e8 d4 4f 00 00	callq	0x1000102b0 ## symbol stub for: _IOServiceGetMatchingService
10000b2dc:	89 05 fa fd 02 00	movl	%eax, 196090(%rip)
10000b2e2:	85 c0	testl	%eax, %eax
10000b2e4:	0f 95 05 f5 fd 02 00	setne	196085(%rip)
10000b2eb:	8b 1d e7 fd 02 00	movl	196071(%rip), %ebx
10000b2f1:	48 8d 3d 04 99 00 00	leaq	39172(%rip), %rdi ## literal pool for: "AppleBacklightDisplay"
10000b2f8:	e8 bf 4f 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000b2fd:	89 df	movl	%ebx, %edi
10000b2ff:	48 89 c6	movq	%rax, %rsi
10000b302:	e8 a9 4f 00 00	callq	0x1000102b0 ## symbol stub for: _IOServiceGetMatchingService
10000b307:	89 05 d7 fd 02 00	movl	%eax, 196055(%rip)
10000b30d:	c6 05 d4 fd 02 00 00	movb	$0, 196052(%rip)
10000b314:	8b 1d be fd 02 00	movl	196030(%rip), %ebx
10000b31a:	48 8d 3d f1 98 00 00	leaq	39153(%rip), %rdi ## literal pool for: "AppleHIDKeyboardEventDriverV2"
10000b321:	e8 96 4f 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000b326:	89 df	movl	%ebx, %edi
10000b328:	48 89 c6	movq	%rax, %rsi
10000b32b:	e8 80 4f 00 00	callq	0x1000102b0 ## symbol stub for: _IOServiceGetMatchingService
10000b330:	89 05 b6 fd 02 00	movl	%eax, 196022(%rip)
10000b336:	85 c0	testl	%eax, %eax
10000b338:	74 21	je	0x10000b35b
10000b33a:	48 8d 4d f4	leaq	-12(%rbp), %rcx
10000b33e:	89 c7	movl	%eax, %edi
10000b340:	48 89 ce	movq	%rcx, %rsi
10000b343:	48 89 ca	movq	%rcx, %rdx
10000b346:	49 89 c8	movq	%rcx, %r8
10000b349:	e8 67 06 00 00	callq	0x10000b9b5
10000b34e:	84 c0	testb	%al, %al
10000b350:	74 09	je	0x10000b35b
10000b352:	c6 05 8f fd 02 00 01	movb	$1, 195983(%rip)
10000b359:	eb 22	jmp	0x10000b37d
10000b35b:	8b 1d 77 fd 02 00	movl	195959(%rip), %ebx
10000b361:	48 8d 3d c8 98 00 00	leaq	39112(%rip), %rdi ## literal pool for: "AppleLMUController"
10000b368:	e8 4f 4f 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000b36d:	89 df	movl	%ebx, %edi
10000b36f:	48 89 c6	movq	%rax, %rsi
10000b372:	e8 39 4f 00 00	callq	0x1000102b0 ## symbol stub for: _IOServiceGetMatchingService
10000b377:	89 05 6f fd 02 00	movl	%eax, 195951(%rip)
10000b37d:	48 83 c4 08	addq	$8, %rsp
10000b381:	5b	popq	%rbx
10000b382:	5d	popq	%rbp
10000b383:	c3	retq
10000b384:	e8 84 4b 00 00	callq	0x10000ff0d
10000b389:	55	pushq	%rbp
10000b38a:	48 89 e5	movq	%rsp, %rbp
10000b38d:	41 57	pushq	%r15
10000b38f:	41 56	pushq	%r14
10000b391:	41 55	pushq	%r13
10000b393:	41 54	pushq	%r12
10000b395:	53	pushq	%rbx
10000b396:	48 83 ec 28	subq	$40, %rsp
10000b39a:	4c 8d 2d 4f 2c 01 00	leaq	76879(%rip), %r13
10000b3a1:	41 83 7d 28 00	cmpl	$0, 40(%r13)
10000b3a6:	75 17	jne	0x10000b3bf
10000b3a8:	48 8d 05 e9 2b 01 00	leaq	76777(%rip), %rax
10000b3af:	48 8b 70 50	movq	80(%rax), %rsi
10000b3b3:	48 8d 3d b8 99 00 00	leaq	39352(%rip), %rdi ## literal pool for: "\n\n**** Battery and backlight usage ****\n\n"
10000b3ba:	e8 9f 4f 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000b3bf:	80 3d 1a fd 02 00 01	cmpb	$1, 195866(%rip)
10000b3c6:	0f 85 18 01 00 00	jne	0x10000b4e4
10000b3cc:	80 3d 1d fd 02 00 00	cmpb	$0, 195869(%rip)
10000b3d3:	0f 84 0b 01 00 00	je	0x10000b4e4
10000b3d9:	44 8b 0d 1c fd 02 00	movl	195868(%rip), %r9d
10000b3e0:	f2 49 0f 2a c9	cvtsi2sd	%r9, %xmm1
10000b3e5:	8b 05 15 fd 02 00	movl	195861(%rip), %eax
10000b3eb:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
10000b3f0:	f2 0f 5e c8	divsd	%xmm0, %xmm1
10000b3f4:	41 8b 45 28	movl	40(%r13), %eax
10000b3f8:	83 f8 01	cmpl	$1, %eax
10000b3fb:	0f 84 85 00 00 00	je	0x10000b486
10000b401:	85 c0	testl	%eax, %eax
10000b403:	0f 85 db 00 00 00	jne	0x10000b4e4
10000b409:	48 8d 05 88 2b 01 00	leaq	76680(%rip), %rax
10000b410:	48 8b 78 50	movq	80(%rax), %rdi
10000b414:	8b 15 ee fc 02 00	movl	195822(%rip), %edx
10000b41a:	f2 0f 10 05 ee fc 02 00	movsd	195822(%rip), %xmm0
10000b422:	66 0f 57 d2	xorpd	%xmm2, %xmm2
10000b426:	66 0f 2e c2	ucomisd	%xmm2, %xmm0
10000b42a:	48 8d 05 f8 99 00 00	leaq	39416(%rip), %rax ## literal pool for: "charge"
10000b431:	48 8d 0d f8 99 00 00	leaq	39416(%rip), %rcx ## literal pool for: "discharge"
10000b438:	48 0f 47 c8	cmovaq	%rax, %rcx
10000b43c:	66 0f 54 05 fc c6 00 00	andpd	50940(%rip), %xmm0
10000b444:	f2 0f 59 0d dc b2 00 00	mulsd	45788(%rip), %xmm1
10000b44c:	44 8b 05 b1 fc 02 00	movl	195761(%rip), %r8d
10000b453:	44 8b 15 9e fc 02 00	movl	195742(%rip), %r10d
10000b45a:	80 3d ab fc 02 00 00	cmpb	$0, 195755(%rip)
10000b461:	48 8d 05 d6 99 00 00	leaq	39382(%rip), %rax ## literal pool for: "no"
10000b468:	48 8d 1d cb 99 00 00	leaq	39371(%rip), %rbx ## literal pool for: "yes"
10000b46f:	48 0f 44 d8	cmoveq	%rax, %rbx
10000b473:	48 8d 35 22 99 00 00	leaq	39202(%rip), %rsi ## literal pool for: "Battery: delta: %d mAh, %s rate: %g mAh/minute, cycle count %u, capacity: %u mAh (%g%% of design), charge remaining: %u mAh, plugged in: %s\n"
10000b47a:	b0 02	movb	$2, %al
10000b47c:	53	pushq	%rbx
10000b47d:	41 52	pushq	%r10
10000b47f:	e8 ce 4e 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b484:	eb 5a	jmp	0x10000b4e0
10000b486:	80 3d 7f fc 02 00 00	cmpb	$0, 195711(%rip)
10000b48d:	48 8d 05 bf 60 00 00	leaq	24767(%rip), %rax ## literal pool for: "false"
10000b494:	48 8d 15 b3 60 00 00	leaq	24755(%rip), %rdx ## literal pool for: "true"
10000b49b:	48 0f 44 d0	cmoveq	%rax, %rdx
10000b49f:	48 8d 05 f2 2a 01 00	leaq	76530(%rip), %rax
10000b4a6:	f2 0f 10 05 62 fc 02 00	movsd	195682(%rip), %xmm0
10000b4ae:	66 0f 57 05 8a b2 00 00	xorpd	45706(%rip), %xmm0
10000b4b6:	48 8b 78 50	movq	80(%rax), %rdi
10000b4ba:	8b 0d 48 fc 02 00	movl	195656(%rip), %ecx
10000b4c0:	44 8b 05 3d fc 02 00	movl	195645(%rip), %r8d
10000b4c7:	8b 1d 2b fc 02 00	movl	195627(%rip), %ebx
10000b4cd:	48 83 ec 08	subq	$8, %rsp
10000b4d1:	48 8d 35 69 99 00 00	leaq	39273(%rip), %rsi ## literal pool for: "<key>battery</key>\n<dict>\n<key>plugged_in</key><%s/>\n<key>discharge_rate</key><real>%g</real>\n<key>charge_delta</key><integer>%d</integer>\n<key>cycle_count</key><integer>%u</integer>\n<key>capacity</key><integer>%u</integer>\n<key>capacity_ratio</key><real>%g</real>\n<key>charge_remaining</key><integer>%u</integer>\n</dict>\n"
10000b4d8:	b0 02	movb	$2, %al
10000b4da:	53	pushq	%rbx
10000b4db:	e8 72 4e 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b4e0:	48 83 c4 10	addq	$16, %rsp
10000b4e4:	8b 3d fa fb 02 00	movl	195578(%rip), %edi
10000b4ea:	85 ff	testl	%edi, %edi
10000b4ec:	0f 84 4a 02 00 00	je	0x10000b73c
10000b4f2:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000b4f6:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10000b4fd:	31 d2	xorl	%edx, %edx
10000b4ff:	31 c9	xorl	%ecx, %ecx
10000b501:	e8 f6 4c 00 00	callq	0x1000101fc ## symbol stub for: _IORegistryEntryCreateCFProperties
10000b506:	85 c0	testl	%eax, %eax
10000b508:	0f 85 21 01 00 00	jne	0x10000b62f
10000b50e:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000b512:	48 85 ff	testq	%rdi, %rdi
10000b515:	0f 84 14 01 00 00	je	0x10000b62f
10000b51b:	48 8d 35 ae e4 00 00	leaq	58542(%rip), %rsi ## Objc cfstring ref: @"IODisplayParameters"
10000b522:	e8 51 4c 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000b527:	48 85 c0	testq	%rax, %rax
10000b52a:	0f 84 17 01 00 00	je	0x10000b647
10000b530:	48 8d 35 b9 e4 00 00	leaq	58553(%rip), %rsi ## Objc cfstring ref: @"brightness"
10000b537:	48 89 c7	movq	%rax, %rdi
10000b53a:	e8 39 4c 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000b53f:	48 85 c0	testq	%rax, %rax
10000b542:	0f 84 20 01 00 00	je	0x10000b668
10000b548:	48 89 c3	movq	%rax, %rbx
10000b54b:	48 8d 35 be e4 00 00	leaq	58558(%rip), %rsi ## Objc cfstring ref: @"value"
10000b552:	48 89 c7	movq	%rax, %rdi
10000b555:	e8 1e 4c 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000b55a:	49 89 c4	movq	%rax, %r12
10000b55d:	48 8d 35 cc e4 00 00	leaq	58572(%rip), %rsi ## Objc cfstring ref: @"min"
10000b564:	48 89 df	movq	%rbx, %rdi
10000b567:	e8 0c 4c 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000b56c:	49 89 c7	movq	%rax, %r15
10000b56f:	48 8d 35 da e4 00 00	leaq	58586(%rip), %rsi ## Objc cfstring ref: @"max"
10000b576:	48 89 df	movq	%rbx, %rdi
10000b579:	e8 fa 4b 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000b57e:	4d 85 e4	testq	%r12, %r12
10000b581:	0f 84 39 01 00 00	je	0x10000b6c0
10000b587:	49 89 c6	movq	%rax, %r14
10000b58a:	48 8d 55 c4	leaq	-60(%rbp), %rdx
10000b58e:	be 09 00 00 00	movl	$9, %esi
10000b593:	4c 89 e7	movq	%r12, %rdi
10000b596:	e8 ef 4b 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000b59b:	84 c0	testb	%al, %al
10000b59d:	75 07	jne	0x10000b5a6
10000b59f:	c7 45 c4 00 00 00 00	movl	$0, -60(%rbp)
10000b5a6:	4d 85 ff	testq	%r15, %r15
10000b5a9:	0f 84 29 01 00 00	je	0x10000b6d8
10000b5af:	48 8d 55 c8	leaq	-56(%rbp), %rdx
10000b5b3:	be 09 00 00 00	movl	$9, %esi
10000b5b8:	4c 89 ff	movq	%r15, %rdi
10000b5bb:	e8 ca 4b 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000b5c0:	84 c0	testb	%al, %al
10000b5c2:	75 07	jne	0x10000b5cb
10000b5c4:	c7 45 c8 00 00 00 00	movl	$0, -56(%rbp)
10000b5cb:	4d 85 f6	testq	%r14, %r14
10000b5ce:	0f 84 17 01 00 00	je	0x10000b6eb
10000b5d4:	48 8d 55 cc	leaq	-52(%rbp), %rdx
10000b5d8:	be 09 00 00 00	movl	$9, %esi
10000b5dd:	4c 89 f7	movq	%r14, %rdi
10000b5e0:	e8 a5 4b 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000b5e5:	84 c0	testb	%al, %al
10000b5e7:	75 07	jne	0x10000b5f0
10000b5e9:	c7 45 cc 00 00 00 00	movl	$0, -52(%rbp)
10000b5f0:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000b5f4:	e8 97 4b 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000b5f9:	41 8b 45 28	movl	40(%r13), %eax
10000b5fd:	83 f8 01	cmpl	$1, %eax
10000b600:	0f 84 13 01 00 00	je	0x10000b719
10000b606:	85 c0	testl	%eax, %eax
10000b608:	0f 85 2e 01 00 00	jne	0x10000b73c
10000b60e:	48 8d 05 83 29 01 00	leaq	76163(%rip), %rax
10000b615:	48 8b 78 50	movq	80(%rax), %rdi
10000b619:	8b 55 c4	movl	-60(%rbp), %edx
10000b61c:	8b 4d c8	movl	-56(%rbp), %ecx
10000b61f:	44 8b 45 cc	movl	-52(%rbp), %r8d
10000b623:	48 8d 35 79 99 00 00	leaq	39289(%rip), %rsi ## literal pool for: "Backlight level: %u (range %u-%u)\n"
10000b62a:	e9 06 01 00 00	jmp	0x10000b735
10000b62f:	48 8b 05 3a cc 00 00	movq	52282(%rip), %rax ## literal pool symbol address: ___stderrp
10000b636:	48 8b 08	movq	(%rax), %rcx
10000b639:	48 8d 3d 34 9b 00 00	leaq	39732(%rip), %rdi ## literal pool for: "IORegistryEntryCreateCFProperties failed\n"
10000b640:	be 29 00 00 00	movl	$41, %esi
10000b645:	eb 40	jmp	0x10000b687
10000b647:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000b64b:	e8 40 4b 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000b650:	48 8b 05 19 cc 00 00	movq	52249(%rip), %rax ## literal pool symbol address: ___stderrp
10000b657:	48 8b 08	movq	(%rax), %rcx
10000b65a:	48 8d 3d 51 9b 00 00	leaq	39761(%rip), %rdi ## literal pool for: "Couldn't get value IODisplayParameters\n"
10000b661:	be 27 00 00 00	movl	$39, %esi
10000b666:	eb 1f	jmp	0x10000b687
10000b668:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000b66c:	e8 1f 4b 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000b671:	48 8b 05 f8 cb 00 00	movq	52216(%rip), %rax ## literal pool symbol address: ___stderrp
10000b678:	48 8b 08	movq	(%rax), %rcx
10000b67b:	48 8d 3d 63 9b 00 00	leaq	39779(%rip), %rdi ## literal pool for: "Couldn't get value bklt\n"
10000b682:	be 18 00 00 00	movl	$24, %esi
10000b687:	ba 01 00 00 00	movl	$1, %edx
10000b68c:	e8 d9 4c 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000b691:	48 8b 05 d8 cb 00 00	movq	52184(%rip), %rax ## literal pool symbol address: ___stderrp
10000b698:	48 8b 08	movq	(%rax), %rcx
10000b69b:	48 8d 3d e2 98 00 00	leaq	39138(%rip), %rdi ## literal pool for: "failed to get backlight level\n"
10000b6a2:	be 1e 00 00 00	movl	$30, %esi
10000b6a7:	ba 01 00 00 00	movl	$1, %edx
10000b6ac:	e8 b9 4c 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000b6b1:	48 83 c4 28	addq	$40, %rsp
10000b6b5:	5b	popq	%rbx
10000b6b6:	41 5c	popq	%r12
10000b6b8:	41 5d	popq	%r13
10000b6ba:	41 5e	popq	%r14
10000b6bc:	41 5f	popq	%r15
10000b6be:	5d	popq	%rbp
10000b6bf:	c3	retq
10000b6c0:	48 8b 05 a9 cb 00 00	movq	52137(%rip), %rax ## literal pool symbol address: ___stderrp
10000b6c7:	48 8b 08	movq	(%rax), %rcx
10000b6ca:	48 8d 3d 3b 9b 00 00	leaq	39739(%rip), %rdi ## literal pool for: "Couldn't get value from CFDictionary\n"
10000b6d1:	be 25 00 00 00	movl	$37, %esi
10000b6d6:	eb 29	jmp	0x10000b701
10000b6d8:	48 8b 05 91 cb 00 00	movq	52113(%rip), %rax ## literal pool symbol address: ___stderrp
10000b6df:	48 8b 08	movq	(%rax), %rcx
10000b6e2:	48 8d 3d 49 9b 00 00	leaq	39753(%rip), %rdi ## literal pool for: "Couldn't get min from CFDictionary\n"
10000b6e9:	eb 11	jmp	0x10000b6fc
10000b6eb:	48 8b 05 7e cb 00 00	movq	52094(%rip), %rax ## literal pool symbol address: ___stderrp
10000b6f2:	48 8b 08	movq	(%rax), %rcx
10000b6f5:	48 8d 3d 5a 9b 00 00	leaq	39770(%rip), %rdi ## literal pool for: "Couldn't get max from CFDictionary\n"
10000b6fc:	be 23 00 00 00	movl	$35, %esi
10000b701:	ba 01 00 00 00	movl	$1, %edx
10000b706:	e8 5f 4c 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000b70b:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000b70f:	e8 7c 4a 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000b714:	e9 78 ff ff ff	jmp	0x10000b691
10000b719:	48 8d 05 78 28 01 00	leaq	75896(%rip), %rax
10000b720:	48 8b 78 50	movq	80(%rax), %rdi
10000b724:	8b 55 c4	movl	-60(%rbp), %edx
10000b727:	8b 4d c8	movl	-56(%rbp), %ecx
10000b72a:	44 8b 45 cc	movl	-52(%rbp), %r8d
10000b72e:	48 8d 35 91 98 00 00	leaq	39057(%rip), %rsi ## literal pool for: "<key>backlight</key>\n<dict>\n<key>value</key><integer>%u</integer>\n<key>min</key><integer>%u</integer>\n<key>max</key><integer>%u</integer>\n</dict>\n"
10000b735:	31 c0	xorl	%eax, %eax
10000b737:	e8 16 4c 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b73c:	8b 3d aa f9 02 00	movl	194986(%rip), %edi
10000b742:	85 ff	testl	%edi, %edi
10000b744:	0f 84 67 ff ff ff	je	0x10000b6b1
10000b74a:	48 8d 75 d0	leaq	-48(%rbp), %rsi
10000b74e:	48 8d 55 b8	leaq	-72(%rbp), %rdx
10000b752:	48 8d 4d bc	leaq	-68(%rbp), %rcx
10000b756:	4c 8d 45 c0	leaq	-64(%rbp), %r8
10000b75a:	e8 56 02 00 00	callq	0x10000b9b5
10000b75f:	84 c0	testb	%al, %al
10000b761:	74 5e	je	0x10000b7c1
10000b763:	41 8b 45 28	movl	40(%r13), %eax
10000b767:	83 f8 01	cmpl	$1, %eax
10000b76a:	74 70	je	0x10000b7dc
10000b76c:	85 c0	testl	%eax, %eax
10000b76e:	0f 85 3d ff ff ff	jne	0x10000b6b1
10000b774:	48 8d 1d 1d 28 01 00	leaq	75805(%rip), %rbx
10000b77b:	48 8b 7b 50	movq	80(%rbx), %rdi
10000b77f:	8b 55 d0	movl	-48(%rbp), %edx
10000b782:	48 8d 35 f8 98 00 00	leaq	39160(%rip), %rsi ## literal pool for: "Keyboard Backlight level: %u"
10000b789:	31 c0	xorl	%eax, %eax
10000b78b:	e8 c2 4b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b790:	48 8b 43 50	movq	80(%rbx), %rax
10000b794:	80 3d 4d f9 02 00 01	cmpb	$1, 194893(%rip)
10000b79b:	0f 85 89 00 00 00	jne	0x10000b82a
10000b7a1:	8b 55 b8	movl	-72(%rbp), %edx
10000b7a4:	8b 4d bc	movl	-68(%rbp), %ecx
10000b7a7:	44 8b 45 c0	movl	-64(%rbp), %r8d
10000b7ab:	48 8d 35 ec 98 00 00	leaq	39148(%rip), %rsi ## literal pool for: " (off %u on range %u-%u)\n"
10000b7b2:	48 89 c7	movq	%rax, %rdi
10000b7b5:	31 c0	xorl	%eax, %eax
10000b7b7:	e8 96 4b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b7bc:	e9 f0 fe ff ff	jmp	0x10000b6b1
10000b7c1:	48 8b 05 a8 ca 00 00	movq	51880(%rip), %rax ## literal pool symbol address: ___stderrp
10000b7c8:	48 8b 08	movq	(%rax), %rcx
10000b7cb:	48 8d 3d 87 98 00 00	leaq	39047(%rip), %rdi ## literal pool for: "failed to get keyboard backlight level\n"
10000b7d2:	be 27 00 00 00	movl	$39, %esi
10000b7d7:	e9 cb fe ff ff	jmp	0x10000b6a7
10000b7dc:	48 8d 1d b5 27 01 00	leaq	75701(%rip), %rbx
10000b7e3:	48 8b 7b 50	movq	80(%rbx), %rdi
10000b7e7:	8b 55 d0	movl	-48(%rbp), %edx
10000b7ea:	48 8d 35 c7 98 00 00	leaq	39111(%rip), %rsi ## literal pool for: "<key>keyboard_backlight</key>\n<dict>\n<key>value</key><integer>%u</integer>\n"
10000b7f1:	31 c0	xorl	%eax, %eax
10000b7f3:	e8 5a 4b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b7f8:	80 3d e9 f8 02 00 01	cmpb	$1, 194793(%rip)
10000b7ff:	75 1c	jne	0x10000b81d
10000b801:	48 8b 7b 50	movq	80(%rbx), %rdi
10000b805:	8b 55 b8	movl	-72(%rbp), %edx
10000b808:	8b 4d bc	movl	-68(%rbp), %ecx
10000b80b:	44 8b 45 c0	movl	-64(%rbp), %r8d
10000b80f:	48 8d 35 ee 98 00 00	leaq	39150(%rip), %rsi ## literal pool for: "<key>off</key>\n<integer>%u</integer>\n<key>min</key>\n<integer>%u</integer>\n<key>max</key>\n<integer>%u</integer>\n"
10000b816:	31 c0	xorl	%eax, %eax
10000b818:	e8 35 4b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000b81d:	48 8b 73 50	movq	80(%rbx), %rsi
10000b821:	48 8d 3d 85 4f 00 00	leaq	20357(%rip), %rdi ## literal pool for: "</dict>\n"
10000b828:	eb 0a	jmp	0x10000b834
10000b82a:	48 8d 3d 41 58 00 00	leaq	22593(%rip), %rdi ## literal pool for: "\n"
10000b831:	48 89 c6	movq	%rax, %rsi
10000b834:	e8 25 4b 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000b839:	e9 73 fe ff ff	jmp	0x10000b6b1
10000b83e:	55	pushq	%rbp
10000b83f:	48 89 e5	movq	%rsp, %rbp
10000b842:	41 56	pushq	%r14
10000b844:	53	pushq	%rbx
10000b845:	80 3d 94 f8 02 00 01	cmpb	$1, 194708(%rip)
10000b84c:	0f 85 47 01 00 00	jne	0x10000b999
10000b852:	48 8d 1d 3f 27 01 00	leaq	75583(%rip), %rbx
10000b859:	f2 0f 10 43 20	movsd	32(%rbx), %xmm0
10000b85e:	f2 0f 58 05 b2 f8 02 00	addsd	194738(%rip), %xmm0
10000b866:	f2 0f 11 05 aa f8 02 00	movsd	%xmm0, 194730(%rip)
10000b86e:	c6 05 7b f8 02 00 00	movb	$0, 194683(%rip)
10000b875:	66 0f 2e 05 d3 c2 00 00	ucomisd	49875(%rip), %xmm0
10000b87d:	73 0f	jae	0x10000b88e
10000b87f:	80 3b 00	cmpb	$0, (%rbx)
10000b882:	75 0a	jne	0x10000b88e
10000b884:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000b888:	0f 84 0b 01 00 00	je	0x10000b999
10000b88e:	44 8b 35 63 f8 02 00	movl	194659(%rip), %r14d
10000b895:	8b 35 41 f8 02 00	movl	194625(%rip), %esi
10000b89b:	48 8d 3d ce e1 00 00	leaq	57806(%rip), %rdi ## Objc cfstring ref: @"CurrentCapacity"
10000b8a2:	e8 e8 02 00 00	callq	0x10000bb8f
10000b8a7:	89 05 4b f8 02 00	movl	%eax, 194635(%rip)
10000b8ad:	8b 35 29 f8 02 00	movl	194601(%rip), %esi
10000b8b3:	48 8d 3d d6 e1 00 00	leaq	57814(%rip), %rdi ## Objc cfstring ref: @"MaxCapacity"
10000b8ba:	e8 d0 02 00 00	callq	0x10000bb8f
10000b8bf:	89 05 37 f8 02 00	movl	%eax, 194615(%rip)
10000b8c5:	8b 35 11 f8 02 00	movl	194577(%rip), %esi
10000b8cb:	48 8d 3d de e1 00 00	leaq	57822(%rip), %rdi ## Objc cfstring ref: @"DesignCapacity"
10000b8d2:	e8 b8 02 00 00	callq	0x10000bb8f
10000b8d7:	89 05 23 f8 02 00	movl	%eax, 194595(%rip)
10000b8dd:	8b 35 f9 f7 02 00	movl	194553(%rip), %esi
10000b8e3:	48 8d 3d e6 e1 00 00	leaq	57830(%rip), %rdi ## Objc cfstring ref: @"CycleCount"
10000b8ea:	e8 a0 02 00 00	callq	0x10000bb8f
10000b8ef:	89 05 0f f8 02 00	movl	%eax, 194575(%rip)
10000b8f5:	8b 35 e1 f7 02 00	movl	194529(%rip), %esi
10000b8fb:	48 8d 3d ee e1 00 00	leaq	57838(%rip), %rdi ## Objc cfstring ref: @"ExternalConnected"
10000b902:	e8 88 02 00 00	callq	0x10000bb8f
10000b907:	85 c0	testl	%eax, %eax
10000b909:	0f 95 05 fc f7 02 00	setne	194556(%rip)
10000b910:	8a 0b	movb	(%rbx), %cl
10000b912:	84 c9	testb	%cl, %cl
10000b914:	48 8d 05 d5 26 01 00	leaq	75477(%rip), %rax
10000b91b:	0f b6 70 19	movzbl	25(%rax), %esi
10000b91f:	bf 01 00 00 00	movl	$1, %edi
10000b924:	0f 45 fe	cmovnel	%esi, %edi
10000b927:	8b 15 cb f7 02 00	movl	194507(%rip), %edx
10000b92d:	89 d0	movl	%edx, %eax
10000b92f:	44 29 f0	subl	%r14d, %eax
10000b932:	0f 44 fe	cmovel	%esi, %edi
10000b935:	40 88 3d b4 f7 02 00	movb	%dil, 194484(%rip)
10000b93c:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000b940:	74 2a	je	0x10000b96c
10000b942:	2b 15 d8 f7 02 00	subl	194520(%rip), %edx
10000b948:	0f 57 c0	xorps	%xmm0, %xmm0
10000b94b:	f2 0f 2a c2	cvtsi2sd	%edx, %xmm0
10000b94f:	f2 0f 5e 43 28	divsd	40(%rbx), %xmm0
10000b954:	89 15 ae f7 02 00	movl	%edx, 194478(%rip)
10000b95a:	f2 0f 59 05 f6 c1 00 00	mulsd	49654(%rip), %xmm0
10000b962:	f2 0f 11 05 a6 f7 02 00	movsd	%xmm0, 194470(%rip)
10000b96a:	eb 22	jmp	0x10000b98e
10000b96c:	84 c9	testb	%cl, %cl
10000b96e:	74 2e	je	0x10000b99e
10000b970:	0f 10 05 91 f7 02 00	movups	194449(%rip), %xmm0
10000b977:	0f 11 05 b2 f7 02 00	movups	%xmm0, 194482(%rip)
10000b97e:	66 0f 10 05 72 f7 02 00	movupd	194418(%rip), %xmm0
10000b986:	66 0f 11 05 92 f7 02 00	movupd	%xmm0, 194450(%rip)
10000b98e:	48 c7 05 7f f7 02 00 00 00 00 00	movq	$0, 194431(%rip)
10000b999:	5b	popq	%rbx
10000b99a:	41 5e	popq	%r14
10000b99c:	5d	popq	%rbp
10000b99d:	c3	retq
10000b99e:	0f 57 c0	xorps	%xmm0, %xmm0
10000b9a1:	f2 0f 2a c0	cvtsi2sd	%eax, %xmm0
10000b9a5:	f2 0f 5e 05 6b f7 02 00	divsd	194411(%rip), %xmm0
10000b9ad:	89 05 55 f7 02 00	movl	%eax, 194389(%rip)
10000b9b3:	eb a5	jmp	0x10000b95a
10000b9b5:	55	pushq	%rbp
10000b9b6:	48 89 e5	movq	%rsp, %rbp
10000b9b9:	41 57	pushq	%r15
10000b9bb:	41 56	pushq	%r14
10000b9bd:	41 55	pushq	%r13
10000b9bf:	41 54	pushq	%r12
10000b9c1:	53	pushq	%rbx
10000b9c2:	48 83 ec 18	subq	$24, %rsp
10000b9c6:	49 89 cd	movq	%rcx, %r13
10000b9c9:	49 89 d6	movq	%rdx, %r14
10000b9cc:	49 89 f4	movq	%rsi, %r12
10000b9cf:	41 89 ff	movl	%edi, %r15d
10000b9d2:	31 db	xorl	%ebx, %ebx
10000b9d4:	89 1e	movl	%ebx, (%rsi)
10000b9d6:	89 1a	movl	%ebx, (%rdx)
10000b9d8:	89 19	movl	%ebx, (%rcx)
10000b9da:	4c 89 45 c0	movq	%r8, -64(%rbp)
10000b9de:	41 89 18	movl	%ebx, (%r8)
10000b9e1:	48 8d 35 48 df 00 00	leaq	57160(%rip), %rsi ## Objc cfstring ref: @"KeyboardBacklightBrightness"
10000b9e8:	31 d2	xorl	%edx, %edx
10000b9ea:	31 c9	xorl	%ecx, %ecx
10000b9ec:	e8 11 48 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000b9f1:	48 85 c0	testq	%rax, %rax
10000b9f4:	0f 84 84 01 00 00	je	0x10000bb7e
10000b9fa:	be 09 00 00 00	movl	$9, %esi
10000b9ff:	48 89 45 d0	movq	%rax, -48(%rbp)
10000ba03:	48 89 c7	movq	%rax, %rdi
10000ba06:	4c 89 e2	movq	%r12, %rdx
10000ba09:	e8 7c 47 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000ba0e:	84 c0	testb	%al, %al
10000ba10:	75 08	jne	0x10000ba1a
10000ba12:	41 c7 04 24 00 00 00 00	movl	$0, (%r12)
10000ba1a:	8a 1d c8 f6 02 00	movb	194248(%rip), %bl
10000ba20:	80 fb 01	cmpb	$1, %bl
10000ba23:	0f 85 ea 00 00 00	jne	0x10000bb13
10000ba29:	48 8d 35 20 df 00 00	leaq	57120(%rip), %rsi ## Objc cfstring ref: @"KeyboardBacklightParameters"
10000ba30:	44 89 ff	movl	%r15d, %edi
10000ba33:	31 d2	xorl	%edx, %edx
10000ba35:	31 c9	xorl	%ecx, %ecx
10000ba37:	e8 c6 47 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000ba3c:	48 85 c0	testq	%rax, %rax
10000ba3f:	0f 84 ae 00 00 00	je	0x10000baf3
10000ba45:	49 89 c7	movq	%rax, %r15
10000ba48:	48 8d 35 21 df 00 00	leaq	57121(%rip), %rsi ## Objc cfstring ref: @"KeyboardBacklightOff"
10000ba4f:	48 89 c7	movq	%rax, %rdi
10000ba52:	e8 21 47 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000ba57:	48 89 c3	movq	%rax, %rbx
10000ba5a:	48 8d 35 2f df 00 00	leaq	57135(%rip), %rsi ## Objc cfstring ref: @"KeyboardBacklightMinOn"
10000ba61:	4c 89 ff	movq	%r15, %rdi
10000ba64:	e8 0f 47 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000ba69:	49 89 c4	movq	%rax, %r12
10000ba6c:	48 8d 35 3d df 00 00	leaq	57149(%rip), %rsi ## Objc cfstring ref: @"KeyboardBacklightMaxOn"
10000ba73:	4c 89 7d c8	movq	%r15, -56(%rbp)
10000ba77:	4c 89 ff	movq	%r15, %rdi
10000ba7a:	e8 f9 46 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000ba7f:	48 85 db	testq	%rbx, %rbx
10000ba82:	0f 84 94 00 00 00	je	0x10000bb1c
10000ba88:	49 89 c7	movq	%rax, %r15
10000ba8b:	be 09 00 00 00	movl	$9, %esi
10000ba90:	48 89 df	movq	%rbx, %rdi
10000ba93:	4c 89 f2	movq	%r14, %rdx
10000ba96:	e8 ef 46 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000ba9b:	84 c0	testb	%al, %al
10000ba9d:	75 07	jne	0x10000baa6
10000ba9f:	41 c7 06 00 00 00 00	movl	$0, (%r14)
10000baa6:	4d 85 e4	testq	%r12, %r12
10000baa9:	0f 84 85 00 00 00	je	0x10000bb34
10000baaf:	be 09 00 00 00	movl	$9, %esi
10000bab4:	4c 89 e7	movq	%r12, %rdi
10000bab7:	4c 89 ea	movq	%r13, %rdx
10000baba:	e8 cb 46 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000babf:	84 c0	testb	%al, %al
10000bac1:	75 08	jne	0x10000bacb
10000bac3:	41 c7 45 00 00 00 00 00	movl	$0, (%r13)
10000bacb:	4d 85 ff	testq	%r15, %r15
10000bace:	74 77	je	0x10000bb47
10000bad0:	be 09 00 00 00	movl	$9, %esi
10000bad5:	4c 89 ff	movq	%r15, %rdi
10000bad8:	4c 8b 75 c0	movq	-64(%rbp), %r14
10000badc:	4c 89 f2	movq	%r14, %rdx
10000badf:	e8 a6 46 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000bae4:	b3 01	movb	$1, %bl
10000bae6:	84 c0	testb	%al, %al
10000bae8:	75 7f	jne	0x10000bb69
10000baea:	41 c7 06 00 00 00 00	movl	$0, (%r14)
10000baf1:	eb 76	jmp	0x10000bb69
10000baf3:	48 8b 05 76 c7 00 00	movq	51062(%rip), %rax ## literal pool symbol address: ___stderrp
10000bafa:	48 8b 08	movq	(%rax), %rcx
10000bafd:	48 8d 3d 77 91 00 00	leaq	37239(%rip), %rdi ## literal pool for: "Couldn't get value KeyboardBacklightParameters\n"
10000bb04:	be 2f 00 00 00	movl	$47, %esi
10000bb09:	ba 01 00 00 00	movl	$1, %edx
10000bb0e:	e8 57 48 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000bb13:	80 f3 01	xorb	$1, %bl
10000bb16:	4c 8b 75 d0	movq	-48(%rbp), %r14
10000bb1a:	eb 5a	jmp	0x10000bb76
10000bb1c:	48 8b 05 4d c7 00 00	movq	51021(%rip), %rax ## literal pool symbol address: ___stderrp
10000bb23:	48 8b 08	movq	(%rax), %rcx
10000bb26:	48 8d 3d c1 91 00 00	leaq	37313(%rip), %rdi ## literal pool for: "Couldn't get off value from CFDictionary\n"
10000bb2d:	be 29 00 00 00	movl	$41, %esi
10000bb32:	eb 29	jmp	0x10000bb5d
10000bb34:	48 8b 05 35 c7 00 00	movq	50997(%rip), %rax ## literal pool symbol address: ___stderrp
10000bb3b:	48 8b 08	movq	(%rax), %rcx
10000bb3e:	48 8d 3d d3 91 00 00	leaq	37331(%rip), %rdi ## literal pool for: "Couldn't get min on value from CFDictionary\n"
10000bb45:	eb 11	jmp	0x10000bb58
10000bb47:	48 8b 05 22 c7 00 00	movq	50978(%rip), %rax ## literal pool symbol address: ___stderrp
10000bb4e:	48 8b 08	movq	(%rax), %rcx
10000bb51:	48 8d 3d ed 91 00 00	leaq	37357(%rip), %rdi ## literal pool for: "Couldn't get max on value from CFDictionary\n"
10000bb58:	be 2c 00 00 00	movl	$44, %esi
10000bb5d:	ba 01 00 00 00	movl	$1, %edx
10000bb62:	e8 03 48 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000bb67:	31 db	xorl	%ebx, %ebx
10000bb69:	48 8b 7d d0	movq	-48(%rbp), %rdi
10000bb6d:	4c 8b 75 c8	movq	-56(%rbp), %r14
10000bb71:	e8 1a 46 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000bb76:	4c 89 f7	movq	%r14, %rdi
10000bb79:	e8 12 46 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000bb7e:	89 d8	movl	%ebx, %eax
10000bb80:	48 83 c4 18	addq	$24, %rsp
10000bb84:	5b	popq	%rbx
10000bb85:	41 5c	popq	%r12
10000bb87:	41 5d	popq	%r13
10000bb89:	41 5e	popq	%r14
10000bb8b:	41 5f	popq	%r15
10000bb8d:	5d	popq	%rbp
10000bb8e:	c3	retq
10000bb8f:	55	pushq	%rbp
10000bb90:	48 89 e5	movq	%rsp, %rbp
10000bb93:	41 56	pushq	%r14
10000bb95:	53	pushq	%rbx
10000bb96:	48 83 ec 10	subq	$16, %rsp
10000bb9a:	89 f0	movl	%esi, %eax
10000bb9c:	49 89 fe	movq	%rdi, %r14
10000bb9f:	48 8d 75 e0	leaq	-32(%rbp), %rsi
10000bba3:	48 c7 06 00 00 00 00	movq	$0, (%rsi)
10000bbaa:	c7 45 ec 00 00 00 00	movl	$0, -20(%rbp)
10000bbb1:	31 db	xorl	%ebx, %ebx
10000bbb3:	89 c7	movl	%eax, %edi
10000bbb5:	31 d2	xorl	%edx, %edx
10000bbb7:	31 c9	xorl	%ecx, %ecx
10000bbb9:	e8 3e 46 00 00	callq	0x1000101fc ## symbol stub for: _IORegistryEntryCreateCFProperties
10000bbbe:	85 c0	testl	%eax, %eax
10000bbc0:	75 3e	jne	0x10000bc00
10000bbc2:	48 8b 7d e0	movq	-32(%rbp), %rdi
10000bbc6:	48 85 ff	testq	%rdi, %rdi
10000bbc9:	74 35	je	0x10000bc00
10000bbcb:	4c 89 f6	movq	%r14, %rsi
10000bbce:	e8 a5 45 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000bbd3:	48 85 c0	testq	%rax, %rax
10000bbd6:	74 1c	je	0x10000bbf4
10000bbd8:	48 8d 55 ec	leaq	-20(%rbp), %rdx
10000bbdc:	be 09 00 00 00	movl	$9, %esi
10000bbe1:	48 89 c7	movq	%rax, %rdi
10000bbe4:	e8 a1 45 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000bbe9:	84 c0	testb	%al, %al
10000bbeb:	75 07	jne	0x10000bbf4
10000bbed:	c7 45 ec 00 00 00 00	movl	$0, -20(%rbp)
10000bbf4:	48 8b 7d e0	movq	-32(%rbp), %rdi
10000bbf8:	e8 93 45 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000bbfd:	8b 5d ec	movl	-20(%rbp), %ebx
10000bc00:	89 d8	movl	%ebx, %eax
10000bc02:	48 83 c4 10	addq	$16, %rsp
10000bc06:	5b	popq	%rbx
10000bc07:	41 5e	popq	%r14
10000bc09:	5d	popq	%rbp
10000bc0a:	c3	retq
10000bc0b:	55	pushq	%rbp
10000bc0c:	48 89 e5	movq	%rsp, %rbp
10000bc0f:	41 56	pushq	%r14
10000bc11:	53	pushq	%rbx
10000bc12:	48 83 ec 30	subq	$48, %rsp
10000bc16:	48 89 fa	movq	%rdi, %rdx
10000bc19:	49 89 e6	movq	%rsp, %r14
10000bc1c:	48 8b 05 45 c6 00 00	movq	50757(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000bc23:	48 8b 00	movq	(%rax), %rax
10000bc26:	48 89 45 e8	movq	%rax, -24(%rbp)
10000bc2a:	48 b8 01 00 00 00 0e 00 00 00	movabsq	$60129542145, %rax
10000bc34:	48 8d 7d d0	leaq	-48(%rbp), %rdi
10000bc38:	48 89 07	movq	%rax, (%rdi)
10000bc3b:	c7 47 08 01 00 00 00	movl	$1, 8(%rdi)
10000bc42:	89 77 0c	movl	%esi, 12(%rdi)
10000bc45:	48 8d 4d c8	leaq	-56(%rbp), %rcx
10000bc49:	48 c7 01 88 02 00 00	movq	$648, (%rcx)
10000bc50:	be 04 00 00 00	movl	$4, %esi
10000bc55:	45 31 c0	xorl	%r8d, %r8d
10000bc58:	45 31 c9	xorl	%r9d, %r9d
10000bc5b:	e8 8a 48 00 00	callq	0x1000104ea ## symbol stub for: _sysctl
10000bc60:	89 c3	movl	%eax, %ebx
10000bc62:	85 c0	testl	%eax, %eax
10000bc64:	74 24	je	0x10000bc8a
10000bc66:	e8 7b 46 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000bc6b:	8b 38	movl	(%rax), %edi
10000bc6d:	e8 4e 48 00 00	callq	0x1000104c0 ## symbol stub for: _strerror
10000bc72:	48 8d 3d 49 96 00 00	leaq	38473(%rip), %rdi ## literal pool for: "%s(): Error in sysctl(): %s\n"
10000bc79:	48 8d 35 5f 96 00 00	leaq	38495(%rip), %rsi ## literal pool for: "kinfo_for_pid"
10000bc80:	48 89 c2	movq	%rax, %rdx
10000bc83:	31 c0	xorl	%eax, %eax
10000bc85:	e8 c4 47 00 00	callq	0x10001044e ## symbol stub for: _printf
10000bc8a:	4c 89 f4	movq	%r14, %rsp
10000bc8d:	48 8b 05 d4 c5 00 00	movq	50644(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000bc94:	48 8b 00	movq	(%rax), %rax
10000bc97:	48 3b 45 e8	cmpq	-24(%rbp), %rax
10000bc9b:	75 0b	jne	0x10000bca8
10000bc9d:	89 d8	movl	%ebx, %eax
10000bc9f:	48 83 c4 30	addq	$48, %rsp
10000bca3:	5b	popq	%rbx
10000bca4:	41 5e	popq	%r14
10000bca6:	5d	popq	%rbp
10000bca7:	c3	retq
10000bca8:	e8 4b 46 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000bcad:	55	pushq	%rbp
10000bcae:	48 89 e5	movq	%rsp, %rbp
10000bcb1:	48 8b 07	movq	(%rdi), %rax
10000bcb4:	48 2b 06	subq	(%rsi), %rax
10000bcb7:	48 69 c8 00 ca 9a 3b	imulq	$1000000000, %rax, %rcx
10000bcbe:	48 63 47 08	movslq	8(%rdi), %rax
10000bcc2:	48 63 56 08	movslq	8(%rsi), %rdx
10000bcc6:	48 29 d0	subq	%rdx, %rax
10000bcc9:	48 69 c0 e8 03 00 00	imulq	$1000, %rax, %rax
10000bcd0:	48 01 c8	addq	%rcx, %rax
10000bcd3:	79 20	jns	0x10000bcf5
10000bcd5:	48 8b 0d 94 c5 00 00	movq	50580(%rip), %rcx ## literal pool symbol address: ___stderrp
10000bcdc:	48 8b 39	movq	(%rcx), %rdi
10000bcdf:	48 f7 d8	negq	%rax
10000bce2:	48 8d 35 04 96 00 00	leaq	38404(%rip), %rsi ## literal pool for: "warning: time went backwards by %lld ns\n"
10000bce9:	48 89 c2	movq	%rax, %rdx
10000bcec:	31 c0	xorl	%eax, %eax
10000bcee:	e8 5f 46 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000bcf3:	31 c0	xorl	%eax, %eax
10000bcf5:	5d	popq	%rbp
10000bcf6:	c3	retq
10000bcf7:	55	pushq	%rbp
10000bcf8:	48 89 e5	movq	%rsp, %rbp
10000bcfb:	66 48 0f 6e c7	movq	%rdi, %xmm0
10000bd00:	66 0f 6f 0d f8 a9 00 00	movdqa	43512(%rip), %xmm1
10000bd08:	66 0f 62 c1	punpckldq	%xmm1, %xmm0
10000bd0c:	66 0f 28 15 fc a9 00 00	movapd	43516(%rip), %xmm2
10000bd14:	66 0f 5c c2	subpd	%xmm2, %xmm0
10000bd18:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000bd1c:	f2 0f 59 05 fc a9 00 00	mulsd	43516(%rip), %xmm0
10000bd24:	48 8d 05 6d 22 01 00	leaq	74349(%rip), %rax
10000bd2b:	f3 0f 7e 58 10	movq	16(%rax), %xmm3
10000bd30:	66 0f 62 d9	punpckldq	%xmm1, %xmm3
10000bd34:	66 0f 5c da	subpd	%xmm2, %xmm3
10000bd38:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000bd3c:	f2 0f 5e c3	divsd	%xmm3, %xmm0
10000bd40:	f2 48 0f 2c c8	cvttsd2si	%xmm0, %rcx
10000bd45:	48 89 ca	movq	%rcx, %rdx
10000bd48:	48 c1 fa 3f	sarq	$63, %rdx
10000bd4c:	f2 0f 5c 05 fc a9 00 00	subsd	43516(%rip), %xmm0
10000bd54:	f2 48 0f 2c c0	cvttsd2si	%xmm0, %rax
10000bd59:	48 21 d0	andq	%rdx, %rax
10000bd5c:	48 09 c8	orq	%rcx, %rax
10000bd5f:	5d	popq	%rbp
10000bd60:	c3	retq
10000bd61:	55	pushq	%rbp
10000bd62:	48 89 e5	movq	%rsp, %rbp
10000bd65:	53	pushq	%rbx
10000bd66:	50	pushq	%rax
10000bd67:	48 8d 3d 12 be 00 00	leaq	48658(%rip), %rdi
10000bd6e:	48 8d 15 f3 22 01 00	leaq	74483(%rip), %rdx
10000bd75:	48 8d 5d f4	leaq	-12(%rbp), %rbx
10000bd79:	48 89 de	movq	%rbx, %rsi
10000bd7c:	31 c9	xorl	%ecx, %ecx
10000bd7e:	45 31 c0	xorl	%r8d, %r8d
10000bd81:	e8 6a 47 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000bd86:	85 c0	testl	%eax, %eax
10000bd88:	0f 94 c1	sete	%cl
10000bd8b:	83 3b 00	cmpl	$0, (%rbx)
10000bd8e:	0f 95 c0	setne	%al
10000bd91:	20 c8	andb	%cl, %al
10000bd93:	48 83 c4 08	addq	$8, %rsp
10000bd97:	5b	popq	%rbx
10000bd98:	5d	popq	%rbp
10000bd99:	c3	retq
10000bd9a:	55	pushq	%rbp
10000bd9b:	48 89 e5	movq	%rsp, %rbp
10000bd9e:	41 57	pushq	%r15
10000bda0:	41 56	pushq	%r14
10000bda2:	41 54	pushq	%r12
10000bda4:	53	pushq	%rbx
10000bda5:	48 83 ec 10	subq	$16, %rsp
10000bda9:	49 89 f6	movq	%rsi, %r14
10000bdac:	48 89 fb	movq	%rdi, %rbx
10000bdaf:	4c 8d 65 d8	leaq	-40(%rbp), %r12
10000bdb3:	49 c7 04 24 00 00 00 00	movq	$0, (%r12)
10000bdbb:	45 31 ff	xorl	%r15d, %r15d
10000bdbe:	4c 89 e6	movq	%r12, %rsi
10000bdc1:	31 d2	xorl	%edx, %edx
10000bdc3:	e8 1c 47 00 00	callq	0x1000104e4 ## symbol stub for: _strtoll
10000bdc8:	49 8b 0c 24	movq	(%r12), %rcx
10000bdcc:	48 39 d9	cmpq	%rbx, %rcx
10000bdcf:	74 15	je	0x10000bde6
10000bdd1:	80 39 00	cmpb	$0, (%rcx)
10000bdd4:	74 05	je	0x10000bddb
10000bdd6:	45 31 ff	xorl	%r15d, %r15d
10000bdd9:	eb 0b	jmp	0x10000bde6
10000bddb:	41 b7 01	movb	$1, %r15b
10000bdde:	4d 85 f6	testq	%r14, %r14
10000bde1:	74 03	je	0x10000bde6
10000bde3:	49 89 06	movq	%rax, (%r14)
10000bde6:	44 89 f8	movl	%r15d, %eax
10000bde9:	48 83 c4 10	addq	$16, %rsp
10000bded:	5b	popq	%rbx
10000bdee:	41 5c	popq	%r12
10000bdf0:	41 5e	popq	%r14
10000bdf2:	41 5f	popq	%r15
10000bdf4:	5d	popq	%rbp
10000bdf5:	c3	retq
10000bdf6:	55	pushq	%rbp
10000bdf7:	48 89 e5	movq	%rsp, %rbp
10000bdfa:	41 57	pushq	%r15
10000bdfc:	41 56	pushq	%r14
10000bdfe:	41 55	pushq	%r13
10000be00:	41 54	pushq	%r12
10000be02:	53	pushq	%rbx
10000be03:	48 83 ec 38	subq	$56, %rsp
10000be07:	48 89 f3	movq	%rsi, %rbx
10000be0a:	48 89 7d d0	movq	%rdi, -48(%rbp)
10000be0e:	48 89 55 b8	movq	%rdx, -72(%rbp)
10000be12:	48 89 75 b0	movq	%rsi, -80(%rbp)
10000be16:	48 89 55 c0	movq	%rdx, -64(%rbp)
10000be1a:	48 8d 35 72 bd 00 00	leaq	48498(%rip), %rsi
10000be21:	49 89 ff	movq	%rdi, %r15
10000be24:	e8 91 46 00 00	callq	0x1000104ba ## symbol stub for: _strcspn
10000be29:	4c 89 fe	movq	%r15, %rsi
10000be2c:	49 89 c6	movq	%rax, %r14
10000be2f:	45 0f be 24 07	movsbl	(%r15,%rax), %r12d
10000be34:	41 83 fc 26	cmpl	$38, %r12d
10000be38:	7f 24	jg	0x10000be5e
10000be3a:	45 85 e4	testl	%r12d, %r12d
10000be3d:	74 44	je	0x10000be83
10000be3f:	41 83 fc 22	cmpl	$34, %r12d
10000be43:	74 55	je	0x10000be9a
10000be45:	41 83 fc 26	cmpl	$38, %r12d
10000be49:	0f 85 c6 00 00 00	jne	0x10000bf15
10000be4f:	41 bd 05 00 00 00	movl	$5, %r13d
10000be55:	4c 8d 3d 55 bd 00 00	leaq	48469(%rip), %r15
10000be5c:	eb 61	jmp	0x10000bebf
10000be5e:	41 83 fc 27	cmpl	$39, %r12d
10000be62:	74 45	je	0x10000bea9
10000be64:	41 bd 04 00 00 00	movl	$4, %r13d
10000be6a:	41 83 fc 3c	cmpl	$60, %r12d
10000be6e:	74 48	je	0x10000beb8
10000be70:	41 83 fc 3e	cmpl	$62, %r12d
10000be74:	0f 85 9b 00 00 00	jne	0x10000bf15
10000be7a:	4c 8d 3d 1d bd 00 00	leaq	48413(%rip), %r15
10000be81:	eb 3c	jmp	0x10000bebf
10000be83:	41 bf 00 00 00 00	movl	$0, %r15d
10000be89:	41 bd 00 00 00 00	movl	$0, %r13d
10000be8f:	48 3b 75 d0	cmpq	-48(%rbp), %rsi
10000be93:	75 2a	jne	0x10000bebf
10000be95:	e9 97 00 00 00	jmp	0x10000bf31
10000be9a:	41 bd 06 00 00 00	movl	$6, %r13d
10000bea0:	4c 8d 3d 03 bd 00 00	leaq	48387(%rip), %r15
10000bea7:	eb 16	jmp	0x10000bebf
10000bea9:	41 bd 06 00 00 00	movl	$6, %r13d
10000beaf:	4c 8d 3d ed bc 00 00	leaq	48365(%rip), %r15
10000beb6:	eb 07	jmp	0x10000bebf
10000beb8:	4c 8d 3d da bc 00 00	leaq	48346(%rip), %r15
10000bebf:	4b 8d 04 2e	leaq	(%r14,%r13), %rax
10000bec3:	48 ff c0	incq	%rax
10000bec6:	48 39 45 c0	cmpq	%rax, -64(%rbp)
10000beca:	72 6b	jb	0x10000bf37
10000becc:	44 89 65 cc	movl	%r12d, -52(%rbp)
10000bed0:	4e 8d 24 36	leaq	(%rsi,%r14), %r12
10000bed4:	4b 8d 04 2e	leaq	(%r14,%r13), %rax
10000bed8:	48 89 45 a8	movq	%rax, -88(%rbp)
10000bedc:	48 89 df	movq	%rbx, %rdi
10000bedf:	4c 89 f2	movq	%r14, %rdx
10000bee2:	e8 e9 44 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000bee7:	4c 01 f3	addq	%r14, %rbx
10000beea:	48 89 df	movq	%rbx, %rdi
10000beed:	4c 89 fe	movq	%r15, %rsi
10000bef0:	4c 89 ea	movq	%r13, %rdx
10000bef3:	e8 d8 44 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000bef8:	48 8b 55 c0	movq	-64(%rbp), %rdx
10000befc:	49 ff c4	incq	%r12
10000beff:	4c 01 eb	addq	%r13, %rbx
10000bf02:	48 2b 55 a8	subq	-88(%rbp), %rdx
10000bf06:	4c 89 e7	movq	%r12, %rdi
10000bf09:	80 7d cc 00	cmpb	$0, -52(%rbp)
10000bf0d:	0f 85 03 ff ff ff	jne	0x10000be16
10000bf13:	eb 38	jmp	0x10000bf4d
10000bf15:	48 8d 3d fa 93 00 00	leaq	37882(%rip), %rdi ## literal pool for: "encountered unknown XML special character: %c"
10000bf1c:	44 89 e6	movl	%r12d, %esi
10000bf1f:	31 c0	xorl	%eax, %eax
10000bf21:	e8 e8 45 00 00	callq	0x10001050e ## symbol stub for: _warnx
10000bf26:	4c 89 fe	movq	%r15, %rsi
10000bf29:	45 31 ff	xorl	%r15d, %r15d
10000bf2c:	45 31 ed	xorl	%r13d, %r13d
10000bf2f:	eb 8e	jmp	0x10000bebf
10000bf31:	48 8b 45 d0	movq	-48(%rbp), %rax
10000bf35:	eb 1d	jmp	0x10000bf54
10000bf37:	48 8d 3d 06 94 00 00	leaq	37894(%rip), %rdi ## literal pool for: "buffer size (%llu) insufficient for escaping string: %s"
10000bf3e:	48 8b 75 b8	movq	-72(%rbp), %rsi
10000bf42:	48 8b 55 d0	movq	-48(%rbp), %rdx
10000bf46:	31 c0	xorl	%eax, %eax
10000bf48:	e8 c1 45 00 00	callq	0x10001050e ## symbol stub for: _warnx
10000bf4d:	c6 03 00	movb	$0, (%rbx)
10000bf50:	48 8b 45 b0	movq	-80(%rbp), %rax
10000bf54:	48 83 c4 38	addq	$56, %rsp
10000bf58:	5b	popq	%rbx
10000bf59:	41 5c	popq	%r12
10000bf5b:	41 5d	popq	%r13
10000bf5d:	41 5e	popq	%r14
10000bf5f:	41 5f	popq	%r15
10000bf61:	5d	popq	%rbp
10000bf62:	c3	retq
10000bf63:	55	pushq	%rbp
10000bf64:	48 89 e5	movq	%rsp, %rbp
10000bf67:	53	pushq	%rbx
10000bf68:	50	pushq	%rax
10000bf69:	48 89 fb	movq	%rdi, %rbx
10000bf6c:	66 0f 57 c9	xorpd	%xmm1, %xmm1
10000bf70:	48 89 f0	movq	%rsi, %rax
10000bf73:	48 09 d0	orq	%rdx, %rax
10000bf76:	66 0f 57 d2	xorpd	%xmm2, %xmm2
10000bf7a:	74 36	je	0x10000bfb2
10000bf7c:	66 48 0f 6e d6	movq	%rsi, %xmm2
10000bf81:	66 0f 6f 05 77 a7 00 00	movdqa	42871(%rip), %xmm0
10000bf89:	66 0f 62 d0	punpckldq	%xmm0, %xmm2
10000bf8d:	66 0f 28 1d 7b a7 00 00	movapd	42875(%rip), %xmm3
10000bf95:	66 0f 5c d3	subpd	%xmm3, %xmm2
10000bf99:	66 0f 7c d2	haddpd	%xmm2, %xmm2
10000bf9d:	66 48 0f 6e e2	movq	%rdx, %xmm4
10000bfa2:	66 0f 62 e0	punpckldq	%xmm0, %xmm4
10000bfa6:	66 0f 5c e3	subpd	%xmm3, %xmm4
10000bfaa:	66 0f 7c e4	haddpd	%xmm4, %xmm4
10000bfae:	f2 0f 5e d4	divsd	%xmm4, %xmm2
10000bfb2:	f2 0f 10 05 a6 bb 00 00	movsd	48038(%rip), %xmm0
10000bfba:	f2 0f 5d c2	minsd	%xmm2, %xmm0
10000bfbe:	66 0f 2e c1	ucomisd	%xmm1, %xmm0
10000bfc2:	75 0b	jne	0x10000bfcf
10000bfc4:	7a 09	jp	0x10000bfcf
10000bfc6:	48 8d 15 af 93 00 00	leaq	37807(%rip), %rdx ## literal pool for: "%3.0f"
10000bfcd:	eb 34	jmp	0x10000c003
10000bfcf:	f2 0f 10 0d 91 bb 00 00	movsd	48017(%rip), %xmm1
10000bfd7:	66 0f 2e c8	ucomisd	%xmm0, %xmm1
10000bfdb:	76 11	jbe	0x10000bfee
10000bfdd:	f2 0f 59 05 43 a7 00 00	mulsd	42819(%rip), %xmm0
10000bfe5:	48 8d 15 96 93 00 00	leaq	37782(%rip), %rdx ## literal pool for: ".%02.0f"
10000bfec:	eb 15	jmp	0x10000c003
10000bfee:	f2 0f 10 0d 7a bb 00 00	movsd	47994(%rip), %xmm1
10000bff6:	66 0f 2e c8	ucomisd	%xmm0, %xmm1
10000bffa:	76 ca	jbe	0x10000bfc6
10000bffc:	48 8d 15 87 93 00 00	leaq	37767(%rip), %rdx ## literal pool for: "%3.1f"
10000c003:	be 04 00 00 00	movl	$4, %esi
10000c008:	48 89 df	movq	%rbx, %rdi
10000c00b:	b0 01	movb	$1, %al
10000c00d:	e8 84 44 00 00	callq	0x100010496 ## symbol stub for: _snprintf
10000c012:	48 89 d8	movq	%rbx, %rax
10000c015:	48 83 c4 08	addq	$8, %rsp
10000c019:	5b	popq	%rbx
10000c01a:	5d	popq	%rbp
10000c01b:	c3	retq
10000c01c:	55	pushq	%rbp
10000c01d:	48 89 e5	movq	%rsp, %rbp
10000c020:	41 57	pushq	%r15
10000c022:	41 56	pushq	%r14
10000c024:	53	pushq	%rbx
10000c025:	50	pushq	%rax
10000c026:	49 89 ce	movq	%rcx, %r14
10000c029:	49 89 d7	movq	%rdx, %r15
10000c02c:	31 d2	xorl	%edx, %edx
10000c02e:	31 c9	xorl	%ecx, %ecx
10000c030:	e8 1b 42 00 00	callq	0x100010250 ## symbol stub for: _IOReportCopyChannelsInGroup
10000c035:	48 89 c3	movq	%rax, %rbx
10000c038:	48 85 c0	testq	%rax, %rax
10000c03b:	74 1f	je	0x10000c05c
10000c03d:	31 ff	xorl	%edi, %edi
10000c03f:	48 89 de	movq	%rbx, %rsi
10000c042:	4c 89 f2	movq	%r14, %rdx
10000c045:	31 c9	xorl	%ecx, %ecx
10000c047:	45 31 c0	xorl	%r8d, %r8d
10000c04a:	e8 19 42 00 00	callq	0x100010268 ## symbol stub for: _IOReportCreateSubscription
10000c04f:	49 89 07	movq	%rax, (%r15)
10000c052:	41 b7 01	movb	$1, %r15b
10000c055:	48 85 c0	testq	%rax, %rax
10000c058:	75 32	jne	0x10000c08c
10000c05a:	eb 14	jmp	0x10000c070
10000c05c:	49 8b 3f	movq	(%r15), %rdi
10000c05f:	48 85 ff	testq	%rdi, %rdi
10000c062:	74 0c	je	0x10000c070
10000c064:	e8 27 41 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c069:	49 c7 07 00 00 00 00	movq	$0, (%r15)
10000c070:	49 8b 3e	movq	(%r14), %rdi
10000c073:	48 85 ff	testq	%rdi, %rdi
10000c076:	74 0c	je	0x10000c084
10000c078:	e8 13 41 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c07d:	49 c7 06 00 00 00 00	movq	$0, (%r14)
10000c084:	45 31 ff	xorl	%r15d, %r15d
10000c087:	48 85 db	testq	%rbx, %rbx
10000c08a:	74 08	je	0x10000c094
10000c08c:	48 89 df	movq	%rbx, %rdi
10000c08f:	e8 fc 40 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c094:	44 89 f8	movl	%r15d, %eax
10000c097:	48 83 c4 08	addq	$8, %rsp
10000c09b:	5b	popq	%rbx
10000c09c:	41 5e	popq	%r14
10000c09e:	41 5f	popq	%r15
10000c0a0:	5d	popq	%rbp
10000c0a1:	c3	retq
10000c0a2:	55	pushq	%rbp
10000c0a3:	48 89 e5	movq	%rsp, %rbp
10000c0a6:	41 57	pushq	%r15
10000c0a8:	41 56	pushq	%r14
10000c0aa:	41 55	pushq	%r13
10000c0ac:	41 54	pushq	%r12
10000c0ae:	53	pushq	%rbx
10000c0af:	50	pushq	%rax
10000c0b0:	4d 89 cd	movq	%r9, %r13
10000c0b3:	4d 89 c6	movq	%r8, %r14
10000c0b6:	48 89 4d d0	movq	%rcx, -48(%rbp)
10000c0ba:	49 89 d7	movq	%rdx, %r15
10000c0bd:	48 89 f3	movq	%rsi, %rbx
10000c0c0:	49 89 fc	movq	%rdi, %r12
10000c0c3:	48 8b 3a	movq	(%rdx), %rdi
10000c0c6:	48 85 ff	testq	%rdi, %rdi
10000c0c9:	74 0c	je	0x10000c0d7
10000c0cb:	e8 c0 40 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c0d0:	49 c7 07 00 00 00 00	movq	$0, (%r15)
10000c0d7:	48 8d 05 ba 1e 01 00	leaq	73402(%rip), %rax
10000c0de:	80 78 02 00	cmpb	$0, 2(%rax)
10000c0e2:	4c 89 e0	movq	%r12, %rax
10000c0e5:	48 0f 44 c3	cmoveq	%rbx, %rax
10000c0e9:	48 8b 00	movq	(%rax), %rax
10000c0ec:	49 89 07	movq	%rax, (%r15)
10000c0ef:	4c 89 f7	movq	%r14, %rdi
10000c0f2:	4c 89 ee	movq	%r13, %rsi
10000c0f5:	31 d2	xorl	%edx, %edx
10000c0f7:	e8 60 41 00 00	callq	0x10001025c ## symbol stub for: _IOReportCreateSamples
10000c0fc:	48 89 03	movq	%rax, (%rbx)
10000c0ff:	48 85 c0	testq	%rax, %rax
10000c102:	74 68	je	0x10000c16c
10000c104:	4c 8b 75 d0	movq	-48(%rbp), %r14
10000c108:	49 8b 3e	movq	(%r14), %rdi
10000c10b:	48 85 ff	testq	%rdi, %rdi
10000c10e:	74 0c	je	0x10000c11c
10000c110:	e8 7b 40 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c115:	49 c7 06 00 00 00 00	movq	$0, (%r14)
10000c11c:	48 8d 05 75 1e 01 00	leaq	73333(%rip), %rax
10000c123:	80 38 00	cmpb	$0, (%rax)
10000c126:	74 1b	je	0x10000c143
10000c128:	48 8b 03	movq	(%rbx), %rax
10000c12b:	49 89 04 24	movq	%rax, (%r12)
10000c12f:	48 8b 3b	movq	(%rbx), %rdi
10000c132:	49 89 3e	movq	%rdi, (%r14)
10000c135:	e8 5c 40 00 00	callq	0x100010196 ## symbol stub for: _CFRetain
10000c13a:	49 8b 3c 24	movq	(%r12), %rdi
10000c13e:	e8 53 40 00 00	callq	0x100010196 ## symbol stub for: _CFRetain
10000c143:	49 8b 3f	movq	(%r15), %rdi
10000c146:	48 85 ff	testq	%rdi, %rdi
10000c149:	74 12	je	0x10000c15d
10000c14b:	48 8b 33	movq	(%rbx), %rsi
10000c14e:	48 85 f6	testq	%rsi, %rsi
10000c151:	74 0a	je	0x10000c15d
10000c153:	31 d2	xorl	%edx, %edx
10000c155:	e8 08 41 00 00	callq	0x100010262 ## symbol stub for: _IOReportCreateSamplesDelta
10000c15a:	49 89 06	movq	%rax, (%r14)
10000c15d:	48 83 c4 08	addq	$8, %rsp
10000c161:	5b	popq	%rbx
10000c162:	41 5c	popq	%r12
10000c164:	41 5d	popq	%r13
10000c166:	41 5e	popq	%r14
10000c168:	41 5f	popq	%r15
10000c16a:	5d	popq	%rbp
10000c16b:	c3	retq
10000c16c:	e8 bf 3d 00 00	callq	0x10000ff30
10000c171:	55	pushq	%rbp
10000c172:	48 89 e5	movq	%rsp, %rbp
10000c175:	41 57	pushq	%r15
10000c177:	41 56	pushq	%r14
10000c179:	53	pushq	%rbx
10000c17a:	50	pushq	%rax
10000c17b:	49 89 cf	movq	%rcx, %r15
10000c17e:	49 89 d6	movq	%rdx, %r14
10000c181:	48 8b 05 d8 c1 00 00	movq	49624(%rip), %rax ## literal pool symbol address: _kCFAllocatorDefault
10000c188:	48 8b 10	movq	(%rax), %rdx
10000c18b:	31 c9	xorl	%ecx, %ecx
10000c18d:	e8 70 40 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000c192:	48 89 c3	movq	%rax, %rbx
10000c195:	48 85 c0	testq	%rax, %rax
10000c198:	74 30	je	0x10000c1ca
10000c19a:	48 89 df	movq	%rbx, %rdi
10000c19d:	e8 c4 3f 00 00	callq	0x100010166 ## symbol stub for: _CFDataGetLength
10000c1a2:	4c 39 f8	cmpq	%r15, %rax
10000c1a5:	77 0b	ja	0x10000c1b2
10000c1a7:	48 89 df	movq	%rbx, %rdi
10000c1aa:	e8 b7 3f 00 00	callq	0x100010166 ## symbol stub for: _CFDataGetLength
10000c1af:	49 89 c7	movq	%rax, %r15
10000c1b2:	48 89 df	movq	%rbx, %rdi
10000c1b5:	31 f6	xorl	%esi, %esi
10000c1b7:	4c 89 fa	movq	%r15, %rdx
10000c1ba:	4c 89 f1	movq	%r14, %rcx
10000c1bd:	e8 9e 3f 00 00	callq	0x100010160 ## symbol stub for: _CFDataGetBytes
10000c1c2:	48 89 df	movq	%rbx, %rdi
10000c1c5:	e8 c6 3f 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c1ca:	48 85 db	testq	%rbx, %rbx
10000c1cd:	0f 95 c0	setne	%al
10000c1d0:	48 83 c4 08	addq	$8, %rsp
10000c1d4:	5b	popq	%rbx
10000c1d5:	41 5e	popq	%r14
10000c1d7:	41 5f	popq	%r15
10000c1d9:	5d	popq	%rbp
10000c1da:	c3	retq
10000c1db:	55	pushq	%rbp
10000c1dc:	48 89 e5	movq	%rsp, %rbp
10000c1df:	53	pushq	%rbx
10000c1e0:	48 81 ec 88 00 00 00	subq	$136, %rsp
10000c1e7:	48 8b 05 7a c0 00 00	movq	49274(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c1ee:	48 8b 00	movq	(%rax), %rax
10000c1f1:	48 89 45 f0	movq	%rax, -16(%rbp)
10000c1f5:	48 8d 15 be 91 00 00	leaq	37310(%rip), %rdx ## literal pool for: "%s%s"
10000c1fc:	48 8d 0d bc 91 00 00	leaq	37308(%rip), %rcx ## literal pool for: "IODeviceTree"
10000c203:	4c 8d 05 c2 91 00 00	leaq	37314(%rip), %r8 ## literal pool for: ":/arm-io/pmgr"
10000c20a:	48 8d 9d 70 ff ff ff	leaq	-144(%rbp), %rbx
10000c211:	be 80 00 00 00	movl	$128, %esi
10000c216:	48 89 df	movq	%rbx, %rdi
10000c219:	31 c0	xorl	%eax, %eax
10000c21b:	e8 76 42 00 00	callq	0x100010496 ## symbol stub for: _snprintf
10000c220:	48 8b 05 49 c1 00 00	movq	49481(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
10000c227:	8b 38	movl	(%rax), %edi
10000c229:	48 89 de	movq	%rbx, %rsi
10000c22c:	e8 d7 3f 00 00	callq	0x100010208 ## symbol stub for: _IORegistryEntryFromPath
10000c231:	89 c3	movl	%eax, %ebx
10000c233:	85 c0	testl	%eax, %eax
10000c235:	75 1f	jne	0x10000c256
10000c237:	48 8b 05 32 c0 00 00	movq	49202(%rip), %rax ## literal pool symbol address: ___stderrp
10000c23e:	48 8b 38	movq	(%rax), %rdi
10000c241:	48 8d 35 92 91 00 00	leaq	37266(%rip), %rsi ## literal pool for: "ERROR: cannot find the IO registry entry for %s\n"
10000c248:	48 8d 95 70 ff ff ff	leaq	-144(%rbp), %rdx
10000c24f:	31 c0	xorl	%eax, %eax
10000c251:	e8 fc 40 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000c256:	48 8b 05 0b c0 00 00	movq	49163(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000c25d:	48 8b 00	movq	(%rax), %rax
10000c260:	48 3b 45 f0	cmpq	-16(%rbp), %rax
10000c264:	75 0c	jne	0x10000c272
10000c266:	89 d8	movl	%ebx, %eax
10000c268:	48 81 c4 88 00 00 00	addq	$136, %rsp
10000c26f:	5b	popq	%rbx
10000c270:	5d	popq	%rbp
10000c271:	c3	retq
10000c272:	e8 81 40 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000c277:	55	pushq	%rbp
10000c278:	48 89 e5	movq	%rsp, %rbp
10000c27b:	41 57	pushq	%r15
10000c27d:	41 56	pushq	%r14
10000c27f:	41 55	pushq	%r13
10000c281:	41 54	pushq	%r12
10000c283:	53	pushq	%rbx
10000c284:	50	pushq	%rax
10000c285:	41 89 ce	movl	%ecx, %r14d
10000c288:	89 d0	movl	%edx, %eax
10000c28a:	49 89 ff	movq	%rdi, %r15
10000c28d:	48 8b 0d cc c0 00 00	movq	49356(%rip), %rcx ## literal pool symbol address: _kCFAllocatorDefault
10000c294:	48 8b 11	movq	(%rcx), %rdx
10000c297:	31 db	xorl	%ebx, %ebx
10000c299:	89 c7	movl	%eax, %edi
10000c29b:	31 c9	xorl	%ecx, %ecx
10000c29d:	e8 60 3f 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000c2a2:	48 85 c0	testq	%rax, %rax
10000c2a5:	0f 84 83 00 00 00	je	0x10000c32e
10000c2ab:	49 89 c4	movq	%rax, %r12
10000c2ae:	48 89 c7	movq	%rax, %rdi
10000c2b1:	e8 b0 3e 00 00	callq	0x100010166 ## symbol stub for: _CFDataGetLength
10000c2b6:	49 89 c5	movq	%rax, %r13
10000c2b9:	31 db	xorl	%ebx, %ebx
10000c2bb:	41 83 fd 08	cmpl	$8, %r13d
10000c2bf:	72 65	jb	0x10000c326
10000c2c1:	4c 89 ef	movq	%r13, %rdi
10000c2c4:	41 c1 ed 03	shrl	$3, %r13d
10000c2c8:	83 e7 f8	andl	$-8, %edi
10000c2cb:	e8 f4 40 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000c2d0:	49 89 07	movq	%rax, (%r15)
10000c2d3:	31 db	xorl	%ebx, %ebx
10000c2d5:	4c 89 e7	movq	%r12, %rdi
10000c2d8:	e8 7d 3e 00 00	callq	0x10001015a ## symbol stub for: _CFDataGetBytePtr
10000c2dd:	8b 04 d8	movl	(%rax,%rbx,8), %eax
10000c2e0:	45 84 f6	testb	%r14b, %r14b
10000c2e3:	74 18	je	0x10000c2fd
10000c2e5:	85 c0	testl	%eax, %eax
10000c2e7:	74 3d	je	0x10000c326
10000c2e9:	89 c0	movl	%eax, %eax
10000c2eb:	0f 57 c9	xorps	%xmm1, %xmm1
10000c2ee:	f2 48 0f 2a c8	cvtsi2sd	%rax, %xmm1
10000c2f3:	f2 0f 10 05 7d b8 00 00	movsd	47229(%rip), %xmm0
10000c2fb:	eb 12	jmp	0x10000c30f
10000c2fd:	89 c0	movl	%eax, %eax
10000c2ff:	0f 57 c0	xorps	%xmm0, %xmm0
10000c302:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
10000c307:	f2 0f 10 0d a1 b7 00 00	movsd	47009(%rip), %xmm1
10000c30f:	f2 0f 5e c1	divsd	%xmm1, %xmm0
10000c313:	49 8b 07	movq	(%r15), %rax
10000c316:	f2 0f 11 04 d8	movsd	%xmm0, (%rax,%rbx,8)
10000c31b:	48 ff c3	incq	%rbx
10000c31e:	49 39 dd	cmpq	%rbx, %r13
10000c321:	75 b2	jne	0x10000c2d5
10000c323:	44 89 eb	movl	%r13d, %ebx
10000c326:	4c 89 e7	movq	%r12, %rdi
10000c329:	e8 62 3e 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000c32e:	89 d8	movl	%ebx, %eax
10000c330:	48 83 c4 08	addq	$8, %rsp
10000c334:	5b	popq	%rbx
10000c335:	41 5c	popq	%r12
10000c337:	41 5d	popq	%r13
10000c339:	41 5e	popq	%r14
10000c33b:	41 5f	popq	%r15
10000c33d:	5d	popq	%rbp
10000c33e:	c3	retq
10000c33f:	55	pushq	%rbp
10000c340:	48 89 e5	movq	%rsp, %rbp
10000c343:	85 d2	testl	%edx, %edx
10000c345:	74 68	je	0x10000c3af
10000c347:	41 89 d0	movl	%edx, %r8d
10000c34a:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000c34e:	31 c9	xorl	%ecx, %ecx
10000c350:	66 0f 6f 0d a8 a3 00 00	movdqa	41896(%rip), %xmm1
10000c358:	66 0f 28 15 b0 a3 00 00	movapd	41904(%rip), %xmm2
10000c360:	31 d2	xorl	%edx, %edx
10000c362:	48 8b 04 cf	movq	(%rdi,%rcx,8), %rax
10000c366:	66 48 0f 6e d8	movq	%rax, %xmm3
10000c36b:	66 0f 62 d9	punpckldq	%xmm1, %xmm3
10000c36f:	66 0f 5c da	subpd	%xmm2, %xmm3
10000c373:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000c377:	f2 0f 59 1c ce	mulsd	(%rsi,%rcx,8), %xmm3
10000c37c:	f2 0f 58 c3	addsd	%xmm3, %xmm0
10000c380:	48 01 c2	addq	%rax, %rdx
10000c383:	48 ff c1	incq	%rcx
10000c386:	49 39 c8	cmpq	%rcx, %r8
10000c389:	75 d7	jne	0x10000c362
10000c38b:	48 85 d2	testq	%rdx, %rdx
10000c38e:	74 1f	je	0x10000c3af
10000c390:	66 48 0f 6e ca	movq	%rdx, %xmm1
10000c395:	66 0f 62 0d 63 a3 00 00	punpckldq	41827(%rip), %xmm1
10000c39d:	66 0f 5c 0d 6b a3 00 00	subpd	41835(%rip), %xmm1
10000c3a5:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000c3a9:	f2 0f 5e c1	divsd	%xmm1, %xmm0
10000c3ad:	eb 04	jmp	0x10000c3b3
10000c3af:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000c3b3:	5d	popq	%rbp
10000c3b4:	c3	retq
10000c3b5:	55	pushq	%rbp
10000c3b6:	48 89 e5	movq	%rsp, %rbp
10000c3b9:	53	pushq	%rbx
10000c3ba:	50	pushq	%rax
10000c3bb:	48 89 fb	movq	%rdi, %rbx
10000c3be:	0f 57 c0	xorps	%xmm0, %xmm0
10000c3c1:	0f 11 07	movups	%xmm0, (%rdi)
10000c3c4:	48 8d 3c f5 00 00 00 00	leaq	(,%rsi,8), %rdi
10000c3cc:	e8 f3 3f 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000c3d1:	48 89 03	movq	%rax, (%rbx)
10000c3d4:	c7 43 08 08 00 00 00	movl	$8, 8(%rbx)
10000c3db:	48 83 c4 08	addq	$8, %rsp
10000c3df:	5b	popq	%rbx
10000c3e0:	5d	popq	%rbp
10000c3e1:	c3	retq
10000c3e2:	55	pushq	%rbp
10000c3e3:	48 89 e5	movq	%rsp, %rbp
10000c3e6:	53	pushq	%rbx
10000c3e7:	50	pushq	%rax
10000c3e8:	48 89 fb	movq	%rdi, %rbx
10000c3eb:	48 8b 3f	movq	(%rdi), %rdi
10000c3ee:	e8 71 3f 00 00	callq	0x100010364 ## symbol stub for: _free
10000c3f3:	0f 57 c0	xorps	%xmm0, %xmm0
10000c3f6:	0f 11 03	movups	%xmm0, (%rbx)
10000c3f9:	48 83 c4 08	addq	$8, %rsp
10000c3fd:	5b	popq	%rbx
10000c3fe:	5d	popq	%rbp
10000c3ff:	c3	retq
10000c400:	55	pushq	%rbp
10000c401:	48 89 e5	movq	%rsp, %rbp
10000c404:	41 57	pushq	%r15
10000c406:	41 56	pushq	%r14
10000c408:	53	pushq	%rbx
10000c409:	50	pushq	%rax
10000c40a:	49 89 f7	movq	%rsi, %r15
10000c40d:	8b 77 0c	movl	12(%rdi), %esi
10000c410:	3b 77 08	cmpl	8(%rdi), %esi
10000c413:	77 49	ja	0x10000c45e
10000c415:	49 89 d6	movq	%rdx, %r14
10000c418:	48 89 fb	movq	%rdi, %rbx
10000c41b:	48 8b 07	movq	(%rdi), %rax
10000c41e:	75 1c	jne	0x10000c43c
10000c420:	01 f6	addl	%esi, %esi
10000c422:	49 0f af f6	imulq	%r14, %rsi
10000c426:	48 89 c7	movq	%rax, %rdi
10000c429:	e8 44 40 00 00	callq	0x100010472 ## symbol stub for: _realloc
10000c42e:	48 89 03	movq	%rax, (%rbx)
10000c431:	d1 63 08	shll	8(%rbx)
10000c434:	48 85 c0	testq	%rax, %rax
10000c437:	74 2a	je	0x10000c463
10000c439:	8b 73 0c	movl	12(%rbx), %esi
10000c43c:	89 f7	movl	%esi, %edi
10000c43e:	49 0f af fe	imulq	%r14, %rdi
10000c442:	48 01 c7	addq	%rax, %rdi
10000c445:	4c 89 fe	movq	%r15, %rsi
10000c448:	4c 89 f2	movq	%r14, %rdx
10000c44b:	e8 80 3f 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000c450:	ff 43 0c	incl	12(%rbx)
10000c453:	48 83 c4 08	addq	$8, %rsp
10000c457:	5b	popq	%rbx
10000c458:	41 5e	popq	%r14
10000c45a:	41 5f	popq	%r15
10000c45c:	5d	popq	%rbp
10000c45d:	c3	retq
10000c45e:	e8 f0 3a 00 00	callq	0x10000ff53
10000c463:	e8 0c 3b 00 00	callq	0x10000ff74
10000c468:	55	pushq	%rbp
10000c469:	48 89 e5	movq	%rsp, %rbp
10000c46c:	c7 47 0c 00 00 00 00	movl	$0, 12(%rdi)
10000c473:	5d	popq	%rbp
10000c474:	c3	retq
10000c475:	55	pushq	%rbp
10000c476:	48 89 e5	movq	%rsp, %rbp
10000c479:	39 77 0c	cmpl	%esi, 12(%rdi)
10000c47c:	76 0b	jbe	0x10000c489
10000c47e:	89 f0	movl	%esi, %eax
10000c480:	48 0f af c2	imulq	%rdx, %rax
10000c484:	48 03 07	addq	(%rdi), %rax
10000c487:	5d	popq	%rbp
10000c488:	c3	retq
10000c489:	e8 07 3b 00 00	callq	0x10000ff95
10000c48e:	55	pushq	%rbp
10000c48f:	48 89 e5	movq	%rsp, %rbp
10000c492:	41 57	pushq	%r15
10000c494:	41 56	pushq	%r14
10000c496:	53	pushq	%rbx
10000c497:	50	pushq	%rax
10000c498:	49 89 d7	movq	%rdx, %r15
10000c49b:	48 89 f3	movq	%rsi, %rbx
10000c49e:	49 89 fe	movq	%rdi, %r14
10000c4a1:	8b 46 0c	movl	12(%rsi), %eax
10000c4a4:	48 8b 3f	movq	(%rdi), %rdi
10000c4a7:	41 3b 46 08	cmpl	8(%r14), %eax
10000c4ab:	76 21	jbe	0x10000c4ce
10000c4ad:	8b 73 08	movl	8(%rbx), %esi
10000c4b0:	49 0f af f7	imulq	%r15, %rsi
10000c4b4:	e8 b9 3f 00 00	callq	0x100010472 ## symbol stub for: _realloc
10000c4b9:	48 89 c7	movq	%rax, %rdi
10000c4bc:	49 89 06	movq	%rax, (%r14)
10000c4bf:	8b 43 08	movl	8(%rbx), %eax
10000c4c2:	41 89 46 08	movl	%eax, 8(%r14)
10000c4c6:	48 85 ff	testq	%rdi, %rdi
10000c4c9:	74 23	je	0x10000c4ee
10000c4cb:	8b 43 0c	movl	12(%rbx), %eax
10000c4ce:	48 8b 33	movq	(%rbx), %rsi
10000c4d1:	89 c2	movl	%eax, %edx
10000c4d3:	49 0f af d7	imulq	%r15, %rdx
10000c4d7:	e8 f4 3e 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000c4dc:	8b 43 0c	movl	12(%rbx), %eax
10000c4df:	41 89 46 0c	movl	%eax, 12(%r14)
10000c4e3:	48 83 c4 08	addq	$8, %rsp
10000c4e7:	5b	popq	%rbx
10000c4e8:	41 5e	popq	%r14
10000c4ea:	41 5f	popq	%r15
10000c4ec:	5d	popq	%rbp
10000c4ed:	c3	retq
10000c4ee:	e8 c3 3a 00 00	callq	0x10000ffb6
10000c4f3:	55	pushq	%rbp
10000c4f4:	48 89 e5	movq	%rsp, %rbp
10000c4f7:	48 89 f1	movq	%rsi, %rcx
10000c4fa:	48 8b 07	movq	(%rdi), %rax
10000c4fd:	8b 77 0c	movl	12(%rdi), %esi
10000c500:	48 89 c7	movq	%rax, %rdi
10000c503:	5d	popq	%rbp
10000c504:	e9 5d 3f 00 00	jmp	0x100010466 ## symbol stub for: _qsort
10000c509:	55	pushq	%rbp
10000c50a:	48 89 e5	movq	%rsp, %rbp
10000c50d:	48 89 f1	movq	%rsi, %rcx
10000c510:	48 8b 07	movq	(%rdi), %rax
10000c513:	8b 77 0c	movl	12(%rdi), %esi
10000c516:	48 89 c7	movq	%rax, %rdi
10000c519:	5d	popq	%rbp
10000c51a:	e9 bd 3e 00 00	jmp	0x1000103dc ## symbol stub for: _mergesort
10000c51f:	55	pushq	%rbp
10000c520:	48 89 e5	movq	%rsp, %rbp
10000c523:	48 89 f1	movq	%rsi, %rcx
10000c526:	48 8b 07	movq	(%rdi), %rax
10000c529:	8b 77 0c	movl	12(%rdi), %esi
10000c52c:	48 89 c7	movq	%rax, %rdi
10000c52f:	5d	popq	%rbp
10000c530:	e9 37 3f 00 00	jmp	0x10001046c ## symbol stub for: _qsort_b
10000c535:	55	pushq	%rbp
10000c536:	48 89 e5	movq	%rsp, %rbp
10000c539:	48 89 f1	movq	%rsi, %rcx
10000c53c:	48 8b 07	movq	(%rdi), %rax
10000c53f:	8b 77 0c	movl	12(%rdi), %esi
10000c542:	48 89 c7	movq	%rax, %rdi
10000c545:	5d	popq	%rbp
10000c546:	e9 97 3e 00 00	jmp	0x1000103e2 ## symbol stub for: _mergesort_b
10000c54b:	55	pushq	%rbp
10000c54c:	48 89 e5	movq	%rsp, %rbp
10000c54f:	48 83 ec 30	subq	$48, %rsp
10000c553:	4c 8b 05 c6 bc 00 00	movq	48326(%rip), %r8 ## literal pool symbol address: __NSConcreteStackBlock
10000c55a:	4c 8d 4d d8	leaq	-40(%rbp), %r9
10000c55e:	4d 89 01	movq	%r8, (%r9)
10000c561:	49 c7 41 08 00 00 00 40	movq	$1073741824, 8(%r9)
10000c569:	48 8d 05 91 00 00 00	leaq	145(%rip), %rax
10000c570:	49 89 41 10	movq	%rax, 16(%r9)
10000c574:	48 8d 05 e5 cf 00 00	leaq	53221(%rip), %rax
10000c57b:	49 89 41 18	movq	%rax, 24(%r9)
10000c57f:	49 89 51 20	movq	%rdx, 32(%r9)
10000c583:	4c 89 ca	movq	%r9, %rdx
10000c586:	e8 06 00 00 00	callq	0x10000c591
10000c58b:	48 83 c4 30	addq	$48, %rsp
10000c58f:	5d	popq	%rbp
10000c590:	c3	retq
10000c591:	55	pushq	%rbp
10000c592:	48 89 e5	movq	%rsp, %rbp
10000c595:	41 57	pushq	%r15
10000c597:	41 56	pushq	%r14
10000c599:	41 55	pushq	%r13
10000c59b:	41 54	pushq	%r12
10000c59d:	53	pushq	%rbx
10000c59e:	50	pushq	%rax
10000c59f:	49 89 ce	movq	%rcx, %r14
10000c5a2:	49 89 d5	movq	%rdx, %r13
10000c5a5:	48 89 f0	movq	%rsi, %rax
10000c5a8:	49 89 fc	movq	%rdi, %r12
10000c5ab:	48 8b 37	movq	(%rdi), %rsi
10000c5ae:	8b 57 0c	movl	12(%rdi), %edx
10000c5b1:	48 89 45 d0	movq	%rax, -48(%rbp)
10000c5b5:	48 89 c7	movq	%rax, %rdi
10000c5b8:	4d 89 e8	movq	%r13, %r8
10000c5bb:	e8 56 3d 00 00	callq	0x100010316 ## symbol stub for: _bsearch_b
10000c5c0:	48 85 c0	testq	%rax, %rax
10000c5c3:	74 27	je	0x10000c5ec
10000c5c5:	48 89 c3	movq	%rax, %rbx
10000c5c8:	49 f7 de	negq	%r14
10000c5cb:	49 89 df	movq	%rbx, %r15
10000c5ce:	49 3b 1c 24	cmpq	(%r12), %rbx
10000c5d2:	76 1b	jbe	0x10000c5ef
10000c5d4:	4b 8d 1c 37	leaq	(%r15,%r14), %rbx
10000c5d8:	4c 89 ef	movq	%r13, %rdi
10000c5db:	48 8b 75 d0	movq	-48(%rbp), %rsi
10000c5df:	48 89 da	movq	%rbx, %rdx
10000c5e2:	41 ff 55 10	callq	*16(%r13)
10000c5e6:	85 c0	testl	%eax, %eax
10000c5e8:	74 e1	je	0x10000c5cb
10000c5ea:	eb 03	jmp	0x10000c5ef
10000c5ec:	45 31 ff	xorl	%r15d, %r15d
10000c5ef:	4c 89 f8	movq	%r15, %rax
10000c5f2:	48 83 c4 08	addq	$8, %rsp
10000c5f6:	5b	popq	%rbx
10000c5f7:	41 5c	popq	%r12
10000c5f9:	41 5d	popq	%r13
10000c5fb:	41 5e	popq	%r14
10000c5fd:	41 5f	popq	%r15
10000c5ff:	5d	popq	%rbp
10000c600:	c3	retq
10000c601:	55	pushq	%rbp
10000c602:	48 89 e5	movq	%rsp, %rbp
10000c605:	48 8b 47 20	movq	32(%rdi), %rax
10000c609:	48 89 f7	movq	%rsi, %rdi
10000c60c:	48 89 d6	movq	%rdx, %rsi
10000c60f:	5d	popq	%rbp
10000c610:	ff e0	jmpq	*%rax
10000c612:	55	pushq	%rbp
10000c613:	48 89 e5	movq	%rsp, %rbp
10000c616:	41 57	pushq	%r15
10000c618:	41 56	pushq	%r14
10000c61a:	53	pushq	%rbx
10000c61b:	50	pushq	%rax
10000c61c:	49 89 d7	movq	%rdx, %r15
10000c61f:	49 89 f6	movq	%rsi, %r14
10000c622:	48 89 fb	movq	%rdi, %rbx
10000c625:	8b 57 0c	movl	12(%rdi), %edx
10000c628:	8b 4e 0c	movl	12(%rsi), %ecx
10000c62b:	8d 3c 11	leal	(%rcx,%rdx), %edi
10000c62e:	8b 73 08	movl	8(%rbx), %esi
10000c631:	48 8b 03	movq	(%rbx), %rax
10000c634:	39 f7	cmpl	%esi, %edi
10000c636:	76 26	jbe	0x10000c65e
10000c638:	41 03 76 08	addl	8(%r14), %esi
10000c63c:	49 0f af f7	imulq	%r15, %rsi
10000c640:	48 89 c7	movq	%rax, %rdi
10000c643:	e8 2a 3e 00 00	callq	0x100010472 ## symbol stub for: _realloc
10000c648:	48 89 03	movq	%rax, (%rbx)
10000c64b:	41 8b 4e 08	movl	8(%r14), %ecx
10000c64f:	01 4b 08	addl	%ecx, 8(%rbx)
10000c652:	48 85 c0	testq	%rax, %rax
10000c655:	74 30	je	0x10000c687
10000c657:	8b 53 0c	movl	12(%rbx), %edx
10000c65a:	41 8b 4e 0c	movl	12(%r14), %ecx
10000c65e:	89 d7	movl	%edx, %edi
10000c660:	49 0f af ff	imulq	%r15, %rdi
10000c664:	48 01 c7	addq	%rax, %rdi
10000c667:	49 8b 36	movq	(%r14), %rsi
10000c66a:	89 ca	movl	%ecx, %edx
10000c66c:	49 0f af d7	imulq	%r15, %rdx
10000c670:	e8 5b 3d 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000c675:	41 8b 46 0c	movl	12(%r14), %eax
10000c679:	01 43 0c	addl	%eax, 12(%rbx)
10000c67c:	48 83 c4 08	addq	$8, %rsp
10000c680:	5b	popq	%rbx
10000c681:	41 5e	popq	%r14
10000c683:	41 5f	popq	%r15
10000c685:	5d	popq	%rbp
10000c686:	c3	retq
10000c687:	e8 4b 39 00 00	callq	0x10000ffd7
10000c68c:	55	pushq	%rbp
10000c68d:	48 89 e5	movq	%rsp, %rbp
10000c690:	53	pushq	%rbx
10000c691:	50	pushq	%rax
10000c692:	48 89 fb	movq	%rdi, %rbx
10000c695:	0f 57 c0	xorps	%xmm0, %xmm0
10000c698:	0f 11 07	movups	%xmm0, (%rdi)
10000c69b:	bf 40 10 00 00	movl	$4160, %edi
10000c6a0:	e8 1f 3d 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000c6a5:	48 89 03	movq	%rax, (%rbx)
10000c6a8:	c7 43 08 08 00 00 00	movl	$8, 8(%rbx)
10000c6af:	48 83 c4 08	addq	$8, %rsp
10000c6b3:	5b	popq	%rbx
10000c6b4:	5d	popq	%rbp
10000c6b5:	c3	retq
10000c6b6:	55	pushq	%rbp
10000c6b7:	48 89 e5	movq	%rsp, %rbp
10000c6ba:	53	pushq	%rbx
10000c6bb:	50	pushq	%rax
10000c6bc:	48 89 fb	movq	%rdi, %rbx
10000c6bf:	48 8b 3f	movq	(%rdi), %rdi
10000c6c2:	e8 9d 3c 00 00	callq	0x100010364 ## symbol stub for: _free
10000c6c7:	0f 57 c0	xorps	%xmm0, %xmm0
10000c6ca:	0f 11 03	movups	%xmm0, (%rbx)
10000c6cd:	48 83 c4 08	addq	$8, %rsp
10000c6d1:	5b	popq	%rbx
10000c6d2:	5d	popq	%rbp
10000c6d3:	c3	retq
10000c6d4:	55	pushq	%rbp
10000c6d5:	48 89 e5	movq	%rsp, %rbp
10000c6d8:	ba 08 02 00 00	movl	$520, %edx
10000c6dd:	5d	popq	%rbp
10000c6de:	e9 1d fd ff ff	jmp	0x10000c400
10000c6e3:	55	pushq	%rbp
10000c6e4:	48 89 e5	movq	%rsp, %rbp
10000c6e7:	c7 47 0c 00 00 00 00	movl	$0, 12(%rdi)
10000c6ee:	5d	popq	%rbp
10000c6ef:	c3	retq
10000c6f0:	55	pushq	%rbp
10000c6f1:	48 89 e5	movq	%rsp, %rbp
10000c6f4:	39 77 0c	cmpl	%esi, 12(%rdi)
10000c6f7:	76 12	jbe	0x10000c70b
10000c6f9:	89 f0	movl	%esi, %eax
10000c6fb:	48 89 c1	movq	%rax, %rcx
10000c6fe:	48 c1 e1 09	shlq	$9, %rcx
10000c702:	48 8d 04 c1	leaq	(%rcx,%rax,8), %rax
10000c706:	48 03 07	addq	(%rdi), %rax
10000c709:	5d	popq	%rbp
10000c70a:	c3	retq
10000c70b:	e8 e8 38 00 00	callq	0x10000fff8
10000c710:	55	pushq	%rbp
10000c711:	48 89 e5	movq	%rsp, %rbp
10000c714:	ba 08 02 00 00	movl	$520, %edx
10000c719:	5d	popq	%rbp
10000c71a:	e9 6f fd ff ff	jmp	0x10000c48e
10000c71f:	55	pushq	%rbp
10000c720:	48 89 e5	movq	%rsp, %rbp
10000c723:	48 89 f1	movq	%rsi, %rcx
10000c726:	48 8b 07	movq	(%rdi), %rax
10000c729:	8b 77 0c	movl	12(%rdi), %esi
10000c72c:	ba 08 02 00 00	movl	$520, %edx
10000c731:	48 89 c7	movq	%rax, %rdi
10000c734:	5d	popq	%rbp
10000c735:	e9 2c 3d 00 00	jmp	0x100010466 ## symbol stub for: _qsort
10000c73a:	55	pushq	%rbp
10000c73b:	48 89 e5	movq	%rsp, %rbp
10000c73e:	48 89 f1	movq	%rsi, %rcx
10000c741:	48 8b 07	movq	(%rdi), %rax
10000c744:	8b 77 0c	movl	12(%rdi), %esi
10000c747:	ba 08 02 00 00	movl	$520, %edx
10000c74c:	48 89 c7	movq	%rax, %rdi
10000c74f:	5d	popq	%rbp
10000c750:	e9 87 3c 00 00	jmp	0x1000103dc ## symbol stub for: _mergesort
10000c755:	55	pushq	%rbp
10000c756:	48 89 e5	movq	%rsp, %rbp
10000c759:	48 89 f1	movq	%rsi, %rcx
10000c75c:	48 8b 07	movq	(%rdi), %rax
10000c75f:	8b 77 0c	movl	12(%rdi), %esi
10000c762:	ba 08 02 00 00	movl	$520, %edx
10000c767:	48 89 c7	movq	%rax, %rdi
10000c76a:	5d	popq	%rbp
10000c76b:	e9 fc 3c 00 00	jmp	0x10001046c ## symbol stub for: _qsort_b
10000c770:	55	pushq	%rbp
10000c771:	48 89 e5	movq	%rsp, %rbp
10000c774:	48 89 f1	movq	%rsi, %rcx
10000c777:	48 8b 07	movq	(%rdi), %rax
10000c77a:	8b 77 0c	movl	12(%rdi), %esi
10000c77d:	ba 08 02 00 00	movl	$520, %edx
10000c782:	48 89 c7	movq	%rax, %rdi
10000c785:	5d	popq	%rbp
10000c786:	e9 57 3c 00 00	jmp	0x1000103e2 ## symbol stub for: _mergesort_b
10000c78b:	55	pushq	%rbp
10000c78c:	48 89 e5	movq	%rsp, %rbp
10000c78f:	48 83 ec 30	subq	$48, %rsp
10000c793:	48 8b 0d 86 ba 00 00	movq	47750(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000c79a:	48 8d 45 d8	leaq	-40(%rbp), %rax
10000c79e:	48 89 08	movq	%rcx, (%rax)
10000c7a1:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
10000c7a9:	48 8d 0d 51 fe ff ff	leaq	-431(%rip), %rcx
10000c7b0:	48 89 48 10	movq	%rcx, 16(%rax)
10000c7b4:	48 8d 0d a5 cd 00 00	leaq	52645(%rip), %rcx
10000c7bb:	48 89 48 18	movq	%rcx, 24(%rax)
10000c7bf:	48 89 50 20	movq	%rdx, 32(%rax)
10000c7c3:	b9 08 02 00 00	movl	$520, %ecx
10000c7c8:	48 89 c2	movq	%rax, %rdx
10000c7cb:	e8 c1 fd ff ff	callq	0x10000c591
10000c7d0:	48 83 c4 30	addq	$48, %rsp
10000c7d4:	5d	popq	%rbp
10000c7d5:	c3	retq
10000c7d6:	55	pushq	%rbp
10000c7d7:	48 89 e5	movq	%rsp, %rbp
10000c7da:	b9 08 02 00 00	movl	$520, %ecx
10000c7df:	5d	popq	%rbp
10000c7e0:	e9 ac fd ff ff	jmp	0x10000c591
10000c7e5:	55	pushq	%rbp
10000c7e6:	48 89 e5	movq	%rsp, %rbp
10000c7e9:	ba 08 02 00 00	movl	$520, %edx
10000c7ee:	5d	popq	%rbp
10000c7ef:	e9 1e fe ff ff	jmp	0x10000c612
10000c7f4:	55	pushq	%rbp
10000c7f5:	48 89 e5	movq	%rsp, %rbp
10000c7f8:	53	pushq	%rbx
10000c7f9:	50	pushq	%rax
10000c7fa:	48 89 fb	movq	%rdi, %rbx
10000c7fd:	0f 57 c0	xorps	%xmm0, %xmm0
10000c800:	0f 11 07	movups	%xmm0, (%rdi)
10000c803:	bf c0 10 00 00	movl	$4288, %edi
10000c808:	e8 b7 3b 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000c80d:	48 89 03	movq	%rax, (%rbx)
10000c810:	c7 43 08 08 00 00 00	movl	$8, 8(%rbx)
10000c817:	48 83 c4 08	addq	$8, %rsp
10000c81b:	5b	popq	%rbx
10000c81c:	5d	popq	%rbp
10000c81d:	c3	retq
10000c81e:	55	pushq	%rbp
10000c81f:	48 89 e5	movq	%rsp, %rbp
10000c822:	53	pushq	%rbx
10000c823:	50	pushq	%rax
10000c824:	48 89 fb	movq	%rdi, %rbx
10000c827:	48 8b 3f	movq	(%rdi), %rdi
10000c82a:	e8 35 3b 00 00	callq	0x100010364 ## symbol stub for: _free
10000c82f:	0f 57 c0	xorps	%xmm0, %xmm0
10000c832:	0f 11 03	movups	%xmm0, (%rbx)
10000c835:	48 83 c4 08	addq	$8, %rsp
10000c839:	5b	popq	%rbx
10000c83a:	5d	popq	%rbp
10000c83b:	c3	retq
10000c83c:	55	pushq	%rbp
10000c83d:	48 89 e5	movq	%rsp, %rbp
10000c840:	ba 18 02 00 00	movl	$536, %edx
10000c845:	5d	popq	%rbp
10000c846:	e9 b5 fb ff ff	jmp	0x10000c400
10000c84b:	55	pushq	%rbp
10000c84c:	48 89 e5	movq	%rsp, %rbp
10000c84f:	c7 47 0c 00 00 00 00	movl	$0, 12(%rdi)
10000c856:	5d	popq	%rbp
10000c857:	c3	retq
10000c858:	55	pushq	%rbp
10000c859:	48 89 e5	movq	%rsp, %rbp
10000c85c:	39 77 0c	cmpl	%esi, 12(%rdi)
10000c85f:	76 0e	jbe	0x10000c86f
10000c861:	89 f0	movl	%esi, %eax
10000c863:	48 69 c0 18 02 00 00	imulq	$536, %rax, %rax
10000c86a:	48 03 07	addq	(%rdi), %rax
10000c86d:	5d	popq	%rbp
10000c86e:	c3	retq
10000c86f:	e8 a5 37 00 00	callq	0x100010019
10000c874:	55	pushq	%rbp
10000c875:	48 89 e5	movq	%rsp, %rbp
10000c878:	ba 18 02 00 00	movl	$536, %edx
10000c87d:	5d	popq	%rbp
10000c87e:	e9 0b fc ff ff	jmp	0x10000c48e
10000c883:	55	pushq	%rbp
10000c884:	48 89 e5	movq	%rsp, %rbp
10000c887:	48 89 f1	movq	%rsi, %rcx
10000c88a:	48 8b 07	movq	(%rdi), %rax
10000c88d:	8b 77 0c	movl	12(%rdi), %esi
10000c890:	ba 18 02 00 00	movl	$536, %edx
10000c895:	48 89 c7	movq	%rax, %rdi
10000c898:	5d	popq	%rbp
10000c899:	e9 c8 3b 00 00	jmp	0x100010466 ## symbol stub for: _qsort
10000c89e:	55	pushq	%rbp
10000c89f:	48 89 e5	movq	%rsp, %rbp
10000c8a2:	48 89 f1	movq	%rsi, %rcx
10000c8a5:	48 8b 07	movq	(%rdi), %rax
10000c8a8:	8b 77 0c	movl	12(%rdi), %esi
10000c8ab:	ba 18 02 00 00	movl	$536, %edx
10000c8b0:	48 89 c7	movq	%rax, %rdi
10000c8b3:	5d	popq	%rbp
10000c8b4:	e9 23 3b 00 00	jmp	0x1000103dc ## symbol stub for: _mergesort
10000c8b9:	55	pushq	%rbp
10000c8ba:	48 89 e5	movq	%rsp, %rbp
10000c8bd:	48 89 f1	movq	%rsi, %rcx
10000c8c0:	48 8b 07	movq	(%rdi), %rax
10000c8c3:	8b 77 0c	movl	12(%rdi), %esi
10000c8c6:	ba 18 02 00 00	movl	$536, %edx
10000c8cb:	48 89 c7	movq	%rax, %rdi
10000c8ce:	5d	popq	%rbp
10000c8cf:	e9 98 3b 00 00	jmp	0x10001046c ## symbol stub for: _qsort_b
10000c8d4:	55	pushq	%rbp
10000c8d5:	48 89 e5	movq	%rsp, %rbp
10000c8d8:	48 89 f1	movq	%rsi, %rcx
10000c8db:	48 8b 07	movq	(%rdi), %rax
10000c8de:	8b 77 0c	movl	12(%rdi), %esi
10000c8e1:	ba 18 02 00 00	movl	$536, %edx
10000c8e6:	48 89 c7	movq	%rax, %rdi
10000c8e9:	5d	popq	%rbp
10000c8ea:	e9 f3 3a 00 00	jmp	0x1000103e2 ## symbol stub for: _mergesort_b
10000c8ef:	55	pushq	%rbp
10000c8f0:	48 89 e5	movq	%rsp, %rbp
10000c8f3:	48 83 ec 30	subq	$48, %rsp
10000c8f7:	48 8b 0d 22 b9 00 00	movq	47394(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000c8fe:	48 8d 45 d8	leaq	-40(%rbp), %rax
10000c902:	48 89 08	movq	%rcx, (%rax)
10000c905:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
10000c90d:	48 8d 0d ed fc ff ff	leaq	-787(%rip), %rcx
10000c914:	48 89 48 10	movq	%rcx, 16(%rax)
10000c918:	48 8d 0d 41 cc 00 00	leaq	52289(%rip), %rcx
10000c91f:	48 89 48 18	movq	%rcx, 24(%rax)
10000c923:	48 89 50 20	movq	%rdx, 32(%rax)
10000c927:	b9 18 02 00 00	movl	$536, %ecx
10000c92c:	48 89 c2	movq	%rax, %rdx
10000c92f:	e8 5d fc ff ff	callq	0x10000c591
10000c934:	48 83 c4 30	addq	$48, %rsp
10000c938:	5d	popq	%rbp
10000c939:	c3	retq
10000c93a:	55	pushq	%rbp
10000c93b:	48 89 e5	movq	%rsp, %rbp
10000c93e:	b9 18 02 00 00	movl	$536, %ecx
10000c943:	5d	popq	%rbp
10000c944:	e9 48 fc ff ff	jmp	0x10000c591
10000c949:	55	pushq	%rbp
10000c94a:	48 89 e5	movq	%rsp, %rbp
10000c94d:	ba 18 02 00 00	movl	$536, %edx
10000c952:	5d	popq	%rbp
10000c953:	e9 ba fc ff ff	jmp	0x10000c612
10000c958:	55	pushq	%rbp
10000c959:	48 89 e5	movq	%rsp, %rbp
10000c95c:	53	pushq	%rbx
10000c95d:	50	pushq	%rax
10000c95e:	48 89 fb	movq	%rdi, %rbx
10000c961:	0f 57 c0	xorps	%xmm0, %xmm0
10000c964:	0f 11 07	movups	%xmm0, (%rdi)
10000c967:	bf 40 00 00 00	movl	$64, %edi
10000c96c:	e8 53 3a 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000c971:	48 89 03	movq	%rax, (%rbx)
10000c974:	c7 43 08 08 00 00 00	movl	$8, 8(%rbx)
10000c97b:	48 83 c4 08	addq	$8, %rsp
10000c97f:	5b	popq	%rbx
10000c980:	5d	popq	%rbp
10000c981:	c3	retq
10000c982:	55	pushq	%rbp
10000c983:	48 89 e5	movq	%rsp, %rbp
10000c986:	53	pushq	%rbx
10000c987:	50	pushq	%rax
10000c988:	48 89 fb	movq	%rdi, %rbx
10000c98b:	48 8b 3f	movq	(%rdi), %rdi
10000c98e:	e8 d1 39 00 00	callq	0x100010364 ## symbol stub for: _free
10000c993:	0f 57 c0	xorps	%xmm0, %xmm0
10000c996:	0f 11 03	movups	%xmm0, (%rbx)
10000c999:	48 83 c4 08	addq	$8, %rsp
10000c99d:	5b	popq	%rbx
10000c99e:	5d	popq	%rbp
10000c99f:	c3	retq
10000c9a0:	55	pushq	%rbp
10000c9a1:	48 89 e5	movq	%rsp, %rbp
10000c9a4:	ba 08 00 00 00	movl	$8, %edx
10000c9a9:	5d	popq	%rbp
10000c9aa:	e9 51 fa ff ff	jmp	0x10000c400
10000c9af:	55	pushq	%rbp
10000c9b0:	48 89 e5	movq	%rsp, %rbp
10000c9b3:	c7 47 0c 00 00 00 00	movl	$0, 12(%rdi)
10000c9ba:	5d	popq	%rbp
10000c9bb:	c3	retq
10000c9bc:	55	pushq	%rbp
10000c9bd:	48 89 e5	movq	%rsp, %rbp
10000c9c0:	39 77 0c	cmpl	%esi, 12(%rdi)
10000c9c3:	76 0b	jbe	0x10000c9d0
10000c9c5:	89 f0	movl	%esi, %eax
10000c9c7:	48 c1 e0 03	shlq	$3, %rax
10000c9cb:	48 03 07	addq	(%rdi), %rax
10000c9ce:	5d	popq	%rbp
10000c9cf:	c3	retq
10000c9d0:	e8 65 36 00 00	callq	0x10001003a
10000c9d5:	55	pushq	%rbp
10000c9d6:	48 89 e5	movq	%rsp, %rbp
10000c9d9:	ba 08 00 00 00	movl	$8, %edx
10000c9de:	5d	popq	%rbp
10000c9df:	e9 aa fa ff ff	jmp	0x10000c48e
10000c9e4:	55	pushq	%rbp
10000c9e5:	48 89 e5	movq	%rsp, %rbp
10000c9e8:	48 89 f1	movq	%rsi, %rcx
10000c9eb:	48 8b 07	movq	(%rdi), %rax
10000c9ee:	8b 77 0c	movl	12(%rdi), %esi
10000c9f1:	ba 08 00 00 00	movl	$8, %edx
10000c9f6:	48 89 c7	movq	%rax, %rdi
10000c9f9:	5d	popq	%rbp
10000c9fa:	e9 67 3a 00 00	jmp	0x100010466 ## symbol stub for: _qsort
10000c9ff:	55	pushq	%rbp
10000ca00:	48 89 e5	movq	%rsp, %rbp
10000ca03:	48 89 f1	movq	%rsi, %rcx
10000ca06:	48 8b 07	movq	(%rdi), %rax
10000ca09:	8b 77 0c	movl	12(%rdi), %esi
10000ca0c:	ba 08 00 00 00	movl	$8, %edx
10000ca11:	48 89 c7	movq	%rax, %rdi
10000ca14:	5d	popq	%rbp
10000ca15:	e9 c2 39 00 00	jmp	0x1000103dc ## symbol stub for: _mergesort
10000ca1a:	55	pushq	%rbp
10000ca1b:	48 89 e5	movq	%rsp, %rbp
10000ca1e:	48 89 f1	movq	%rsi, %rcx
10000ca21:	48 8b 07	movq	(%rdi), %rax
10000ca24:	8b 77 0c	movl	12(%rdi), %esi
10000ca27:	ba 08 00 00 00	movl	$8, %edx
10000ca2c:	48 89 c7	movq	%rax, %rdi
10000ca2f:	5d	popq	%rbp
10000ca30:	e9 37 3a 00 00	jmp	0x10001046c ## symbol stub for: _qsort_b
10000ca35:	55	pushq	%rbp
10000ca36:	48 89 e5	movq	%rsp, %rbp
10000ca39:	48 89 f1	movq	%rsi, %rcx
10000ca3c:	48 8b 07	movq	(%rdi), %rax
10000ca3f:	8b 77 0c	movl	12(%rdi), %esi
10000ca42:	ba 08 00 00 00	movl	$8, %edx
10000ca47:	48 89 c7	movq	%rax, %rdi
10000ca4a:	5d	popq	%rbp
10000ca4b:	e9 92 39 00 00	jmp	0x1000103e2 ## symbol stub for: _mergesort_b
10000ca50:	55	pushq	%rbp
10000ca51:	48 89 e5	movq	%rsp, %rbp
10000ca54:	48 83 ec 30	subq	$48, %rsp
10000ca58:	48 8b 0d c1 b7 00 00	movq	47041(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000ca5f:	48 8d 45 d8	leaq	-40(%rbp), %rax
10000ca63:	48 89 08	movq	%rcx, (%rax)
10000ca66:	48 c7 40 08 00 00 00 40	movq	$1073741824, 8(%rax)
10000ca6e:	48 8d 0d 8c fb ff ff	leaq	-1140(%rip), %rcx
10000ca75:	48 89 48 10	movq	%rcx, 16(%rax)
10000ca79:	48 8d 0d e0 ca 00 00	leaq	51936(%rip), %rcx
10000ca80:	48 89 48 18	movq	%rcx, 24(%rax)
10000ca84:	48 89 50 20	movq	%rdx, 32(%rax)
10000ca88:	b9 08 00 00 00	movl	$8, %ecx
10000ca8d:	48 89 c2	movq	%rax, %rdx
10000ca90:	e8 fc fa ff ff	callq	0x10000c591
10000ca95:	48 83 c4 30	addq	$48, %rsp
10000ca99:	5d	popq	%rbp
10000ca9a:	c3	retq
10000ca9b:	55	pushq	%rbp
10000ca9c:	48 89 e5	movq	%rsp, %rbp
10000ca9f:	b9 08 00 00 00	movl	$8, %ecx
10000caa4:	5d	popq	%rbp
10000caa5:	e9 e7 fa ff ff	jmp	0x10000c591
10000caaa:	55	pushq	%rbp
10000caab:	48 89 e5	movq	%rsp, %rbp
10000caae:	ba 08 00 00 00	movl	$8, %edx
10000cab3:	5d	popq	%rbp
10000cab4:	e9 59 fb ff ff	jmp	0x10000c612
10000cab9:	55	pushq	%rbp
10000caba:	48 89 e5	movq	%rsp, %rbp
10000cabd:	0f 57 c0	xorps	%xmm0, %xmm0
10000cac0:	0f 11 05 89 e6 02 00	movups	%xmm0, 190089(%rip)
10000cac7:	0f 11 05 72 e6 02 00	movups	%xmm0, 190066(%rip)
10000cace:	0f 11 05 8b e6 02 00	movups	%xmm0, 190091(%rip)
10000cad5:	0f 11 05 94 e6 02 00	movups	%xmm0, 190100(%rip)
10000cadc:	5d	popq	%rbp
10000cadd:	c3	retq
10000cade:	55	pushq	%rbp
10000cadf:	48 89 e5	movq	%rsp, %rbp
10000cae2:	53	pushq	%rbx
10000cae3:	50	pushq	%rax
10000cae4:	48 8d 1d ad 14 01 00	leaq	70829(%rip), %rbx
10000caeb:	80 3b 00	cmpb	$0, (%rbx)
10000caee:	74 34	je	0x10000cb24
10000caf0:	e8 ab 38 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
10000caf5:	66 48 0f 6e c8	movq	%rax, %xmm1
10000cafa:	66 0f 62 0d fe 9b 00 00	punpckldq	39934(%rip), %xmm1
10000cb02:	66 0f 5c 0d 06 9c 00 00	subpd	39942(%rip), %xmm1
10000cb0a:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000cb0e:	f2 0f 59 4b 08	mulsd	8(%rbx), %xmm1
10000cb13:	f2 0f 5e 0d 05 9c 00 00	divsd	39941(%rip), %xmm1
10000cb1b:	48 8d 05 1e e6 02 00	leaq	189982(%rip), %rax
10000cb22:	eb 12	jmp	0x10000cb36
10000cb24:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000cb28:	74 65	je	0x10000cb8f
10000cb2a:	f2 0f 10 4b 28	movsd	40(%rbx), %xmm1
10000cb2f:	48 8d 05 4a e6 02 00	leaq	190026(%rip), %rax
10000cb36:	48 8b 15 23 e6 02 00	movq	189987(%rip), %rdx
10000cb3d:	48 2b 10	subq	(%rax), %rdx
10000cb40:	72 27	jb	0x10000cb69
10000cb42:	48 8b 0d 1f e6 02 00	movq	189983(%rip), %rcx
10000cb49:	48 2b 48 08	subq	8(%rax), %rcx
10000cb4d:	72 1a	jb	0x10000cb69
10000cb4f:	4c 8b 05 1a e6 02 00	movq	189978(%rip), %r8
10000cb56:	4c 2b 40 10	subq	16(%rax), %r8
10000cb5a:	72 0d	jb	0x10000cb69
10000cb5c:	4c 8b 0d 15 e6 02 00	movq	189973(%rip), %r9
10000cb63:	4c 2b 48 18	subq	24(%rax), %r9
10000cb67:	73 2d	jae	0x10000cb96
10000cb69:	48 8b 05 00 b7 00 00	movq	46848(%rip), %rax ## literal pool symbol address: ___stderrp
10000cb70:	48 8b 08	movq	(%rax), %rcx
10000cb73:	48 8d 3d 2e 89 00 00	leaq	35118(%rip), %rdi ## literal pool for: "warning: network activity underflow, an interface probably died.\n"
10000cb7a:	be 41 00 00 00	movl	$65, %esi
10000cb7f:	ba 01 00 00 00	movl	$1, %edx
10000cb84:	48 83 c4 08	addq	$8, %rsp
10000cb88:	5b	popq	%rbx
10000cb89:	5d	popq	%rbp
10000cb8a:	e9 db 37 00 00	jmp	0x10001036a ## symbol stub for: _fwrite
10000cb8f:	f2 0f 10 4b 20	movsd	32(%rbx), %xmm1
10000cb94:	eb 85	jmp	0x10000cb1b
10000cb96:	66 48 0f 6e c2	movq	%rdx, %xmm0
10000cb9b:	66 0f 6f 2d 5d 9b 00 00	movdqa	39773(%rip), %xmm5
10000cba3:	66 0f 62 c5	punpckldq	%xmm5, %xmm0
10000cba7:	66 0f 28 35 61 9b 00 00	movapd	39777(%rip), %xmm6
10000cbaf:	66 0f 5c c6	subpd	%xmm6, %xmm0
10000cbb3:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000cbb7:	66 48 0f 6e d1	movq	%rcx, %xmm2
10000cbbc:	66 0f 62 d5	punpckldq	%xmm5, %xmm2
10000cbc0:	66 0f 5c d6	subpd	%xmm6, %xmm2
10000cbc4:	66 0f 7c d2	haddpd	%xmm2, %xmm2
10000cbc8:	f2 0f 5e c1	divsd	%xmm1, %xmm0
10000cbcc:	66 49 0f 6e e0	movq	%r8, %xmm4
10000cbd1:	66 0f 62 e5	punpckldq	%xmm5, %xmm4
10000cbd5:	66 0f 5c e6	subpd	%xmm6, %xmm4
10000cbd9:	66 0f 7c e4	haddpd	%xmm4, %xmm4
10000cbdd:	f2 0f 5e d1	divsd	%xmm1, %xmm2
10000cbe1:	f2 0f 5e e1	divsd	%xmm1, %xmm4
10000cbe5:	66 49 0f 6e d9	movq	%r9, %xmm3
10000cbea:	66 0f 62 dd	punpckldq	%xmm5, %xmm3
10000cbee:	66 0f 5c de	subpd	%xmm6, %xmm3
10000cbf2:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000cbf6:	f2 0f 5e d9	divsd	%xmm1, %xmm3
10000cbfa:	48 8d 05 ef 13 01 00	leaq	70639(%rip), %rax
10000cc01:	8b 40 28	movl	40(%rax), %eax
10000cc04:	83 f8 01	cmpl	$1, %eax
10000cc07:	74 20	je	0x10000cc29
10000cc09:	85 c0	testl	%eax, %eax
10000cc0b:	75 3c	jne	0x10000cc49
10000cc0d:	48 8b 7b 50	movq	80(%rbx), %rdi
10000cc11:	48 8d 35 d2 88 00 00	leaq	35026(%rip), %rsi ## literal pool for: "\n\n**** Network activity ****\n\nout: %.2f packets/s, %.2f bytes/s\nin:  %.2f packets/s, %.2f bytes/s\n"
10000cc18:	66 0f 28 cc	movapd	%xmm4, %xmm1
10000cc1c:	b0 04	movb	$4, %al
10000cc1e:	48 83 c4 08	addq	$8, %rsp
10000cc22:	5b	popq	%rbx
10000cc23:	5d	popq	%rbp
10000cc24:	e9 29 37 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
10000cc29:	48 8b 7b 50	movq	80(%rbx), %rdi
10000cc2d:	48 8d 35 19 89 00 00	leaq	35097(%rip), %rsi ## literal pool for: "<key>network</key>\n<dict>\n<key>opackets</key><integer>%llu</integer>\n<key>opacket_rate</key><real>%g</real>\n<key>ipackets</key><integer>%llu</integer>\n<key>ipacket_rate</key><real>%g</real>\n<key>obytes</key><integer>%llu</integer>\n<key>obyte_rate</key><real>%g</real>\n<key>ibytes</key><integer>%llu</integer>\n<key>ibyte_rate</key><real>%g</real>\n</dict>\n"
10000cc34:	66 0f 28 ca	movapd	%xmm2, %xmm1
10000cc38:	66 0f 28 d4	movapd	%xmm4, %xmm2
10000cc3c:	b0 04	movb	$4, %al
10000cc3e:	48 83 c4 08	addq	$8, %rsp
10000cc42:	5b	popq	%rbx
10000cc43:	5d	popq	%rbp
10000cc44:	e9 09 37 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
10000cc49:	48 83 c4 08	addq	$8, %rsp
10000cc4d:	5b	popq	%rbx
10000cc4e:	5d	popq	%rbp
10000cc4f:	c3	retq
10000cc50:	55	pushq	%rbp
10000cc51:	48 89 e5	movq	%rsp, %rbp
10000cc54:	53	pushq	%rbx
10000cc55:	48 83 ec 38	subq	$56, %rsp
10000cc59:	48 8b 05 08 b6 00 00	movq	46600(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000cc60:	48 8b 00	movq	(%rax), %rax
10000cc63:	48 89 45 f0	movq	%rax, -16(%rbp)
10000cc67:	48 8d 4d c8	leaq	-56(%rbp), %rcx
10000cc6b:	48 c7 01 00 00 00 00	movq	$0, (%rcx)
10000cc72:	66 0f 6f 05 46 af 00 00	movdqa	44870(%rip), %xmm0
10000cc7a:	48 8d 7d d0	leaq	-48(%rbp), %rdi
10000cc7e:	66 0f 7f 07	movdqa	%xmm0, (%rdi)
10000cc82:	48 c7 47 10 06 00 00 00	movq	$6, 16(%rdi)
10000cc8a:	be 06 00 00 00	movl	$6, %esi
10000cc8f:	31 d2	xorl	%edx, %edx
10000cc91:	45 31 c0	xorl	%r8d, %r8d
10000cc94:	45 31 c9	xorl	%r9d, %r9d
10000cc97:	e8 4e 38 00 00	callq	0x1000104ea ## symbol stub for: _sysctl
10000cc9c:	85 c0	testl	%eax, %eax
10000cc9e:	0f 85 25 01 00 00	jne	0x10000cdc9
10000cca4:	48 8b 7d c8	movq	-56(%rbp), %rdi
10000cca8:	e8 17 37 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000ccad:	48 85 c0	testq	%rax, %rax
10000ccb0:	0f 84 21 01 00 00	je	0x10000cdd7
10000ccb6:	48 89 c3	movq	%rax, %rbx
10000ccb9:	48 8d 7d d0	leaq	-48(%rbp), %rdi
10000ccbd:	66 0f 6f 05 fb ae 00 00	movdqa	44795(%rip), %xmm0
10000ccc5:	66 0f 7f 07	movdqa	%xmm0, (%rdi)
10000ccc9:	48 c7 47 10 06 00 00 00	movq	$6, 16(%rdi)
10000ccd1:	48 8d 4d c8	leaq	-56(%rbp), %rcx
10000ccd5:	be 06 00 00 00	movl	$6, %esi
10000ccda:	48 89 c2	movq	%rax, %rdx
10000ccdd:	45 31 c0	xorl	%r8d, %r8d
10000cce0:	45 31 c9	xorl	%r9d, %r9d
10000cce3:	e8 02 38 00 00	callq	0x1000104ea ## symbol stub for: _sysctl
10000cce8:	85 c0	testl	%eax, %eax
10000ccea:	0f 85 d1 00 00 00	jne	0x10000cdc1
10000ccf0:	0f 10 05 79 e4 02 00	movups	189561(%rip), %xmm0
10000ccf7:	0f 11 05 52 e4 02 00	movups	%xmm0, 189522(%rip)
10000ccfe:	f3 0f 6f 05 5a e4 02 00	movdqu	189530(%rip), %xmm0
10000cd06:	f3 0f 7f 05 32 e4 02 00	movdqu	%xmm0, 189490(%rip)
10000cd0e:	66 0f ef c0	pxor	%xmm0, %xmm0
10000cd12:	f3 0f 7f 05 46 e4 02 00	movdqu	%xmm0, 189510(%rip)
10000cd1a:	f3 0f 7f 05 4e e4 02 00	movdqu	%xmm0, 189518(%rip)
10000cd22:	48 8b 4d c8	movq	-56(%rbp), %rcx
10000cd26:	48 85 c9	testq	%rcx, %rcx
10000cd29:	7e 4d	jle	0x10000cd78
10000cd2b:	48 89 d8	movq	%rbx, %rax
10000cd2e:	48 01 c8	addq	%rcx, %rax
10000cd31:	31 c9	xorl	%ecx, %ecx
10000cd33:	31 d2	xorl	%edx, %edx
10000cd35:	48 89 df	movq	%rbx, %rdi
10000cd38:	0f b7 37	movzwl	(%rdi), %esi
10000cd3b:	48 01 fe	addq	%rdi, %rsi
10000cd3e:	80 7f 03 12	cmpb	$18, 3(%rdi)
10000cd42:	75 2c	jne	0x10000cd70
10000cd44:	48 03 57 48	addq	72(%rdi), %rdx
10000cd48:	48 89 15 11 e4 02 00	movq	%rdx, 189457(%rip)
10000cd4f:	48 03 4f 38	addq	56(%rdi), %rcx
10000cd53:	48 89 0d 0e e4 02 00	movq	%rcx, 189454(%rip)
10000cd5a:	f3 0f 6f 4f 60	movdqu	96(%rdi), %xmm1
10000cd5f:	66 0f 70 c9 4e	pshufd	$78, %xmm1, %xmm1
10000cd64:	66 0f d4 c1	paddq	%xmm1, %xmm0
10000cd68:	f3 0f 7f 05 00 e4 02 00	movdqu	%xmm0, 189440(%rip)
10000cd70:	48 89 f7	movq	%rsi, %rdi
10000cd73:	48 39 c6	cmpq	%rax, %rsi
10000cd76:	72 c0	jb	0x10000cd38
10000cd78:	48 89 df	movq	%rbx, %rdi
10000cd7b:	e8 e4 35 00 00	callq	0x100010364 ## symbol stub for: _free
10000cd80:	48 8d 05 11 12 01 00	leaq	70161(%rip), %rax
10000cd87:	80 38 00	cmpb	$0, (%rax)
10000cd8a:	74 1e	je	0x10000cdaa
10000cd8c:	0f 10 05 dd e3 02 00	movups	189405(%rip), %xmm0
10000cd93:	0f 11 05 f6 e3 02 00	movups	%xmm0, 189430(%rip)
10000cd9a:	f3 0f 6f 05 be e3 02 00	movdqu	189374(%rip), %xmm0
10000cda2:	f3 0f 7f 05 d6 e3 02 00	movdqu	%xmm0, 189398(%rip)
10000cdaa:	48 8b 05 b7 b4 00 00	movq	46263(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000cdb1:	48 8b 00	movq	(%rax), %rax
10000cdb4:	48 3b 45 f0	cmpq	-16(%rbp), %rax
10000cdb8:	75 22	jne	0x10000cddc
10000cdba:	48 83 c4 38	addq	$56, %rsp
10000cdbe:	5b	popq	%rbx
10000cdbf:	5d	popq	%rbp
10000cdc0:	c3	retq
10000cdc1:	48 89 df	movq	%rbx, %rdi
10000cdc4:	e8 9b 35 00 00	callq	0x100010364 ## symbol stub for: _free
10000cdc9:	48 8d 3d e0 88 00 00	leaq	35040(%rip), %rdi ## literal pool for: "Sysctl failed\n"
10000cdd0:	e8 31 36 00 00	callq	0x100010406 ## symbol stub for: _perror
10000cdd5:	eb d3	jmp	0x10000cdaa
10000cdd7:	e8 7f 32 00 00	callq	0x10001005b
10000cddc:	e8 17 35 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000cde1:	55	pushq	%rbp
10000cde2:	48 89 e5	movq	%rsp, %rbp
10000cde5:	48 83 ec 10	subq	$16, %rsp
10000cde9:	0f 57 c0	xorps	%xmm0, %xmm0
10000cdec:	0f 29 05 cd e3 02 00	movaps	%xmm0, 189389(%rip)
10000cdf3:	0f 29 05 b6 e3 02 00	movaps	%xmm0, 189366(%rip)
10000cdfa:	0f 29 05 9f e3 02 00	movaps	%xmm0, 189343(%rip)
10000ce01:	31 c0	xorl	%eax, %eax
10000ce03:	48 89 05 c6 e3 02 00	movq	%rax, 189382(%rip)
10000ce0a:	0f 29 05 cf e3 02 00	movaps	%xmm0, 189391(%rip)
10000ce11:	0f 29 05 d8 e3 02 00	movaps	%xmm0, 189400(%rip)
10000ce18:	0f 29 05 e1 e3 02 00	movaps	%xmm0, 189409(%rip)
10000ce1f:	48 89 05 ea e3 02 00	movq	%rax, 189418(%rip)
10000ce26:	0f 29 05 f3 e3 02 00	movaps	%xmm0, 189427(%rip)
10000ce2d:	0f 29 05 fc e3 02 00	movaps	%xmm0, 189436(%rip)
10000ce34:	0f 29 05 05 e4 02 00	movaps	%xmm0, 189445(%rip)
10000ce3b:	48 89 05 0e e4 02 00	movq	%rax, 189454(%rip)
10000ce42:	48 8d 55 f8	leaq	-8(%rbp), %rdx
10000ce46:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
10000ce4d:	48 8d 3d b0 88 00 00	leaq	34992(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallFeatureEnable"
10000ce54:	48 8d 35 fd e3 02 00	leaq	189437(%rip), %rsi
10000ce5b:	31 c9	xorl	%ecx, %ecx
10000ce5d:	45 31 c0	xorl	%r8d, %r8d
10000ce60:	e8 8b 36 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000ce65:	48 83 c4 10	addq	$16, %rsp
10000ce69:	5d	popq	%rbp
10000ce6a:	c3	retq
10000ce6b:	55	pushq	%rbp
10000ce6c:	48 89 e5	movq	%rsp, %rbp
10000ce6f:	41 57	pushq	%r15
10000ce71:	41 56	pushq	%r14
10000ce73:	41 55	pushq	%r13
10000ce75:	41 54	pushq	%r12
10000ce77:	53	pushq	%rbx
10000ce78:	48 83 ec 38	subq	$56, %rsp
10000ce7c:	83 3d d5 e3 02 00 00	cmpl	$0, 189397(%rip)
10000ce83:	0f 84 8b 02 00 00	je	0x10000d114
10000ce89:	4c 8d 35 08 11 01 00	leaq	69896(%rip), %r14
10000ce90:	41 80 3e 00	cmpb	$0, (%r14)
10000ce94:	0f 85 7a 02 00 00	jne	0x10000d114
10000ce9a:	48 8d 1d 4f 11 01 00	leaq	69967(%rip), %rbx
10000cea1:	8b 43 28	movl	40(%rbx), %eax
10000cea4:	85 c0	testl	%eax, %eax
10000cea6:	74 0e	je	0x10000ceb6
10000cea8:	83 f8 01	cmpl	$1, %eax
10000ceab:	75 19	jne	0x10000cec6
10000cead:	48 8d 3d 96 88 00 00	leaq	34966(%rip), %rdi ## literal pool for: "<!-- start GPU DCC Stats -->\n<key>GPU DCC</key>\n"
10000ceb4:	eb 07	jmp	0x10000cebd
10000ceb6:	48 8d 3d 72 88 00 00	leaq	34930(%rip), %rdi ## literal pool for: "\n**** GPU DCC Stats ****\n\n"
10000cebd:	49 8b 76 50	movq	80(%r14), %rsi
10000cec1:	e8 98 34 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000cec6:	48 8b 05 5b e3 02 00	movq	189275(%rip), %rax
10000cecd:	66 48 0f 6e c0	movq	%rax, %xmm0
10000ced2:	66 0f 6f 1d 26 98 00 00	movdqa	38950(%rip), %xmm3
10000ceda:	66 0f 62 c3	punpckldq	%xmm3, %xmm0
10000cede:	66 0f 28 25 2a 98 00 00	movapd	38954(%rip), %xmm4
10000cee6:	66 0f 5c c4	subpd	%xmm4, %xmm0
10000ceea:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000ceee:	f3 0f 7e 15 3a e3 02 00	movq	189242(%rip), %xmm2
10000cef6:	66 0f 62 d3	punpckldq	%xmm3, %xmm2
10000cefa:	66 0f 5c d4	subpd	%xmm4, %xmm2
10000cefe:	66 0f 7c d2	haddpd	%xmm2, %xmm2
10000cf02:	48 85 c0	testq	%rax, %rax
10000cf05:	74 12	je	0x10000cf19
10000cf07:	66 0f 28 ca	movapd	%xmm2, %xmm1
10000cf0b:	f2 0f 5e c8	divsd	%xmm0, %xmm1
10000cf0f:	f2 0f 59 0d 11 98 00 00	mulsd	38929(%rip), %xmm1
10000cf17:	eb 04	jmp	0x10000cf1d
10000cf19:	66 0f 57 c9	xorpd	%xmm1, %xmm1
10000cf1d:	f2 0f 11 4d d0	movsd	%xmm1, -48(%rbp)
10000cf22:	f3 0f 7e 2d f6 e2 02 00	movq	189174(%rip), %xmm5
10000cf2a:	8b 43 28	movl	40(%rbx), %eax
10000cf2d:	83 f8 01	cmpl	$1, %eax
10000cf30:	75 4b	jne	0x10000cf7d
10000cf32:	49 8b 4e 50	movq	80(%r14), %rcx
10000cf36:	48 8d 3d bc 57 00 00	leaq	22460(%rip), %rdi ## literal pool for: "<dict>\n"
10000cf3d:	be 07 00 00 00	movl	$7, %esi
10000cf42:	ba 01 00 00 00	movl	$1, %edx
10000cf47:	66 0f 29 55 a0	movapd	%xmm2, -96(%rbp)
10000cf4c:	66 0f 29 45 c0	movapd	%xmm0, -64(%rbp)
10000cf51:	66 0f 7f 6d b0	movdqa	%xmm5, -80(%rbp)
10000cf56:	e8 0f 34 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000cf5b:	66 0f 6f 6d b0	movdqa	-80(%rbp), %xmm5
10000cf60:	66 0f 28 25 a8 97 00 00	movapd	38824(%rip), %xmm4
10000cf68:	66 0f 6f 1d 90 97 00 00	movdqa	38800(%rip), %xmm3
10000cf70:	66 0f 28 45 c0	movapd	-64(%rbp), %xmm0
10000cf75:	66 0f 28 55 a0	movapd	-96(%rbp), %xmm2
10000cf7a:	8b 43 28	movl	40(%rbx), %eax
10000cf7d:	85 c0	testl	%eax, %eax
10000cf7f:	74 39	je	0x10000cfba
10000cf81:	83 f8 01	cmpl	$1, %eax
10000cf84:	0f 85 8a 01 00 00	jne	0x10000d114
10000cf8a:	48 8d 05 7d 8a 00 00	leaq	35453(%rip), %rax ## literal pool for: "<key>dccDynamicRPeFreqMHz</key><integer>%u</integer>\n"
10000cf91:	48 89 45 c0	movq	%rax, -64(%rbp)
10000cf95:	4c 8d 3d 3f 8a 00 00	leaq	35391(%rip), %r15 ## literal pool for: "<key>dccInvalidTranCnt</key><integer>%u</integer>\n"
10000cf9c:	4c 8d 25 06 8a 00 00	leaq	35334(%rip), %r12 ## literal pool for: "<key>dccQOSTimerCnt</key><integer>%llu</integer>\n"
10000cfa3:	4c 8d 2d ca 89 00 00	leaq	35274(%rip), %r13 ## literal pool for: "<key>dccInterruptEnCnt</key><integer>%llu</integer>\n"
10000cfaa:	48 8d 1d 49 89 00 00	leaq	35145(%rip), %rbx ## literal pool for: "<key>rc6Time_min</key><real>%g</real>\n<key>rc6Time_ratio</key><real>%g</real>\n<key>rc6TimeDCC_ratio</key><real>%g</real>\n"
10000cfb1:	48 8d 35 e9 88 00 00	leaq	35049(%rip), %rsi ## literal pool for: "<key>dccTotalTime_min</key><real>%g</real>\n<key>dccTotalTime_ratio</key><real>%g</real>\n"
10000cfb8:	eb 2e	jmp	0x10000cfe8
10000cfba:	48 8d 05 ba 88 00 00	leaq	35002(%rip), %rax ## literal pool for: "DCC dynamic RPe Freq        : %u MHz\n"
10000cfc1:	48 89 45 c0	movq	%rax, -64(%rbp)
10000cfc5:	4c 8d 3d 8d 88 00 00	leaq	34957(%rip), %r15 ## literal pool for: "DCC invalid transition count: %u\n"
10000cfcc:	4c 8d 25 62 88 00 00	leaq	34914(%rip), %r12 ## literal pool for: "DCC qos timer count         : %llu\n"
10000cfd3:	4c 8d 2d 37 88 00 00	leaq	34871(%rip), %r13 ## literal pool for: "DCC enable interrupt count  : %llu\n"
10000cfda:	48 8d 1d e5 87 00 00	leaq	34789(%rip), %rbx ## literal pool for: "DCC RC6 time                : %.2f min (total: %.2f%% DCC active: %.2f%%)\n"
10000cfe1:	48 8d 35 af 87 00 00	leaq	34735(%rip), %rsi ## literal pool for: "DCC active time             : %.2f min %.2f%%\n"
10000cfe8:	66 0f 62 eb	punpckldq	%xmm3, %xmm5
10000cfec:	f2 0f 10 35 64 97 00 00	movsd	38756(%rip), %xmm6
10000cff4:	66 0f 5c ec	subpd	%xmm4, %xmm5
10000cff8:	66 0f 28 c8	movapd	%xmm0, %xmm1
10000cffc:	f2 0f 59 ce	mulsd	%xmm6, %xmm1
10000d000:	66 0f 7c ed	haddpd	%xmm5, %xmm5
10000d004:	f2 0f 59 f2	mulsd	%xmm2, %xmm6
10000d008:	66 0f 28 e2	movapd	%xmm2, %xmm4
10000d00c:	f2 0f 10 1d 9c aa 00 00	movsd	43676(%rip), %xmm3
10000d014:	f2 0f 5e cd	divsd	%xmm5, %xmm1
10000d018:	f2 0f 10 15 08 97 00 00	movsd	38664(%rip), %xmm2
10000d020:	f2 0f 5e f5	divsd	%xmm5, %xmm6
10000d024:	f2 0f 5e c3	divsd	%xmm3, %xmm0
10000d028:	f2 0f 59 ca	mulsd	%xmm2, %xmm1
10000d02c:	f2 0f 5e e3	divsd	%xmm3, %xmm4
10000d030:	66 0f 29 65 a0	movapd	%xmm4, -96(%rbp)
10000d035:	f2 0f 59 f2	mulsd	%xmm2, %xmm6
10000d039:	f2 0f 11 75 b0	movsd	%xmm6, -80(%rbp)
10000d03e:	49 8b 7e 50	movq	80(%r14), %rdi
10000d042:	f2 0f 5e 05 0e ab 00 00	divsd	43790(%rip), %xmm0
10000d04a:	b0 02	movb	$2, %al
10000d04c:	e8 01 33 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d051:	49 8b 7e 50	movq	80(%r14), %rdi
10000d055:	66 0f 28 45 a0	movapd	-96(%rbp), %xmm0
10000d05a:	f2 0f 5e 05 f6 aa 00 00	divsd	43766(%rip), %xmm0
10000d062:	48 89 de	movq	%rbx, %rsi
10000d065:	f2 0f 10 4d b0	movsd	-80(%rbp), %xmm1
10000d06a:	f2 0f 10 55 d0	movsd	-48(%rbp), %xmm2
10000d06f:	b0 03	movb	$3, %al
10000d071:	e8 dc 32 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d076:	49 8b 7e 50	movq	80(%r14), %rdi
10000d07a:	48 8b 15 bf e1 02 00	movq	188863(%rip), %rdx
10000d081:	4c 89 ee	movq	%r13, %rsi
10000d084:	31 c0	xorl	%eax, %eax
10000d086:	e8 c7 32 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d08b:	49 8b 7e 50	movq	80(%r14), %rdi
10000d08f:	48 8b 15 b2 e1 02 00	movq	188850(%rip), %rdx
10000d096:	4c 89 e6	movq	%r12, %rsi
10000d099:	31 c0	xorl	%eax, %eax
10000d09b:	e8 b2 32 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d0a0:	49 8b 7e 50	movq	80(%r14), %rdi
10000d0a4:	8b 15 aa e1 02 00	movl	188842(%rip), %edx
10000d0aa:	4c 89 fe	movq	%r15, %rsi
10000d0ad:	31 c0	xorl	%eax, %eax
10000d0af:	e8 9e 32 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d0b4:	49 8b 7e 50	movq	80(%r14), %rdi
10000d0b8:	8b 15 92 e1 02 00	movl	188818(%rip), %edx
10000d0be:	48 8b 75 c0	movq	-64(%rbp), %rsi
10000d0c2:	31 c0	xorl	%eax, %eax
10000d0c4:	e8 89 32 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d0c9:	48 8d 1d 20 0f 01 00	leaq	69408(%rip), %rbx
10000d0d0:	83 7b 28 01	cmpl	$1, 40(%rbx)
10000d0d4:	75 3e	jne	0x10000d114
10000d0d6:	49 8b 4e 50	movq	80(%r14), %rcx
10000d0da:	48 8d 3d cc 36 00 00	leaq	14028(%rip), %rdi ## literal pool for: "</dict>\n"
10000d0e1:	be 08 00 00 00	movl	$8, %esi
10000d0e6:	ba 01 00 00 00	movl	$1, %edx
10000d0eb:	e8 7a 32 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d0f0:	83 7b 28 01	cmpl	$1, 40(%rbx)
10000d0f4:	75 1e	jne	0x10000d114
10000d0f6:	49 8b 76 50	movq	80(%r14), %rsi
10000d0fa:	48 8d 3d 7a 86 00 00	leaq	34426(%rip), %rdi ## literal pool for: "<!-- end GPU DCC Stats -->\n"
10000d101:	48 83 c4 38	addq	$56, %rsp
10000d105:	5b	popq	%rbx
10000d106:	41 5c	popq	%r12
10000d108:	41 5d	popq	%r13
10000d10a:	41 5e	popq	%r14
10000d10c:	41 5f	popq	%r15
10000d10e:	5d	popq	%rbp
10000d10f:	e9 4a 32 00 00	jmp	0x10001035e ## symbol stub for: _fputs
10000d114:	48 83 c4 38	addq	$56, %rsp
10000d118:	5b	popq	%rbx
10000d119:	41 5c	popq	%r12
10000d11b:	41 5d	popq	%r13
10000d11d:	41 5e	popq	%r14
10000d11f:	41 5f	popq	%r15
10000d121:	5d	popq	%rbp
10000d122:	c3	retq
10000d123:	55	pushq	%rbp
10000d124:	48 89 e5	movq	%rsp, %rbp
10000d127:	53	pushq	%rbx
10000d128:	48 83 ec 18	subq	$24, %rsp
10000d12c:	83 3d 25 e1 02 00 00	cmpl	$0, 188709(%rip)
10000d133:	0f 84 d8 02 00 00	je	0x10000d411
10000d139:	48 8d 4d ec	leaq	-20(%rbp), %rcx
10000d13d:	c7 01 01 00 00 00	movl	$1, (%rcx)
10000d143:	48 8d 3d fa 88 00 00	leaq	35066(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallTakeSample"
10000d14a:	41 b8 04 00 00 00	movl	$4, %r8d
10000d150:	31 f6	xorl	%esi, %esi
10000d152:	31 d2	xorl	%edx, %edx
10000d154:	e8 97 33 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d159:	85 c0	testl	%eax, %eax
10000d15b:	74 2e	je	0x10000d18b
10000d15d:	48 8b 05 0c b1 00 00	movq	45324(%rip), %rax ## literal pool symbol address: ___stderrp
10000d164:	48 8b 18	movq	(%rax), %rbx
10000d167:	e8 7a 31 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000d16c:	8b 08	movl	(%rax), %ecx
10000d16e:	48 8d 35 61 8a 00 00	leaq	35425(%rip), %rsi ## literal pool for: "sysctl write %s failed with errno = %d\n"
10000d175:	48 8d 15 c8 88 00 00	leaq	35016(%rip), %rdx ## literal pool for: "debug.intel.schedThermalStallTakeSample"
10000d17c:	48 89 df	movq	%rbx, %rdi
10000d17f:	31 c0	xorl	%eax, %eax
10000d181:	e8 cc 31 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d186:	e9 86 02 00 00	jmp	0x10000d411
10000d18b:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d18f:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000d196:	48 8d 3d cf 88 00 00	leaq	35023(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallTotal_nSec"
10000d19d:	48 8d 35 3c e0 02 00	leaq	188476(%rip), %rsi
10000d1a4:	31 c9	xorl	%ecx, %ecx
10000d1a6:	45 31 c0	xorl	%r8d, %r8d
10000d1a9:	e8 42 33 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d1ae:	85 c0	testl	%eax, %eax
10000d1b0:	0f 85 5b 02 00 00	jne	0x10000d411
10000d1b6:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d1ba:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000d1c1:	48 8d 3d cc 88 00 00	leaq	35020(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallTotalThermalStallTime_uSec"
10000d1c8:	48 8d 35 19 e0 02 00	leaq	188441(%rip), %rsi
10000d1cf:	31 c9	xorl	%ecx, %ecx
10000d1d1:	45 31 c0	xorl	%r8d, %r8d
10000d1d4:	e8 17 33 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d1d9:	85 c0	testl	%eax, %eax
10000d1db:	0f 85 30 02 00 00	jne	0x10000d411
10000d1e1:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d1e5:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000d1ec:	48 8d 3d d9 88 00 00	leaq	35033(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallRC6Time_uSec"
10000d1f3:	48 8d 35 f6 df 02 00	leaq	188406(%rip), %rsi
10000d1fa:	31 c9	xorl	%ecx, %ecx
10000d1fc:	45 31 c0	xorl	%r8d, %r8d
10000d1ff:	e8 ec 32 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d204:	85 c0	testl	%eax, %eax
10000d206:	0f 85 05 02 00 00	jne	0x10000d411
10000d20c:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d210:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000d217:	48 8d 3d d8 88 00 00	leaq	35032(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallQoSActiveTime_uSec"
10000d21e:	48 8d 35 d3 df 02 00	leaq	188371(%rip), %rsi
10000d225:	31 c9	xorl	%ecx, %ecx
10000d227:	45 31 c0	xorl	%r8d, %r8d
10000d22a:	e8 c1 32 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d22f:	85 c0	testl	%eax, %eax
10000d231:	0f 85 da 01 00 00	jne	0x10000d411
10000d237:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d23b:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000d242:	48 8d 3d dd 88 00 00	leaq	35037(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallIntEnableCount"
10000d249:	48 8d 35 b0 df 02 00	leaq	188336(%rip), %rsi
10000d250:	31 c9	xorl	%ecx, %ecx
10000d252:	45 31 c0	xorl	%r8d, %r8d
10000d255:	e8 96 32 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d25a:	85 c0	testl	%eax, %eax
10000d25c:	0f 85 af 01 00 00	jne	0x10000d411
10000d262:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d266:	48 c7 02 08 00 00 00	movq	$8, (%rdx)
10000d26d:	48 8d 3d de 88 00 00	leaq	35038(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallQoSTimerCount"
10000d274:	48 8d 35 8d df 02 00	leaq	188301(%rip), %rsi
10000d27b:	31 c9	xorl	%ecx, %ecx
10000d27d:	45 31 c0	xorl	%r8d, %r8d
10000d280:	e8 6b 32 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d285:	85 c0	testl	%eax, %eax
10000d287:	0f 85 84 01 00 00	jne	0x10000d411
10000d28d:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d291:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
10000d298:	48 8d 3d de 88 00 00	leaq	35038(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallRPeFreq"
10000d29f:	48 8d 35 6a df 02 00	leaq	188266(%rip), %rsi
10000d2a6:	31 c9	xorl	%ecx, %ecx
10000d2a8:	45 31 c0	xorl	%r8d, %r8d
10000d2ab:	e8 40 32 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d2b0:	85 c0	testl	%eax, %eax
10000d2b2:	0f 85 59 01 00 00	jne	0x10000d411
10000d2b8:	48 8d 55 f0	leaq	-16(%rbp), %rdx
10000d2bc:	48 c7 02 04 00 00 00	movq	$4, (%rdx)
10000d2c3:	48 8d 3d d8 88 00 00	leaq	35032(%rip), %rdi ## literal pool for: "debug.intel.schedThermalStallInvalidTransitionCount"
10000d2ca:	48 8d 35 43 df 02 00	leaq	188227(%rip), %rsi
10000d2d1:	31 c9	xorl	%ecx, %ecx
10000d2d3:	45 31 c0	xorl	%r8d, %r8d
10000d2d6:	e8 15 32 00 00	callq	0x1000104f0 ## symbol stub for: _sysctlbyname
10000d2db:	85 c0	testl	%eax, %eax
10000d2dd:	0f 85 2e 01 00 00	jne	0x10000d411
10000d2e3:	48 8d 05 ae 0c 01 00	leaq	68782(%rip), %rax
10000d2ea:	80 38 00	cmpb	$0, (%rax)
10000d2ed:	74 38	je	0x10000d327
10000d2ef:	48 8b 0d 1a df 02 00	movq	188186(%rip), %rcx
10000d2f6:	48 89 0d 93 df 02 00	movq	%rcx, 188307(%rip)
10000d2fd:	0f 28 05 fc de 02 00	movaps	188156(%rip), %xmm0
10000d304:	0f 29 05 75 df 02 00	movaps	%xmm0, 188277(%rip)
10000d30b:	0f 28 05 de de 02 00	movaps	188126(%rip), %xmm0
10000d312:	0f 29 05 57 df 02 00	movaps	%xmm0, 188247(%rip)
10000d319:	0f 28 05 c0 de 02 00	movaps	188096(%rip), %xmm0
10000d320:	0f 29 05 39 df 02 00	movaps	%xmm0, 188217(%rip)
10000d327:	31 c9	xorl	%ecx, %ecx
10000d329:	80 78 02 00	cmpb	$0, 2(%rax)
10000d32d:	0f 94 c1	sete	%cl
10000d330:	66 0f 28 0d 28 df 02 00	movapd	188200(%rip), %xmm1
10000d338:	66 0f 6e c1	movd	%ecx, %xmm0
10000d33c:	66 0f 70 c0 44	pshufd	$68, %xmm0, %xmm0
10000d341:	66 0f 73 f0 3f	psllq	$63, %xmm0
10000d346:	66 0f 38 15 0d 51 de 02 00	blendvpd	%xmm0, 187985(%rip), %xmm1
10000d34f:	66 0f 6f 15 89 de 02 00	movdqa	188041(%rip), %xmm2
10000d357:	66 0f fb d1	psubq	%xmm1, %xmm2
10000d35b:	66 0f 7f 15 bd de 02 00	movdqa	%xmm2, 188093(%rip)
10000d363:	66 0f 6f 0d 85 de 02 00	movdqa	188037(%rip), %xmm1
10000d36b:	66 0f 28 15 fd de 02 00	movapd	188157(%rip), %xmm2
10000d373:	66 0f 38 15 15 34 de 02 00	blendvpd	%xmm0, 187956(%rip), %xmm2
10000d37c:	66 0f fb ca	psubq	%xmm2, %xmm1
10000d380:	66 0f 7f 0d a8 de 02 00	movdqa	%xmm1, 188072(%rip)
10000d388:	66 0f 6f 0d 70 de 02 00	movdqa	188016(%rip), %xmm1
10000d390:	66 0f 28 15 e8 de 02 00	movapd	188136(%rip), %xmm2
10000d398:	66 0f 38 15 15 1f de 02 00	blendvpd	%xmm0, 187935(%rip), %xmm2
10000d3a1:	66 0f fb ca	psubq	%xmm2, %xmm1
10000d3a5:	66 0f 7f 0d 93 de 02 00	movdqa	%xmm1, 188051(%rip)
10000d3ad:	8b 05 61 de 02 00	movl	188001(%rip), %eax
10000d3b3:	48 8d 0d 1a de 02 00	leaq	187930(%rip), %rcx
10000d3ba:	48 8d 15 d3 de 02 00	leaq	188115(%rip), %rdx
10000d3c1:	48 0f 44 d1	cmoveq	%rcx, %rdx
10000d3c5:	2b 02	subl	(%rdx), %eax
10000d3c7:	89 05 87 de 02 00	movl	%eax, 188039(%rip)
10000d3cd:	8b 05 3d de 02 00	movl	187965(%rip), %eax
10000d3d3:	89 05 77 de 02 00	movl	%eax, 188023(%rip)
10000d3d9:	48 8b 05 30 de 02 00	movq	187952(%rip), %rax
10000d3e0:	48 89 05 e9 dd 02 00	movq	%rax, 187881(%rip)
10000d3e7:	0f 28 05 12 de 02 00	movaps	187922(%rip), %xmm0
10000d3ee:	0f 29 05 cb dd 02 00	movaps	%xmm0, 187851(%rip)
10000d3f5:	0f 28 05 f4 dd 02 00	movaps	187892(%rip), %xmm0
10000d3fc:	0f 29 05 ad dd 02 00	movaps	%xmm0, 187821(%rip)
10000d403:	0f 28 05 d6 dd 02 00	movaps	187862(%rip), %xmm0
10000d40a:	0f 29 05 8f dd 02 00	movaps	%xmm0, 187791(%rip)
10000d411:	48 83 c4 18	addq	$24, %rsp
10000d415:	5b	popq	%rbx
10000d416:	5d	popq	%rbp
10000d417:	c3	retq
10000d418:	55	pushq	%rbp
10000d419:	48 89 e5	movq	%rsp, %rbp
10000d41c:	41 56	pushq	%r14
10000d41e:	53	pushq	%rbx
10000d41f:	48 83 ec 10	subq	$16, %rsp
10000d423:	48 c7 45 e8 00 00 00 00	movq	$0, -24(%rbp)
10000d42b:	48 8b 05 3e af 00 00	movq	44862(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
10000d432:	8b 38	movl	(%rax), %edi
10000d434:	e8 f3 2d 00 00	callq	0x10001022c ## symbol stub for: _IORegistryGetRootEntry
10000d439:	85 c0	testl	%eax, %eax
10000d43b:	74 63	je	0x10000d4a0
10000d43d:	89 c3	movl	%eax, %ebx
10000d43f:	4c 8d 75 e8	leaq	-24(%rbp), %r14
10000d443:	89 c7	movl	%eax, %edi
10000d445:	4c 89 f6	movq	%r14, %rsi
10000d448:	e8 52 03 00 00	callq	0x10000d79f
10000d44d:	89 df	movl	%ebx, %edi
10000d44f:	e8 90 2d 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000d454:	49 8b 1e	movq	(%r14), %rbx
10000d457:	48 85 db	testq	%rbx, %rbx
10000d45a:	74 4d	je	0x10000d4a9
10000d45c:	48 89 df	movq	%rbx, %rdi
10000d45f:	e8 0a 2e 00 00	callq	0x10001026e ## symbol stub for: _IOReportGetChannelCount
10000d464:	85 c0	testl	%eax, %eax
10000d466:	7e 69	jle	0x10000d4d1
10000d468:	48 8d 15 31 de 02 00	leaq	187953(%rip), %rdx
10000d46f:	31 ff	xorl	%edi, %edi
10000d471:	48 89 de	movq	%rbx, %rsi
10000d474:	31 c9	xorl	%ecx, %ecx
10000d476:	45 31 c0	xorl	%r8d, %r8d
10000d479:	e8 ea 2d 00 00	callq	0x100010268 ## symbol stub for: _IOReportCreateSubscription
10000d47e:	48 89 05 23 de 02 00	movq	%rax, 187939(%rip)
10000d485:	48 83 3d 13 de 02 00 00	cmpq	$0, 187923(%rip)
10000d48d:	74 64	je	0x10000d4f3
10000d48f:	48 85 c0	testq	%rax, %rax
10000d492:	74 5f	je	0x10000d4f3
10000d494:	c6 05 15 de 02 00 01	movb	$1, 187925(%rip)
10000d49b:	e9 ab 00 00 00	jmp	0x10000d54b
10000d4a0:	48 83 c4 10	addq	$16, %rsp
10000d4a4:	5b	popq	%rbx
10000d4a5:	41 5e	popq	%r14
10000d4a7:	5d	popq	%rbp
10000d4a8:	c3	retq
10000d4a9:	48 8b 05 c0 ad 00 00	movq	44480(%rip), %rax ## literal pool symbol address: ___stderrp
10000d4b0:	48 8b 08	movq	(%rax), %rcx
10000d4b3:	48 8d 3d 81 31 00 00	leaq	12673(%rip), %rdi ## literal pool for: "IOReportCopyChannelsForDriver() failed\n"
10000d4ba:	be 27 00 00 00	movl	$39, %esi
10000d4bf:	ba 01 00 00 00	movl	$1, %edx
10000d4c4:	48 83 c4 10	addq	$16, %rsp
10000d4c8:	5b	popq	%rbx
10000d4c9:	41 5e	popq	%r14
10000d4cb:	5d	popq	%rbp
10000d4cc:	e9 99 2e 00 00	jmp	0x10001036a ## symbol stub for: _fwrite
10000d4d1:	48 8b 05 98 ad 00 00	movq	44440(%rip), %rax ## literal pool symbol address: ___stderrp
10000d4d8:	48 8b 08	movq	(%rax), %rcx
10000d4db:	48 8d 3d 81 31 00 00	leaq	12673(%rip), %rdi ## literal pool for: "No channels found!\n"
10000d4e2:	be 13 00 00 00	movl	$19, %esi
10000d4e7:	ba 01 00 00 00	movl	$1, %edx
10000d4ec:	e8 79 2e 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d4f1:	eb 58	jmp	0x10000d54b
10000d4f3:	48 8b 05 76 ad 00 00	movq	44406(%rip), %rax ## literal pool symbol address: ___stderrp
10000d4fa:	48 8b 08	movq	(%rax), %rcx
10000d4fd:	48 8d 3d 73 31 00 00	leaq	12659(%rip), %rdi ## literal pool for: "IOReportCreateSubscription() failed\n"
10000d504:	be 24 00 00 00	movl	$36, %esi
10000d509:	ba 01 00 00 00	movl	$1, %edx
10000d50e:	e8 57 2e 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d513:	48 8b 3d 86 dd 02 00	movq	187782(%rip), %rdi
10000d51a:	48 85 ff	testq	%rdi, %rdi
10000d51d:	74 10	je	0x10000d52f
10000d51f:	e8 6c 2c 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000d524:	48 c7 05 71 dd 02 00 00 00 00 00	movq	$0, 187761(%rip)
10000d52f:	48 8b 3d 72 dd 02 00	movq	187762(%rip), %rdi
10000d536:	48 85 ff	testq	%rdi, %rdi
10000d539:	74 10	je	0x10000d54b
10000d53b:	e8 50 2c 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000d540:	48 c7 05 5d dd 02 00 00 00 00 00	movq	$0, 187741(%rip)
10000d54b:	48 89 df	movq	%rbx, %rdi
10000d54e:	48 83 c4 10	addq	$16, %rsp
10000d552:	5b	popq	%rbx
10000d553:	41 5e	popq	%r14
10000d555:	5d	popq	%rbp
10000d556:	e9 35 2c 00 00	jmp	0x100010190 ## symbol stub for: _CFRelease
10000d55b:	55	pushq	%rbp
10000d55c:	48 89 e5	movq	%rsp, %rbp
10000d55f:	41 56	pushq	%r14
10000d561:	53	pushq	%rbx
10000d562:	48 83 ec 50	subq	$80, %rsp
10000d566:	48 83 3d 4a dd 02 00 00	cmpq	$0, 187722(%rip)
10000d56e:	0f 84 3b 01 00 00	je	0x10000d6af
10000d574:	4c 8d 35 75 0a 01 00	leaq	68213(%rip), %r14
10000d57b:	41 8b 46 28	movl	40(%r14), %eax
10000d57f:	83 f8 01	cmpl	$1, %eax
10000d582:	74 40	je	0x10000d5c4
10000d584:	85 c0	testl	%eax, %eax
10000d586:	75 5d	jne	0x10000d5e5
10000d588:	48 8d 1d 09 0a 01 00	leaq	68105(%rip), %rbx
10000d58f:	48 8b 4b 50	movq	80(%rbx), %rcx
10000d593:	48 8d 3d ce 86 00 00	leaq	34510(%rip), %rdi ## literal pool for: "\n**** Device Power States ****\n"
10000d59a:	be 1f 00 00 00	movl	$31, %esi
10000d59f:	ba 01 00 00 00	movl	$1, %edx
10000d5a4:	e8 c1 2d 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d5a9:	48 8b 7b 50	movq	80(%rbx), %rdi
10000d5ad:	48 8d 35 d4 86 00 00	leaq	34516(%rip), %rsi ## literal pool for: "%-35s State Residencies ms/s\n"
10000d5b4:	48 8d 15 eb 86 00 00	leaq	34539(%rip), %rdx ## literal pool for: "Device"
10000d5bb:	31 c0	xorl	%eax, %eax
10000d5bd:	e8 90 2d 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000d5c2:	eb 21	jmp	0x10000d5e5
10000d5c4:	48 8d 05 cd 09 01 00	leaq	68045(%rip), %rax
10000d5cb:	48 8b 48 50	movq	80(%rax), %rcx
10000d5cf:	48 8d 3d d7 86 00 00	leaq	34519(%rip), %rdi ## literal pool for: "<key>devices</key>\n<array>\n"
10000d5d6:	be 1b 00 00 00	movl	$27, %esi
10000d5db:	ba 01 00 00 00	movl	$1, %edx
10000d5e0:	e8 85 2d 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d5e5:	48 8b 1d d4 dc 02 00	movq	187604(%rip), %rbx
10000d5ec:	48 85 db	testq	%rbx, %rbx
10000d5ef:	75 21	jne	0x10000d612
10000d5f1:	48 8b 3d c0 dc 02 00	movq	187584(%rip), %rdi
10000d5f8:	e8 71 2c 00 00	callq	0x10001026e ## symbol stub for: _IOReportGetChannelCount
10000d5fd:	89 c0	movl	%eax, %eax
10000d5ff:	48 69 f8 8a 00 00 00	imulq	$138, %rax, %rdi
10000d606:	e8 b9 2d 00 00	callq	0x1000103c4 ## symbol stub for: _malloc
10000d60b:	48 89 05 ae dc 02 00	movq	%rax, 187566(%rip)
10000d612:	48 85 db	testq	%rbx, %rbx
10000d615:	48 8d 45 d0	leaq	-48(%rbp), %rax
10000d619:	48 c7 00 00 00 00 00	movq	$0, (%rax)
10000d620:	48 89 40 08	movq	%rax, 8(%rax)
10000d624:	48 b9 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rcx
10000d62e:	48 89 48 10	movq	%rcx, 16(%rax)
10000d632:	c7 40 18 00 00 00 00	movl	$0, 24(%rax)
10000d639:	48 8b 3d 78 dc 02 00	movq	187512(%rip), %rdi
10000d640:	48 8b 0d d9 ab 00 00	movq	43993(%rip), %rcx ## literal pool symbol address: __NSConcreteStackBlock
10000d647:	48 8d 75 a0	leaq	-96(%rbp), %rsi
10000d64b:	48 89 0e	movq	%rcx, (%rsi)
10000d64e:	48 c7 46 08 00 00 00 42	movq	$1107296256, 8(%rsi)
10000d656:	48 8d 0d da 02 00 00	leaq	730(%rip), %rcx
10000d65d:	48 89 4e 10	movq	%rcx, 16(%rsi)
10000d661:	48 8d 0d c0 bf 00 00	leaq	49088(%rip), %rcx
10000d668:	48 89 4e 18	movq	%rcx, 24(%rsi)
10000d66c:	0f 94 46 28	sete	40(%rsi)
10000d670:	48 89 46 20	movq	%rax, 32(%rsi)
10000d674:	e8 fb 2b 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
10000d679:	41 83 7e 28 01	cmpl	$1, 40(%r14)
10000d67e:	75 21	jne	0x10000d6a1
10000d680:	48 8d 05 11 09 01 00	leaq	67857(%rip), %rax
10000d687:	48 8b 48 50	movq	80(%rax), %rcx
10000d68b:	48 8d 3d 67 42 00 00	leaq	16999(%rip), %rdi ## literal pool for: "</array>\n"
10000d692:	be 09 00 00 00	movl	$9, %esi
10000d697:	ba 01 00 00 00	movl	$1, %edx
10000d69c:	e8 c9 2c 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d6a1:	48 8d 7d d0	leaq	-48(%rbp), %rdi
10000d6a5:	be 08 00 00 00	movl	$8, %esi
10000d6aa:	e8 1f 2c 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000d6af:	48 83 c4 50	addq	$80, %rsp
10000d6b3:	5b	popq	%rbx
10000d6b4:	41 5e	popq	%r14
10000d6b6:	5d	popq	%rbp
10000d6b7:	c3	retq
10000d6b8:	55	pushq	%rbp
10000d6b9:	48 89 e5	movq	%rsp, %rbp
10000d6bc:	53	pushq	%rbx
10000d6bd:	50	pushq	%rax
10000d6be:	80 3d eb db 02 00 01	cmpb	$1, 187371(%rip)
10000d6c5:	0f 85 cd 00 00 00	jne	0x10000d798
10000d6cb:	48 8b 3d f6 db 02 00	movq	187382(%rip), %rdi
10000d6d2:	48 85 ff	testq	%rdi, %rdi
10000d6d5:	74 05	je	0x10000d6dc
10000d6d7:	e8 b4 2a 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000d6dc:	48 8d 1d b5 08 01 00	leaq	67765(%rip), %rbx
10000d6e3:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000d6e7:	48 8d 05 ea db 02 00	leaq	187370(%rip), %rax
10000d6ee:	48 8d 0d db db 02 00	leaq	187355(%rip), %rcx
10000d6f5:	48 0f 44 c8	cmoveq	%rax, %rcx
10000d6f9:	48 8b 01	movq	(%rcx), %rax
10000d6fc:	48 89 05 c5 db 02 00	movq	%rax, 187333(%rip)
10000d703:	48 8b 3d 9e db 02 00	movq	187294(%rip), %rdi
10000d70a:	48 8b 35 8f db 02 00	movq	187279(%rip), %rsi
10000d711:	31 d2	xorl	%edx, %edx
10000d713:	e8 44 2b 00 00	callq	0x10001025c ## symbol stub for: _IOReportCreateSamples
10000d718:	48 89 05 b9 db 02 00	movq	%rax, 187321(%rip)
10000d71f:	48 85 c0	testq	%rax, %rax
10000d722:	74 4d	je	0x10000d771
10000d724:	80 3b 00	cmpb	$0, (%rbx)
10000d727:	74 0f	je	0x10000d738
10000d729:	48 89 05 a0 db 02 00	movq	%rax, 187296(%rip)
10000d730:	48 89 c7	movq	%rax, %rdi
10000d733:	e8 5e 2a 00 00	callq	0x100010196 ## symbol stub for: _CFRetain
10000d738:	48 8b 3d 79 db 02 00	movq	187257(%rip), %rdi
10000d73f:	48 85 ff	testq	%rdi, %rdi
10000d742:	74 05	je	0x10000d749
10000d744:	e8 47 2a 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000d749:	48 8b 3d 78 db 02 00	movq	187256(%rip), %rdi
10000d750:	48 85 ff	testq	%rdi, %rdi
10000d753:	74 43	je	0x10000d798
10000d755:	48 8b 35 7c db 02 00	movq	187260(%rip), %rsi
10000d75c:	48 85 f6	testq	%rsi, %rsi
10000d75f:	74 37	je	0x10000d798
10000d761:	31 d2	xorl	%edx, %edx
10000d763:	e8 fa 2a 00 00	callq	0x100010262 ## symbol stub for: _IOReportCreateSamplesDelta
10000d768:	48 89 05 49 db 02 00	movq	%rax, 187209(%rip)
10000d76f:	eb 27	jmp	0x10000d798
10000d771:	48 8b 05 f8 aa 00 00	movq	43768(%rip), %rax ## literal pool symbol address: ___stderrp
10000d778:	48 8b 08	movq	(%rax), %rcx
10000d77b:	48 8d 3d 9a 86 00 00	leaq	34458(%rip), %rdi ## literal pool for: "Unable to get device statistics!\n"
10000d782:	be 21 00 00 00	movl	$33, %esi
10000d787:	ba 01 00 00 00	movl	$1, %edx
10000d78c:	e8 d9 2b 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000d791:	c6 05 18 db 02 00 00	movb	$0, 187160(%rip)
10000d798:	48 83 c4 08	addq	$8, %rsp
10000d79c:	5b	popq	%rbx
10000d79d:	5d	popq	%rbp
10000d79e:	c3	retq
10000d79f:	55	pushq	%rbp
10000d7a0:	48 89 e5	movq	%rsp, %rbp
10000d7a3:	41 57	pushq	%r15
10000d7a5:	41 56	pushq	%r14
10000d7a7:	41 55	pushq	%r13
10000d7a9:	41 54	pushq	%r12
10000d7ab:	53	pushq	%rbx
10000d7ac:	48 81 ec 98 00 00 00	subq	$152, %rsp
10000d7b3:	49 89 f6	movq	%rsi, %r14
10000d7b6:	41 89 ff	movl	%edi, %r15d
10000d7b9:	48 8b 05 a8 aa 00 00	movq	43688(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000d7c0:	48 8b 00	movq	(%rax), %rax
10000d7c3:	48 89 45 d0	movq	%rax, -48(%rbp)
10000d7c7:	48 8d 95 4c ff ff ff	leaq	-180(%rbp), %rdx
10000d7ce:	c7 02 00 00 00 00	movl	$0, (%rdx)
10000d7d4:	48 8d 35 3f 84 00 00	leaq	33855(%rip), %rsi ## literal pool for: "IOPower"
10000d7db:	e8 2e 2a 00 00	callq	0x10001020e ## symbol stub for: _IORegistryEntryGetChildIterator
10000d7e0:	85 c0	testl	%eax, %eax
10000d7e2:	0f 85 14 01 00 00	jne	0x10000d8fc
10000d7e8:	8b bd 4c ff ff ff	movl	-180(%rbp), %edi
10000d7ee:	e8 df 29 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000d7f3:	41 89 c5	movl	%eax, %r13d
10000d7f6:	48 8d 35 1d 84 00 00	leaq	33821(%rip), %rsi ## literal pool for: "IOPower"
10000d7fd:	48 8d 95 50 ff ff ff	leaq	-176(%rbp), %rdx
10000d804:	44 89 ff	movl	%r15d, %edi
10000d807:	e8 14 2a 00 00	callq	0x100010220 ## symbol stub for: _IORegistryEntryGetNameInPlane
10000d80c:	85 c0	testl	%eax, %eax
10000d80e:	0f 85 e8 00 00 00	jne	0x10000d8fc
10000d814:	66 0f 6f 85 50 ff ff ff	movdqa	-176(%rbp), %xmm0
10000d81c:	0f b7 85 60 ff ff ff	movzwl	-160(%rbp), %eax
10000d823:	66 0f 6e c8	movd	%eax, %xmm1
10000d827:	66 0f ef 05 a1 a3 00 00	pxor	41889(%rip), %xmm0
10000d82f:	66 0f ef 0d a9 a3 00 00	pxor	41897(%rip), %xmm1
10000d837:	66 0f eb c8	por	%xmm0, %xmm1
10000d83b:	66 0f 38 17 c9	ptest	%xmm1, %xmm1
10000d840:	74 4c	je	0x10000d88e
10000d842:	48 8d bd 50 ff ff ff	leaq	-176(%rbp), %rdi
10000d849:	e8 6e 2a 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000d84e:	48 85 c0	testq	%rax, %rax
10000d851:	0f 84 90 00 00 00	je	0x10000d8e7
10000d857:	49 89 c7	movq	%rax, %r15
10000d85a:	48 be 74 73 69 48 74 53 4d 50	movabsq	$5786372855137137524, %rsi
10000d864:	48 89 c7	movq	%rax, %rdi
10000d867:	31 d2	xorl	%edx, %edx
10000d869:	e8 e8 29 00 00	callq	0x100010256 ## symbol stub for: _IOReportCopyChannelsWithID
10000d86e:	48 85 c0	testq	%rax, %rax
10000d871:	74 1e	je	0x10000d891
10000d873:	49 89 c4	movq	%rax, %r12
10000d876:	49 8b 3e	movq	(%r14), %rdi
10000d879:	48 85 ff	testq	%rdi, %rdi
10000d87c:	0f 84 9c 00 00 00	je	0x10000d91e
10000d882:	4c 89 e6	movq	%r12, %rsi
10000d885:	31 d2	xorl	%edx, %edx
10000d887:	e8 ee 29 00 00	callq	0x10001027a ## symbol stub for: _IOReportMergeChannels
10000d88c:	eb 06	jmp	0x10000d894
10000d88e:	45 31 ff	xorl	%r15d, %r15d
10000d891:	45 31 e4	xorl	%r12d, %r12d
10000d894:	45 85 ed	testl	%r13d, %r13d
10000d897:	74 27	je	0x10000d8c0
10000d899:	8b bd 4c ff ff ff	movl	-180(%rbp), %edi
10000d89f:	e8 2e 29 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000d8a4:	89 c3	movl	%eax, %ebx
10000d8a6:	44 89 ef	movl	%r13d, %edi
10000d8a9:	4c 89 f6	movq	%r14, %rsi
10000d8ac:	e8 ee fe ff ff	callq	0x10000d79f
10000d8b1:	44 89 ef	movl	%r13d, %edi
10000d8b4:	e8 2b 29 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000d8b9:	41 89 dd	movl	%ebx, %r13d
10000d8bc:	85 db	testl	%ebx, %ebx
10000d8be:	75 d9	jne	0x10000d899
10000d8c0:	8b bd 4c ff ff ff	movl	-180(%rbp), %edi
10000d8c6:	e8 19 29 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000d8cb:	4d 85 e4	testq	%r12, %r12
10000d8ce:	74 08	je	0x10000d8d8
10000d8d0:	4c 89 e7	movq	%r12, %rdi
10000d8d3:	e8 b8 28 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000d8d8:	4d 85 ff	testq	%r15, %r15
10000d8db:	74 1f	je	0x10000d8fc
10000d8dd:	4c 89 ff	movq	%r15, %rdi
10000d8e0:	e8 ab 28 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000d8e5:	eb 15	jmp	0x10000d8fc
10000d8e7:	48 8d 3d 46 83 00 00	leaq	33606(%rip), %rdi ## literal pool for: "Failed to match an object with name %s in registry\n"
10000d8ee:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
10000d8f5:	31 c0	xorl	%eax, %eax
10000d8f7:	e8 52 2b 00 00	callq	0x10001044e ## symbol stub for: _printf
10000d8fc:	48 8b 05 65 a9 00 00	movq	43365(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000d903:	48 8b 00	movq	(%rax), %rax
10000d906:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000d90a:	75 26	jne	0x10000d932
10000d90c:	48 81 c4 98 00 00 00	addq	$152, %rsp
10000d913:	5b	popq	%rbx
10000d914:	41 5c	popq	%r12
10000d916:	41 5d	popq	%r13
10000d918:	41 5e	popq	%r14
10000d91a:	41 5f	popq	%r15
10000d91c:	5d	popq	%rbp
10000d91d:	c3	retq
10000d91e:	31 ff	xorl	%edi, %edi
10000d920:	31 f6	xorl	%esi, %esi
10000d922:	4c 89 e2	movq	%r12, %rdx
10000d925:	e8 48 28 00 00	callq	0x100010172 ## symbol stub for: _CFDictionaryCreateMutableCopy
10000d92a:	49 89 06	movq	%rax, (%r14)
10000d92d:	e9 62 ff ff ff	jmp	0x10000d894
10000d932:	e8 c1 29 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000d937:	55	pushq	%rbp
10000d938:	48 89 e5	movq	%rsp, %rbp
10000d93b:	41 57	pushq	%r15
10000d93d:	41 56	pushq	%r14
10000d93f:	41 55	pushq	%r13
10000d941:	41 54	pushq	%r12
10000d943:	53	pushq	%rbx
10000d944:	48 81 ec 08 01 00 00	subq	$264, %rsp
10000d94b:	49 89 fc	movq	%rdi, %r12
10000d94e:	48 8b 05 13 a9 00 00	movq	43283(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000d955:	48 8b 00	movq	(%rax), %rax
10000d958:	48 89 45 d0	movq	%rax, -48(%rbp)
10000d95c:	48 89 b5 f8 fe ff ff	movq	%rsi, -264(%rbp)
10000d963:	48 89 f7	movq	%rsi, %rdi
10000d966:	e8 27 29 00 00	callq	0x100010292 ## symbol stub for: _IOReportStateGetCount
10000d96b:	41 89 c5	movl	%eax, %r13d
10000d96e:	41 80 7c 24 28 00	cmpb	$0, 40(%r12)
10000d974:	0f 84 8b 00 00 00	je	0x10000da05
10000d97a:	48 8b bd f8 fe ff ff	movq	-264(%rbp), %rdi
10000d981:	e8 b8 28 00 00	callq	0x10001023e ## symbol stub for: _IOReportChannelGetDriverName
10000d986:	48 85 c0	testq	%rax, %rax
10000d989:	0f 84 08 04 00 00	je	0x10000dd97
10000d98f:	49 8b 4c 24 20	movq	32(%r12), %rcx
10000d994:	48 8b 49 08	movq	8(%rcx), %rcx
10000d998:	48 63 49 18	movslq	24(%rcx), %rcx
10000d99c:	48 69 f1 8a 00 00 00	imulq	$138, %rcx, %rsi
10000d9a3:	48 03 35 16 d9 02 00	addq	186646(%rip), %rsi
10000d9aa:	ba 80 00 00 00	movl	$128, %edx
10000d9af:	48 89 c7	movq	%rax, %rdi
10000d9b2:	b9 00 06 00 00	movl	$1536, %ecx
10000d9b7:	e8 e0 27 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
10000d9bc:	48 8b 05 fd d8 02 00	movq	186621(%rip), %rax
10000d9c3:	49 8b 4c 24 20	movq	32(%r12), %rcx
10000d9c8:	48 8b 49 08	movq	8(%rcx), %rcx
10000d9cc:	48 63 49 18	movslq	24(%rcx), %rcx
10000d9d0:	48 69 c9 8a 00 00 00	imulq	$138, %rcx, %rcx
10000d9d7:	c6 44 08 7f 00	movb	$0, 127(%rax,%rcx)
10000d9dc:	49 8b 4c 24 20	movq	32(%r12), %rcx
10000d9e1:	48 8b 49 08	movq	8(%rcx), %rcx
10000d9e5:	48 63 49 18	movslq	24(%rcx), %rcx
10000d9e9:	48 69 f9 8a 00 00 00	imulq	$138, %rcx, %rdi
10000d9f0:	48 01 c7	addq	%rax, %rdi
10000d9f3:	be 20 00 00 00	movl	$32, %esi
10000d9f8:	e8 b1 2a 00 00	callq	0x1000104ae ## symbol stub for: _strchr
10000d9fd:	48 85 c0	testq	%rax, %rax
10000da00:	74 03	je	0x10000da05
10000da02:	c6 00 00	movb	$0, (%rax)
10000da05:	48 8d 05 e4 05 01 00	leaq	67044(%rip), %rax
10000da0c:	8b 40 28	movl	40(%rax), %eax
10000da0f:	83 f8 01	cmpl	$1, %eax
10000da12:	74 52	je	0x10000da66
10000da14:	85 c0	testl	%eax, %eax
10000da16:	0f 85 92 00 00 00	jne	0x10000daae
10000da1c:	49 8b 44 24 20	movq	32(%r12), %rax
10000da21:	48 8b 40 08	movq	8(%rax), %rax
10000da25:	48 63 40 18	movslq	24(%rax), %rax
10000da29:	48 69 f0 8a 00 00 00	imulq	$138, %rax, %rsi
10000da30:	48 03 35 89 d8 02 00	addq	186505(%rip), %rsi
10000da37:	48 8d 9d 50 ff ff ff	leaq	-176(%rbp), %rbx
10000da3e:	ba 23 00 00 00	movl	$35, %edx
10000da43:	48 89 df	movq	%rbx, %rdi
10000da46:	e8 8d 2a 00 00	callq	0x1000104d8 ## symbol stub for: _strncpy
10000da4b:	c6 43 23 00	movb	$0, 35(%rbx)
10000da4f:	48 8d 05 42 05 01 00	leaq	66882(%rip), %rax
10000da56:	48 8b 78 50	movq	80(%rax), %rdi
10000da5a:	48 8d 35 94 82 00 00	leaq	33428(%rip), %rsi ## literal pool for: "%-35s"
10000da61:	48 89 da	movq	%rbx, %rdx
10000da64:	eb 41	jmp	0x10000daa7
10000da66:	49 8b 44 24 20	movq	32(%r12), %rax
10000da6b:	48 8b 40 08	movq	8(%rax), %rax
10000da6f:	48 63 40 18	movslq	24(%rax), %rax
10000da73:	48 69 f8 8a 00 00 00	imulq	$138, %rax, %rdi
10000da7a:	48 03 3d 3f d8 02 00	addq	186431(%rip), %rdi
10000da81:	48 8d b5 50 ff ff ff	leaq	-176(%rbp), %rsi
10000da88:	ba 80 00 00 00	movl	$128, %edx
10000da8d:	e8 64 e3 ff ff	callq	0x10000bdf6
10000da92:	48 8d 0d ff 04 01 00	leaq	66815(%rip), %rcx
10000da99:	48 8b 79 50	movq	80(%rcx), %rdi
10000da9d:	48 8d 35 57 82 00 00	leaq	33367(%rip), %rsi ## literal pool for: "<dict>\n<key>name</key>\n<string>%s</string>\n<key>states</key>\n<array>\n"
10000daa4:	48 89 c2	movq	%rax, %rdx
10000daa7:	31 c0	xorl	%eax, %eax
10000daa9:	e8 a4 28 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000daae:	45 85 ed	testl	%r13d, %r13d
10000dab1:	0f 8e 7a 02 00 00	jle	0x10000dd31
10000dab7:	45 89 ee	movl	%r13d, %r14d
10000daba:	31 db	xorl	%ebx, %ebx
10000dabc:	45 31 ff	xorl	%r15d, %r15d
10000dabf:	48 8b bd f8 fe ff ff	movq	-264(%rbp), %rdi
10000dac6:	89 de	movl	%ebx, %esi
10000dac8:	e8 dd 27 00 00	callq	0x1000102aa ## symbol stub for: _IOReportStateGetResidency
10000dacd:	48 83 fb 09	cmpq	$9, %rbx
10000dad1:	77 08	ja	0x10000dadb
10000dad3:	48 89 84 dd 00 ff ff ff	movq	%rax, -256(%rbp,%rbx,8)
10000dadb:	49 01 c7	addq	%rax, %r15
10000dade:	48 ff c3	incq	%rbx
10000dae1:	49 39 de	cmpq	%rbx, %r14
10000dae4:	75 d9	jne	0x10000dabf
10000dae6:	66 49 0f 6e c7	movq	%r15, %xmm0
10000daeb:	66 0f 62 05 0d 8c 00 00	punpckldq	35853(%rip), %xmm0
10000daf3:	66 0f 5c 05 15 8c 00 00	subpd	35861(%rip), %xmm0
10000dafb:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000daff:	66 0f 29 85 d0 fe ff ff	movapd	%xmm0, -304(%rbp)
10000db07:	48 8b 05 5a a8 00 00	movq	43098(%rip), %rax ## literal pool symbol address: _kCFBooleanTrue
10000db0e:	48 8b 00	movq	(%rax), %rax
10000db11:	48 89 85 f0 fe ff ff	movq	%rax, -272(%rbp)
10000db18:	41 ff cd	decl	%r13d
10000db1b:	41 83 fd 09	cmpl	$9, %r13d
10000db1f:	b8 09 00 00 00	movl	$9, %eax
10000db24:	41 0f 42 c5	cmovbl	%r13d, %eax
10000db28:	4d 8d 7c 24 20	leaq	32(%r12), %r15
10000db2d:	ff c0	incl	%eax
10000db2f:	48 89 85 e0 fe ff ff	movq	%rax, -288(%rbp)
10000db36:	31 db	xorl	%ebx, %ebx
10000db38:	4c 89 a5 e8 fe ff ff	movq	%r12, -280(%rbp)
10000db3f:	4c 8b b4 dd 00 ff ff ff	movq	-256(%rbp,%rbx,8), %r14
10000db47:	41 80 7c 24 28 00	cmpb	$0, 40(%r12)
10000db4d:	74 6b	je	0x10000dbba
10000db4f:	48 8b bd f8 fe ff ff	movq	-264(%rbp), %rdi
10000db56:	89 de	movl	%ebx, %esi
10000db58:	e8 41 27 00 00	callq	0x10001029e ## symbol stub for: _IOReportStateGetIDForIndex
10000db5d:	48 89 c7	movq	%rax, %rdi
10000db60:	e8 8b 26 00 00	callq	0x1000101f0 ## symbol stub for: _IOPMCopyPowerStateInfo
10000db65:	49 89 c5	movq	%rax, %r13
10000db68:	48 89 c7	movq	%rax, %rdi
10000db6b:	48 8d 35 9e bf 00 00	leaq	49054(%rip), %rsi ## Objc cfstring ref: @"IsLowPower"
10000db72:	e8 01 26 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000db77:	4c 8b a5 f0 fe ff ff	movq	-272(%rbp), %r12
10000db7e:	4c 39 e0	cmpq	%r12, %rax
10000db81:	74 40	je	0x10000dbc3
10000db83:	4c 89 ef	movq	%r13, %rdi
10000db86:	48 8d 35 a3 bf 00 00	leaq	49059(%rip), %rsi ## Objc cfstring ref: @"IsDeviceUsable"
10000db8d:	e8 e6 25 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000db92:	4c 39 e0	cmpq	%r12, %rax
10000db95:	74 31	je	0x10000dbc8
10000db97:	4c 89 ef	movq	%r13, %rdi
10000db9a:	48 8d 35 af bf 00 00	leaq	49071(%rip), %rsi ## Objc cfstring ref: @"IsPowerOn"
10000dba1:	e8 d2 25 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000dba6:	4c 39 e0	cmpq	%r12, %rax
10000dba9:	41 bc 20 00 00 00	movl	$32, %r12d
10000dbaf:	b8 4f 00 00 00	movl	$79, %eax
10000dbb4:	44 0f 44 e0	cmovel	%eax, %r12d
10000dbb8:	eb 11	jmp	0x10000dbcb
10000dbba:	48 8b 05 ff d6 02 00	movq	186111(%rip), %rax
10000dbc1:	eb 3b	jmp	0x10000dbfe
10000dbc3:	41 b4 4c	movb	$76, %r12b
10000dbc6:	eb 03	jmp	0x10000dbcb
10000dbc8:	41 b4 55	movb	$85, %r12b
10000dbcb:	4c 89 ef	movq	%r13, %rdi
10000dbce:	e8 bd 25 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000dbd3:	48 8b 05 e6 d6 02 00	movq	186086(%rip), %rax
10000dbda:	49 8b 0f	movq	(%r15), %rcx
10000dbdd:	48 8b 49 08	movq	8(%rcx), %rcx
10000dbe1:	48 63 49 18	movslq	24(%rcx), %rcx
10000dbe5:	48 69 c9 8a 00 00 00	imulq	$138, %rcx, %rcx
10000dbec:	48 01 c1	addq	%rax, %rcx
10000dbef:	44 88 a4 0b 80 00 00 00	movb	%r12b, 128(%rbx,%rcx)
10000dbf7:	4c 8b a5 e8 fe ff ff	movq	-280(%rbp), %r12
10000dbfe:	49 8b 0f	movq	(%r15), %rcx
10000dc01:	48 8b 49 08	movq	8(%rcx), %rcx
10000dc05:	48 63 49 18	movslq	24(%rcx), %rcx
10000dc09:	48 69 c9 8a 00 00 00	imulq	$138, %rcx, %rcx
10000dc10:	48 01 c1	addq	%rax, %rcx
10000dc13:	44 0f be ac 0b 80 00 00 00	movsbl	128(%rbx,%rcx), %r13d
10000dc1c:	48 8d 05 cd 03 01 00	leaq	66509(%rip), %rax
10000dc23:	8b 40 28	movl	40(%rax), %eax
10000dc26:	83 f8 01	cmpl	$1, %eax
10000dc29:	74 5b	je	0x10000dc86
10000dc2b:	85 c0	testl	%eax, %eax
10000dc2d:	0f 85 e9 00 00 00	jne	0x10000dd1c
10000dc33:	66 49 0f 6e c6	movq	%r14, %xmm0
10000dc38:	66 0f 62 05 c0 8a 00 00	punpckldq	35520(%rip), %xmm0
10000dc40:	66 0f 5c 05 c8 8a 00 00	subpd	35528(%rip), %xmm0
10000dc48:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000dc4c:	4c 8d 35 45 03 01 00	leaq	66373(%rip), %r14
10000dc53:	49 8b 7e 50	movq	80(%r14), %rdi
10000dc57:	f2 0f 5e 85 d0 fe ff ff	divsd	-304(%rbp), %xmm0
10000dc5f:	f2 0f 59 05 f1 8a 00 00	mulsd	35569(%rip), %xmm0
10000dc67:	48 8d 35 f7 80 00 00	leaq	33015(%rip), %rsi ## literal pool for: " %7.2f"
10000dc6e:	b0 01	movb	$1, %al
10000dc70:	e8 dd 26 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000dc75:	49 8b 76 50	movq	80(%r14), %rsi
10000dc79:	44 89 ef	movl	%r13d, %edi
10000dc7c:	e8 d7 26 00 00	callq	0x100010358 ## symbol stub for: _fputc
10000dc81:	e9 96 00 00 00	jmp	0x10000dd1c
10000dc86:	48 8d 05 0b 03 01 00	leaq	66315(%rip), %rax
10000dc8d:	48 8b 78 50	movq	80(%rax), %rdi
10000dc91:	66 49 0f 6e c6	movq	%r14, %xmm0
10000dc96:	66 0f 62 05 62 8a 00 00	punpckldq	35426(%rip), %xmm0
10000dc9e:	66 0f 5c 05 6a 8a 00 00	subpd	35434(%rip), %xmm0
10000dca6:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000dcaa:	f2 0f 10 48 08	movsd	8(%rax), %xmm1
10000dcaf:	f2 0f 59 c8	mulsd	%xmm0, %xmm1
10000dcb3:	f2 48 0f 2c c1	cvttsd2si	%xmm1, %rax
10000dcb8:	48 89 c1	movq	%rax, %rcx
10000dcbb:	48 c1 f9 3f	sarq	$63, %rcx
10000dcbf:	f2 0f 5c 0d 89 8a 00 00	subsd	35465(%rip), %xmm1
10000dcc7:	f2 48 0f 2c d1	cvttsd2si	%xmm1, %rdx
10000dccc:	48 21 ca	andq	%rcx, %rdx
10000dccf:	48 09 c2	orq	%rax, %rdx
10000dcd2:	41 80 fd 4c	cmpb	$76, %r13b
10000dcd6:	4c 8d 0d 76 38 00 00	leaq	14454(%rip), %r9 ## literal pool for: "false"
10000dcdd:	4c 89 c9	movq	%r9, %rcx
10000dce0:	48 8d 05 67 38 00 00	leaq	14439(%rip), %rax ## literal pool for: "true"
10000dce7:	48 0f 44 c8	cmoveq	%rax, %rcx
10000dceb:	f2 0f 5e 85 d0 fe ff ff	divsd	-304(%rbp), %xmm0
10000dcf3:	41 80 fd 55	cmpb	$85, %r13b
10000dcf7:	4d 89 c8	movq	%r9, %r8
10000dcfa:	4c 0f 44 c0	cmoveq	%rax, %r8
10000dcfe:	f2 0f 59 05 52 8a 00 00	mulsd	35410(%rip), %xmm0
10000dd06:	41 80 fd 4f	cmpb	$79, %r13b
10000dd0a:	4c 0f 44 c8	cmoveq	%rax, %r9
10000dd0e:	48 8d 35 57 80 00 00	leaq	32855(%rip), %rsi ## literal pool for: "<dict>\n<key>residency_ns</key><integer>%llu</integer>\n<key>residency_ms_per_s</key><real>%f</real>\n<key>low_power</key><%s/>\n<key>usable</key><%s/>\n<key>on</key><%s/>\n</dict>\n"
10000dd15:	b0 01	movb	$1, %al
10000dd17:	e8 36 26 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000dd1c:	48 ff c3	incq	%rbx
10000dd1f:	48 39 9d e0 fe ff ff	cmpq	%rbx, -288(%rbp)
10000dd26:	0f 85 13 fe ff ff	jne	0x10000db3f
10000dd2c:	4d 89 fc	movq	%r15, %r12
10000dd2f:	eb 04	jmp	0x10000dd35
10000dd31:	49 83 c4 20	addq	$32, %r12
10000dd35:	48 8d 05 b4 02 01 00	leaq	66228(%rip), %rax
10000dd3c:	8b 40 28	movl	40(%rax), %eax
10000dd3f:	85 c0	testl	%eax, %eax
10000dd41:	74 0e	je	0x10000dd51
10000dd43:	83 f8 01	cmpl	$1, %eax
10000dd46:	75 20	jne	0x10000dd68
10000dd48:	48 8d 3d 95 3b 00 00	leaq	15253(%rip), %rdi ## literal pool for: "</array>\n</dict>\n"
10000dd4f:	eb 07	jmp	0x10000dd58
10000dd51:	48 8d 3d 1a 33 00 00	leaq	13082(%rip), %rdi ## literal pool for: "\n"
10000dd58:	48 8d 05 39 02 01 00	leaq	66105(%rip), %rax
10000dd5f:	48 8b 70 50	movq	80(%rax), %rsi
10000dd63:	e8 f6 25 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000dd68:	49 8b 04 24	movq	(%r12), %rax
10000dd6c:	48 8b 40 08	movq	8(%rax), %rax
10000dd70:	ff 40 18	incl	24(%rax)
10000dd73:	48 8b 05 ee a4 00 00	movq	42222(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000dd7a:	48 8b 00	movq	(%rax), %rax
10000dd7d:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000dd81:	75 19	jne	0x10000dd9c
10000dd83:	31 c0	xorl	%eax, %eax
10000dd85:	48 81 c4 08 01 00 00	addq	$264, %rsp
10000dd8c:	5b	popq	%rbx
10000dd8d:	41 5c	popq	%r12
10000dd8f:	41 5d	popq	%r13
10000dd91:	41 5e	popq	%r14
10000dd93:	41 5f	popq	%r15
10000dd95:	5d	popq	%rbp
10000dd96:	c3	retq
10000dd97:	e8 e0 22 00 00	callq	0x10001007c
10000dd9c:	e8 57 25 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000dda1:	55	pushq	%rbp
10000dda2:	48 89 e5	movq	%rsp, %rbp
10000dda5:	41 57	pushq	%r15
10000dda7:	41 56	pushq	%r14
10000dda9:	41 55	pushq	%r13
10000ddab:	41 54	pushq	%r12
10000ddad:	53	pushq	%rbx
10000ddae:	48 83 ec 48	subq	$72, %rsp
10000ddb2:	48 8d 3d 27 d5 02 00	leaq	185639(%rip), %rdi
10000ddb9:	be 58 01 00 00	movl	$344, %esi
10000ddbe:	e8 1d 25 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000ddc3:	48 8d 3d 6e d6 02 00	leaq	185966(%rip), %rdi
10000ddca:	be 58 01 00 00	movl	$344, %esi
10000ddcf:	e8 0c 25 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000ddd4:	48 8d 3d b5 d7 02 00	leaq	186293(%rip), %rdi
10000dddb:	be 58 01 00 00	movl	$344, %esi
10000dde0:	e8 fb 24 00 00	callq	0x1000102e0 ## symbol stub for: ___bzero
10000dde5:	c6 05 55 da 02 00 01	movb	$1, 186965(%rip)
10000ddec:	48 8d 75 c0	leaq	-64(%rbp), %rsi
10000ddf0:	31 ff	xorl	%edi, %edi
10000ddf2:	e8 e7 23 00 00	callq	0x1000101de ## symbol stub for: _IOMainPort
10000ddf7:	85 c0	testl	%eax, %eax
10000ddf9:	75 39	jne	0x10000de34
10000ddfb:	48 8d 3d 82 80 00 00	leaq	32898(%rip), %rdi ## literal pool for: "AppleGraphicsDeviceControl"
10000de02:	e8 b5 24 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000de07:	48 85 c0	testq	%rax, %rax
10000de0a:	75 11	jne	0x10000de1d
10000de0c:	48 8d 3d 8c 80 00 00	leaq	32908(%rip), %rdi ## literal pool for: "IOFramebuffer"
10000de13:	e8 a4 24 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000de18:	48 85 c0	testq	%rax, %rax
10000de1b:	74 17	je	0x10000de34
10000de1d:	8b 7d c0	movl	-64(%rbp), %edi
10000de20:	48 8d 55 c8	leaq	-56(%rbp), %rdx
10000de24:	48 89 c6	movq	%rax, %rsi
10000de27:	e8 8a 24 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
10000de2c:	85 c0	testl	%eax, %eax
10000de2e:	0f 84 93 00 00 00	je	0x10000dec7
10000de34:	c6 05 06 da 02 00 00	movb	$0, 186886(%rip)
10000de3b:	83 3d a6 f3 07 00 00	cmpl	$0, 521126(%rip)
10000de42:	0f 84 98 00 00 00	je	0x10000dee0
10000de48:	8b 05 82 f4 07 00	movl	521346(%rip), %eax
10000de4e:	85 c0	testl	%eax, %eax
10000de50:	74 58	je	0x10000deaa
10000de52:	89 c7	movl	%eax, %edi
10000de54:	be 18 00 00 00	movl	$24, %esi
10000de59:	e8 be 24 00 00	callq	0x10001031c ## symbol stub for: _calloc
10000de5e:	48 89 05 23 d7 02 00	movq	%rax, 186147(%rip)
10000de65:	8b 3d 65 f4 07 00	movl	521317(%rip), %edi
10000de6b:	be 18 00 00 00	movl	$24, %esi
10000de70:	e8 a7 24 00 00	callq	0x10001031c ## symbol stub for: _calloc
10000de75:	48 89 05 b4 d5 02 00	movq	%rax, 185780(%rip)
10000de7c:	8b 3d 4e f4 07 00	movl	521294(%rip), %edi
10000de82:	be 18 00 00 00	movl	$24, %esi
10000de87:	e8 90 24 00 00	callq	0x10001031c ## symbol stub for: _calloc
10000de8c:	48 89 05 4d d8 02 00	movq	%rax, 186445(%rip)
10000de93:	8b 3d 37 f4 07 00	movl	521271(%rip), %edi
10000de99:	be 18 00 00 00	movl	$24, %esi
10000de9e:	e8 79 24 00 00	callq	0x10001031c ## symbol stub for: _calloc
10000dea3:	48 89 05 8e d9 02 00	movq	%rax, 186766(%rip)
10000deaa:	c6 05 8f d9 02 00 01	movb	$1, 186767(%rip)
10000deb1:	48 83 c4 48	addq	$72, %rsp
10000deb5:	5b	popq	%rbx
10000deb6:	41 5c	popq	%r12
10000deb8:	41 5d	popq	%r13
10000deba:	41 5e	popq	%r14
10000debc:	41 5f	popq	%r15
10000debe:	5d	popq	%rbp
10000debf:	c3	retq
10000dec0:	c6 05 7a d9 02 00 00	movb	$0, 186746(%rip)
10000dec7:	8b 7d c8	movl	-56(%rbp), %edi
10000deca:	e8 03 23 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000decf:	85 c0	testl	%eax, %eax
10000ded1:	75 ed	jne	0x10000dec0
10000ded3:	8b 7d c8	movl	-56(%rbp), %edi
10000ded6:	e8 09 23 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000dedb:	e9 5b ff ff ff	jmp	0x10000de3b
10000dee0:	c7 05 fe f2 07 00 01 00 00 00	movl	$1, 520958(%rip)
10000deea:	8b 3d 54 d9 02 00	movl	186708(%rip), %edi
10000def0:	85 ff	testl	%edi, %edi
10000def2:	0f 84 f5 01 00 00	je	0x10000e0ed
10000def8:	4c 8d 4d c0	leaq	-64(%rbp), %r9
10000defc:	31 c0	xorl	%eax, %eax
10000defe:	80 3d 3c d9 02 00 00	cmpb	$0, 186684(%rip)
10000df05:	49 c7 01 14 00 00 00	movq	$20, (%r9)
10000df0c:	be 20 01 00 00	movl	$288, %esi
10000df11:	0f 45 f0	cmovnel	%eax, %esi
10000df14:	4c 8d 05 d1 f2 07 00	leaq	520913(%rip), %r8
10000df1b:	31 d2	xorl	%edx, %edx
10000df1d:	31 c9	xorl	%ecx, %ecx
10000df1f:	e8 a2 22 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
10000df24:	85 c0	testl	%eax, %eax
10000df26:	75 89	jne	0x10000deb1
10000df28:	4c 8d 4d c0	leaq	-64(%rbp), %r9
10000df2c:	49 c7 01 80 00 00 00	movq	$128, (%r9)
10000df33:	8b 3d 0b d9 02 00	movl	186635(%rip), %edi
10000df39:	80 3d 01 d9 02 00 00	cmpb	$0, 186625(%rip)
10000df40:	b8 01 00 00 00	movl	$1, %eax
10000df45:	be 21 01 00 00	movl	$289, %esi
10000df4a:	0f 45 f0	cmovnel	%eax, %esi
10000df4d:	4c 8d 05 ac f2 07 00	leaq	520876(%rip), %r8
10000df54:	31 d2	xorl	%edx, %edx
10000df56:	31 c9	xorl	%ecx, %ecx
10000df58:	e8 69 22 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
10000df5d:	85 c0	testl	%eax, %eax
10000df5f:	0f 85 4c ff ff ff	jne	0x10000deb1
10000df65:	4c 8d 4d c0	leaq	-64(%rbp), %r9
10000df69:	49 c7 01 40 00 00 00	movq	$64, (%r9)
10000df70:	8b 3d ce d8 02 00	movl	186574(%rip), %edi
10000df76:	80 3d c4 d8 02 00 00	cmpb	$0, 186564(%rip)
10000df7d:	b8 03 00 00 00	movl	$3, %eax
10000df82:	be 23 01 00 00	movl	$291, %esi
10000df87:	0f 45 f0	cmovnel	%eax, %esi
10000df8a:	4c 8d 05 ef f2 07 00	leaq	520943(%rip), %r8
10000df91:	31 d2	xorl	%edx, %edx
10000df93:	31 c9	xorl	%ecx, %ecx
10000df95:	e8 2c 22 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
10000df9a:	85 c0	testl	%eax, %eax
10000df9c:	0f 85 0f ff ff ff	jne	0x10000deb1
10000dfa2:	4c 8d 4d c8	leaq	-56(%rbp), %r9
10000dfa6:	41 c7 01 01 00 00 00	movl	$1, (%r9)
10000dfad:	4c 8d 7d c0	leaq	-64(%rbp), %r15
10000dfb1:	49 c7 07 ff ff ff ff	movq	$-1, (%r15)
10000dfb8:	8b 3d 86 d8 02 00	movl	186502(%rip), %edi
10000dfbe:	80 3d 7c d8 02 00 00	cmpb	$0, 186492(%rip)
10000dfc5:	b8 05 00 00 00	movl	$5, %eax
10000dfca:	be 25 01 00 00	movl	$293, %esi
10000dfcf:	0f 45 f0	cmovnel	%eax, %esi
10000dfd2:	31 d2	xorl	%edx, %edx
10000dfd4:	31 c9	xorl	%ecx, %ecx
10000dfd6:	4d 89 f8	movq	%r15, %r8
10000dfd9:	e8 e2 21 00 00	callq	0x1000101c0 ## symbol stub for: _IOConnectCallScalarMethod
10000dfde:	49 8b 0f	movq	(%r15), %rcx
10000dfe1:	89 0d e9 f2 07 00	movl	%ecx, 520937(%rip)
10000dfe7:	85 c0	testl	%eax, %eax
10000dfe9:	0f 85 c2 fe ff ff	jne	0x10000deb1
10000dfef:	89 cf	movl	%ecx, %edi
10000dff1:	c7 05 c5 f2 07 00 00 00 00 00	movl	$0, 520901(%rip)
10000dffb:	31 d2	xorl	%edx, %edx
10000dffd:	48 8d 05 e4 f1 07 00	leaq	520676(%rip), %rax
10000e004:	83 7c 90 18 00	cmpl	$0, 24(%rax,%rdx,4)
10000e009:	74 0f	je	0x10000e01a
10000e00b:	48 ff c2	incq	%rdx
10000e00e:	89 15 ac f2 07 00	movl	%edx, 520876(%rip)
10000e014:	48 83 fa 20	cmpq	$32, %rdx
10000e018:	75 ea	jne	0x10000e004
10000e01a:	c7 05 a0 f2 07 00 00 00 00 00	movl	$0, 520864(%rip)
10000e024:	31 d2	xorl	%edx, %edx
10000e026:	80 bc d0 98 00 00 00 00	cmpb	$0, 152(%rax,%rdx,8)
10000e02e:	74 0f	je	0x10000e03f
10000e030:	48 ff c2	incq	%rdx
10000e033:	89 15 8b f2 07 00	movl	%edx, 520843(%rip)
10000e039:	48 83 fa 08	cmpq	$8, %rdx
10000e03d:	75 e7	jne	0x10000e026
10000e03f:	85 c9	testl	%ecx, %ecx
10000e041:	0f 84 a5 01 00 00	je	0x10000e1ec
10000e047:	be 24 00 00 00	movl	$36, %esi
10000e04c:	e8 cb 22 00 00	callq	0x10001031c ## symbol stub for: _calloc
10000e051:	48 89 05 80 f2 07 00	movq	%rax, 520832(%rip)
10000e058:	48 85 c0	testq	%rax, %rax
10000e05b:	0f 84 9b 01 00 00	je	0x10000e1fc
10000e061:	83 3d 68 f2 07 00 00	cmpl	$0, 520808(%rip)
10000e068:	0f 84 3c fe ff ff	je	0x10000deaa
10000e06e:	45 31 ed	xorl	%r13d, %r13d
10000e071:	41 bc 06 00 00 00	movl	$6, %r12d
10000e077:	4c 8d 75 c8	leaq	-56(%rbp), %r14
10000e07b:	31 db	xorl	%ebx, %ebx
10000e07d:	48 c7 45 c0 24 00 00 00	movq	$36, -64(%rbp)
10000e085:	48 89 5d c8	movq	%rbx, -56(%rbp)
10000e089:	4c 01 e8	addq	%r13, %rax
10000e08c:	80 3d ae d7 02 00 00	cmpb	$0, 186286(%rip)
10000e093:	8b 3d ab d7 02 00	movl	186283(%rip), %edi
10000e099:	be 26 01 00 00	movl	$294, %esi
10000e09e:	41 0f 45 f4	cmovnel	%r12d, %esi
10000e0a2:	4c 89 7c 24 18	movq	%r15, 24(%rsp)
10000e0a7:	48 89 44 24 10	movq	%rax, 16(%rsp)
10000e0ac:	0f 57 c0	xorps	%xmm0, %xmm0
10000e0af:	0f 11 04 24	movups	%xmm0, (%rsp)
10000e0b3:	4c 89 f2	movq	%r14, %rdx
10000e0b6:	b9 01 00 00 00	movl	$1, %ecx
10000e0bb:	45 31 c0	xorl	%r8d, %r8d
10000e0be:	45 31 c9	xorl	%r9d, %r9d
10000e0c1:	e8 f4 20 00 00	callq	0x1000101ba ## symbol stub for: _IOConnectCallMethod
10000e0c6:	85 c0	testl	%eax, %eax
10000e0c8:	0f 85 2e 01 00 00	jne	0x10000e1fc
10000e0ce:	48 ff c3	incq	%rbx
10000e0d1:	8b 05 f9 f1 07 00	movl	520697(%rip), %eax
10000e0d7:	48 39 c3	cmpq	%rax, %rbx
10000e0da:	0f 83 6e fd ff ff	jae	0x10000de4e
10000e0e0:	48 8b 05 f1 f1 07 00	movq	520689(%rip), %rax
10000e0e7:	49 83 c5 24	addq	$36, %r13
10000e0eb:	eb 90	jmp	0x10000e07d
10000e0ed:	48 8d 75 c8	leaq	-56(%rbp), %rsi
10000e0f1:	31 ff	xorl	%edi, %edi
10000e0f3:	e8 e6 20 00 00	callq	0x1000101de ## symbol stub for: _IOMainPort
10000e0f8:	85 c0	testl	%eax, %eax
10000e0fa:	0f 85 b1 fd ff ff	jne	0x10000deb1
10000e100:	80 3d 3a d7 02 00 01	cmpb	$1, 186170(%rip)
10000e107:	74 11	je	0x10000e11a
10000e109:	48 8d 3d 74 7d 00 00	leaq	32116(%rip), %rdi ## literal pool for: "AppleGraphicsDeviceControl"
10000e110:	e8 a7 21 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000e115:	48 85 c0	testq	%rax, %rax
10000e118:	75 15	jne	0x10000e12f
10000e11a:	48 8d 3d 7e 7d 00 00	leaq	32126(%rip), %rdi ## literal pool for: "IOFramebuffer"
10000e121:	e8 96 21 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000e126:	48 85 c0	testq	%rax, %rax
10000e129:	0f 84 82 fd ff ff	je	0x10000deb1
10000e12f:	8b 7d c8	movl	-56(%rbp), %edi
10000e132:	48 8d 55 d4	leaq	-44(%rbp), %rdx
10000e136:	48 89 c6	movq	%rax, %rsi
10000e139:	e8 78 21 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
10000e13e:	85 c0	testl	%eax, %eax
10000e140:	0f 85 6b fd ff ff	jne	0x10000deb1
10000e146:	8b 7d d4	movl	-44(%rbp), %edi
10000e149:	e8 84 20 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000e14e:	85 c0	testl	%eax, %eax
10000e150:	0f 84 83 00 00 00	je	0x10000e1d9
10000e156:	89 c3	movl	%eax, %ebx
10000e158:	4c 8b 35 49 a2 00 00	movq	41545(%rip), %r14 ## literal pool symbol address: _mach_task_self_
10000e15f:	4c 8d 65 bc	leaq	-68(%rbp), %r12
10000e163:	4c 8d 7d c0	leaq	-64(%rbp), %r15
10000e167:	41 8b 36	movl	(%r14), %esi
10000e16a:	89 df	movl	%ebx, %edi
10000e16c:	ba e8 03 00 00	movl	$1000, %edx
10000e171:	4c 89 e1	movq	%r12, %rcx
10000e174:	e8 49 21 00 00	callq	0x1000102c2 ## symbol stub for: _IOServiceOpen
10000e179:	41 89 c5	movl	%eax, %r13d
10000e17c:	89 df	movl	%ebx, %edi
10000e17e:	e8 61 20 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000e183:	45 85 ed	testl	%r13d, %r13d
10000e186:	75 36	jne	0x10000e1be
10000e188:	8b 7d bc	movl	-68(%rbp), %edi
10000e18b:	89 3d b3 d6 02 00	movl	%edi, 186035(%rip)
10000e191:	80 3d a9 d6 02 00 00	cmpb	$0, 186025(%rip)
10000e198:	75 3f	jne	0x10000e1d9
10000e19a:	48 c7 45 c0 14 00 00 00	movq	$20, -64(%rbp)
10000e1a2:	be 20 01 00 00	movl	$288, %esi
10000e1a7:	31 d2	xorl	%edx, %edx
10000e1a9:	31 c9	xorl	%ecx, %ecx
10000e1ab:	4c 8d 05 3a f0 07 00	leaq	520250(%rip), %r8
10000e1b2:	4d 89 f9	movq	%r15, %r9
10000e1b5:	e8 0c 20 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
10000e1ba:	85 c0	testl	%eax, %eax
10000e1bc:	74 1b	je	0x10000e1d9
10000e1be:	8b 7d d4	movl	-44(%rbp), %edi
10000e1c1:	e8 0c 20 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000e1c6:	89 c3	movl	%eax, %ebx
10000e1c8:	85 c0	testl	%eax, %eax
10000e1ca:	75 9b	jne	0x10000e167
10000e1cc:	8b 7d d4	movl	-44(%rbp), %edi
10000e1cf:	e8 10 20 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000e1d4:	e9 d8 fc ff ff	jmp	0x10000deb1
10000e1d9:	8b 7d d4	movl	-44(%rbp), %edi
10000e1dc:	e8 03 20 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000e1e1:	8b 3d 5d d6 02 00	movl	185949(%rip), %edi
10000e1e7:	e9 0c fd ff ff	jmp	0x10000def8
10000e1ec:	48 c7 05 e1 f0 07 00 00 00 00 00	movq	$0, 520417(%rip)
10000e1f7:	e9 ae fc ff ff	jmp	0x10000deaa
10000e1fc:	c7 05 ca f0 07 00 00 00 00 00	movl	$0, 520394(%rip)
10000e206:	e9 9f fc ff ff	jmp	0x10000deaa
10000e20b:	55	pushq	%rbp
10000e20c:	48 89 e5	movq	%rsp, %rbp
10000e20f:	41 57	pushq	%r15
10000e211:	41 56	pushq	%r14
10000e213:	41 55	pushq	%r13
10000e215:	41 54	pushq	%r12
10000e217:	53	pushq	%rbx
10000e218:	48 81 ec f8 00 00 00	subq	$248, %rsp
10000e21f:	48 8b 05 42 a0 00 00	movq	41026(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000e226:	48 8b 00	movq	(%rax), %rax
10000e229:	48 89 45 d0	movq	%rax, -48(%rbp)
10000e22d:	80 3d 0c d6 02 00 01	cmpb	$1, 185868(%rip)
10000e234:	0f 85 08 09 00 00	jne	0x10000eb42
10000e23a:	4c 8d 35 57 fd 00 00	leaq	64855(%rip), %r14
10000e241:	41 80 3e 00	cmpb	$0, (%r14)
10000e245:	0f 85 f7 08 00 00	jne	0x10000eb42
10000e24b:	41 0f b6 46 02	movzbl	2(%r14), %eax
10000e250:	f2 41 0f 10 44 c6 20	movsd	32(%r14,%rax,8), %xmm0
10000e257:	66 0f 29 85 f0 fe ff ff	movapd	%xmm0, -272(%rbp)
10000e25f:	4c 8d 3d 8a fd 00 00	leaq	64906(%rip), %r15
10000e266:	41 8b 47 28	movl	40(%r15), %eax
10000e26a:	85 c0	testl	%eax, %eax
10000e26c:	74 0e	je	0x10000e27c
10000e26e:	83 f8 01	cmpl	$1, %eax
10000e271:	75 19	jne	0x10000e28c
10000e273:	48 8d 3d 4a 7c 00 00	leaq	31818(%rip), %rdi ## literal pool for: "<!-- start GPU -->\n<key>GPU</key>\n<array>\n"
10000e27a:	eb 07	jmp	0x10000e283
10000e27c:	48 8d 3d 2a 7c 00 00	leaq	31786(%rip), %rdi ## literal pool for: "\n**** GPU usage ****\n\n"
10000e283:	49 8b 76 50	movq	80(%r14), %rsi
10000e287:	e8 d2 20 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000e28c:	80 3d ad d5 02 00 01	cmpb	$1, 185773(%rip)
10000e293:	0f 85 92 08 00 00	jne	0x10000eb2b
10000e299:	41 8b 47 28	movl	40(%r15), %eax
10000e29d:	83 f8 01	cmpl	$1, %eax
10000e2a0:	74 1e	je	0x10000e2c0
10000e2a2:	85 c0	testl	%eax, %eax
10000e2a4:	75 4d	jne	0x10000e2f3
10000e2a6:	49 8b 7e 50	movq	80(%r14), %rdi
10000e2aa:	8b 15 1c f0 07 00	movl	520220(%rip), %edx
10000e2b0:	48 8d 35 53 7c 00 00	leaq	31827(%rip), %rsi ## literal pool for: "GPU %llu name %s\n"
10000e2b7:	48 8d 0d 36 ef 07 00	leaq	519990(%rip), %rcx
10000e2be:	eb 2c	jmp	0x10000e2ec
10000e2c0:	48 8d 3d 2d ef 07 00	leaq	519981(%rip), %rdi
10000e2c7:	48 8d b5 00 ff ff ff	leaq	-256(%rbp), %rsi
10000e2ce:	ba c1 00 00 00	movl	$193, %edx
10000e2d3:	e8 1e db ff ff	callq	0x10000bdf6
10000e2d8:	49 8b 7e 50	movq	80(%r14), %rdi
10000e2dc:	8b 15 ea ef 07 00	movl	520170(%rip), %edx
10000e2e2:	48 8d 35 33 7c 00 00	leaq	31795(%rip), %rsi ## literal pool for: "<dict>\n<key>GPU number</key><integer>%llu</integer>\n<key>name</key><string>%s</string>\n"
10000e2e9:	48 89 c1	movq	%rax, %rcx
10000e2ec:	31 c0	xorl	%eax, %eax
10000e2ee:	e8 5f 20 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e2f3:	8b 05 cb ef 07 00	movl	520139(%rip), %eax
10000e2f9:	48 85 c0	testq	%rax, %rax
10000e2fc:	0f 84 2e 02 00 00	je	0x10000e530
10000e302:	31 d2	xorl	%edx, %edx
10000e304:	4c 8d 25 85 d2 02 00	leaq	184965(%rip), %r12
10000e30b:	31 c9	xorl	%ecx, %ecx
10000e30d:	49 03 94 cc 10 01 00 00	addq	272(%r12,%rcx,8), %rdx
10000e315:	48 ff c1	incq	%rcx
10000e318:	48 39 c8	cmpq	%rcx, %rax
10000e31b:	75 f0	jne	0x10000e30d
10000e31d:	48 8b 05 74 d3 02 00	movq	185204(%rip), %rax
10000e324:	66 0f 6f 15 d4 83 00 00	movdqa	33748(%rip), %xmm2
10000e32c:	66 0f 28 0d dc 83 00 00	movapd	33756(%rip), %xmm1
10000e334:	48 85 c0	testq	%rax, %rax
10000e337:	74 19	je	0x10000e352
10000e339:	66 48 0f 6e c0	movq	%rax, %xmm0
10000e33e:	66 0f 62 c2	punpckldq	%xmm2, %xmm0
10000e342:	66 0f 5c c1	subpd	%xmm1, %xmm0
10000e346:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e34a:	66 0f 29 85 f0 fe ff ff	movapd	%xmm0, -272(%rbp)
10000e352:	66 48 0f 6e c2	movq	%rdx, %xmm0
10000e357:	66 0f 62 c2	punpckldq	%xmm2, %xmm0
10000e35b:	66 0f 5c c1	subpd	%xmm1, %xmm0
10000e35f:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e363:	f2 0f 5e 85 f0 fe ff ff	divsd	-272(%rbp), %xmm0
10000e36b:	41 8b 47 28	movl	40(%r15), %eax
10000e36f:	83 f8 01	cmpl	$1, %eax
10000e372:	74 1f	je	0x10000e393
10000e374:	85 c0	testl	%eax, %eax
10000e376:	75 35	jne	0x10000e3ad
10000e378:	49 8b 7e 50	movq	80(%r14), %rdi
10000e37c:	8b 15 4a ef 07 00	movl	520010(%rip), %edx
10000e382:	f2 0f 59 05 9e 83 00 00	mulsd	33694(%rip), %xmm0
10000e38a:	48 8d 35 e3 7b 00 00	leaq	31715(%rip), %rsi ## literal pool for: "GPU %llu C-state residency: %.2f%% ("
10000e391:	eb 0b	jmp	0x10000e39e
10000e393:	49 8b 7e 50	movq	80(%r14), %rdi
10000e397:	48 8d 35 83 5d 00 00	leaq	23939(%rip), %rsi ## literal pool for: "<key>c_state_ns</key><integer>%llu</integer>\n<key>c_state_ratio</key><real>%g</real>\n<key>c_states</key>\n<array>\n"
10000e39e:	b0 01	movb	$1, %al
10000e3a0:	e8 ad 1f 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e3a5:	66 0f 6f 15 53 83 00 00	movdqa	33619(%rip), %xmm2
10000e3ad:	83 3d 10 ef 07 00 00	cmpl	$0, 519952(%rip)
10000e3b4:	0f 84 42 01 00 00	je	0x10000e4fc
10000e3ba:	48 8d 1d bf ee 07 00	leaq	519871(%rip), %rbx
10000e3c1:	45 31 f6	xorl	%r14d, %r14d
10000e3c4:	41 8b 47 28	movl	40(%r15), %eax
10000e3c8:	83 f8 01	cmpl	$1, %eax
10000e3cb:	0f 84 8e 00 00 00	je	0x10000e45f
10000e3d1:	85 c0	testl	%eax, %eax
10000e3d3:	0f 85 0d 01 00 00	jne	0x10000e4e6
10000e3d9:	4d 89 fd	movq	%r15, %r13
10000e3dc:	4d 85 f6	testq	%r14, %r14
10000e3df:	4c 8d 3d b2 fb 00 00	leaq	64434(%rip), %r15
10000e3e6:	74 18	je	0x10000e400
10000e3e8:	49 8b 77 50	movq	80(%r15), %rsi
10000e3ec:	48 8d 3d a6 7b 00 00	leaq	31654(%rip), %rdi ## literal pool for: ", "
10000e3f3:	e8 66 1f 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000e3f8:	66 0f 6f 15 00 83 00 00	movdqa	33536(%rip), %xmm2
10000e400:	49 8b 7f 50	movq	80(%r15), %rdi
10000e404:	4d 89 ef	movq	%r13, %r15
10000e407:	41 80 7d 38 00	cmpb	$0, 56(%r13)
10000e40c:	48 89 da	movq	%rbx, %rdx
10000e40f:	48 8d 05 70 31 00 00	leaq	12656(%rip), %rax ## literal pool for: ""
10000e416:	48 0f 44 d0	cmoveq	%rax, %rdx
10000e41a:	48 8d 0d 86 7b 00 00	leaq	31622(%rip), %rcx ## literal pool for: ": "
10000e421:	f3 43 0f 7e 84 f4 10 01 00 00	movq	272(%r12,%r14,8), %xmm0
10000e42b:	66 0f 62 c2	punpckldq	%xmm2, %xmm0
10000e42f:	66 0f 5c 05 d9 82 00 00	subpd	33497(%rip), %xmm0
10000e437:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e43b:	48 0f 44 c8	cmoveq	%rax, %rcx
10000e43f:	f2 0f 5e 85 f0 fe ff ff	divsd	-272(%rbp), %xmm0
10000e447:	f2 0f 59 05 d9 82 00 00	mulsd	33497(%rip), %xmm0
10000e44f:	48 8d 35 46 7b 00 00	leaq	31558(%rip), %rsi ## literal pool for: "%s%s%.2f%%"
10000e456:	b0 01	movb	$1, %al
10000e458:	e8 f5 1e 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e45d:	eb 7f	jmp	0x10000e4de
10000e45f:	ba c1 00 00 00	movl	$193, %edx
10000e464:	48 89 df	movq	%rbx, %rdi
10000e467:	48 8d b5 00 ff ff ff	leaq	-256(%rbp), %rsi
10000e46e:	e8 83 d9 ff ff	callq	0x10000bdf6
10000e473:	48 8d 0d 1e fb 00 00	leaq	64286(%rip), %rcx
10000e47a:	48 8b 79 50	movq	80(%rcx), %rdi
10000e47e:	41 80 7f 38 00	cmpb	$0, 56(%r15)
10000e483:	48 8d 15 85 7b 00 00	leaq	31621(%rip), %rdx ## literal pool for: "<key>name</key><string>"
10000e48a:	48 8d 0d f5 30 00 00	leaq	12533(%rip), %rcx ## literal pool for: ""
10000e491:	48 0f 44 d1	cmoveq	%rcx, %rdx
10000e495:	48 0f 44 c1	cmoveq	%rcx, %rax
10000e499:	4c 8d 05 87 7b 00 00	leaq	31623(%rip), %r8 ## literal pool for: "</string>\n"
10000e4a0:	4c 0f 44 c1	cmoveq	%rcx, %r8
10000e4a4:	4f 8b 8c f4 10 01 00 00	movq	272(%r12,%r14,8), %r9
10000e4ac:	66 49 0f 6e c1	movq	%r9, %xmm0
10000e4b1:	66 0f 62 05 47 82 00 00	punpckldq	33351(%rip), %xmm0
10000e4b9:	66 0f 5c 05 4f 82 00 00	subpd	33359(%rip), %xmm0
10000e4c1:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e4c5:	f2 0f 5e 85 f0 fe ff ff	divsd	-272(%rbp), %xmm0
10000e4cd:	48 8d 35 d6 7a 00 00	leaq	31446(%rip), %rsi ## literal pool for: "<dict>\n%s%s%s<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
10000e4d4:	48 89 c1	movq	%rax, %rcx
10000e4d7:	b0 01	movb	$1, %al
10000e4d9:	e8 74 1e 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e4de:	66 0f 6f 15 1a 82 00 00	movdqa	33306(%rip), %xmm2
10000e4e6:	49 ff c6	incq	%r14
10000e4e9:	8b 05 d5 ed 07 00	movl	519637(%rip), %eax
10000e4ef:	48 83 c3 08	addq	$8, %rbx
10000e4f3:	49 39 c6	cmpq	%rax, %r14
10000e4f6:	0f 82 c8 fe ff ff	jb	0x10000e3c4
10000e4fc:	41 8b 47 28	movl	40(%r15), %eax
10000e500:	85 c0	testl	%eax, %eax
10000e502:	74 15	je	0x10000e519
10000e504:	83 f8 01	cmpl	$1, %eax
10000e507:	4c 8d 35 8a fa 00 00	leaq	64138(%rip), %r14
10000e50e:	75 20	jne	0x10000e530
10000e510:	48 8d 3d e2 33 00 00	leaq	13282(%rip), %rdi ## literal pool for: "</array>\n"
10000e517:	eb 0e	jmp	0x10000e527
10000e519:	48 8d 3d 01 5d 00 00	leaq	23809(%rip), %rdi ## literal pool for: ")\n"
10000e520:	4c 8d 35 71 fa 00 00	leaq	64113(%rip), %r14
10000e527:	49 8b 76 50	movq	80(%r14), %rsi
10000e52b:	e8 2e 1e 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000e530:	8b 05 8a ed 07 00	movl	519562(%rip), %eax
10000e536:	48 85 c0	testq	%rax, %rax
10000e539:	0f 84 e3 02 00 00	je	0x10000e822
10000e53f:	4d 89 fd	movq	%r15, %r13
10000e542:	66 0f 57 c9	xorpd	%xmm1, %xmm1
10000e546:	31 c9	xorl	%ecx, %ecx
10000e548:	4c 8d 3d 41 d0 02 00	leaq	184385(%rip), %r15
10000e54f:	4c 8d 25 92 ec 07 00	leaq	519314(%rip), %r12
10000e556:	49 8b 54 cf 08	movq	8(%r15,%rcx,8), %rdx
10000e55b:	41 8b 74 8c 18	movl	24(%r12,%rcx,4), %esi
10000e560:	48 69 f6 83 de 1b 43	imulq	$1125899907, %rsi, %rsi
10000e567:	48 c1 ee 32	shrq	$50, %rsi
10000e56b:	48 0f af f2	imulq	%rdx, %rsi
10000e56f:	66 48 0f 6e c6	movq	%rsi, %xmm0
10000e574:	66 48 0f 6e d2	movq	%rdx, %xmm2
10000e579:	66 0f 6c c2	punpcklqdq	%xmm2, %xmm0
10000e57d:	66 0f d4 c8	paddq	%xmm0, %xmm1
10000e581:	48 ff c1	incq	%rcx
10000e584:	48 39 c8	cmpq	%rcx, %rax
10000e587:	75 cd	jne	0x10000e556
10000e589:	48 8b 05 00 d0 02 00	movq	184320(%rip), %rax
10000e590:	48 85 c0	testq	%rax, %rax
10000e593:	74 21	je	0x10000e5b6
10000e595:	66 48 0f 6e c0	movq	%rax, %xmm0
10000e59a:	66 0f 62 05 5e 81 00 00	punpckldq	33118(%rip), %xmm0
10000e5a2:	66 0f 5c 05 66 81 00 00	subpd	33126(%rip), %xmm0
10000e5aa:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e5ae:	66 0f 29 85 f0 fe ff ff	movapd	%xmm0, -272(%rbp)
10000e5b6:	41 8b 45 28	movl	40(%r13), %eax
10000e5ba:	83 f8 01	cmpl	$1, %eax
10000e5bd:	0f 29 8d e0 fe ff ff	movaps	%xmm1, -288(%rbp)
10000e5c4:	74 1e	je	0x10000e5e4
10000e5c6:	85 c0	testl	%eax, %eax
10000e5c8:	75 3c	jne	0x10000e606
10000e5ca:	49 8b 7e 50	movq	80(%r14), %rdi
10000e5ce:	8b 15 f8 ec 07 00	movl	519416(%rip), %edx
10000e5d4:	48 8d 35 57 7a 00 00	leaq	31319(%rip), %rsi ## literal pool for: "GPU %llu P-state residency: "
10000e5db:	31 c0	xorl	%eax, %eax
10000e5dd:	e8 70 1d 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e5e2:	eb 1a	jmp	0x10000e5fe
10000e5e4:	49 8b 4e 50	movq	80(%r14), %rcx
10000e5e8:	48 8d 3d 55 5c 00 00	leaq	23637(%rip), %rdi ## literal pool for: "<key>p_states</key>\n<array>\n"
10000e5ef:	be 1c 00 00 00	movl	$28, %esi
10000e5f4:	ba 01 00 00 00	movl	$1, %edx
10000e5f9:	e8 6c 1d 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000e5fe:	66 0f 28 8d e0 fe ff ff	movapd	-288(%rbp), %xmm1
10000e606:	83 3d b3 ec 07 00 00	cmpl	$0, 519347(%rip)
10000e60d:	0f 84 dc 00 00 00	je	0x10000e6ef
10000e613:	45 31 f6	xorl	%r14d, %r14d
10000e616:	41 8b 45 28	movl	40(%r13), %eax
10000e61a:	83 f8 01	cmpl	$1, %eax
10000e61d:	74 72	je	0x10000e691
10000e61f:	85 c0	testl	%eax, %eax
10000e621:	0f 85 b6 00 00 00	jne	0x10000e6dd
10000e627:	4d 85 f6	testq	%r14, %r14
10000e62a:	48 8d 1d 67 f9 00 00	leaq	63847(%rip), %rbx
10000e631:	74 10	je	0x10000e643
10000e633:	48 8b 73 50	movq	80(%rbx), %rsi
10000e637:	48 8d 3d 5b 79 00 00	leaq	31067(%rip), %rdi ## literal pool for: ", "
10000e63e:	e8 1b 1d 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000e643:	48 8b 7b 50	movq	80(%rbx), %rdi
10000e647:	43 8b 44 b4 18	movl	24(%r12,%r14,4), %eax
10000e64c:	f2 43 0f 10 44 f7 08	movsd	8(%r15,%r14,8), %xmm0
10000e653:	0f 14 05 a6 80 00 00	unpcklps	32934(%rip), %xmm0
10000e65a:	66 0f 5c 05 ae 80 00 00	subpd	32942(%rip), %xmm0
10000e662:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e666:	48 69 d0 83 de 1b 43	imulq	$1125899907, %rax, %rdx
10000e66d:	48 c1 ea 32	shrq	$50, %rdx
10000e671:	f2 0f 5e 85 f0 fe ff ff	divsd	-272(%rbp), %xmm0
10000e679:	f2 0f 59 05 a7 80 00 00	mulsd	32935(%rip), %xmm0
10000e681:	48 8d 35 c7 79 00 00	leaq	31175(%rip), %rsi ## literal pool for: "%lluMHz: %.2f%%"
10000e688:	b0 01	movb	$1, %al
10000e68a:	e8 c3 1c 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e68f:	eb 44	jmp	0x10000e6d5
10000e691:	48 8d 05 00 f9 00 00	leaq	63744(%rip), %rax
10000e698:	48 8b 78 50	movq	80(%rax), %rdi
10000e69c:	43 8b 54 b4 18	movl	24(%r12,%r14,4), %edx
10000e6a1:	4b 8b 4c f7 08	movq	8(%r15,%r14,8), %rcx
10000e6a6:	66 48 0f 6e c1	movq	%rcx, %xmm0
10000e6ab:	66 0f 62 05 4d 80 00 00	punpckldq	32845(%rip), %xmm0
10000e6b3:	66 0f 5c 05 55 80 00 00	subpd	32853(%rip), %xmm0
10000e6bb:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e6bf:	f2 0f 5e 85 f0 fe ff ff	divsd	-272(%rbp), %xmm0
10000e6c7:	48 8d 35 91 79 00 00	leaq	31121(%rip), %rsi ## literal pool for: "<dict>\n<key>frequency</key><integer>%u</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
10000e6ce:	b0 01	movb	$1, %al
10000e6d0:	e8 7d 1c 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e6d5:	66 0f 28 8d e0 fe ff ff	movapd	-288(%rbp), %xmm1
10000e6dd:	49 ff c6	incq	%r14
10000e6e0:	8b 05 da eb 07 00	movl	519130(%rip), %eax
10000e6e6:	49 39 c6	cmpq	%rax, %r14
10000e6e9:	0f 82 27 ff ff ff	jb	0x10000e616
10000e6ef:	4d 89 ef	movq	%r13, %r15
10000e6f2:	41 8b 45 28	movl	40(%r13), %eax
10000e6f6:	85 c0	testl	%eax, %eax
10000e6f8:	74 15	je	0x10000e70f
10000e6fa:	83 f8 01	cmpl	$1, %eax
10000e6fd:	4c 8d 35 94 f8 00 00	leaq	63636(%rip), %r14
10000e704:	75 28	jne	0x10000e72e
10000e706:	48 8d 3d ec 31 00 00	leaq	12780(%rip), %rdi ## literal pool for: "</array>\n"
10000e70d:	eb 0e	jmp	0x10000e71d
10000e70f:	48 8d 3d 5c 29 00 00	leaq	10588(%rip), %rdi ## literal pool for: "\n"
10000e716:	4c 8d 35 7b f8 00 00	leaq	63611(%rip), %r14
10000e71d:	49 8b 76 50	movq	80(%r14), %rsi
10000e721:	e8 38 1c 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000e726:	66 0f 28 8d e0 fe ff ff	movapd	-288(%rbp), %xmm1
10000e72e:	8b 05 bc ea 07 00	movl	518844(%rip), %eax
10000e734:	85 c0	testl	%eax, %eax
10000e736:	0f 84 e6 00 00 00	je	0x10000e822
10000e73c:	66 48 0f 3a 16 c9 01	pextrq	$1, %xmm1, %rcx
10000e743:	48 85 c9	testq	%rcx, %rcx
10000e746:	74 39	je	0x10000e781
10000e748:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000e74c:	66 0f 3a 0e c1 33	pblendw	$51, %xmm1, %xmm0
10000e752:	66 0f eb 05 06 80 00 00	por	32774(%rip), %xmm0
10000e75a:	66 0f 73 d1 20	psrlq	$32, %xmm1
10000e75f:	66 0f eb 0d 09 80 00 00	por	32777(%rip), %xmm1
10000e767:	66 0f 5c 0d 11 80 00 00	subpd	32785(%rip), %xmm1
10000e76f:	66 0f 58 c8	addpd	%xmm0, %xmm1
10000e773:	66 0f 28 c1	movapd	%xmm1, %xmm0
10000e777:	66 0f 15 c1	unpckhpd	%xmm1, %xmm0
10000e77b:	f2 0f 5e c8	divsd	%xmm0, %xmm1
10000e77f:	eb 04	jmp	0x10000e785
10000e781:	66 0f 57 c9	xorpd	%xmm1, %xmm1
10000e785:	f2 0f 10 05 23 93 00 00	movsd	37667(%rip), %xmm0
10000e78d:	89 c0	movl	%eax, %eax
10000e78f:	f2 48 0f 2a d8	cvtsi2sd	%rax, %xmm3
10000e794:	f2 0f 59 c1	mulsd	%xmm1, %xmm0
10000e798:	66 0f 28 d0	movapd	%xmm0, %xmm2
10000e79c:	f2 0f 5e d3	divsd	%xmm3, %xmm2
10000e7a0:	41 8b 47 28	movl	40(%r15), %eax
10000e7a4:	83 f8 01	cmpl	$1, %eax
10000e7a7:	74 67	je	0x10000e810
10000e7a9:	85 c0	testl	%eax, %eax
10000e7ab:	75 75	jne	0x10000e822
10000e7ad:	49 8b 7e 50	movq	80(%r14), %rdi
10000e7b1:	8b 15 15 eb 07 00	movl	518933(%rip), %edx
10000e7b7:	48 8d 35 2a 79 00 00	leaq	31018(%rip), %rsi ## literal pool for: "GPU %llu "
10000e7be:	31 c0	xorl	%eax, %eax
10000e7c0:	66 0f 29 8d e0 fe ff ff	movapd	%xmm1, -288(%rbp)
10000e7c8:	f2 0f 11 95 f0 fe ff ff	movsd	%xmm2, -272(%rbp)
10000e7d0:	e8 7d 1b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e7d5:	49 8b 7e 50	movq	80(%r14), %rdi
10000e7d9:	8b 05 11 ea 07 00	movl	518673(%rip), %eax
10000e7df:	0f 57 c0	xorps	%xmm0, %xmm0
10000e7e2:	f2 48 0f 2a c0	cvtsi2sd	%rax, %xmm0
10000e7e7:	f2 0f 5e 05 c1 92 00 00	divsd	37569(%rip), %xmm0
10000e7ef:	f2 0f 10 8d f0 fe ff ff	movsd	-272(%rbp), %xmm1
10000e7f7:	f2 0f 59 0d 29 7f 00 00	mulsd	32553(%rip), %xmm1
10000e7ff:	48 8d 35 ec 78 00 00	leaq	30956(%rip), %rsi ## literal pool for: "average active frequency as fraction of nominal (%.2fMhz): %.2f%% (%.2fMhz)\n"
10000e806:	66 0f 28 95 e0 fe ff ff	movapd	-288(%rbp), %xmm2
10000e80e:	eb 0b	jmp	0x10000e81b
10000e810:	49 8b 7e 50	movq	80(%r14), %rdi
10000e814:	48 8d 35 24 79 00 00	leaq	31012(%rip), %rsi ## literal pool for: "<key>freq_hz</key><real>%g</real>\n<key>freq_mhz</key><real>%g</real>\n<key>freq_ratio</key><real>%g</real>\n"
10000e81b:	b0 03	movb	$3, %al
10000e81d:	e8 30 1b 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e822:	83 3d a7 ea 07 00 00	cmpl	$0, 518823(%rip)
10000e829:	0f 84 db 02 00 00	je	0x10000eb0a
10000e82f:	48 83 3d a9 ce 02 00 00	cmpq	$0, 183977(%rip)
10000e837:	0f 84 cd 02 00 00	je	0x10000eb0a
10000e83d:	41 83 7f 28 01	cmpl	$1, 40(%r15)
10000e842:	75 24	jne	0x10000e868
10000e844:	48 8d 05 4d f7 00 00	leaq	63309(%rip), %rax
10000e84b:	48 8b 70 50	movq	80(%rax), %rsi
10000e84f:	48 8d 3d 54 79 00 00	leaq	31060(%rip), %rdi ## literal pool for: "<key>misc_counters</key>\n<dict>\n"
10000e856:	e8 03 1b 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000e85b:	83 3d 6e ea 07 00 00	cmpl	$0, 518766(%rip)
10000e862:	0f 84 84 02 00 00	je	0x10000eaec
10000e868:	41 be 04 00 00 00	movl	$4, %r14d
10000e86e:	bb 10 00 00 00	movl	$16, %ebx
10000e873:	45 31 ed	xorl	%r13d, %r13d
10000e876:	48 8b 0d 5b ea 07 00	movq	518747(%rip), %rcx
10000e87d:	42 8b 44 31 fc	movl	-4(%rcx,%r14), %eax
10000e882:	83 f8 01	cmpl	$1, %eax
10000e885:	74 61	je	0x10000e8e8
10000e887:	83 f8 02	cmpl	$2, %eax
10000e88a:	0f 84 af 00 00 00	je	0x10000e93f
10000e890:	83 f8 03	cmpl	$3, %eax
10000e893:	0f 84 39 02 00 00	je	0x10000ead2
10000e899:	48 8b 35 40 ce 02 00	movq	183872(%rip), %rsi
10000e8a0:	48 8b 54 1e f8	movq	-8(%rsi,%rbx), %rdx
10000e8a5:	48 85 d2	testq	%rdx, %rdx
10000e8a8:	0f 84 db 00 00 00	je	0x10000e989
10000e8ae:	f2 0f 10 1c 1e	movsd	(%rsi,%rbx), %xmm3
10000e8b3:	66 0f 28 0d 45 7e 00 00	movapd	32325(%rip), %xmm1
10000e8bb:	0f 14 d9	unpcklps	%xmm1, %xmm3
10000e8be:	66 0f 28 15 4a 7e 00 00	movapd	32330(%rip), %xmm2
10000e8c6:	66 0f 5c da	subpd	%xmm2, %xmm3
10000e8ca:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000e8ce:	66 48 0f 6e c2	movq	%rdx, %xmm0
10000e8d3:	66 0f 62 c1	punpckldq	%xmm1, %xmm0
10000e8d7:	66 0f 5c c2	subpd	%xmm2, %xmm0
10000e8db:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e8df:	f2 0f 5e d8	divsd	%xmm0, %xmm3
10000e8e3:	e9 a5 00 00 00	jmp	0x10000e98d
10000e8e8:	48 8b 05 f1 cd 02 00	movq	183793(%rip), %rax
10000e8ef:	48 8b 54 18 f0	movq	-16(%rax,%rbx), %rdx
10000e8f4:	48 85 d2	testq	%rdx, %rdx
10000e8f7:	0f 84 dd 00 00 00	je	0x10000e9da
10000e8fd:	f2 0f 10 04 18	movsd	(%rax,%rbx), %xmm0
10000e902:	66 0f 28 15 f6 7d 00 00	movapd	32246(%rip), %xmm2
10000e90a:	0f 14 c2	unpcklps	%xmm2, %xmm0
10000e90d:	66 0f 28 1d fb 7d 00 00	movapd	32251(%rip), %xmm3
10000e915:	66 0f 5c c3	subpd	%xmm3, %xmm0
10000e919:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000e91d:	66 48 0f 6e ca	movq	%rdx, %xmm1
10000e922:	66 0f 62 ca	punpckldq	%xmm2, %xmm1
10000e926:	66 0f 5c cb	subpd	%xmm3, %xmm1
10000e92a:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000e92e:	f2 0f 5e 0d ea 7d 00 00	divsd	32234(%rip), %xmm1
10000e936:	f2 0f 5e c1	divsd	%xmm1, %xmm0
10000e93a:	e9 9f 00 00 00	jmp	0x10000e9de
10000e93f:	48 8b 05 9a cd 02 00	movq	183706(%rip), %rax
10000e946:	4c 8b 24 18	movq	(%rax,%rbx), %r12
10000e94a:	41 8b 47 28	movl	40(%r15), %eax
10000e94e:	83 f8 01	cmpl	$1, %eax
10000e951:	0f 84 c7 00 00 00	je	0x10000ea1e
10000e957:	85 c0	testl	%eax, %eax
10000e959:	0f 85 73 01 00 00	jne	0x10000ead2
10000e95f:	48 8d 05 32 f6 00 00	leaq	63026(%rip), %rax
10000e966:	48 8b 78 50	movq	80(%rax), %rdi
10000e96a:	8b 15 5c e9 07 00	movl	518492(%rip), %edx
10000e970:	4c 01 f1	addq	%r14, %rcx
10000e973:	48 8d 35 85 78 00 00	leaq	30853(%rip), %rsi ## literal pool for: "GPU %llu %s %llu\n"
10000e97a:	4d 89 e0	movq	%r12, %r8
10000e97d:	31 c0	xorl	%eax, %eax
10000e97f:	e8 ce 19 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e984:	e9 49 01 00 00	jmp	0x10000ead2
10000e989:	66 0f 57 db	xorpd	%xmm3, %xmm3
10000e98d:	41 8b 57 28	movl	40(%r15), %edx
10000e991:	83 fa 01	cmpl	$1, %edx
10000e994:	0f 84 b5 00 00 00	je	0x10000ea4f
10000e99a:	85 d2	testl	%edx, %edx
10000e99c:	0f 85 30 01 00 00	jne	0x10000ead2
10000e9a2:	4c 01 f1	addq	%r14, %rcx
10000e9a5:	48 8d 15 ec f5 00 00	leaq	62956(%rip), %rdx
10000e9ac:	48 8b 7a 50	movq	80(%rdx), %rdi
10000e9b0:	8b 15 16 e9 07 00	movl	518422(%rip), %edx
10000e9b6:	83 f8 04	cmpl	$4, %eax
10000e9b9:	74 08	je	0x10000e9c3
10000e9bb:	f2 0f 59 1d 65 7d 00 00	mulsd	32101(%rip), %xmm3
10000e9c3:	48 8d 35 01 78 00 00	leaq	30721(%rip), %rsi ## literal pool for: "GPU %llu %s %.2f%%\n"
10000e9ca:	66 0f 28 c3	movapd	%xmm3, %xmm0
10000e9ce:	b0 01	movb	$1, %al
10000e9d0:	e8 7d 19 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000e9d5:	e9 f8 00 00 00	jmp	0x10000ead2
10000e9da:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000e9de:	41 8b 57 28	movl	40(%r15), %edx
10000e9e2:	83 fa 01	cmpl	$1, %edx
10000e9e5:	0f 84 a9 00 00 00	je	0x10000ea94
10000e9eb:	85 d2	testl	%edx, %edx
10000e9ed:	0f 85 df 00 00 00	jne	0x10000ead2
10000e9f3:	48 8d 15 9e f5 00 00	leaq	62878(%rip), %rdx
10000e9fa:	48 8b 7a 50	movq	80(%rdx), %rdi
10000e9fe:	8b 15 c8 e8 07 00	movl	518344(%rip), %edx
10000ea04:	4c 01 f1	addq	%r14, %rcx
10000ea07:	4c 8b 04 18	movq	(%rax,%rbx), %r8
10000ea0b:	48 8d 35 cd 77 00 00	leaq	30669(%rip), %rsi ## literal pool for: "GPU %llu %s %llu (%.2f/second)\n"
10000ea12:	b0 01	movb	$1, %al
10000ea14:	e8 39 19 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000ea19:	e9 b4 00 00 00	jmp	0x10000ead2
10000ea1e:	4c 01 f1	addq	%r14, %rcx
10000ea21:	ba c1 00 00 00	movl	$193, %edx
10000ea26:	48 89 cf	movq	%rcx, %rdi
10000ea29:	48 8d b5 00 ff ff ff	leaq	-256(%rbp), %rsi
10000ea30:	e8 c1 d3 ff ff	callq	0x10000bdf6
10000ea35:	48 8d 0d 5c f5 00 00	leaq	62812(%rip), %rcx
10000ea3c:	48 8b 79 50	movq	80(%rcx), %rdi
10000ea40:	48 8d 35 d1 20 00 00	leaq	8401(%rip), %rsi ## literal pool for: "<key>%s</key><integer>%llu</integer>\n"
10000ea47:	48 89 c2	movq	%rax, %rdx
10000ea4a:	4c 89 e1	movq	%r12, %rcx
10000ea4d:	eb 7c	jmp	0x10000eacb
10000ea4f:	4c 01 f1	addq	%r14, %rcx
10000ea52:	ba c1 00 00 00	movl	$193, %edx
10000ea57:	48 89 cf	movq	%rcx, %rdi
10000ea5a:	48 8d b5 00 ff ff ff	leaq	-256(%rbp), %rsi
10000ea61:	66 0f 29 9d f0 fe ff ff	movapd	%xmm3, -272(%rbp)
10000ea69:	e8 88 d3 ff ff	callq	0x10000bdf6
10000ea6e:	48 8d 0d 23 f5 00 00	leaq	62755(%rip), %rcx
10000ea75:	48 8b 79 50	movq	80(%rcx), %rdi
10000ea79:	48 8d 35 59 59 00 00	leaq	22873(%rip), %rsi ## literal pool for: "<key>%s</key><real>%g</real>\n"
10000ea80:	48 89 c2	movq	%rax, %rdx
10000ea83:	66 0f 28 85 f0 fe ff ff	movapd	-272(%rbp), %xmm0
10000ea8b:	b0 01	movb	$1, %al
10000ea8d:	e8 c0 18 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000ea92:	eb 3e	jmp	0x10000ead2
10000ea94:	4c 01 f1	addq	%r14, %rcx
10000ea97:	ba c1 00 00 00	movl	$193, %edx
10000ea9c:	48 89 cf	movq	%rcx, %rdi
10000ea9f:	48 8d b5 00 ff ff ff	leaq	-256(%rbp), %rsi
10000eaa6:	e8 4b d3 ff ff	callq	0x10000bdf6
10000eaab:	48 8d 0d e6 f4 00 00	leaq	62694(%rip), %rcx
10000eab2:	48 8b 79 50	movq	80(%rcx), %rdi
10000eab6:	48 8b 0d 23 cc 02 00	movq	183331(%rip), %rcx
10000eabd:	48 8b 0c 19	movq	(%rcx,%rbx), %rcx
10000eac1:	48 8d 35 50 20 00 00	leaq	8272(%rip), %rsi ## literal pool for: "<key>%s</key><integer>%llu</integer>\n"
10000eac8:	48 89 c2	movq	%rax, %rdx
10000eacb:	31 c0	xorl	%eax, %eax
10000eacd:	e8 80 18 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000ead2:	49 ff c5	incq	%r13
10000ead5:	8b 05 f5 e7 07 00	movl	518133(%rip), %eax
10000eadb:	49 83 c6 24	addq	$36, %r14
10000eadf:	48 83 c3 18	addq	$24, %rbx
10000eae3:	49 39 c5	cmpq	%rax, %r13
10000eae6:	0f 82 8a fd ff ff	jb	0x10000e876
10000eaec:	41 83 7f 28 01	cmpl	$1, 40(%r15)
10000eaf1:	4c 8d 35 a0 f4 00 00	leaq	62624(%rip), %r14
10000eaf8:	75 31	jne	0x10000eb2b
10000eafa:	49 8b 76 50	movq	80(%r14), %rsi
10000eafe:	48 8d 3d a8 1c 00 00	leaq	7336(%rip), %rdi ## literal pool for: "</dict>\n"
10000eb05:	e8 54 18 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000eb0a:	41 83 7f 28 01	cmpl	$1, 40(%r15)
10000eb0f:	75 1a	jne	0x10000eb2b
10000eb11:	49 8b 4e 50	movq	80(%r14), %rcx
10000eb15:	48 8d 3d 91 1c 00 00	leaq	7313(%rip), %rdi ## literal pool for: "</dict>\n"
10000eb1c:	be 08 00 00 00	movl	$8, %esi
10000eb21:	ba 01 00 00 00	movl	$1, %edx
10000eb26:	e8 3f 18 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000eb2b:	41 83 7f 28 01	cmpl	$1, 40(%r15)
10000eb30:	75 10	jne	0x10000eb42
10000eb32:	49 8b 76 50	movq	80(%r14), %rsi
10000eb36:	48 8d 3d b2 73 00 00	leaq	29618(%rip), %rdi ## literal pool for: "</array>\n<!-- end GPU -->\n"
10000eb3d:	e8 1c 18 00 00	callq	0x10001035e ## symbol stub for: _fputs
10000eb42:	48 8b 05 1f 97 00 00	movq	38687(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000eb49:	48 8b 00	movq	(%rax), %rax
10000eb4c:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000eb50:	75 12	jne	0x10000eb64
10000eb52:	48 81 c4 f8 00 00 00	addq	$248, %rsp
10000eb59:	5b	popq	%rbx
10000eb5a:	41 5c	popq	%r12
10000eb5c:	41 5d	popq	%r13
10000eb5e:	41 5e	popq	%r14
10000eb60:	41 5f	popq	%r15
10000eb62:	5d	popq	%rbp
10000eb63:	c3	retq
10000eb64:	e8 8f 17 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000eb69:	55	pushq	%rbp
10000eb6a:	48 89 e5	movq	%rsp, %rbp
10000eb6d:	41 57	pushq	%r15
10000eb6f:	41 56	pushq	%r14
10000eb71:	41 55	pushq	%r13
10000eb73:	41 54	pushq	%r12
10000eb75:	53	pushq	%rbx
10000eb76:	48 83 ec 38	subq	$56, %rsp
10000eb7a:	80 3d bf cc 02 00 01	cmpb	$1, 183487(%rip)
10000eb81:	0f 85 64 02 00 00	jne	0x10000edeb
10000eb87:	41 bf 08 01 00 00	movl	$264, %r15d
10000eb8d:	4c 8d 75 d0	leaq	-48(%rbp), %r14
10000eb91:	4d 89 3e	movq	%r15, (%r14)
10000eb94:	8b 3d aa cc 02 00	movl	183466(%rip), %edi
10000eb9a:	80 3d a0 cc 02 00 00	cmpb	$0, 183456(%rip)
10000eba1:	b8 02 00 00 00	movl	$2, %eax
10000eba6:	be 22 01 00 00	movl	$290, %esi
10000ebab:	0f 45 f0	cmovnel	%eax, %esi
10000ebae:	4c 8d 25 83 c8 02 00	leaq	182403(%rip), %r12
10000ebb5:	31 d2	xorl	%edx, %edx
10000ebb7:	31 c9	xorl	%ecx, %ecx
10000ebb9:	4d 89 e0	movq	%r12, %r8
10000ebbc:	4d 89 f1	movq	%r14, %r9
10000ebbf:	e8 02 16 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
10000ebc4:	49 c7 06 48 00 00 00	movq	$72, (%r14)
10000ebcb:	8b 3d 73 cc 02 00	movl	183411(%rip), %edi
10000ebd1:	80 3d 69 cc 02 00 00	cmpb	$0, 183401(%rip)
10000ebd8:	b8 04 00 00 00	movl	$4, %eax
10000ebdd:	be 24 01 00 00	movl	$292, %esi
10000ebe2:	0f 45 f0	cmovnel	%eax, %esi
10000ebe5:	4d 01 e7	addq	%r12, %r15
10000ebe8:	4c 8d 4d d0	leaq	-48(%rbp), %r9
10000ebec:	31 d2	xorl	%edx, %edx
10000ebee:	31 c9	xorl	%ecx, %ecx
10000ebf0:	4d 89 f8	movq	%r15, %r8
10000ebf3:	e8 ce 15 00 00	callq	0x1000101c6 ## symbol stub for: _IOConnectCallStructMethod
10000ebf8:	48 83 3d 88 c9 02 00 00	cmpq	$0, 182664(%rip)
10000ec00:	0f 84 99 00 00 00	je	0x10000ec9f
10000ec06:	8b 05 c4 e6 07 00	movl	517828(%rip), %eax
10000ec0c:	85 c0	testl	%eax, %eax
10000ec0e:	0f 84 8b 00 00 00	je	0x10000ec9f
10000ec14:	31 db	xorl	%ebx, %ebx
10000ec16:	4c 8d 7d c8	leaq	-56(%rbp), %r15
10000ec1a:	45 31 ed	xorl	%r13d, %r13d
10000ec1d:	45 31 f6	xorl	%r14d, %r14d
10000ec20:	48 8b 0d b1 e6 07 00	movq	517809(%rip), %rcx
10000ec27:	83 3c 19 03	cmpl	$3, (%rcx,%rbx)
10000ec2b:	74 60	je	0x10000ec8d
10000ec2d:	48 8b 05 54 c9 02 00	movq	182612(%rip), %rax
10000ec34:	4c 01 e8	addq	%r13, %rax
10000ec37:	48 c7 45 d0 18 00 00 00	movq	$24, -48(%rbp)
10000ec3f:	4c 89 75 c8	movq	%r14, -56(%rbp)
10000ec43:	80 3d f7 cb 02 00 00	cmpb	$0, 183287(%rip)
10000ec4a:	8b 3d f4 cb 02 00	movl	183284(%rip), %edi
10000ec50:	be 27 01 00 00	movl	$295, %esi
10000ec55:	b9 07 00 00 00	movl	$7, %ecx
10000ec5a:	0f 45 f1	cmovnel	%ecx, %esi
10000ec5d:	48 8d 4d d0	leaq	-48(%rbp), %rcx
10000ec61:	48 89 4c 24 18	movq	%rcx, 24(%rsp)
10000ec66:	48 89 44 24 10	movq	%rax, 16(%rsp)
10000ec6b:	66 0f ef c0	pxor	%xmm0, %xmm0
10000ec6f:	f3 0f 7f 04 24	movdqu	%xmm0, (%rsp)
10000ec74:	4c 89 fa	movq	%r15, %rdx
10000ec77:	b9 01 00 00 00	movl	$1, %ecx
10000ec7c:	45 31 c0	xorl	%r8d, %r8d
10000ec7f:	45 31 c9	xorl	%r9d, %r9d
10000ec82:	e8 33 15 00 00	callq	0x1000101ba ## symbol stub for: _IOConnectCallMethod
10000ec87:	8b 05 43 e6 07 00	movl	517699(%rip), %eax
10000ec8d:	49 ff c6	incq	%r14
10000ec90:	89 c1	movl	%eax, %ecx
10000ec92:	49 83 c5 18	addq	$24, %r13
10000ec96:	48 83 c3 24	addq	$36, %rbx
10000ec9a:	49 39 ce	cmpq	%rcx, %r14
10000ec9d:	72 81	jb	0x10000ec20
10000ec9f:	48 8d 1d f2 f2 00 00	leaq	62194(%rip), %rbx
10000eca6:	80 3b 00	cmpb	$0, (%rbx)
10000eca9:	74 0c	je	0x10000ecb7
10000ecab:	48 8d 3d 36 ca 02 00	leaq	182838(%rip), %rdi
10000ecb2:	e8 43 01 00 00	callq	0x10000edfa
10000ecb7:	44 8a 4b 02	movb	2(%rbx), %r9b
10000ecbb:	48 8d 05 26 ca 02 00	leaq	182822(%rip), %rax
10000ecc2:	4c 8d 05 17 c6 02 00	leaq	181783(%rip), %r8
10000ecc9:	ba 08 01 00 00	movl	$264, %edx
10000ecce:	49 8d 3c 10	leaq	(%r8,%rdx), %rdi
10000ecd2:	48 01 c2	addq	%rax, %rdx
10000ecd5:	45 84 c9	testb	%r9b, %r9b
10000ecd8:	48 89 c6	movq	%rax, %rsi
10000ecdb:	49 0f 44 f0	cmoveq	%r8, %rsi
10000ecdf:	48 8b 1d 52 c7 02 00	movq	182098(%rip), %rbx
10000ece6:	48 0f 44 d7	cmoveq	%rdi, %rdx
10000ecea:	48 2b 1e	subq	(%rsi), %rbx
10000eced:	48 89 1d 9c c8 02 00	movq	%rbx, 182428(%rip)
10000ecf4:	48 8b 3d 45 c8 02 00	movq	182341(%rip), %rdi
10000ecfb:	48 2b 3a	subq	(%rdx), %rdi
10000ecfe:	48 89 3d 93 c9 02 00	movq	%rdi, 182675(%rip)
10000ed05:	8b 3d b5 e5 07 00	movl	517557(%rip), %edi
10000ed0b:	48 85 ff	testq	%rdi, %rdi
10000ed0e:	74 20	je	0x10000ed30
10000ed10:	31 db	xorl	%ebx, %ebx
10000ed12:	48 8d 15 77 c8 02 00	leaq	182391(%rip), %rdx
10000ed19:	49 8b 4c dc 08	movq	8(%r12,%rbx,8), %rcx
10000ed1e:	48 2b 4c de 08	subq	8(%rsi,%rbx,8), %rcx
10000ed23:	48 89 4c da 08	movq	%rcx, 8(%rdx,%rbx,8)
10000ed28:	48 ff c3	incq	%rbx
10000ed2b:	48 39 df	cmpq	%rbx, %rdi
10000ed2e:	75 e9	jne	0x10000ed19
10000ed30:	8b 3d 8e e5 07 00	movl	517518(%rip), %edi
10000ed36:	48 85 ff	testq	%rdi, %rdi
10000ed39:	74 29	je	0x10000ed64
10000ed3b:	31 db	xorl	%ebx, %ebx
10000ed3d:	48 8d 15 4c c8 02 00	leaq	182348(%rip), %rdx
10000ed44:	49 8b 8c dc 10 01 00 00	movq	272(%r12,%rbx,8), %rcx
10000ed4c:	48 2b 8c de 10 01 00 00	subq	272(%rsi,%rbx,8), %rcx
10000ed54:	48 89 8c da 10 01 00 00	movq	%rcx, 272(%rdx,%rbx,8)
10000ed5c:	48 ff c3	incq	%rbx
10000ed5f:	48 39 df	cmpq	%rbx, %rdi
10000ed62:	75 e0	jne	0x10000ed44
10000ed64:	45 84 c9	testb	%r9b, %r9b
10000ed67:	49 0f 44 c0	cmoveq	%r8, %rax
10000ed6b:	48 8b 80 50 01 00 00	movq	336(%rax), %rax
10000ed72:	48 85 c0	testq	%rax, %rax
10000ed75:	74 68	je	0x10000eddf
10000ed77:	48 8b 0d 62 c9 02 00	movq	182626(%rip), %rcx
10000ed7e:	48 85 c9	testq	%rcx, %rcx
10000ed81:	74 5c	je	0x10000eddf
10000ed83:	48 8b 15 fe c7 02 00	movq	182270(%rip), %rdx
10000ed8a:	48 85 d2	testq	%rdx, %rdx
10000ed8d:	74 50	je	0x10000eddf
10000ed8f:	8b 3d 3b e5 07 00	movl	517435(%rip), %edi
10000ed95:	48 85 ff	testq	%rdi, %rdi
10000ed98:	74 45	je	0x10000eddf
10000ed9a:	48 8b 35 37 e5 07 00	movq	517431(%rip), %rsi
10000eda1:	48 c1 e7 03	shlq	$3, %rdi
10000eda5:	4c 8d 04 7f	leaq	(%rdi,%rdi,2), %r8
10000eda9:	31 db	xorl	%ebx, %ebx
10000edab:	f3 0f 6f 04 1a	movdqu	(%rdx,%rbx), %xmm0
10000edb0:	f3 0f 6f 0c 18	movdqu	(%rax,%rbx), %xmm1
10000edb5:	66 0f fb c1	psubq	%xmm1, %xmm0
10000edb9:	f3 0f 7f 04 19	movdqu	%xmm0, (%rcx,%rbx)
10000edbe:	83 3e 02	cmpl	$2, (%rsi)
10000edc1:	48 8b 7c 1a 10	movq	16(%rdx,%rbx), %rdi
10000edc6:	74 05	je	0x10000edcd
10000edc8:	48 2b 7c 18 10	subq	16(%rax,%rbx), %rdi
10000edcd:	48 89 7c 19 10	movq	%rdi, 16(%rcx,%rbx)
10000edd2:	48 83 c3 18	addq	$24, %rbx
10000edd6:	48 83 c6 24	addq	$36, %rsi
10000edda:	49 39 d8	cmpq	%rbx, %r8
10000eddd:	75 cc	jne	0x10000edab
10000eddf:	48 8d 3d fa c4 02 00	leaq	181498(%rip), %rdi
10000ede6:	e8 0f 00 00 00	callq	0x10000edfa
10000edeb:	48 83 c4 38	addq	$56, %rsp
10000edef:	5b	popq	%rbx
10000edf0:	41 5c	popq	%r12
10000edf2:	41 5d	popq	%r13
10000edf4:	41 5e	popq	%r14
10000edf6:	41 5f	popq	%r15
10000edf8:	5d	popq	%rbp
10000edf9:	c3	retq
10000edfa:	55	pushq	%rbp
10000edfb:	48 89 e5	movq	%rsp, %rbp
10000edfe:	53	pushq	%rbx
10000edff:	50	pushq	%rax
10000ee00:	48 89 fb	movq	%rdi, %rbx
10000ee03:	48 8d 35 2e c6 02 00	leaq	181806(%rip), %rsi
10000ee0a:	ba 08 01 00 00	movl	$264, %edx
10000ee0f:	e8 bc 15 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000ee14:	0f 10 05 25 c7 02 00	movups	182053(%rip), %xmm0
10000ee1b:	0f 11 83 08 01 00 00	movups	%xmm0, 264(%rbx)
10000ee22:	0f 10 05 27 c7 02 00	movups	182055(%rip), %xmm0
10000ee29:	0f 11 83 18 01 00 00	movups	%xmm0, 280(%rbx)
10000ee30:	0f 10 05 29 c7 02 00	movups	182057(%rip), %xmm0
10000ee37:	0f 11 83 28 01 00 00	movups	%xmm0, 296(%rbx)
10000ee3e:	0f 10 05 2b c7 02 00	movups	182059(%rip), %xmm0
10000ee45:	0f 11 83 38 01 00 00	movups	%xmm0, 312(%rbx)
10000ee4c:	48 8b 05 2d c7 02 00	movq	182061(%rip), %rax
10000ee53:	48 89 83 48 01 00 00	movq	%rax, 328(%rbx)
10000ee5a:	48 8b bb 50 01 00 00	movq	336(%rbx), %rdi
10000ee61:	48 85 ff	testq	%rdi, %rdi
10000ee64:	74 1f	je	0x10000ee85
10000ee66:	48 8b 35 1b c7 02 00	movq	182043(%rip), %rsi
10000ee6d:	48 85 f6	testq	%rsi, %rsi
10000ee70:	74 13	je	0x10000ee85
10000ee72:	8b 05 58 e4 07 00	movl	517208(%rip), %eax
10000ee78:	48 c1 e0 03	shlq	$3, %rax
10000ee7c:	48 8d 14 40	leaq	(%rax,%rax,2), %rdx
10000ee80:	e8 4b 15 00 00	callq	0x1000103d0 ## symbol stub for: _memcpy
10000ee85:	48 83 c4 08	addq	$8, %rsp
10000ee89:	5b	popq	%rbx
10000ee8a:	5d	popq	%rbp
10000ee8b:	c3	retq
10000ee8c:	55	pushq	%rbp
10000ee8d:	48 89 e5	movq	%rsp, %rbp
10000ee90:	41 57	pushq	%r15
10000ee92:	41 56	pushq	%r14
10000ee94:	41 55	pushq	%r13
10000ee96:	41 54	pushq	%r12
10000ee98:	53	pushq	%rbx
10000ee99:	48 81 ec 28 01 00 00	subq	$296, %rsp
10000eea0:	48 8b 05 c1 93 00 00	movq	37825(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000eea7:	48 8b 00	movq	(%rax), %rax
10000eeaa:	48 89 45 d0	movq	%rax, -48(%rbp)
10000eeae:	48 8b 05 bb 94 00 00	movq	38075(%rip), %rax ## literal pool symbol address: _kIOMainPortDefault
10000eeb5:	8b 18	movl	(%rax), %ebx
10000eeb7:	48 8d 3d 7e 73 00 00	leaq	29566(%rip), %rdi ## literal pool for: "AGPM"
10000eebe:	e8 f9 13 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000eec3:	48 8d 95 cc fe ff ff	leaq	-308(%rbp), %rdx
10000eeca:	89 df	movl	%ebx, %edi
10000eecc:	48 89 c6	movq	%rax, %rsi
10000eecf:	e8 e2 13 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
10000eed4:	85 c0	testl	%eax, %eax
10000eed6:	74 2a	je	0x10000ef02
10000eed8:	48 8b 0d 91 93 00 00	movq	37777(%rip), %rcx ## literal pool symbol address: ___stderrp
10000eedf:	48 8b 19	movq	(%rcx), %rbx
10000eee2:	89 c7	movl	%eax, %edi
10000eee4:	e8 bd 14 00 00	callq	0x1000103a6 ## symbol stub for: _mach_error_string
10000eee9:	48 8d 35 a6 73 00 00	leaq	29606(%rip), %rsi ## literal pool for: "failed to get AGPM node(s): %s\n"
10000eef0:	48 89 df	movq	%rbx, %rdi
10000eef3:	48 89 c2	movq	%rax, %rdx
10000eef6:	31 c0	xorl	%eax, %eax
10000eef8:	e8 55 14 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000eefd:	e9 81 02 00 00	jmp	0x10000f183
10000ef02:	8b bd cc fe ff ff	movl	-308(%rbp), %edi
10000ef08:	e8 cb 12 00 00	callq	0x1000101d8 ## symbol stub for: _IOIteratorReset
10000ef0d:	8b bd cc fe ff ff	movl	-308(%rbp), %edi
10000ef13:	e8 ba 12 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000ef18:	85 c0	testl	%eax, %eax
10000ef1a:	0f 84 58 02 00 00	je	0x10000f178
10000ef20:	41 89 c5	movl	%eax, %r13d
10000ef23:	48 8b 05 36 94 00 00	movq	37942(%rip), %rax ## literal pool symbol address: _kCFAllocatorDefault
10000ef2a:	48 8b 18	movq	(%rax), %rbx
10000ef2d:	4c 8d 25 01 27 00 00	leaq	9985(%rip), %r12 ## literal pool for: "IOService"
10000ef34:	48 89 9d c0 fe ff ff	movq	%rbx, -320(%rbp)
10000ef3b:	44 89 ef	movl	%r13d, %edi
10000ef3e:	4c 89 e6	movq	%r12, %rsi
10000ef41:	48 8d 95 bc fe ff ff	leaq	-324(%rbp), %rdx
10000ef48:	e8 d9 12 00 00	callq	0x100010226 ## symbol stub for: _IORegistryEntryGetParentEntry
10000ef4d:	8b bd bc fe ff ff	movl	-324(%rbp), %edi
10000ef53:	48 8d 35 16 ac 00 00	leaq	44054(%rip), %rsi ## Objc cfstring ref: @"IOAccelTypes"
10000ef5a:	48 89 da	movq	%rbx, %rdx
10000ef5d:	31 c9	xorl	%ecx, %ecx
10000ef5f:	e8 9e 12 00 00	callq	0x100010202 ## symbol stub for: _IORegistryEntryCreateCFProperty
10000ef64:	48 85 c0	testq	%rax, %rax
10000ef67:	0f 84 9f 01 00 00	je	0x10000f10c
10000ef6d:	49 89 c6	movq	%rax, %r14
10000ef70:	48 89 c7	movq	%rax, %rdi
10000ef73:	e8 06 12 00 00	callq	0x10001017e ## symbol stub for: _CFGetTypeID
10000ef78:	49 89 c7	movq	%rax, %r15
10000ef7b:	e8 2e 12 00 00	callq	0x1000101ae ## symbol stub for: _CFStringGetTypeID
10000ef80:	49 39 c7	cmpq	%rax, %r15
10000ef83:	0f 85 c2 01 00 00	jne	0x10000f14b
10000ef89:	0f 57 c0	xorps	%xmm0, %xmm0
10000ef8c:	0f 29 45 c0	movaps	%xmm0, -64(%rbp)
10000ef90:	0f 29 45 b0	movaps	%xmm0, -80(%rbp)
10000ef94:	0f 29 45 a0	movaps	%xmm0, -96(%rbp)
10000ef98:	0f 29 45 90	movaps	%xmm0, -112(%rbp)
10000ef9c:	0f 29 45 80	movaps	%xmm0, -128(%rbp)
10000efa0:	0f 29 85 70 ff ff ff	movaps	%xmm0, -144(%rbp)
10000efa7:	0f 29 85 60 ff ff ff	movaps	%xmm0, -160(%rbp)
10000efae:	0f 29 85 50 ff ff ff	movaps	%xmm0, -176(%rbp)
10000efb5:	0f 29 85 40 ff ff ff	movaps	%xmm0, -192(%rbp)
10000efbc:	0f 29 85 30 ff ff ff	movaps	%xmm0, -208(%rbp)
10000efc3:	0f 29 85 20 ff ff ff	movaps	%xmm0, -224(%rbp)
10000efca:	0f 29 85 10 ff ff ff	movaps	%xmm0, -240(%rbp)
10000efd1:	0f 29 85 00 ff ff ff	movaps	%xmm0, -256(%rbp)
10000efd8:	0f 29 85 f0 fe ff ff	movaps	%xmm0, -272(%rbp)
10000efdf:	0f 29 85 e0 fe ff ff	movaps	%xmm0, -288(%rbp)
10000efe6:	0f 29 85 d0 fe ff ff	movaps	%xmm0, -304(%rbp)
10000efed:	ba ff 00 00 00	movl	$255, %edx
10000eff2:	4c 89 f7	movq	%r14, %rdi
10000eff5:	48 8d b5 d0 fe ff ff	leaq	-304(%rbp), %rsi
10000effc:	b9 00 01 00 08	movl	$134217984, %ecx
10000f001:	e8 96 11 00 00	callq	0x10001019c ## symbol stub for: _CFStringGetCString
10000f006:	48 63 05 c3 d2 02 00	movslq	185027(%rip), %rax
10000f00d:	48 69 d8 50 01 00 00	imulq	$336, %rax, %rbx
10000f014:	4c 8d 25 35 c8 02 00	leaq	182325(%rip), %r12
10000f01b:	4d 8d 3c 1c	leaq	(%r12,%rbx), %r15
10000f01f:	48 8d bd d0 fe ff ff	leaq	-304(%rbp), %rdi
10000f026:	be 2f 00 00 00	movl	$47, %esi
10000f02b:	e8 ae 14 00 00	callq	0x1000104de ## symbol stub for: _strrchr
10000f030:	48 8d 70 01	leaq	1(%rax), %rsi
10000f034:	ba ff 00 00 00	movl	$255, %edx
10000f039:	4c 89 ff	movq	%r15, %rdi
10000f03c:	e8 97 14 00 00	callq	0x1000104d8 ## symbol stub for: _strncpy
10000f041:	42 c6 84 23 ff 00 00 00 00	movb	$0, 255(%rbx,%r12)
10000f04a:	4c 89 e3	movq	%r12, %rbx
10000f04d:	44 89 ef	movl	%r13d, %edi
10000f050:	be 08 00 00 00	movl	$8, %esi
10000f055:	31 d2	xorl	%edx, %edx
10000f057:	e8 ee 11 00 00	callq	0x10001024a ## symbol stub for: _IOReportCopyChannelsForDriver
10000f05c:	8b 0d 6e d2 02 00	movl	184942(%rip), %ecx
10000f062:	48 63 d1	movslq	%ecx, %rdx
10000f065:	48 69 d2 50 01 00 00	imulq	$336, %rdx, %rdx
10000f06c:	4a 89 84 22 18 01 00 00	movq	%rax, 280(%rdx,%r12)
10000f074:	48 85 c0	testq	%rax, %rax
10000f077:	0f 84 99 00 00 00	je	0x10000f116
10000f07d:	48 89 c7	movq	%rax, %rdi
10000f080:	48 8d 35 61 a6 00 00	leaq	42593(%rip), %rsi
10000f087:	e8 f4 11 00 00	callq	0x100010280 ## symbol stub for: _IOReportPrune
10000f08c:	48 63 05 3d d2 02 00	movslq	184893(%rip), %rax
10000f093:	48 69 c0 50 01 00 00	imulq	$336, %rax, %rax
10000f09a:	48 8b bc 18 18 01 00 00	movq	280(%rax,%rbx), %rdi
10000f0a2:	e8 c7 11 00 00	callq	0x10001026e ## symbol stub for: _IOReportGetChannelCount
10000f0a7:	8b 0d 23 d2 02 00	movl	184867(%rip), %ecx
10000f0ad:	48 63 d1	movslq	%ecx, %rdx
10000f0b0:	85 c0	testl	%eax, %eax
10000f0b2:	4c 8d 25 7c 25 00 00	leaq	9596(%rip), %r12 ## literal pool for: "IOService"
10000f0b9:	7e 6c	jle	0x10000f127
10000f0bb:	48 69 c2 50 01 00 00	imulq	$336, %rdx, %rax
10000f0c2:	48 8d 14 18	leaq	(%rax,%rbx), %rdx
10000f0c6:	48 81 c2 20 01 00 00	addq	$288, %rdx
10000f0cd:	48 8b 72 f8	movq	-8(%rdx), %rsi
10000f0d1:	31 ff	xorl	%edi, %edi
10000f0d3:	31 c9	xorl	%ecx, %ecx
10000f0d5:	45 31 c0	xorl	%r8d, %r8d
10000f0d8:	e8 8b 11 00 00	callq	0x100010268 ## symbol stub for: _IOReportCreateSubscription
10000f0dd:	48 63 0d ec d1 02 00	movslq	184812(%rip), %rcx
10000f0e4:	48 69 d1 50 01 00 00	imulq	$336, %rcx, %rdx
10000f0eb:	48 01 da	addq	%rbx, %rdx
10000f0ee:	48 81 c2 00 01 00 00	addq	$256, %rdx
10000f0f5:	48 89 42 48	movq	%rax, 72(%rdx)
10000f0f9:	48 83 7a 20 00	cmpq	$0, 32(%rdx)
10000f0fe:	48 8b 9d c0 fe ff ff	movq	-320(%rbp), %rbx
10000f105:	74 6c	je	0x10000f173
10000f107:	c6 02 01	movb	$1, (%rdx)
10000f10a:	eb 31	jmp	0x10000f13d
10000f10c:	44 89 ef	movl	%r13d, %edi
10000f10f:	e8 d0 10 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000f114:	eb 45	jmp	0x10000f15b
10000f116:	c6 84 1a 00 01 00 00 00	movb	$0, 256(%rdx,%rbx)
10000f11e:	4c 8d 25 10 25 00 00	leaq	9488(%rip), %r12 ## literal pool for: "IOService"
10000f125:	eb 0f	jmp	0x10000f136
10000f127:	48 69 c2 50 01 00 00	imulq	$336, %rdx, %rax
10000f12e:	c6 84 18 00 01 00 00 00	movb	$0, 256(%rax,%rbx)
10000f136:	48 8b 9d c0 fe ff ff	movq	-320(%rbp), %rbx
10000f13d:	8d 41 01	leal	1(%rcx), %eax
10000f140:	89 05 8a d1 02 00	movl	%eax, 184714(%rip)
10000f146:	83 f9 07	cmpl	$7, %ecx
10000f149:	7d 5a	jge	0x10000f1a5
10000f14b:	44 89 ef	movl	%r13d, %edi
10000f14e:	e8 91 10 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000f153:	4c 89 f7	movq	%r14, %rdi
10000f156:	e8 35 10 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000f15b:	8b bd cc fe ff ff	movl	-308(%rbp), %edi
10000f161:	e8 6c 10 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000f166:	41 89 c5	movl	%eax, %r13d
10000f169:	85 c0	testl	%eax, %eax
10000f16b:	0f 85 ca fd ff ff	jne	0x10000ef3b
10000f171:	eb 05	jmp	0x10000f178
10000f173:	c6 02 00	movb	$0, (%rdx)
10000f176:	eb c5	jmp	0x10000f13d
10000f178:	8b bd cc fe ff ff	movl	-308(%rbp), %edi
10000f17e:	e8 61 10 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000f183:	48 8b 05 de 90 00 00	movq	37086(%rip), %rax ## literal pool symbol address: ___stack_chk_guard
10000f18a:	48 8b 00	movq	(%rax), %rax
10000f18d:	48 3b 45 d0	cmpq	-48(%rbp), %rax
10000f191:	75 17	jne	0x10000f1aa
10000f193:	48 81 c4 28 01 00 00	addq	$296, %rsp
10000f19a:	5b	popq	%rbx
10000f19b:	41 5c	popq	%r12
10000f19d:	41 5d	popq	%r13
10000f19f:	41 5e	popq	%r14
10000f1a1:	41 5f	popq	%r15
10000f1a3:	5d	popq	%rbp
10000f1a4:	c3	retq
10000f1a5:	e8 f5 0e 00 00	callq	0x10001009f
10000f1aa:	e8 49 11 00 00	callq	0x1000102f8 ## symbol stub for: ___stack_chk_fail
10000f1af:	55	pushq	%rbp
10000f1b0:	48 89 e5	movq	%rsp, %rbp
10000f1b3:	41 57	pushq	%r15
10000f1b5:	41 56	pushq	%r14
10000f1b7:	41 55	pushq	%r13
10000f1b9:	41 54	pushq	%r12
10000f1bb:	53	pushq	%rbx
10000f1bc:	48 83 ec 68	subq	$104, %rsp
10000f1c0:	83 3d 09 d1 02 00 00	cmpl	$0, 184585(%rip)
10000f1c7:	0f 84 c8 02 00 00	je	0x10000f495
10000f1cd:	4c 8d 25 1c ee 00 00	leaq	60956(%rip), %r12
10000f1d4:	41 8b 44 24 28	movl	40(%r12), %eax
10000f1d9:	83 f8 01	cmpl	$1, %eax
10000f1dc:	74 1d	je	0x10000f1fb
10000f1de:	85 c0	testl	%eax, %eax
10000f1e0:	75 3a	jne	0x10000f21c
10000f1e2:	48 8d 05 af ed 00 00	leaq	60847(%rip), %rax
10000f1e9:	48 8b 48 50	movq	80(%rax), %rcx
10000f1ed:	48 8d 3d c2 70 00 00	leaq	28866(%rip), %rdi ## literal pool for: "\n**** AGPM Stats ****\n\n"
10000f1f4:	be 17 00 00 00	movl	$23, %esi
10000f1f9:	eb 17	jmp	0x10000f212
10000f1fb:	48 8d 05 96 ed 00 00	leaq	60822(%rip), %rax
10000f202:	48 8b 48 50	movq	80(%rax), %rcx
10000f206:	48 8d 3d c1 70 00 00	leaq	28865(%rip), %rdi ## literal pool for: "<key>agpm_stats</key>\n<array>\n"
10000f20d:	be 1e 00 00 00	movl	$30, %esi
10000f212:	ba 01 00 00 00	movl	$1, %edx
10000f217:	e8 4e 11 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000f21c:	4c 8d 6d a0	leaq	-96(%rbp), %r13
10000f220:	49 c7 45 00 00 00 00 00	movq	$0, (%r13)
10000f228:	4d 89 6d 08	movq	%r13, 8(%r13)
10000f22c:	48 b8 00 00 00 00 20 00 00 00	movabsq	$137438953472, %rax
10000f236:	49 89 45 10	movq	%rax, 16(%r13)
10000f23a:	41 c7 45 18 00 00 00 00	movl	$0, 24(%r13)
10000f242:	83 3d 87 d0 02 00 00	cmpl	$0, 184455(%rip)
10000f249:	0f 8e 0f 02 00 00	jle	0x10000f45e
10000f24f:	4c 8d 35 97 70 00 00	leaq	28823(%rip), %r14 ## literal pool for: "Accelerator Type: %s\n"
10000f256:	4c 8d 3d 3b ed 00 00	leaq	60731(%rip), %r15
10000f25d:	48 8d 1d ec c5 02 00	leaq	181740(%rip), %rbx
10000f264:	31 c0	xorl	%eax, %eax
10000f266:	41 8b 4c 24 28	movl	40(%r12), %ecx
10000f26b:	4c 89 f6	movq	%r14, %rsi
10000f26e:	85 c9	testl	%ecx, %ecx
10000f270:	74 0c	je	0x10000f27e
10000f272:	83 f9 01	cmpl	$1, %ecx
10000f275:	75 1e	jne	0x10000f295
10000f277:	48 8d 35 85 70 00 00	leaq	28805(%rip), %rsi ## literal pool for: "<dict>\n<key>accelerator_type</key><string>%s</string>\n"
10000f27e:	49 8b 7f 50	movq	80(%r15), %rdi
10000f282:	48 98	cltq
10000f284:	48 69 d0 50 01 00 00	imulq	$336, %rax, %rdx
10000f28b:	48 01 da	addq	%rbx, %rdx
10000f28e:	31 c0	xorl	%eax, %eax
10000f290:	e8 bd 10 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000f295:	48 8b 45 a8	movq	-88(%rbp), %rax
10000f299:	48 63 40 18	movslq	24(%rax), %rax
10000f29d:	48 69 c0 50 01 00 00	imulq	$336, %rax, %rax
10000f2a4:	80 bc 18 00 01 00 00 00	cmpb	$0, 256(%rax,%rbx)
10000f2ac:	0f 84 5c 01 00 00	je	0x10000f40e
10000f2b2:	48 8b bc 18 40 01 00 00	movq	320(%rax,%rbx), %rdi
10000f2ba:	48 8b 05 5f 8f 00 00	movq	36703(%rip), %rax ## literal pool symbol address: __NSConcreteStackBlock
10000f2c1:	48 89 85 78 ff ff ff	movq	%rax, -136(%rbp)
10000f2c8:	48 c7 45 80 00 00 00 42	movq	$1107296256, -128(%rbp)
10000f2d0:	48 8d 05 5e 02 00 00	leaq	606(%rip), %rax
10000f2d7:	48 89 45 88	movq	%rax, -120(%rbp)
10000f2db:	48 8d 05 26 a4 00 00	leaq	42022(%rip), %rax
10000f2e2:	48 89 45 90	movq	%rax, -112(%rbp)
10000f2e6:	4c 89 6d 98	movq	%r13, -104(%rbp)
10000f2ea:	48 8d b5 78 ff ff ff	leaq	-136(%rbp), %rsi
10000f2f1:	e8 7e 0f 00 00	callq	0x100010274 ## symbol stub for: _IOReportIterate
10000f2f6:	48 8b 45 a8	movq	-88(%rbp), %rax
10000f2fa:	48 63 40 18	movslq	24(%rax), %rax
10000f2fe:	48 69 f8 50 01 00 00	imulq	$336, %rax, %rdi
10000f305:	48 8b 84 1f 08 01 00 00	movq	264(%rdi,%rbx), %rax
10000f30d:	48 85 c0	testq	%rax, %rax
10000f310:	74 41	je	0x10000f353
10000f312:	66 48 0f 6e d8	movq	%rax, %xmm3
10000f317:	66 0f 6f 0d e1 73 00 00	movdqa	29665(%rip), %xmm1
10000f31f:	66 0f 62 d9	punpckldq	%xmm1, %xmm3
10000f323:	66 0f 28 15 e5 73 00 00	movapd	29669(%rip), %xmm2
10000f32b:	66 0f 5c da	subpd	%xmm2, %xmm3
10000f32f:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000f333:	f3 0f 7e 84 1f 10 01 00 00	movq	272(%rdi,%rbx), %xmm0
10000f33c:	66 0f 62 c1	punpckldq	%xmm1, %xmm0
10000f340:	66 0f 5c c2	subpd	%xmm2, %xmm0
10000f344:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000f348:	f2 0f 5e d8	divsd	%xmm0, %xmm3
10000f34c:	66 0f 29 5d c0	movapd	%xmm3, -64(%rbp)
10000f351:	eb 09	jmp	0x10000f35c
10000f353:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000f357:	66 0f 29 45 c0	movapd	%xmm0, -64(%rbp)
10000f35c:	48 01 df	addq	%rbx, %rdi
10000f35f:	ba 00 01 00 00	movl	$256, %edx
10000f364:	48 8d 35 f3 6f 00 00	leaq	28659(%rip), %rsi ## literal pool for: "IntelAccelerator"
10000f36b:	e8 62 11 00 00	callq	0x1000104d2 ## symbol stub for: _strncmp
10000f370:	41 8b 4c 24 28	movl	40(%r12), %ecx
10000f375:	85 c0	testl	%eax, %eax
10000f377:	74 16	je	0x10000f38f
10000f379:	83 f9 01	cmpl	$1, %ecx
10000f37c:	74 38	je	0x10000f3b6
10000f37e:	85 c9	testl	%ecx, %ecx
10000f380:	75 70	jne	0x10000f3f2
10000f382:	49 8b 7f 50	movq	80(%r15), %rdi
10000f386:	48 8d 35 71 70 00 00	leaq	28785(%rip), %rsi ## literal pool for: "Plimit: %.2f (GPU Frequency headroom N/A)\n"
10000f38d:	eb 32	jmp	0x10000f3c1
10000f38f:	83 f9 01	cmpl	$1, %ecx
10000f392:	74 3b	je	0x10000f3cf
10000f394:	85 c9	testl	%ecx, %ecx
10000f396:	75 5a	jne	0x10000f3f2
10000f398:	49 8b 7f 50	movq	80(%r15), %rdi
10000f39c:	66 0f 28 45 c0	movapd	-64(%rbp), %xmm0
10000f3a1:	66 0f 28 c8	movapd	%xmm0, %xmm1
10000f3a5:	f2 0f 59 0d 53 88 00 00	mulsd	34899(%rip), %xmm1
10000f3ad:	48 8d 35 bb 6f 00 00	leaq	28603(%rip), %rsi ## literal pool for: "Plimit: %.2f (GPU Frequency headroom limited on average by %.0f MHz)\n"
10000f3b4:	eb 35	jmp	0x10000f3eb
10000f3b6:	49 8b 7f 50	movq	80(%r15), %rdi
10000f3ba:	48 8d 35 68 70 00 00	leaq	28776(%rip), %rsi ## literal pool for: "<key>Plimit</key><real>%g</real>\n"
10000f3c1:	66 0f 28 45 c0	movapd	-64(%rbp), %xmm0
10000f3c6:	b0 01	movb	$1, %al
10000f3c8:	e8 85 0f 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000f3cd:	eb 23	jmp	0x10000f3f2
10000f3cf:	49 8b 7f 50	movq	80(%r15), %rdi
10000f3d3:	66 0f 28 45 c0	movapd	-64(%rbp), %xmm0
10000f3d8:	66 0f 28 c8	movapd	%xmm0, %xmm1
10000f3dc:	f2 0f 59 0d 1c 88 00 00	mulsd	34844(%rip), %xmm1
10000f3e4:	48 8d 35 ca 6f 00 00	leaq	28618(%rip), %rsi ## literal pool for: "<key>Plimit</key><real>%g</real>\n<key>plimit_MHz</key><real>%.0f</real>\n"
10000f3eb:	b0 02	movb	$2, %al
10000f3ed:	e8 60 0f 00 00	callq	0x100010352 ## symbol stub for: _fprintf
10000f3f2:	48 8b 45 a8	movq	-88(%rbp), %rax
10000f3f6:	48 63 40 18	movslq	24(%rax), %rax
10000f3fa:	48 69 c0 50 01 00 00	imulq	$336, %rax, %rax
10000f401:	66 0f 57 c0	xorpd	%xmm0, %xmm0
10000f405:	66 0f 11 84 18 08 01 00 00	movupd	%xmm0, 264(%rax,%rbx)
10000f40e:	41 8b 44 24 28	movl	40(%r12), %eax
10000f413:	83 f8 01	cmpl	$1, %eax
10000f416:	74 14	je	0x10000f42c
10000f418:	85 c0	testl	%eax, %eax
10000f41a:	75 2a	jne	0x10000f446
10000f41c:	49 8b 77 50	movq	80(%r15), %rsi
10000f420:	bf 0a 00 00 00	movl	$10, %edi
10000f425:	e8 2e 0f 00 00	callq	0x100010358 ## symbol stub for: _fputc
10000f42a:	eb 1a	jmp	0x10000f446
10000f42c:	49 8b 4f 50	movq	80(%r15), %rcx
10000f430:	be 08 00 00 00	movl	$8, %esi
10000f435:	ba 01 00 00 00	movl	$1, %edx
10000f43a:	48 8d 3d 6c 13 00 00	leaq	4972(%rip), %rdi ## literal pool for: "</dict>\n"
10000f441:	e8 24 0f 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000f446:	48 8b 4d a8	movq	-88(%rbp), %rcx
10000f44a:	8b 41 18	movl	24(%rcx), %eax
10000f44d:	ff c0	incl	%eax
10000f44f:	89 41 18	movl	%eax, 24(%rcx)
10000f452:	3b 05 78 ce 02 00	cmpl	183928(%rip), %eax
10000f458:	0f 8c 08 fe ff ff	jl	0x10000f266
10000f45e:	41 83 7c 24 28 01	cmpl	$1, 40(%r12)
10000f464:	75 21	jne	0x10000f487
10000f466:	48 8d 05 2b eb 00 00	leaq	60203(%rip), %rax
10000f46d:	48 8b 48 50	movq	80(%rax), %rcx
10000f471:	48 8d 3d 81 24 00 00	leaq	9345(%rip), %rdi ## literal pool for: "</array>\n"
10000f478:	be 09 00 00 00	movl	$9, %esi
10000f47d:	ba 01 00 00 00	movl	$1, %edx
10000f482:	e8 e3 0e 00 00	callq	0x10001036a ## symbol stub for: _fwrite
10000f487:	48 8d 7d a0	leaq	-96(%rbp), %rdi
10000f48b:	be 08 00 00 00	movl	$8, %esi
10000f490:	e8 39 0e 00 00	callq	0x1000102ce ## symbol stub for: __Block_object_dispose
10000f495:	48 83 c4 68	addq	$104, %rsp
10000f499:	5b	popq	%rbx
10000f49a:	41 5c	popq	%r12
10000f49c:	41 5d	popq	%r13
10000f49e:	41 5e	popq	%r14
10000f4a0:	41 5f	popq	%r15
10000f4a2:	5d	popq	%rbp
10000f4a3:	c3	retq
10000f4a4:	55	pushq	%rbp
10000f4a5:	48 89 e5	movq	%rsp, %rbp
10000f4a8:	41 56	pushq	%r14
10000f4aa:	53	pushq	%rbx
10000f4ab:	8b 05 1f ce 02 00	movl	183839(%rip), %eax
10000f4b1:	85 c0	testl	%eax, %eax
10000f4b3:	7e 44	jle	0x10000f4f9
10000f4b5:	48 8d 1d 94 c4 02 00	leaq	181396(%rip), %rbx
10000f4bc:	45 31 f6	xorl	%r14d, %r14d
10000f4bf:	80 3b 00	cmpb	$0, (%rbx)
10000f4c2:	74 23	je	0x10000f4e7
10000f4c4:	48 8d 7b 28	leaq	40(%rbx), %rdi
10000f4c8:	48 8d 73 30	leaq	48(%rbx), %rsi
10000f4cc:	48 8d 53 38	leaq	56(%rbx), %rdx
10000f4d0:	48 8d 4b 40	leaq	64(%rbx), %rcx
10000f4d4:	4c 8b 4b 20	movq	32(%rbx), %r9
10000f4d8:	4c 8b 43 48	movq	72(%rbx), %r8
10000f4dc:	e8 c1 cb ff ff	callq	0x10000c0a2
10000f4e1:	8b 05 e9 cd 02 00	movl	183785(%rip), %eax
10000f4e7:	49 ff c6	incq	%r14
10000f4ea:	48 63 c8	movslq	%eax, %rcx
10000f4ed:	48 81 c3 50 01 00 00	addq	$336, %rbx
10000f4f4:	49 39 ce	cmpq	%rcx, %r14
10000f4f7:	7c c6	jl	0x10000f4bf
10000f4f9:	5b	popq	%rbx
10000f4fa:	41 5e	popq	%r14
10000f4fc:	5d	popq	%rbp
10000f4fd:	c3	retq
10000f4fe:	55	pushq	%rbp
10000f4ff:	48 89 e5	movq	%rsp, %rbp
10000f502:	48 89 f7	movq	%rsi, %rdi
10000f505:	e8 28 0d 00 00	callq	0x100010232 ## symbol stub for: _IOReportChannelGetChannelID
10000f50a:	48 b9 44 49 74 69 6d 69 6c 50	movabsq	$5795122739160566084, %rcx
10000f514:	31 d2	xorl	%edx, %edx
10000f516:	48 39 c8	cmpq	%rcx, %rax
10000f519:	0f 95 c2	setne	%dl
10000f51c:	c1 e2 04	shll	$4, %edx
10000f51f:	31 c9	xorl	%ecx, %ecx
10000f521:	48 be 44 49 65 6c 70 6d 61 53	movabsq	$6008203707511294276, %rsi
10000f52b:	48 39 f0	cmpq	%rsi, %rax
10000f52e:	0f 45 ca	cmovnel	%edx, %ecx
10000f531:	89 c8	movl	%ecx, %eax
10000f533:	5d	popq	%rbp
10000f534:	c3	retq
10000f535:	55	pushq	%rbp
10000f536:	48 89 e5	movq	%rsp, %rbp
10000f539:	41 57	pushq	%r15
10000f53b:	41 56	pushq	%r14
10000f53d:	41 54	pushq	%r12
10000f53f:	53	pushq	%rbx
10000f540:	48 89 f3	movq	%rsi, %rbx
10000f543:	49 89 fe	movq	%rdi, %r14
10000f546:	48 89 f7	movq	%rsi, %rdi
10000f549:	e8 e4 0c 00 00	callq	0x100010232 ## symbol stub for: _IOReportChannelGetChannelID
10000f54e:	49 89 c4	movq	%rax, %r12
10000f551:	48 89 df	movq	%rbx, %rdi
10000f554:	31 f6	xorl	%esi, %esi
10000f556:	e8 31 0d 00 00	callq	0x10001028c ## symbol stub for: _IOReportSimpleGetIntegerValue
10000f55b:	49 89 c7	movq	%rax, %r15
10000f55e:	48 89 df	movq	%rbx, %rdi
10000f561:	e8 d2 0c 00 00	callq	0x100010238 ## symbol stub for: _IOReportChannelGetChannelName
10000f566:	48 85 c0	testq	%rax, %rax
10000f569:	74 6f	je	0x10000f5da
10000f56b:	48 b8 44 49 65 6c 70 6d 61 53	movabsq	$6008203707511294276, %rax
10000f575:	49 39 c4	cmpq	%rax, %r12
10000f578:	74 33	je	0x10000f5ad
10000f57a:	48 b8 44 49 74 69 6d 69 6c 50	movabsq	$5795122739160566084, %rax
10000f584:	49 39 c4	cmpq	%rax, %r12
10000f587:	75 46	jne	0x10000f5cf
10000f589:	49 8b 46 20	movq	32(%r14), %rax
10000f58d:	48 8b 40 08	movq	8(%rax), %rax
10000f591:	48 63 40 18	movslq	24(%rax), %rax
10000f595:	48 69 c0 50 01 00 00	imulq	$336, %rax, %rax
10000f59c:	48 8d 0d ad c2 02 00	leaq	180909(%rip), %rcx
10000f5a3:	4c 89 bc 08 08 01 00 00	movq	%r15, 264(%rax,%rcx)
10000f5ab:	eb 22	jmp	0x10000f5cf
10000f5ad:	49 8b 46 20	movq	32(%r14), %rax
10000f5b1:	48 8b 40 08	movq	8(%rax), %rax
10000f5b5:	48 63 40 18	movslq	24(%rax), %rax
10000f5b9:	48 69 c0 50 01 00 00	imulq	$336, %rax, %rax
10000f5c0:	48 8d 0d 89 c2 02 00	leaq	180873(%rip), %rcx
10000f5c7:	4c 89 bc 08 10 01 00 00	movq	%r15, 272(%rax,%rcx)
10000f5cf:	31 c0	xorl	%eax, %eax
10000f5d1:	5b	popq	%rbx
10000f5d2:	41 5c	popq	%r12
10000f5d4:	41 5e	popq	%r14
10000f5d6:	41 5f	popq	%r15
10000f5d8:	5d	popq	%rbp
10000f5d9:	c3	retq
10000f5da:	e8 e1 0a 00 00	callq	0x1000100c0
10000f5df:	55	pushq	%rbp
10000f5e0:	48 89 e5	movq	%rsp, %rbp
10000f5e3:	48 8b 05 be 8c 00 00	movq	36030(%rip), %rax ## literal pool symbol address: _bootstrap_port
10000f5ea:	8b 38	movl	(%rax), %edi
10000f5ec:	48 8d 35 e5 cc 02 00	leaq	183525(%rip), %rsi
10000f5f3:	e8 e6 0b 00 00	callq	0x1000101de ## symbol stub for: _IOMainPort
10000f5f8:	85 c0	testl	%eax, %eax
10000f5fa:	75 2f	jne	0x10000f62b
10000f5fc:	0f 57 c0	xorps	%xmm0, %xmm0
10000f5ff:	0f 11 05 ea cc 02 00	movups	%xmm0, 183530(%rip)
10000f606:	0f 11 05 d3 cc 02 00	movups	%xmm0, 183507(%rip)
10000f60d:	0f 11 05 ec cc 02 00	movups	%xmm0, 183532(%rip)
10000f614:	0f 11 05 f5 cc 02 00	movups	%xmm0, 183541(%rip)
10000f61b:	0f 11 05 fe cc 02 00	movups	%xmm0, 183550(%rip)
10000f622:	0f 11 05 07 cd 02 00	movups	%xmm0, 183559(%rip)
10000f629:	5d	popq	%rbp
10000f62a:	c3	retq
10000f62b:	e8 b3 0a 00 00	callq	0x1000100e3
10000f630:	55	pushq	%rbp
10000f631:	48 89 e5	movq	%rsp, %rbp
10000f634:	53	pushq	%rbx
10000f635:	50	pushq	%rax
10000f636:	48 8d 1d 5b e9 00 00	leaq	59739(%rip), %rbx
10000f63d:	80 3b 00	cmpb	$0, (%rbx)
10000f640:	74 34	je	0x10000f676
10000f642:	e8 59 0d 00 00	callq	0x1000103a0 ## symbol stub for: _mach_absolute_time
10000f647:	66 48 0f 6e c8	movq	%rax, %xmm1
10000f64c:	66 0f 62 0d ac 70 00 00	punpckldq	28844(%rip), %xmm1
10000f654:	66 0f 5c 0d b4 70 00 00	subpd	28852(%rip), %xmm1
10000f65c:	66 0f 7c c9	haddpd	%xmm1, %xmm1
10000f660:	f2 0f 59 4b 08	mulsd	8(%rbx), %xmm1
10000f665:	f2 0f 5e 0d b3 70 00 00	divsd	28851(%rip), %xmm1
10000f66d:	48 8d 05 6c cc 02 00	leaq	183404(%rip), %rax
10000f674:	eb 12	jmp	0x10000f688
10000f676:	80 7b 02 00	cmpb	$0, 2(%rbx)
10000f67a:	74 58	je	0x10000f6d4
10000f67c:	f2 0f 10 4b 28	movsd	40(%rbx), %xmm1
10000f681:	48 8d 05 98 cc 02 00	leaq	183448(%rip), %rax
10000f688:	48 8b 15 71 cc 02 00	movq	183409(%rip), %rdx
10000f68f:	48 2b 10	subq	(%rax), %rdx
10000f692:	72 1a	jb	0x10000f6ae
10000f694:	48 8b 0d 6d cc 02 00	movq	183405(%rip), %rcx
10000f69b:	48 2b 48 08	subq	8(%rax), %rcx
10000f69f:	72 0d	jb	0x10000f6ae
10000f6a1:	4c 8b 05 68 cc 02 00	movq	183400(%rip), %r8
10000f6a8:	4c 2b 40 10	subq	16(%rax), %r8
10000f6ac:	73 2d	jae	0x10000f6db
10000f6ae:	48 8b 05 bb 8b 00 00	movq	35771(%rip), %rax ## literal pool symbol address: ___stderrp
10000f6b5:	48 8b 08	movq	(%rax), %rcx
10000f6b8:	48 8d 3d bd 6d 00 00	leaq	28093(%rip), %rdi ## literal pool for: "warning: detected disk usage underflow, a disk was probably removed\n"
10000f6bf:	be 44 00 00 00	movl	$68, %esi
10000f6c4:	ba 01 00 00 00	movl	$1, %edx
10000f6c9:	48 83 c4 08	addq	$8, %rsp
10000f6cd:	5b	popq	%rbx
10000f6ce:	5d	popq	%rbp
10000f6cf:	e9 96 0c 00 00	jmp	0x10001036a ## symbol stub for: _fwrite
10000f6d4:	f2 0f 10 4b 20	movsd	32(%rbx), %xmm1
10000f6d9:	eb 92	jmp	0x10000f66d
10000f6db:	4c 8b 0d 36 cc 02 00	movq	183350(%rip), %r9
10000f6e2:	66 48 0f 6e c2	movq	%rdx, %xmm0
10000f6e7:	66 0f 6f 2d 11 70 00 00	movdqa	28689(%rip), %xmm5
10000f6ef:	66 0f 62 c5	punpckldq	%xmm5, %xmm0
10000f6f3:	66 0f 28 35 15 70 00 00	movapd	28693(%rip), %xmm6
10000f6fb:	66 0f 5c c6	subpd	%xmm6, %xmm0
10000f6ff:	66 0f 7c c0	haddpd	%xmm0, %xmm0
10000f703:	4c 2b 48 18	subq	24(%rax), %r9
10000f707:	66 48 0f 6e d1	movq	%rcx, %xmm2
10000f70c:	66 0f 62 d5	punpckldq	%xmm5, %xmm2
10000f710:	66 0f 5c d6	subpd	%xmm6, %xmm2
10000f714:	66 0f 7c d2	haddpd	%xmm2, %xmm2
10000f718:	f2 0f 5e c1	divsd	%xmm1, %xmm0
10000f71c:	66 49 0f 6e e0	movq	%r8, %xmm4
10000f721:	66 0f 62 e5	punpckldq	%xmm5, %xmm4
10000f725:	66 0f 5c e6	subpd	%xmm6, %xmm4
10000f729:	66 0f 7c e4	haddpd	%xmm4, %xmm4
10000f72d:	f2 0f 5e d1	divsd	%xmm1, %xmm2
10000f731:	f2 0f 5e e1	divsd	%xmm1, %xmm4
10000f735:	66 49 0f 6e d9	movq	%r9, %xmm3
10000f73a:	66 0f 62 dd	punpckldq	%xmm5, %xmm3
10000f73e:	66 0f 5c de	subpd	%xmm6, %xmm3
10000f742:	66 0f 7c db	haddpd	%xmm3, %xmm3
10000f746:	f2 0f 5e d9	divsd	%xmm1, %xmm3
10000f74a:	48 8d 05 9f e8 00 00	leaq	59551(%rip), %rax
10000f751:	8b 40 28	movl	40(%rax), %eax
10000f754:	83 f8 01	cmpl	$1, %eax
10000f757:	74 30	je	0x10000f789
10000f759:	85 c0	testl	%eax, %eax
10000f75b:	75 4c	jne	0x10000f7a9
10000f75d:	48 8b 7b 50	movq	80(%rbx), %rdi
10000f761:	f2 0f 10 0d ef 6f 00 00	movsd	28655(%rip), %xmm1
10000f769:	f2 0f 5e e1	divsd	%xmm1, %xmm4
10000f76d:	f2 0f 5e d9	divsd	%xmm1, %xmm3
10000f771:	48 8d 35 49 6d 00 00	leaq	27977(%rip), %rsi ## literal pool for: "\n\n**** Disk activity ****\n\nread: %.2f ops/s %.2f KBytes/s\nwrite: %.2f ops/s %.2f KBytes/s\n"
10000f778:	66 0f 28 cc	movapd	%xmm4, %xmm1
10000f77c:	b0 04	movb	$4, %al
10000f77e:	48 83 c4 08	addq	$8, %rsp
10000f782:	5b	popq	%rbx
10000f783:	5d	popq	%rbp
10000f784:	e9 c9 0b 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
10000f789:	48 8b 7b 50	movq	80(%rbx), %rdi
10000f78d:	48 8d 35 88 6d 00 00	leaq	28040(%rip), %rsi ## literal pool for: "<key>disk</key>\n<dict>\n<key>rops_diff</key><integer>%llu</integer>\n<key>rops_per_s</key><real>%g</real>\n<key>wops_diff</key><integer>%llu</integer>\n<key>wops_per_s</key><real>%g</real>\n<key>rbytes_diff</key><integer>%llu</integer>\n<key>rbytes_per_s</key><real>%g</real>\n<key>wbytes_diff</key><integer>%llu</integer>\n<key>wbytes_per_s</key><real>%g</real>\n</dict>\n"
10000f794:	66 0f 28 ca	movapd	%xmm2, %xmm1
10000f798:	66 0f 28 d4	movapd	%xmm4, %xmm2
10000f79c:	b0 04	movb	$4, %al
10000f79e:	48 83 c4 08	addq	$8, %rsp
10000f7a2:	5b	popq	%rbx
10000f7a3:	5d	popq	%rbp
10000f7a4:	e9 a9 0b 00 00	jmp	0x100010352 ## symbol stub for: _fprintf
10000f7a9:	48 83 c4 08	addq	$8, %rsp
10000f7ad:	5b	popq	%rbx
10000f7ae:	5d	popq	%rbp
10000f7af:	c3	retq
10000f7b0:	55	pushq	%rbp
10000f7b1:	48 89 e5	movq	%rsp, %rbp
10000f7b4:	41 57	pushq	%r15
10000f7b6:	41 56	pushq	%r14
10000f7b8:	41 55	pushq	%r13
10000f7ba:	41 54	pushq	%r12
10000f7bc:	53	pushq	%rbx
10000f7bd:	48 83 ec 18	subq	$24, %rsp
10000f7c1:	0f 10 05 38 cb 02 00	movups	183096(%rip), %xmm0
10000f7c8:	0f 11 05 11 cb 02 00	movups	%xmm0, 183057(%rip)
10000f7cf:	0f 10 05 3a cb 02 00	movups	183098(%rip), %xmm0
10000f7d6:	0f 11 05 13 cb 02 00	movups	%xmm0, 183059(%rip)
10000f7dd:	0f 57 c0	xorps	%xmm0, %xmm0
10000f7e0:	0f 11 05 19 cb 02 00	movups	%xmm0, 183065(%rip)
10000f7e7:	0f 11 05 22 cb 02 00	movups	%xmm0, 183074(%rip)
10000f7ee:	8b 1d e4 ca 02 00	movl	183012(%rip), %ebx
10000f7f4:	48 8d 3d 8d 6e 00 00	leaq	28301(%rip), %rdi ## literal pool for: "IOBlockStorageDriver"
10000f7fb:	e8 bc 0a 00 00	callq	0x1000102bc ## symbol stub for: _IOServiceMatching
10000f800:	48 8d 55 d4	leaq	-44(%rbp), %rdx
10000f804:	89 df	movl	%ebx, %edi
10000f806:	48 89 c6	movq	%rax, %rsi
10000f809:	e8 a8 0a 00 00	callq	0x1000102b6 ## symbol stub for: _IOServiceGetMatchingServices
10000f80e:	85 c0	testl	%eax, %eax
10000f810:	0f 85 82 01 00 00	jne	0x10000f998
10000f816:	8b 7d d4	movl	-44(%rbp), %edi
10000f819:	e8 b4 09 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000f81e:	85 c0	testl	%eax, %eax
10000f820:	0f 84 2e 01 00 00	je	0x10000f954
10000f826:	89 c3	movl	%eax, %ebx
10000f828:	48 8b 05 31 8b 00 00	movq	35633(%rip), %rax ## literal pool symbol address: _kCFAllocatorDefault
10000f82f:	4c 8b 38	movq	(%rax), %r15
10000f832:	4c 8d 75 c0	leaq	-64(%rbp), %r14
10000f836:	4c 8d 6d c8	leaq	-56(%rbp), %r13
10000f83a:	89 df	movl	%ebx, %edi
10000f83c:	4c 89 f6	movq	%r14, %rsi
10000f83f:	4c 89 fa	movq	%r15, %rdx
10000f842:	31 c9	xorl	%ecx, %ecx
10000f844:	e8 b3 09 00 00	callq	0x1000101fc ## symbol stub for: _IORegistryEntryCreateCFProperties
10000f849:	85 c0	testl	%eax, %eax
10000f84b:	0f 85 42 01 00 00	jne	0x10000f993
10000f851:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000f855:	48 85 ff	testq	%rdi, %rdi
10000f858:	0f 84 dd 00 00 00	je	0x10000f93b
10000f85e:	48 8d 35 2b a3 00 00	leaq	41771(%rip), %rsi ## Objc cfstring ref: @"Statistics"
10000f865:	e8 0e 09 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000f86a:	48 85 c0	testq	%rax, %rax
10000f86d:	0f 84 bf 00 00 00	je	0x10000f932
10000f873:	49 89 c4	movq	%rax, %r12
10000f876:	48 89 c7	movq	%rax, %rdi
10000f879:	48 8d 35 30 a3 00 00	leaq	41776(%rip), %rsi ## Objc cfstring ref: @"Operations (Read)"
10000f880:	e8 f3 08 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000f885:	48 85 c0	testq	%rax, %rax
10000f888:	74 1b	je	0x10000f8a5
10000f88a:	be 04 00 00 00	movl	$4, %esi
10000f88f:	48 89 c7	movq	%rax, %rdi
10000f892:	4c 89 ea	movq	%r13, %rdx
10000f895:	e8 f0 08 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000f89a:	48 8b 45 c8	movq	-56(%rbp), %rax
10000f89e:	48 01 05 5b ca 02 00	addq	%rax, 182875(%rip)
10000f8a5:	4c 89 e7	movq	%r12, %rdi
10000f8a8:	48 8d 35 21 a3 00 00	leaq	41761(%rip), %rsi ## Objc cfstring ref: @"Bytes (Read)"
10000f8af:	e8 c4 08 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000f8b4:	48 85 c0	testq	%rax, %rax
10000f8b7:	74 1b	je	0x10000f8d4
10000f8b9:	be 04 00 00 00	movl	$4, %esi
10000f8be:	48 89 c7	movq	%rax, %rdi
10000f8c1:	4c 89 ea	movq	%r13, %rdx
10000f8c4:	e8 c1 08 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000f8c9:	48 8b 45 c8	movq	-56(%rbp), %rax
10000f8cd:	48 01 05 3c ca 02 00	addq	%rax, 182844(%rip)
10000f8d4:	4c 89 e7	movq	%r12, %rdi
10000f8d7:	48 8d 35 12 a3 00 00	leaq	41746(%rip), %rsi ## Objc cfstring ref: @"Operations (Write)"
10000f8de:	e8 95 08 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000f8e3:	48 85 c0	testq	%rax, %rax
10000f8e6:	74 1b	je	0x10000f903
10000f8e8:	be 04 00 00 00	movl	$4, %esi
10000f8ed:	48 89 c7	movq	%rax, %rdi
10000f8f0:	4c 89 ea	movq	%r13, %rdx
10000f8f3:	e8 92 08 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000f8f8:	48 8b 45 c8	movq	-56(%rbp), %rax
10000f8fc:	48 01 05 05 ca 02 00	addq	%rax, 182789(%rip)
10000f903:	4c 89 e7	movq	%r12, %rdi
10000f906:	48 8d 35 03 a3 00 00	leaq	41731(%rip), %rsi ## Objc cfstring ref: @"Bytes (Write)"
10000f90d:	e8 66 08 00 00	callq	0x100010178 ## symbol stub for: _CFDictionaryGetValue
10000f912:	48 85 c0	testq	%rax, %rax
10000f915:	74 1b	je	0x10000f932
10000f917:	be 04 00 00 00	movl	$4, %esi
10000f91c:	48 89 c7	movq	%rax, %rdi
10000f91f:	4c 89 ea	movq	%r13, %rdx
10000f922:	e8 63 08 00 00	callq	0x10001018a ## symbol stub for: _CFNumberGetValue
10000f927:	48 8b 45 c8	movq	-56(%rbp), %rax
10000f92b:	48 01 05 e6 c9 02 00	addq	%rax, 182758(%rip)
10000f932:	48 8b 7d c0	movq	-64(%rbp), %rdi
10000f936:	e8 55 08 00 00	callq	0x100010190 ## symbol stub for: _CFRelease
10000f93b:	89 df	movl	%ebx, %edi
10000f93d:	e8 a2 08 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000f942:	8b 7d d4	movl	-44(%rbp), %edi
10000f945:	e8 88 08 00 00	callq	0x1000101d2 ## symbol stub for: _IOIteratorNext
10000f94a:	89 c3	movl	%eax, %ebx
10000f94c:	85 c0	testl	%eax, %eax
10000f94e:	0f 85 e6 fe ff ff	jne	0x10000f83a
10000f954:	8b 7d d4	movl	-44(%rbp), %edi
10000f957:	e8 88 08 00 00	callq	0x1000101e4 ## symbol stub for: _IOObjectRelease
10000f95c:	48 8d 05 35 e6 00 00	leaq	58933(%rip), %rax
10000f963:	80 38 00	cmpb	$0, (%rax)
10000f966:	74 1c	je	0x10000f984
10000f968:	0f 10 05 a1 c9 02 00	movups	182689(%rip), %xmm0
10000f96f:	0f 11 05 ba c9 02 00	movups	%xmm0, 182714(%rip)
10000f976:	0f 10 05 83 c9 02 00	movups	182659(%rip), %xmm0
10000f97d:	0f 11 05 9c c9 02 00	movups	%xmm0, 182684(%rip)
10000f984:	48 83 c4 18	addq	$24, %rsp
10000f988:	5b	popq	%rbx
10000f989:	41 5c	popq	%r12
10000f98b:	41 5d	popq	%r13
10000f98d:	41 5e	popq	%r14
10000f98f:	41 5f	popq	%r15
10000f991:	5d	popq	%rbp
10000f992:	c3	retq
10000f993:	e8 6e 07 00 00	callq	0x100010106
10000f998:	e8 8a 07 00 00	callq	0x100010127
10000f99d:	55	pushq	%rbp
10000f99e:	48 89 e5	movq	%rsp, %rbp
10000f9a1:	48 8d 3d 37 0d 00 00	leaq	3383(%rip), %rdi ## literal pool for: "display_interrupt_sources_stats_block_invoke"
10000f9a8:	48 8d 35 5d 0d 00 00	leaq	3421(%rip), %rsi ## literal pool for: "interrupt_sources.c"
10000f9af:	48 8d 0d 6a 0d 00 00	leaq	3434(%rip), %rcx ## literal pool for: "driver"
10000f9b6:	6a 6d	pushq	$109
10000f9b8:	5a	popq	%rdx
10000f9b9:	e8 1c 09 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000f9be:	55	pushq	%rbp
10000f9bf:	48 89 e5	movq	%rsp, %rbp
10000f9c2:	48 8d 3d 16 0d 00 00	leaq	3350(%rip), %rdi ## literal pool for: "display_interrupt_sources_stats_block_invoke"
10000f9c9:	48 8d 35 3c 0d 00 00	leaq	3388(%rip), %rsi ## literal pool for: "interrupt_sources.c"
10000f9d0:	48 8d 0d 50 0d 00 00	leaq	3408(%rip), %rcx ## literal pool for: "channel"
10000f9d7:	6a 71	pushq	$113
10000f9d9:	5a	popq	%rdx
10000f9da:	e8 fb 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000f9df:	90	nop
10000f9e0:	90	nop
10000f9e1:	90	nop
10000f9e2:	90	nop
10000f9e3:	90	nop
10000f9e4:	55	pushq	%rbp
10000f9e5:	48 89 e5	movq	%rsp, %rbp
10000f9e8:	48 8d 3d ff 15 00 00	leaq	5631(%rip), %rdi ## literal pool for: "smc_context_init"
10000f9ef:	48 8d 35 09 16 00 00	leaq	5641(%rip), %rsi ## literal pool for: "smc.c"
10000f9f6:	48 8d 0d 08 16 00 00	leaq	5640(%rip), %rcx ## literal pool for: "context"
10000f9fd:	ba dd 04 00 00	movl	$1245, %edx
10000fa02:	e8 d3 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fa07:	66 0f 1f 84 00 00 00 00 00	nopw	(%rax,%rax)
10000fa10:	55	pushq	%rbp
10000fa11:	48 89 e5	movq	%rsp, %rbp
10000fa14:	48 8d 3d be 1b 00 00	leaq	7102(%rip), %rdi ## literal pool for: "configure_cpu_interrupt_stats"
10000fa1b:	48 8d 35 d5 1b 00 00	leaq	7125(%rip), %rsi ## literal pool for: "interrupts.c"
10000fa22:	48 8d 0d db 1b 00 00	leaq	7131(%rip), %rcx ## literal pool for: "vecsz == sizeof(vec)"
10000fa29:	ba 21 01 00 00	movl	$289, %edx
10000fa2e:	e8 a7 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fa33:	55	pushq	%rbp
10000fa34:	48 89 e5	movq	%rsp, %rbp
10000fa37:	48 8d 3d 9b 1b 00 00	leaq	7067(%rip), %rdi ## literal pool for: "configure_cpu_interrupt_stats"
10000fa3e:	48 8d 35 b2 1b 00 00	leaq	7090(%rip), %rsi ## literal pool for: "interrupts.c"
10000fa45:	48 8d 0d b8 1b 00 00	leaq	7096(%rip), %rcx ## literal pool for: "vecsz == sizeof(vec)"
10000fa4c:	ba 17 01 00 00	movl	$279, %edx
10000fa51:	e8 84 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fa56:	55	pushq	%rbp
10000fa57:	48 89 e5	movq	%rsp, %rbp
10000fa5a:	48 8d 3d d5 1c 00 00	leaq	7381(%rip), %rdi ## literal pool for: "showInterruptVectorInfo"
10000fa61:	48 8d 35 8f 1b 00 00	leaq	7055(%rip), %rsi ## literal pool for: "interrupts.c"
10000fa68:	48 8d 0d 89 1c 00 00	leaq	7305(%rip), %rcx ## literal pool for: "ret"
10000fa6f:	ba 9d 00 00 00	movl	$157, %edx
10000fa74:	e8 61 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fa79:	55	pushq	%rbp
10000fa7a:	48 89 e5	movq	%rsp, %rbp
10000fa7d:	48 8d 3d 57 1c 00 00	leaq	7255(%rip), %rdi ## literal pool for: "addInterruptControllerDevice"
10000fa84:	48 8d 35 6c 1b 00 00	leaq	7020(%rip), %rsi ## literal pool for: "interrupts.c"
10000fa8b:	48 8d 0d 66 1c 00 00	leaq	7270(%rip), %rcx ## literal pool for: "ret"
10000fa92:	6a 5e	pushq	$94
10000fa94:	5a	popq	%rdx
10000fa95:	e8 40 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fa9a:	55	pushq	%rbp
10000fa9b:	48 89 e5	movq	%rsp, %rbp
10000fa9e:	48 8d 3d a9 1c 00 00	leaq	7337(%rip), %rdi ## literal pool for: "display_cpu_interrupt_stats"
10000faa5:	48 8d 35 4b 1b 00 00	leaq	6987(%rip), %rsi ## literal pool for: "interrupts.c"
10000faac:	48 8d 0d b7 1c 00 00	leaq	7351(%rip), %rcx ## literal pool for: "interval > 0"
10000fab3:	ba 7d 01 00 00	movl	$381, %edx
10000fab8:	e8 1d 08 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fabd:	90	nop
10000fabe:	90	nop
10000fabf:	90	nop
10000fac0:	90	nop
10000fac1:	90	nop
10000fac2:	90	nop
10000fac3:	90	nop
10000fac4:	90	nop
10000fac5:	90	nop
10000fac6:	55	pushq	%rbp
10000fac7:	48 89 e5	movq	%rsp, %rbp
10000faca:	e8 17 08 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000facf:	8b 10	movl	(%rax), %edx
10000fad1:	48 8d 35 ad 21 00 00	leaq	8621(%rip), %rsi ## literal pool for: "sysctl hw.cpufrequency_max and hw.cpufrequency failed with errno = %d"
10000fad8:	6a 47	pushq	$71
10000fada:	5f	popq	%rdi
10000fadb:	31 c0	xorl	%eax, %eax
10000fadd:	e8 52 08 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fae2:	55	pushq	%rbp
10000fae3:	48 89 e5	movq	%rsp, %rbp
10000fae6:	e8 fb 07 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000faeb:	8b 10	movl	(%rax), %edx
10000faed:	48 8d 35 17 26 00 00	leaq	9751(%rip), %rsi ## literal pool for: "sysctl kern.boottime failed with errno = %d"
10000faf4:	6a 47	pushq	$71
10000faf6:	5f	popq	%rdi
10000faf7:	31 c0	xorl	%eax, %eax
10000faf9:	e8 36 08 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fafe:	55	pushq	%rbp
10000faff:	48 89 e5	movq	%rsp, %rbp
10000fb02:	48 8b 05 07 89 00 00	movq	35079(%rip), %rax ## literal pool symbol address: _optarg
10000fb09:	48 8b 10	movq	(%rax), %rdx
10000fb0c:	48 8d 35 8d 1f 00 00	leaq	8077(%rip), %rsi ## literal pool for: "poweravg must be non-negative integer, got %s"
10000fb13:	6a 40	pushq	$64
10000fb15:	5f	popq	%rdi
10000fb16:	31 c0	xorl	%eax, %eax
10000fb18:	e8 17 08 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fb1d:	55	pushq	%rbp
10000fb1e:	48 89 e5	movq	%rsp, %rbp
10000fb21:	48 8b 05 e8 88 00 00	movq	35048(%rip), %rax ## literal pool symbol address: _optarg
10000fb28:	48 8b 10	movq	(%rax), %rdx
10000fb2b:	48 8d 35 9c 1f 00 00	leaq	8092(%rip), %rsi ## literal pool for: "buffer size must be non-negative integer or -1, got %s"
10000fb32:	6a 40	pushq	$64
10000fb34:	5f	popq	%rdi
10000fb35:	31 c0	xorl	%eax, %eax
10000fb37:	e8 f8 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fb3c:	55	pushq	%rbp
10000fb3d:	48 89 e5	movq	%rsp, %rbp
10000fb40:	48 8b 05 c9 88 00 00	movq	35017(%rip), %rax ## literal pool symbol address: _optarg
10000fb47:	48 8b 10	movq	(%rax), %rdx
10000fb4a:	48 8d 35 bf 1f 00 00	leaq	8127(%rip), %rsi ## literal pool for: "sample rate must be non-negative integer, got %s"
10000fb51:	6a 40	pushq	$64
10000fb53:	5f	popq	%rdi
10000fb54:	31 c0	xorl	%eax, %eax
10000fb56:	e8 d9 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fb5b:	55	pushq	%rbp
10000fb5c:	48 89 e5	movq	%rsp, %rbp
10000fb5f:	48 8b 05 aa 88 00 00	movq	34986(%rip), %rax ## literal pool symbol address: _optarg
10000fb66:	48 8b 10	movq	(%rax), %rdx
10000fb69:	48 8d 35 d1 1f 00 00	leaq	8145(%rip), %rsi ## literal pool for: "sample limit must be non-negative integer or -1, got %s"
10000fb70:	6a 40	pushq	$64
10000fb72:	5f	popq	%rdi
10000fb73:	31 c0	xorl	%eax, %eax
10000fb75:	e8 ba 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fb7a:	55	pushq	%rbp
10000fb7b:	48 89 e5	movq	%rsp, %rbp
10000fb7e:	48 8d 35 f6 1f 00 00	leaq	8182(%rip), %rsi ## literal pool for: "can't open output file for writing"
10000fb85:	6a 40	pushq	$64
10000fb87:	5f	popq	%rdi
10000fb88:	31 c0	xorl	%eax, %eax
10000fb8a:	e8 a5 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fb8f:	55	pushq	%rbp
10000fb90:	48 89 e5	movq	%rsp, %rbp
10000fb93:	48 8d 3d e1 24 00 00	leaq	9441(%rip), %rdi ## literal pool for: "parse_samplers_opt"
10000fb9a:	48 8d 35 ed 24 00 00	leaq	9453(%rip), %rsi ## literal pool for: "powermetrics.c"
10000fba1:	48 8d 0d f5 24 00 00	leaq	9461(%rip), %rcx ## literal pool for: "str"
10000fba8:	ba a9 02 00 00	movl	$681, %edx
10000fbad:	e8 28 07 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fbb2:	55	pushq	%rbp
10000fbb3:	48 89 e5	movq	%rsp, %rbp
10000fbb6:	48 8b 05 53 88 00 00	movq	34899(%rip), %rax ## literal pool symbol address: _optarg
10000fbbd:	48 8b 10	movq	(%rax), %rdx
10000fbc0:	48 8d 35 0c 20 00 00	leaq	8204(%rip), %rsi ## literal pool for: "wakeup cost must be positive integer, got %s"
10000fbc7:	6a 40	pushq	$64
10000fbc9:	5f	popq	%rdi
10000fbca:	31 c0	xorl	%eax, %eax
10000fbcc:	e8 63 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fbd1:	55	pushq	%rbp
10000fbd2:	48 89 e5	movq	%rsp, %rbp
10000fbd5:	48 8d 3d de 24 00 00	leaq	9438(%rip), %rdi ## literal pool for: "parse_unhide_opt"
10000fbdc:	48 8d 35 ab 24 00 00	leaq	9387(%rip), %rsi ## literal pool for: "powermetrics.c"
10000fbe3:	48 8d 0d b3 24 00 00	leaq	9395(%rip), %rcx ## literal pool for: "str"
10000fbea:	ba 81 02 00 00	movl	$641, %edx
10000fbef:	e8 e6 06 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fbf4:	55	pushq	%rbp
10000fbf5:	48 89 e5	movq	%rsp, %rbp
10000fbf8:	e8 e9 06 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000fbfd:	8b 10	movl	(%rax), %edx
10000fbff:	48 8d 35 9d 1d 00 00	leaq	7581(%rip), %rsi ## literal pool for: "posix_spawnattr_setbinpref failed with errno = %d"
10000fc06:	6a 47	pushq	$71
10000fc08:	5f	popq	%rdi
10000fc09:	31 c0	xorl	%eax, %eax
10000fc0b:	e8 24 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fc10:	55	pushq	%rbp
10000fc11:	48 89 e5	movq	%rsp, %rbp
10000fc14:	48 8d 35 ba 1d 00 00	leaq	7610(%rip), %rsi ## literal pool for: "failed to set preferred cpu_type"
10000fc1b:	6a 47	pushq	$71
10000fc1d:	5f	popq	%rdi
10000fc1e:	31 c0	xorl	%eax, %eax
10000fc20:	e8 0f 07 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fc25:	55	pushq	%rbp
10000fc26:	48 89 e5	movq	%rsp, %rbp
10000fc29:	e8 b8 06 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000fc2e:	8b 10	movl	(%rax), %edx
10000fc30:	48 8d 35 3c 1d 00 00	leaq	7484(%rip), %rsi ## literal pool for: "posix_spawnattr_setflags failed with errno = %d"
10000fc37:	6a 47	pushq	$71
10000fc39:	5f	popq	%rdi
10000fc3a:	31 c0	xorl	%eax, %eax
10000fc3c:	e8 f3 06 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fc41:	55	pushq	%rbp
10000fc42:	48 89 e5	movq	%rsp, %rbp
10000fc45:	e8 9c 06 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000fc4a:	8b 10	movl	(%rax), %edx
10000fc4c:	48 8d 35 f4 1c 00 00	leaq	7412(%rip), %rsi ## literal pool for: "posix_spwanattr_init failed with errno = %d"
10000fc53:	6a 47	pushq	$71
10000fc55:	5f	popq	%rdi
10000fc56:	31 c0	xorl	%eax, %eax
10000fc58:	e8 d7 06 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fc5d:	55	pushq	%rbp
10000fc5e:	48 89 e5	movq	%rsp, %rbp
10000fc61:	53	pushq	%rbx
10000fc62:	50	pushq	%rax
10000fc63:	48 89 fb	movq	%rdi, %rbx
10000fc66:	e8 7b 06 00 00	callq	0x1000102e6 ## symbol stub for: ___error
10000fc6b:	8b 08	movl	(%rax), %ecx
10000fc6d:	48 8d 35 76 24 00 00	leaq	9334(%rip), %rsi ## literal pool for: "sysctl %s failed with errno = %d"
10000fc74:	6a 47	pushq	$71
10000fc76:	5f	popq	%rdi
10000fc77:	48 89 da	movq	%rbx, %rdx
10000fc7a:	31 c0	xorl	%eax, %eax
10000fc7c:	e8 b3 06 00 00	callq	0x100010334 ## symbol stub for: _errx
10000fc81:	66 2e 0f 1f 84 00 00 00 00 00	nopw	%cs:(%rax,%rax)
10000fc8b:	0f 1f 44 00 00	nopl	(%rax,%rax)
10000fc90:	55	pushq	%rbp
10000fc91:	48 89 e5	movq	%rsp, %rbp
10000fc94:	48 8d 3d dd 26 00 00	leaq	9949(%rip), %rdi ## literal pool for: "configure_task_power_stats"
10000fc9b:	48 8d 35 f1 26 00 00	leaq	9969(%rip), %rsi ## literal pool for: "tasks.c"
10000fca2:	48 8d 0d aa 18 00 00	leaq	6314(%rip), %rcx ## literal pool for: "false"
10000fca9:	ba a7 06 00 00	movl	$1703, %edx
10000fcae:	e8 27 06 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fcb3:	55	pushq	%rbp
10000fcb4:	48 89 e5	movq	%rsp, %rbp
10000fcb7:	48 8d 3d 5f 2d 00 00	leaq	11615(%rip), %rdi ## literal pool for: "print_coalition_power_data"
10000fcbe:	48 8d 35 ce 26 00 00	leaq	9934(%rip), %rsi ## literal pool for: "tasks.c"
10000fcc5:	48 8d 0d 6c 2d 00 00	leaq	11628(%rip), %rcx ## literal pool for: "delta"
10000fccc:	ba 29 05 00 00	movl	$1321, %edx
10000fcd1:	e8 04 06 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fcd6:	55	pushq	%rbp
10000fcd7:	48 89 e5	movq	%rsp, %rbp
10000fcda:	48 8d 3d 2d 3a 00 00	leaq	14893(%rip), %rdi ## literal pool for: "sample_task_power_stats"
10000fce1:	48 8d 35 ab 26 00 00	leaq	9899(%rip), %rsi ## literal pool for: "tasks.c"
10000fce8:	48 8d 0d 4e 3a 00 00	leaq	14926(%rip), %rcx ## literal pool for: "num_tasks > 0"
10000fcef:	ba 89 05 00 00	movl	$1417, %edx
10000fcf4:	e8 e1 05 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fcf9:	55	pushq	%rbp
10000fcfa:	48 89 e5	movq	%rsp, %rbp
10000fcfd:	48 8d 3d 0a 3a 00 00	leaq	14858(%rip), %rdi ## literal pool for: "sample_task_power_stats"
10000fd04:	48 8d 35 88 26 00 00	leaq	9864(%rip), %rsi ## literal pool for: "tasks.c"
10000fd0b:	48 8d 0d 14 3a 00 00	leaq	14868(%rip), %rcx ## literal pool for: "current_tpi.count == 0"
10000fd12:	ba 83 05 00 00	movl	$1411, %edx
10000fd17:	e8 be 05 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fd1c:	55	pushq	%rbp
10000fd1d:	48 89 e5	movq	%rsp, %rbp
10000fd20:	48 8d 3d b5 2d 00 00	leaq	11701(%rip), %rdi ## literal pool for: "print_task_power_data"
10000fd27:	48 8d 35 65 26 00 00	leaq	9829(%rip), %rsi ## literal pool for: "tasks.c"
10000fd2e:	48 8d 0d bd 2d 00 00	leaq	11709(%rip), %rcx ## literal pool for: "pmt_info.summary || !task->dead"
10000fd35:	ba 3c 03 00 00	movl	$828, %edx
10000fd3a:	e8 9b 05 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fd3f:	55	pushq	%rbp
10000fd40:	48 89 e5	movq	%rsp, %rbp
10000fd43:	48 8d 3d 2b 3b 00 00	leaq	15147(%rip), %rdi ## literal pool for: "coalition_add_task"
10000fd4a:	48 8d 35 42 26 00 00	leaq	9794(%rip), %rsi ## literal pool for: "tasks.c"
10000fd51:	48 8d 0d 30 3b 00 00	leaq	15152(%rip), %rcx ## literal pool for: "coalition->id == task->coalition_id"
10000fd58:	ba 5a 05 00 00	movl	$1370, %edx
10000fd5d:	e8 78 05 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fd62:	55	pushq	%rbp
10000fd63:	48 89 e5	movq	%rsp, %rbp
10000fd66:	48 8d 3d 43 3c 00 00	leaq	15427(%rip), %rdi ## literal pool for: "configure_cpu_power_stats"
10000fd6d:	48 8d 35 56 3c 00 00	leaq	15446(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fd74:	48 8d 0d 5b 3c 00 00	leaq	15451(%rip), %rcx ## literal pool for: "lcpu_cnt >= core_cnt"
10000fd7b:	ba 68 05 00 00	movl	$1384, %edx
10000fd80:	e8 55 05 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fd85:	55	pushq	%rbp
10000fd86:	48 89 e5	movq	%rsp, %rbp
10000fd89:	48 8d 3d f9 3b 00 00	leaq	15353(%rip), %rdi ## literal pool for: "xcpm XCPMIO_GET_QOS_NAMES ioctl failed"
10000fd90:	e8 71 06 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fd95:	e8 76 05 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fd9a:	55	pushq	%rbp
10000fd9b:	48 89 e5	movq	%rsp, %rbp
10000fd9e:	48 8d 3d 92 3b 00 00	leaq	15250(%rip), %rdi ## literal pool for: "couldn't get pstate table"
10000fda5:	e8 5c 06 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fdaa:	e8 61 05 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fdaf:	55	pushq	%rbp
10000fdb0:	48 89 e5	movq	%rsp, %rbp
10000fdb3:	48 8d 3d 97 3b 00 00	leaq	15255(%rip), %rdi ## literal pool for: "couldn't get pstate limits"
10000fdba:	e8 47 06 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fdbf:	e8 4c 05 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fdc4:	55	pushq	%rbp
10000fdc5:	48 89 e5	movq	%rsp, %rbp
10000fdc8:	48 8d 3d 9d 3b 00 00	leaq	15261(%rip), %rdi ## literal pool for: "failed to enable pstate ctrs"
10000fdcf:	e8 32 06 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fdd4:	e8 37 05 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fdd9:	55	pushq	%rbp
10000fdda:	48 89 e5	movq	%rsp, %rbp
10000fddd:	48 8d 3d 42 3b 00 00	leaq	15170(%rip), %rdi ## literal pool for: "getnumlogicalcpu"
10000fde4:	e8 1d 06 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fde9:	e8 22 05 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fdee:	55	pushq	%rbp
10000fdef:	48 89 e5	movq	%rsp, %rbp
10000fdf2:	48 8d 3d 1b 3b 00 00	leaq	15131(%rip), %rdi ## literal pool for: "getnumphysicalcpu"
10000fdf9:	e8 08 06 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fdfe:	e8 0d 05 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fe03:	55	pushq	%rbp
10000fe04:	48 89 e5	movq	%rsp, %rbp
10000fe07:	48 8d 3d f7 3a 00 00	leaq	15095(%rip), %rdi ## literal pool for: "getnumpackages"
10000fe0e:	e8 f3 05 00 00	callq	0x100010406 ## symbol stub for: _perror
10000fe13:	e8 f8 04 00 00	callq	0x100010310 ## symbol stub for: _abort
10000fe18:	55	pushq	%rbp
10000fe19:	48 89 e5	movq	%rsp, %rbp
10000fe1c:	48 8d 3d ca 4a 00 00	leaq	19146(%rip), %rdi ## literal pool for: "sample_cpu_power_stats"
10000fe23:	48 8d 35 a0 3b 00 00	leaq	15264(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fe2a:	48 8d 0d d3 4a 00 00	leaq	19155(%rip), %rcx ## literal pool for: "pmt_info.firstrun || (cdvfsstats.ncpus == ldvfsstats.ncpus)"
10000fe31:	ba 7c 04 00 00	movl	$1148, %edx
10000fe36:	e8 9f 04 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fe3b:	55	pushq	%rbp
10000fe3c:	48 89 e5	movq	%rsp, %rbp
10000fe3f:	48 8d 3d a7 4a 00 00	leaq	19111(%rip), %rdi ## literal pool for: "sample_cpu_power_stats"
10000fe46:	48 8d 35 7d 3b 00 00	leaq	15229(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fe4d:	48 8d 0d ec 4a 00 00	leaq	19180(%rip), %rcx ## literal pool for: "pmt_info.firstrun || (cdvfsstats.pkg_power_unit == ldvfsstats.pkg_power_unit)"
10000fe54:	ba 7d 04 00 00	movl	$1149, %edx
10000fe59:	e8 7c 04 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fe5e:	55	pushq	%rbp
10000fe5f:	48 89 e5	movq	%rsp, %rbp
10000fe62:	48 8d 3d 6c 4b 00 00	leaq	19308(%rip), %rdi ## literal pool for: "subtract_qos_times"
10000fe69:	48 8d 35 5a 3b 00 00	leaq	15194(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fe70:	48 8d 0d 71 4b 00 00	leaq	19313(%rip), %rcx ## literal pool for: "(a->xcpm_qos_ncpus == b->xcpm_qos_ncpus) || (b->xcpm_qos_ncpus == 0)"
10000fe77:	ba 56 04 00 00	movl	$1110, %edx
10000fe7c:	e8 59 04 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fe81:	55	pushq	%rbp
10000fe82:	48 89 e5	movq	%rsp, %rbp
10000fe85:	48 8d 3d 49 4b 00 00	leaq	19273(%rip), %rdi ## literal pool for: "subtract_qos_times"
10000fe8c:	48 8d 35 37 3b 00 00	leaq	15159(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fe93:	48 8d 0d 93 4b 00 00	leaq	19347(%rip), %rcx ## literal pool for: "a->xcpm_qos_time[i][j] >= b->xcpm_qos_time[i][j]"
10000fe9a:	ba 59 04 00 00	movl	$1113, %edx
10000fe9f:	e8 36 04 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fea4:	55	pushq	%rbp
10000fea5:	48 89 e5	movq	%rsp, %rbp
10000fea8:	48 8d 3d 45 44 00 00	leaq	17477(%rip), %rdi ## literal pool for: "print_package_metrics_block_invoke"
10000feaf:	48 8d 35 14 3b 00 00	leaq	15124(%rip), %rsi ## literal pool for: "cpu_power.c"
10000feb6:	48 8d 0d 6a 08 00 00	leaq	2154(%rip), %rcx ## literal pool for: "channel"
10000febd:	ba c4 03 00 00	movl	$964, %edx
10000fec2:	e8 13 04 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fec7:	55	pushq	%rbp
10000fec8:	48 89 e5	movq	%rsp, %rbp
10000fecb:	48 8d 3d bd 44 00 00	leaq	17597(%rip), %rdi ## literal pool for: "get_c7p_resid_block_invoke"
10000fed2:	48 8d 35 f1 3a 00 00	leaq	15089(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fed9:	48 8d 0d 47 08 00 00	leaq	2119(%rip), %rcx ## literal pool for: "channel"
10000fee0:	ba fe 02 00 00	movl	$766, %edx
10000fee5:	e8 f0 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000feea:	55	pushq	%rbp
10000feeb:	48 89 e5	movq	%rsp, %rbp
10000feee:	48 8d 3d 02 45 00 00	leaq	17666(%rip), %rdi ## literal pool for: "get_msr_value_block_invoke"
10000fef5:	48 8d 35 ce 3a 00 00	leaq	15054(%rip), %rsi ## literal pool for: "cpu_power.c"
10000fefc:	48 8d 0d 0f 45 00 00	leaq	17679(%rip), %rcx ## literal pool for: "name"
10000ff03:	ba 11 01 00 00	movl	$273, %edx
10000ff08:	e8 cd 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ff0d:	55	pushq	%rbp
10000ff0e:	48 89 e5	movq	%rsp, %rbp
10000ff11:	48 8d 3d 99 4c 00 00	leaq	19609(%rip), %rdi ## literal pool for: "configure_battery_stats"
10000ff18:	48 8d 35 aa 4c 00 00	leaq	19626(%rip), %rsi ## literal pool for: "battery.c"
10000ff1f:	48 8d 0d ad 4c 00 00	leaq	19629(%rip), %rcx ## literal pool for: "rv == kIOReturnSuccess"
10000ff26:	ba 61 01 00 00	movl	$353, %edx
10000ff2b:	e8 aa 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ff30:	55	pushq	%rbp
10000ff31:	48 89 e5	movq	%rsp, %rbp
10000ff34:	48 8d 3d 55 54 00 00	leaq	21589(%rip), %rdi ## literal pool for: "ioreport_delta_sample"
10000ff3b:	48 8d 35 64 54 00 00	leaq	21604(%rip), %rsi ## literal pool for: "util.c"
10000ff42:	48 8d 0d 64 54 00 00	leaq	21604(%rip), %rcx ## literal pool for: "*cur_samples"
10000ff49:	ba e5 00 00 00	movl	$229, %edx
10000ff4e:	e8 87 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ff53:	55	pushq	%rbp
10000ff54:	48 89 e5	movq	%rsp, %rbp
10000ff57:	48 8d 3d ad 54 00 00	leaq	21677(%rip), %rdi ## literal pool for: "pm_array_add"
10000ff5e:	48 8d 35 b3 54 00 00	leaq	21683(%rip), %rsi ## literal pool for: "task_array.c"
10000ff65:	48 8d 0d b9 54 00 00	leaq	21689(%rip), %rcx ## literal pool for: "arr->count <= arr->max"
10000ff6c:	6a 1d	pushq	$29
10000ff6e:	5a	popq	%rdx
10000ff6f:	e8 66 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ff74:	55	pushq	%rbp
10000ff75:	48 89 e5	movq	%rsp, %rbp
10000ff78:	48 8d 3d 8c 54 00 00	leaq	21644(%rip), %rdi ## literal pool for: "pm_array_add"
10000ff7f:	48 8d 35 92 54 00 00	leaq	21650(%rip), %rsi ## literal pool for: "task_array.c"
10000ff86:	48 8d 0d af 54 00 00	leaq	21679(%rip), %rcx ## literal pool for: "arr->data"
10000ff8d:	6a 26	pushq	$38
10000ff8f:	5a	popq	%rdx
10000ff90:	e8 45 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ff95:	55	pushq	%rbp
10000ff96:	48 89 e5	movq	%rsp, %rbp
10000ff99:	48 8d 3d a6 54 00 00	leaq	21670(%rip), %rdi ## literal pool for: "pm_array_get"
10000ffa0:	48 8d 35 71 54 00 00	leaq	21617(%rip), %rsi ## literal pool for: "task_array.c"
10000ffa7:	48 8d 0d a5 54 00 00	leaq	21669(%rip), %rcx ## literal pool for: "idx < arr->count"
10000ffae:	6a 34	pushq	$52
10000ffb0:	5a	popq	%rdx
10000ffb1:	e8 24 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ffb6:	55	pushq	%rbp
10000ffb7:	48 89 e5	movq	%rsp, %rbp
10000ffba:	48 8d 3d a3 54 00 00	leaq	21667(%rip), %rdi ## literal pool for: "pm_array_copy"
10000ffc1:	48 8d 35 50 54 00 00	leaq	21584(%rip), %rsi ## literal pool for: "task_array.c"
10000ffc8:	48 8d 0d a3 54 00 00	leaq	21667(%rip), %rcx ## literal pool for: "dest->data"
10000ffcf:	6a 40	pushq	$64
10000ffd1:	5a	popq	%rdx
10000ffd2:	e8 03 03 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000ffd7:	55	pushq	%rbp
10000ffd8:	48 89 e5	movq	%rsp, %rbp
10000ffdb:	48 8d 3d 9b 54 00 00	leaq	21659(%rip), %rdi ## literal pool for: "pm_array_append"
10000ffe2:	48 8d 35 2f 54 00 00	leaq	21551(%rip), %rsi ## literal pool for: "task_array.c"
10000ffe9:	48 8d 0d 4c 54 00 00	leaq	21580(%rip), %rcx ## literal pool for: "arr->data"
10000fff0:	6a 78	pushq	$120
10000fff2:	5a	popq	%rdx
10000fff3:	e8 e2 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10000fff8:	55	pushq	%rbp
10000fff9:	48 89 e5	movq	%rsp, %rbp
10000fffc:	48 8d 3d 43 54 00 00	leaq	21571(%rip), %rdi ## literal pool for: "pm_array_get"
100010003:	48 8d 35 0e 54 00 00	leaq	21518(%rip), %rsi ## literal pool for: "task_array.c"
10001000a:	48 8d 0d 42 54 00 00	leaq	21570(%rip), %rcx ## literal pool for: "idx < arr->count"
100010011:	6a 34	pushq	$52
100010013:	5a	popq	%rdx
100010014:	e8 c1 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
100010019:	55	pushq	%rbp
10001001a:	48 89 e5	movq	%rsp, %rbp
10001001d:	48 8d 3d 22 54 00 00	leaq	21538(%rip), %rdi ## literal pool for: "pm_array_get"
100010024:	48 8d 35 ed 53 00 00	leaq	21485(%rip), %rsi ## literal pool for: "task_array.c"
10001002b:	48 8d 0d 21 54 00 00	leaq	21537(%rip), %rcx ## literal pool for: "idx < arr->count"
100010032:	6a 34	pushq	$52
100010034:	5a	popq	%rdx
100010035:	e8 a0 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10001003a:	55	pushq	%rbp
10001003b:	48 89 e5	movq	%rsp, %rbp
10001003e:	48 8d 3d 01 54 00 00	leaq	21505(%rip), %rdi ## literal pool for: "pm_array_get"
100010045:	48 8d 35 cc 53 00 00	leaq	21452(%rip), %rsi ## literal pool for: "task_array.c"
10001004c:	48 8d 0d 00 54 00 00	leaq	21504(%rip), %rcx ## literal pool for: "idx < arr->count"
100010053:	6a 34	pushq	$52
100010055:	5a	popq	%rdx
100010056:	e8 7f 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10001005b:	55	pushq	%rbp
10001005c:	48 89 e5	movq	%rsp, %rbp
10001005f:	48 8d 3d 59 56 00 00	leaq	22105(%rip), %rdi ## literal pool for: "sample_network_stats"
100010066:	48 8d 35 67 56 00 00	leaq	22119(%rip), %rsi ## literal pool for: "network.c"
10001006d:	48 8d 0d 6a 56 00 00	leaq	22122(%rip), %rcx ## literal pool for: "buf"
100010074:	6a 34	pushq	$52
100010076:	5a	popq	%rdx
100010077:	e8 5e 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10001007c:	55	pushq	%rbp
10001007d:	48 89 e5	movq	%rsp, %rbp
100010080:	48 8d 3d 42 5c 00 00	leaq	23618(%rip), %rdi ## literal pool for: "display_device_stats_block_invoke"
100010087:	48 8d 35 5d 5c 00 00	leaq	23645(%rip), %rsi ## literal pool for: "devices.c"
10001008e:	48 8d 0d 8b 06 00 00	leaq	1675(%rip), %rcx ## literal pool for: "driver"
100010095:	ba d2 00 00 00	movl	$210, %edx
10001009a:	e8 3b 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
10001009f:	55	pushq	%rbp
1000100a0:	48 89 e5	movq	%rsp, %rbp
1000100a3:	48 8d 3d a4 61 00 00	leaq	24996(%rip), %rdi ## literal pool for: "configure_gpu_agpm_stats"
1000100aa:	48 8d 35 b6 61 00 00	leaq	25014(%rip), %rsi ## literal pool for: "gpu_agpm.c"
1000100b1:	48 8d 0d ba 61 00 00	leaq	25018(%rip), %rcx ## literal pool for: "gpu_agpm_count < MAX_GPU_AGPM_COUNT"
1000100b8:	6a 6c	pushq	$108
1000100ba:	5a	popq	%rdx
1000100bb:	e8 1a 02 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
1000100c0:	55	pushq	%rbp
1000100c1:	48 89 e5	movq	%rsp, %rbp
1000100c4:	48 8d 3d 6f 62 00 00	leaq	25199(%rip), %rdi ## literal pool for: "display_gpu_agpm_stats_block_invoke"
1000100cb:	48 8d 35 95 61 00 00	leaq	24981(%rip), %rsi ## literal pool for: "gpu_agpm.c"
1000100d2:	48 8d 0d 4e 06 00 00	leaq	1614(%rip), %rcx ## literal pool for: "channel"
1000100d9:	ba a5 00 00 00	movl	$165, %edx
1000100de:	e8 f7 01 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
1000100e3:	55	pushq	%rbp
1000100e4:	48 89 e5	movq	%rsp, %rbp
1000100e7:	48 8d 3d 72 63 00 00	leaq	25458(%rip), %rdi ## literal pool for: "configure_disk_stats"
1000100ee:	48 8d 35 80 63 00 00	leaq	25472(%rip), %rsi ## literal pool for: "disk.c"
1000100f5:	48 8d 0d d7 4a 00 00	leaq	19159(%rip), %rcx ## literal pool for: "rv == kIOReturnSuccess"
1000100fc:	ba a6 00 00 00	movl	$166, %edx
100010101:	e8 d4 01 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
100010106:	55	pushq	%rbp
100010107:	48 89 e5	movq	%rsp, %rbp
10001010a:	48 8d 3d 8c 65 00 00	leaq	25996(%rip), %rdi ## literal pool for: "sample_disk_stats"
100010111:	48 8d 35 5d 63 00 00	leaq	25437(%rip), %rsi ## literal pool for: "disk.c"
100010118:	48 8d 0d b4 4a 00 00	leaq	19124(%rip), %rcx ## literal pool for: "rv == kIOReturnSuccess"
10001011f:	6a 28	pushq	$40
100010121:	5a	popq	%rdx
100010122:	e8 b3 01 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
100010127:	55	pushq	%rbp
100010128:	48 89 e5	movq	%rsp, %rbp
10001012b:	48 8d 3d 6b 65 00 00	leaq	25963(%rip), %rdi ## literal pool for: "sample_disk_stats"
100010132:	48 8d 35 3c 63 00 00	leaq	25404(%rip), %rsi ## literal pool for: "disk.c"
100010139:	48 8d 0d 93 4a 00 00	leaq	19091(%rip), %rcx ## literal pool for: "rv == kIOReturnSuccess"
100010140:	6a 23	pushq	$35
100010142:	5a	popq	%rdx
100010143:	e8 92 01 00 00	callq	0x1000102da ## symbol stub for: ___assert_rtn
/usr/bin/powermetrics (architecture arm64e):
(__TEXT,__text) section
10000418c:	7f 23 03 d5	pacibsp
100004190:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
100004194:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
100004198:	fd 43 00 91	add	x29, sp, #16
10000419c:	0f 2d 00 94	bl	0x10000f5d8
1000041a0:	a0 01 00 34	cbz	w0, 0x1000041d4
1000041a4:	f3 03 00 aa	mov	x19, x0
1000041a8:	54 fd 0b 10	adr	x20, #98216
1000041ac:	1f 20 03 d5	nop
1000041b0:	c1 96 0a 10	adr	x1, #86744 ; Objc cfstring ref: @"voltage-states9"
1000041b4:	1f 20 03 d5	nop
1000041b8:	e0 03 14 aa	mov	x0, x20
1000041bc:	e2 03 13 aa	mov	x2, x19
1000041c0:	03 00 80 52	mov	w3, #0
1000041c4:	33 2d 00 94	bl	0x10000f690
1000041c8:	80 32 00 b9	str	w0, [x20, #48]
1000041cc:	e0 03 13 aa	mov	x0, x19
1000041d0:	00 36 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
1000041d4:	1f 20 03 d5	nop
1000041d8:	48 fd 0b 18	ldr	w8, 0x10001c180
1000041dc:	28 07 00 34	cbz	w8, 0x1000042c0
1000041e0:	13 f1 7d d3	lsl	x19, x8, #3
1000041e4:	e0 03 13 aa	mov	x0, x19
1000041e8:	0a 37 00 94	bl	0x100011e10 ; symbol stub for: _malloc
1000041ec:	b4 fb 0b 10	adr	x20, #98164
1000041f0:	1f 20 03 d5	nop
1000041f4:	80 02 00 f9	str	x0, [x20]
1000041f8:	e0 03 13 aa	mov	x0, x19
1000041fc:	05 37 00 94	bl	0x100011e10 ; symbol stub for: _malloc
100004200:	80 0a 00 f9	str	x0, [x20, #16]
100004204:	33 90 0a 10	adr	x19, #86532 ; Objc cfstring ref: @"GPU Stats"
100004208:	1f 20 03 d5	nop
10000420c:	e1 90 0a 10	adr	x1, #86556 ; Objc cfstring ref: @"GPU Performance States"
100004210:	1f 20 03 d5	nop
100004214:	e2 fb 0b 10	adr	x2, #98172
100004218:	1f 20 03 d5	nop
10000421c:	e3 fb 0b 10	adr	x3, #98172
100004220:	1f 20 03 d5	nop
100004224:	e0 03 13 aa	mov	x0, x19
100004228:	69 2c 00 94	bl	0x10000f3cc
10000422c:	e1 90 0a 10	adr	x1, #86556 ; Objc cfstring ref: @"GPU Boost Controller Performance States"
100004230:	1f 20 03 d5	nop
100004234:	62 fb 0b 10	adr	x2, #98156
100004238:	1f 20 03 d5	nop
10000423c:	63 fb 0b 10	adr	x3, #98156
100004240:	1f 20 03 d5	nop
100004244:	e0 03 13 aa	mov	x0, x19
100004248:	61 2c 00 94	bl	0x10000f3cc
10000424c:	d4 00 00 90	adrp	x20, 24 ; 0x10001c000
100004250:	80 b2 01 b9	str	w0, [x20, #432]
100004254:	a0 90 0a 10	adr	x0, #86548 ; Objc cfstring ref: @"Energy Model"
100004258:	1f 20 03 d5	nop
10000425c:	e2 fa 0b 10	adr	x2, #98140
100004260:	1f 20 03 d5	nop
100004264:	e3 fa 0b 10	adr	x3, #98140
100004268:	1f 20 03 d5	nop
10000426c:	01 00 80 d2	mov	x1, #0
100004270:	57 2c 00 94	bl	0x10000f3cc
100004274:	d3 00 00 90	adrp	x19, 24 ; 0x10001c000
100004278:	60 ca 01 b9	str	w0, [x19, #456]
10000427c:	88 b2 41 b9	ldr	w8, [x20, #432]
100004280:	e8 00 00 34	cbz	w8, 0x10000429c
100004284:	1f 20 03 d5	nop
100004288:	00 f9 0b 58	ldr	x0, #98080
10000428c:	21 14 0a 10	adr	x1, #82564
100004290:	1f 20 03 d5	nop
100004294:	1f 36 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
100004298:	60 ca 41 b9	ldr	w0, [x19, #456]
10000429c:	c0 00 00 34	cbz	w0, 0x1000042b4
1000042a0:	1f 20 03 d5	nop
1000042a4:	e0 f8 0b 58	ldr	x0, #98076
1000042a8:	41 15 0a 10	adr	x1, #82600
1000042ac:	1f 20 03 d5	nop
1000042b0:	18 36 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
1000042b4:	28 00 80 52	mov	w8, #1
1000042b8:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
1000042bc:	28 a1 07 39	strb	w8, [x9, #488]
1000042c0:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
1000042c4:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
1000042c8:	ff 0f 5f d6	retab
1000042cc:	7f 23 03 d5	pacibsp
1000042d0:	ff 43 02 d1	sub	sp, sp, #144
1000042d4:	e9 23 02 6d	stp	d9, d8, [sp, #32]
1000042d8:	fc 6f 03 a9	stp	x28, x27, [sp, #48]
1000042dc:	fa 67 04 a9	stp	x26, x25, [sp, #64]
1000042e0:	f8 5f 05 a9	stp	x24, x23, [sp, #80]
1000042e4:	f6 57 06 a9	stp	x22, x21, [sp, #96]
1000042e8:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
1000042ec:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
1000042f0:	fd 03 02 91	add	x29, sp, #128
1000042f4:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
1000042f8:	08 a1 47 39	ldrb	w8, [x8, #488]
1000042fc:	1f 05 00 71	cmp	w8, #1
100004300:	81 29 00 54	b.ne	0x100004830
100004304:	77 f2 0b 10	adr	x23, #97868
100004308:	1f 20 03 d5	nop
10000430c:	e8 0a 40 f9	ldr	x8, [x23, #16]
100004310:	00 21 00 91	add	x0, x8, #8
100004314:	e8 02 40 f9	ldr	x8, [x23]
100004318:	01 21 00 91	add	x1, x8, #8
10000431c:	e8 32 40 b9	ldr	w8, [x23, #48]
100004320:	02 05 00 51	sub	w2, w8, #1
100004324:	1d 2d 00 94	bl	0x10000f798
100004328:	e0 06 00 fd	str	d0, [x23, #8]
10000432c:	36 ed 0b 10	adr	x22, #97700
100004330:	1f 20 03 d5	nop
100004334:	c8 2a 40 b9	ldr	w8, [x22, #40]
100004338:	1f 05 00 71	cmp	w8, #1
10000433c:	e0 03 00 54	b.eq	0x1000043b8
100004340:	a8 07 00 35	cbnz	w8, 0x100004434
100004344:	33 ea 0b 10	adr	x19, #97604
100004348:	1f 20 03 d5	nop
10000434c:	61 22 40 f9	ldr	x1, [x19, #64]
100004350:	c0 9a 07 70	adr	x0, #62299 ; literal pool for: "\n**** GPU usage ****\n\n"
100004354:	1f 20 03 d5	nop
100004358:	6a 36 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000435c:	60 22 40 f9	ldr	x0, [x19, #64]
100004360:	d4 ef 0b 10	adr	x20, #97784
100004364:	1f 20 03 d5	nop
100004368:	80 02 40 fd	ldr	d0, [x20]
10000436c:	e0 03 00 fd	str	d0, [sp]
100004370:	81 9a 07 50	adr	x1, #62290 ; literal pool for: "GPU active frequency: %0.0f MHz\n"
100004374:	1f 20 03 d5	nop
100004378:	5a 36 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000437c:	60 22 40 f9	ldr	x0, [x19, #64]
100004380:	89 a2 40 a9	ldp	x9, x8, [x20, #8]
100004384:	29 01 40 f9	ldr	x9, [x9]
100004388:	09 01 09 cb	sub	x9, x8, x9
10000438c:	20 01 63 9e	ucvtf	d0, x9
100004390:	01 01 63 9e	ucvtf	d1, x8
100004394:	00 18 61 1e	fdiv	d0, d0, d1
100004398:	28 0b e8 d2	mov	x8, #4636737291354636288
10000439c:	01 01 67 9e	fmov	d1, x8
1000043a0:	00 08 61 1e	fmul	d0, d0, d1
1000043a4:	e0 03 00 fd	str	d0, [sp]
1000043a8:	c1 99 07 70	adr	x1, #62267 ; literal pool for: "GPU active residency: %6.2f%% ("
1000043ac:	1f 20 03 d5	nop
1000043b0:	4c 36 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000043b4:	20 00 00 14	b	0x100004434
1000043b8:	93 e6 0b 10	adr	x19, #97488
1000043bc:	1f 20 03 d5	nop
1000043c0:	61 22 40 f9	ldr	x1, [x19, #64]
1000043c4:	e0 99 07 70	adr	x0, #62271 ; literal pool for: "<key>gpu</key>\n<dict>\n"
1000043c8:	1f 20 03 d5	nop
1000043cc:	4d 36 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000043d0:	48 ec 0b 10	adr	x8, #97672
1000043d4:	1f 20 03 d5	nop
1000043d8:	60 22 40 f9	ldr	x0, [x19, #64]
1000043dc:	00 01 40 fd	ldr	d0, [x8]
1000043e0:	09 05 40 f9	ldr	x9, [x8, #8]
1000043e4:	21 01 40 fd	ldr	d1, [x9]
1000043e8:	21 d8 61 7e	ucvtf	d1, d1
1000043ec:	62 06 40 fd	ldr	d2, [x19, #8]
1000043f0:	42 08 61 1e	fmul	d2, d2, d1
1000043f4:	49 00 79 9e	fcvtzu	x9, d2
1000043f8:	02 09 40 fd	ldr	d2, [x8, #16]
1000043fc:	42 d8 61 7e	ucvtf	d2, d2
100004400:	21 18 62 1e	fdiv	d1, d1, d2
100004404:	e1 0b 00 fd	str	d1, [sp, #16]
100004408:	e0 03 00 fd	str	d0, [sp]
10000440c:	e9 07 00 f9	str	x9, [sp, #8]
100004410:	41 98 07 50	adr	x1, #62218 ; literal pool for: "<key>freq_hz</key><real>%g</real>\n<key>idle_ns</key><integer>%llu</integer>\n<key>idle_ratio</key><real>%g</real>\n"
100004414:	1f 20 03 d5	nop
100004418:	32 36 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000441c:	63 22 40 f9	ldr	x3, [x19, #64]
100004420:	60 9b 07 10	adr	x0, #62316 ; literal pool for: "<key>dvfm_states</key>\n<array>\n"
100004424:	1f 20 03 d5	nop
100004428:	e1 03 80 52	mov	w1, #31
10000442c:	22 00 80 52	mov	w2, #1
100004430:	3c 36 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100004434:	d8 00 00 90	adrp	x24, 24 ; 0x10001c000
100004438:	08 83 41 b9	ldr	w8, [x24, #384]
10000443c:	1f 09 00 71	cmp	w8, #2
100004440:	23 07 00 54	b.lo	0x100004524
100004444:	39 00 80 52	mov	w25, #1
100004448:	1a e2 0b 10	adr	x26, #97344
10000444c:	1f 20 03 d5	nop
100004450:	08 e4 00 2f	movi	d8, #0000000000000000
100004454:	9b 0c 80 52	mov	w27, #100
100004458:	3c 9b 07 50	adr	x28, #62310 ; literal pool for: " "
10000445c:	1f 20 03 d5	nop
100004460:	13 9b 07 10	adr	x19, #62304 ; literal pool for: ")\n"
100004464:	1f 20 03 d5	nop
100004468:	34 9a 07 10	adr	x20, #62276 ; literal pool for: "%0.0f MHz: %s%%%s"
10000446c:	1f 20 03 d5	nop
100004470:	c8 2a 40 b9	ldr	w8, [x22, #40]
100004474:	1f 05 00 71	cmp	w8, #1
100004478:	60 02 00 54	b.eq	0x1000044c4
10000447c:	c8 04 00 35	cbnz	w8, 0x100004514
100004480:	e8 02 40 f9	ldr	x8, [x23]
100004484:	09 79 79 fc	ldr	d9, [x8, x25, lsl #3]
100004488:	55 23 40 f9	ldr	x21, [x26, #64]
10000448c:	e8 0a 41 a9	ldp	x8, x2, [x23, #16]
100004490:	08 79 79 f8	ldr	x8, [x8, x25, lsl #3]
100004494:	01 7d 1b 9b	mul	x1, x8, x27
100004498:	e0 73 00 91	add	x0, sp, #28
10000449c:	9d 2b 00 94	bl	0x10000f310
1000044a0:	e8 32 40 b9	ldr	w8, [x23, #48]
1000044a4:	08 05 00 51	sub	w8, w8, #1
1000044a8:	3f 03 08 eb	cmp	x25, x8
1000044ac:	68 02 9c 9a	csel	x8, x19, x28, eq
1000044b0:	e9 03 00 fd	str	d9, [sp]
1000044b4:	e0 a3 00 a9	stp	x0, x8, [sp, #8]
1000044b8:	e0 03 15 aa	mov	x0, x21
1000044bc:	e1 03 14 aa	mov	x1, x20
1000044c0:	14 00 00 14	b	0x100004510
1000044c4:	40 23 40 f9	ldr	x0, [x26, #64]
1000044c8:	e8 02 40 f9	ldr	x8, [x23]
1000044cc:	00 79 79 fc	ldr	d0, [x8, x25, lsl #3]
1000044d0:	e8 26 41 a9	ldp	x8, x9, [x23, #16]
1000044d4:	08 79 79 f8	ldr	x8, [x8, x25, lsl #3]
1000044d8:	01 01 63 9e	ucvtf	d1, x8
1000044dc:	42 07 40 fd	ldr	d2, [x26, #8]
1000044e0:	42 08 61 1e	fmul	d2, d2, d1
1000044e4:	4a 00 79 9e	fcvtzu	x10, d2
1000044e8:	28 01 08 aa	orr	x8, x9, x8
1000044ec:	22 01 63 9e	ucvtf	d2, x9
1000044f0:	21 18 62 1e	fdiv	d1, d1, d2
1000044f4:	1f 01 00 f1	cmp	x8, #0
1000044f8:	01 0d 61 1e	fcsel	d1, d8, d1, eq
1000044fc:	e1 0b 00 fd	str	d1, [sp, #16]
100004500:	ea 07 00 f9	str	x10, [sp, #8]
100004504:	e0 03 00 fd	str	d0, [sp]
100004508:	c1 95 07 70	adr	x1, #62139 ; literal pool for: "<dict>\n<key>freq</key><integer>%0.0f</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
10000450c:	1f 20 03 d5	nop
100004510:	f4 35 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100004514:	39 07 00 91	add	x25, x25, #1
100004518:	08 83 41 b9	ldr	w8, [x24, #384]
10000451c:	3f 03 08 eb	cmp	x25, x8
100004520:	83 fa ff 54	b.lo	0x100004470
100004524:	c8 2a 40 b9	ldr	w8, [x22, #40]
100004528:	1f 05 00 71	cmp	w8, #1
10000452c:	e1 00 00 54	b.ne	0x100004548
100004530:	1f 20 03 d5	nop
100004534:	1f 20 03 d5	nop
100004538:	81 dc 0b 58	ldr	x1, #97168
10000453c:	60 98 07 50	adr	x0, #62222 ; literal pool for: "</array>\n"
100004540:	1f 20 03 d5	nop
100004544:	ef 35 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100004548:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
10000454c:	08 31 47 39	ldrb	w8, [x8, #460]
100004550:	1f 05 00 71	cmp	w8, #1
100004554:	01 0b 00 54	b.ne	0x1000046b4
100004558:	c8 2a 40 b9	ldr	w8, [x22, #40]
10000455c:	1f 05 00 71	cmp	w8, #1
100004560:	20 01 00 54	b.eq	0x100004584
100004564:	08 02 00 35	cbnz	w8, 0x1000045a4
100004568:	1f 20 03 d5	nop
10000456c:	1f 20 03 d5	nop
100004570:	c1 da 0b 58	ldr	x1, #97112
100004574:	00 97 07 10	adr	x0, #62176 ; literal pool for: "GPU requested frequency: ("
100004578:	1f 20 03 d5	nop
10000457c:	e1 35 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100004580:	09 00 00 14	b	0x1000045a4
100004584:	1f 20 03 d5	nop
100004588:	1f 20 03 d5	nop
10000458c:	e3 d9 0b 58	ldr	x3, #97084
100004590:	e0 96 07 70	adr	x0, #62175 ; literal pool for: "<key>requested_freq</key>\n<array>\n"
100004594:	1f 20 03 d5	nop
100004598:	41 04 80 52	mov	w1, #34
10000459c:	22 00 80 52	mov	w2, #1
1000045a0:	e0 35 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
1000045a4:	08 83 41 b9	ldr	w8, [x24, #384]
1000045a8:	1f 09 00 71	cmp	w8, #2
1000045ac:	23 07 00 54	b.lo	0x100004690
1000045b0:	39 00 80 52	mov	w25, #1
1000045b4:	ba d6 0b 10	adr	x26, #96980
1000045b8:	1f 20 03 d5	nop
1000045bc:	08 e4 00 2f	movi	d8, #0000000000000000
1000045c0:	9b 0c 80 52	mov	w27, #100
1000045c4:	dc 8f 07 50	adr	x28, #61946 ; literal pool for: " "
1000045c8:	1f 20 03 d5	nop
1000045cc:	b3 8f 07 10	adr	x19, #61940 ; literal pool for: ")\n"
1000045d0:	1f 20 03 d5	nop
1000045d4:	d4 8e 07 10	adr	x20, #61912 ; literal pool for: "%0.0f MHz: %s%%%s"
1000045d8:	1f 20 03 d5	nop
1000045dc:	c8 2a 40 b9	ldr	w8, [x22, #40]
1000045e0:	1f 05 00 71	cmp	w8, #1
1000045e4:	60 02 00 54	b.eq	0x100004630
1000045e8:	c8 04 00 35	cbnz	w8, 0x100004680
1000045ec:	e8 02 40 f9	ldr	x8, [x23]
1000045f0:	09 79 79 fc	ldr	d9, [x8, x25, lsl #3]
1000045f4:	55 23 40 f9	ldr	x21, [x26, #64]
1000045f8:	e2 a2 41 a9	ldp	x2, x8, [x23, #24]
1000045fc:	08 79 79 f8	ldr	x8, [x8, x25, lsl #3]
100004600:	01 7d 1b 9b	mul	x1, x8, x27
100004604:	e0 63 00 91	add	x0, sp, #24
100004608:	42 2b 00 94	bl	0x10000f310
10000460c:	e8 32 40 b9	ldr	w8, [x23, #48]
100004610:	08 05 00 51	sub	w8, w8, #1
100004614:	3f 03 08 eb	cmp	x25, x8
100004618:	68 02 9c 9a	csel	x8, x19, x28, eq
10000461c:	e9 03 00 fd	str	d9, [sp]
100004620:	e0 a3 00 a9	stp	x0, x8, [sp, #8]
100004624:	e0 03 15 aa	mov	x0, x21
100004628:	e1 03 14 aa	mov	x1, x20
10000462c:	14 00 00 14	b	0x10000467c
100004630:	40 23 40 f9	ldr	x0, [x26, #64]
100004634:	e8 02 40 f9	ldr	x8, [x23]
100004638:	00 79 79 fc	ldr	d0, [x8, x25, lsl #3]
10000463c:	e9 a2 41 a9	ldp	x9, x8, [x23, #24]
100004640:	08 79 79 f8	ldr	x8, [x8, x25, lsl #3]
100004644:	01 01 63 9e	ucvtf	d1, x8
100004648:	42 07 40 fd	ldr	d2, [x26, #8]
10000464c:	42 08 61 1e	fmul	d2, d2, d1
100004650:	4a 00 79 9e	fcvtzu	x10, d2
100004654:	28 01 08 aa	orr	x8, x9, x8
100004658:	22 01 63 9e	ucvtf	d2, x9
10000465c:	21 18 62 1e	fdiv	d1, d1, d2
100004660:	1f 01 00 f1	cmp	x8, #0
100004664:	01 0d 61 1e	fcsel	d1, d8, d1, eq
100004668:	e1 0b 00 fd	str	d1, [sp, #16]
10000466c:	ea 07 00 f9	str	x10, [sp, #8]
100004670:	e0 03 00 fd	str	d0, [sp]
100004674:	61 8a 07 70	adr	x1, #61775 ; literal pool for: "<dict>\n<key>freq</key><integer>%0.0f</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
100004678:	1f 20 03 d5	nop
10000467c:	99 35 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100004680:	39 07 00 91	add	x25, x25, #1
100004684:	08 83 41 b9	ldr	w8, [x24, #384]
100004688:	3f 03 08 eb	cmp	x25, x8
10000468c:	83 fa ff 54	b.lo	0x1000045dc
100004690:	c8 2a 40 b9	ldr	w8, [x22, #40]
100004694:	1f 05 00 71	cmp	w8, #1
100004698:	01 01 00 54	b.ne	0x1000046b8
10000469c:	1f 20 03 d5	nop
1000046a0:	1f 20 03 d5	nop
1000046a4:	21 d1 0b 58	ldr	x1, #96804
1000046a8:	00 8d 07 50	adr	x0, #61858 ; literal pool for: "</array>\n"
1000046ac:	1f 20 03 d5	nop
1000046b0:	94 35 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000046b4:	c8 2a 40 b9	ldr	w8, [x22, #40]
1000046b8:	1f 05 00 71	cmp	w8, #1
1000046bc:	80 02 00 54	b.eq	0x10000470c
1000046c0:	c8 04 00 35	cbnz	w8, 0x100004758
1000046c4:	1f 20 03 d5	nop
1000046c8:	1f 20 03 d5	nop
1000046cc:	e0 cf 0b 58	ldr	x0, #96764
1000046d0:	88 d4 0b 10	adr	x8, #96912
1000046d4:	1f 20 03 d5	nop
1000046d8:	09 01 40 f9	ldr	x9, [x8]
1000046dc:	20 01 40 fd	ldr	d0, [x9]
1000046e0:	00 d8 61 7e	ucvtf	d0, d0
1000046e4:	01 05 40 fd	ldr	d1, [x8, #8]
1000046e8:	21 d8 61 7e	ucvtf	d1, d1
1000046ec:	00 18 61 1e	fdiv	d0, d0, d1
1000046f0:	28 0b e8 d2	mov	x8, #4636737291354636288
1000046f4:	01 01 67 9e	fmov	d1, x8
1000046f8:	00 08 61 1e	fmul	d0, d0, d1
1000046fc:	e0 03 00 fd	str	d0, [sp]
100004700:	81 8c 07 50	adr	x1, #61842 ; literal pool for: "GPU idle residency: %6.2f%%\n"
100004704:	1f 20 03 d5	nop
100004708:	13 00 00 14	b	0x100004754
10000470c:	e8 cb 0b 10	adr	x8, #96636
100004710:	1f 20 03 d5	nop
100004714:	00 21 40 f9	ldr	x0, [x8, #64]
100004718:	49 d2 0b 10	adr	x9, #96840
10000471c:	1f 20 03 d5	nop
100004720:	2a 01 40 f9	ldr	x10, [x9]
100004724:	40 01 40 fd	ldr	d0, [x10]
100004728:	00 d8 61 7e	ucvtf	d0, d0
10000472c:	01 05 40 fd	ldr	d1, [x8, #8]
100004730:	21 08 60 1e	fmul	d1, d1, d0
100004734:	28 00 79 9e	fcvtzu	x8, d1
100004738:	21 05 40 fd	ldr	d1, [x9, #8]
10000473c:	21 d8 61 7e	ucvtf	d1, d1
100004740:	00 18 61 1e	fdiv	d0, d0, d1
100004744:	e0 07 00 fd	str	d0, [sp, #8]
100004748:	e8 03 00 f9	str	x8, [sp]
10000474c:	01 8b 07 70	adr	x1, #61795 ; literal pool for: "<key>idle_ns</key><integer>%llu</integer>\n<key>idle_ratio</key><real>%g</real>\n"
100004750:	1f 20 03 d5	nop
100004754:	63 35 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100004758:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
10000475c:	08 61 47 39	ldrb	w8, [x8, #472]
100004760:	1f 05 00 71	cmp	w8, #1
100004764:	21 04 00 54	b.ne	0x1000047e8
100004768:	c8 2a 40 b9	ldr	w8, [x22, #40]
10000476c:	1f 05 00 71	cmp	w8, #1
100004770:	a0 02 00 54	b.eq	0x1000047c4
100004774:	c8 03 00 35	cbnz	w8, 0x1000047ec
100004778:	88 c8 0b 10	adr	x8, #96528
10000477c:	1f 20 03 d5	nop
100004780:	00 21 40 f9	ldr	x0, [x8, #64]
100004784:	1f 20 03 d5	nop
100004788:	00 d0 0b 5c	ldr	d0, 0x10001c188
10000478c:	00 d8 61 7e	ucvtf	d0, d0
100004790:	1f 20 03 d5	nop
100004794:	e1 d2 0b 5c	ldr	d1, 0x10001c1f0
100004798:	21 d8 61 7e	ucvtf	d1, d1
10000479c:	02 05 40 fd	ldr	d2, [x8, #8]
1000047a0:	41 08 61 1e	fmul	d1, d2, d1
1000047a4:	1f 20 03 d5	nop
1000047a8:	42 cf 06 5c	ldr	d2, 0x100012190
1000047ac:	21 18 62 1e	fdiv	d1, d1, d2
1000047b0:	00 18 61 1e	fdiv	d0, d0, d1
1000047b4:	e0 03 00 fd	str	d0, [sp]
1000047b8:	21 8a 07 70	adr	x1, #61767 ; literal pool for: "GPU Power: %0.0f mW\n"
1000047bc:	1f 20 03 d5	nop
1000047c0:	09 00 00 14	b	0x1000047e4
1000047c4:	1f 20 03 d5	nop
1000047c8:	1f 20 03 d5	nop
1000047cc:	e0 c7 0b 58	ldr	x0, #96508
1000047d0:	1f 20 03 d5	nop
1000047d4:	a8 cd 0b 58	ldr	x8, #96692
1000047d8:	e8 03 00 f9	str	x8, [sp]
1000047dc:	c1 89 07 10	adr	x1, #61752 ; literal pool for: "<key>gpu_energy</key><integer>%llu</integer>\n"
1000047e0:	1f 20 03 d5	nop
1000047e4:	3f 35 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000047e8:	c8 2a 40 b9	ldr	w8, [x22, #40]
1000047ec:	1f 05 00 71	cmp	w8, #1
1000047f0:	00 01 00 54	b.eq	0x100004810
1000047f4:	e8 01 00 35	cbnz	w8, 0x100004830
1000047f8:	1f 20 03 d5	nop
1000047fc:	1f 20 03 d5	nop
100004800:	41 c6 0b 58	ldr	x1, #96456
100004804:	40 01 80 52	mov	w0, #10
100004808:	3a 35 00 94	bl	0x100011cf0 ; symbol stub for: _fputc
10000480c:	09 00 00 14	b	0x100004830
100004810:	1f 20 03 d5	nop
100004814:	1f 20 03 d5	nop
100004818:	83 c5 0b 58	ldr	x3, #96432
10000481c:	20 89 07 50	adr	x0, #61734 ; literal pool for: "</dict>\n"
100004820:	1f 20 03 d5	nop
100004824:	01 01 80 52	mov	w1, #8
100004828:	22 00 80 52	mov	w2, #1
10000482c:	3d 35 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100004830:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
100004834:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
100004838:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
10000483c:	f8 5f 45 a9	ldp	x24, x23, [sp, #80]
100004840:	fa 67 44 a9	ldp	x26, x25, [sp, #64]
100004844:	fc 6f 43 a9	ldp	x28, x27, [sp, #48]
100004848:	e9 23 42 6d	ldp	d9, d8, [sp, #32]
10000484c:	ff 43 02 91	add	sp, sp, #144
100004850:	ff 0f 5f d6	retab
100004854:	7f 23 03 d5	pacibsp
100004858:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10000485c:	fd 03 00 91	mov	x29, sp
100004860:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004864:	08 a1 47 39	ldrb	w8, [x8, #488]
100004868:	1f 05 00 71	cmp	w8, #1
10000486c:	e1 00 00 54	b.ne	0x100004888
100004870:	c8 c0 0b 10	adr	x8, #96280
100004874:	1f 20 03 d5	nop
100004878:	09 01 40 39	ldrb	w9, [x8]
10000487c:	a9 00 00 34	cbz	w9, 0x100004890
100004880:	4c 35 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100004884:	08 00 00 14	b	0x1000048a4
100004888:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
10000488c:	ff 0f 5f d6	retab
100004890:	09 09 40 39	ldrb	w9, [x8, #2]
100004894:	69 00 00 34	cbz	w9, 0x1000048a0
100004898:	00 15 40 f9	ldr	x0, [x8, #40]
10000489c:	02 00 00 14	b	0x1000048a4
1000048a0:	00 11 40 f9	ldr	x0, [x8, #32]
1000048a4:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
1000048a8:	00 f9 00 f9	str	x0, [x8, #496]
1000048ac:	1f 20 03 d5	nop
1000048b0:	04 c7 0b 58	ldr	x4, #96480
1000048b4:	1f 20 03 d5	nop
1000048b8:	05 c7 0b 58	ldr	x5, #96480
1000048bc:	e0 c9 0b 10	adr	x0, #96572
1000048c0:	1f 20 03 d5	nop
1000048c4:	e1 c9 0b 10	adr	x1, #96572
1000048c8:	1f 20 03 d5	nop
1000048cc:	e2 c9 0b 10	adr	x2, #96572
1000048d0:	1f 20 03 d5	nop
1000048d4:	e3 c9 0b 10	adr	x3, #96572
1000048d8:	1f 20 03 d5	nop
1000048dc:	e4 2a 00 94	bl	0x10000f46c
1000048e0:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
1000048e4:	08 31 47 39	ldrb	w8, [x8, #460]
1000048e8:	1f 05 00 71	cmp	w8, #1
1000048ec:	c1 01 00 54	b.ne	0x100004924
1000048f0:	1f 20 03 d5	nop
1000048f4:	64 c5 0b 58	ldr	x4, #96428
1000048f8:	1f 20 03 d5	nop
1000048fc:	65 c5 0b 58	ldr	x5, #96428
100004900:	c0 c8 0b 10	adr	x0, #96536
100004904:	1f 20 03 d5	nop
100004908:	c1 c8 0b 10	adr	x1, #96536
10000490c:	1f 20 03 d5	nop
100004910:	c2 c8 0b 10	adr	x2, #96536
100004914:	1f 20 03 d5	nop
100004918:	c3 c8 0b 10	adr	x3, #96536
10000491c:	1f 20 03 d5	nop
100004920:	d3 2a 00 94	bl	0x10000f46c
100004924:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004928:	08 61 47 39	ldrb	w8, [x8, #472]
10000492c:	1f 05 00 71	cmp	w8, #1
100004930:	c1 01 00 54	b.ne	0x100004968
100004934:	1f 20 03 d5	nop
100004938:	04 c4 0b 58	ldr	x4, #96384
10000493c:	1f 20 03 d5	nop
100004940:	05 c4 0b 58	ldr	x5, #96384
100004944:	a0 c7 0b 10	adr	x0, #96500
100004948:	1f 20 03 d5	nop
10000494c:	a1 c7 0b 10	adr	x1, #96500
100004950:	1f 20 03 d5	nop
100004954:	a2 c7 0b 10	adr	x2, #96500
100004958:	1f 20 03 d5	nop
10000495c:	a3 c7 0b 10	adr	x3, #96500
100004960:	1f 20 03 d5	nop
100004964:	c2 2a 00 94	bl	0x10000f46c
100004968:	1f 20 03 d5	nop
10000496c:	20 c5 0b 58	ldr	x0, #96420
100004970:	01 e1 09 10	adr	x1, #80928
100004974:	1f 20 03 d5	nop
100004978:	5e 34 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000497c:	1f 20 03 d5	nop
100004980:	80 c5 0b 58	ldr	x0, #96432
100004984:	61 e2 09 10	adr	x1, #80972
100004988:	1f 20 03 d5	nop
10000498c:	59 34 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
100004990:	1f 20 03 d5	nop
100004994:	e0 c5 0b 58	ldr	x0, #96444
100004998:	c1 e3 09 10	adr	x1, #81016
10000499c:	1f 20 03 d5	nop
1000049a0:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
1000049a4:	ff 23 03 d5	autibsp
1000049a8:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
1000049ac:	50 00 f0 b6	tbz	x16, #62, 0x1000049b4
1000049b0:	20 8e 38 d4	brk	#0xc471
1000049b4:	4f 34 00 14	b	0x100011af0 ; symbol stub for: _IOReportIterate
1000049b8:	7f 23 03 d5	pacibsp
1000049bc:	ff 03 02 d1	sub	sp, sp, #128
1000049c0:	f4 4f 06 a9	stp	x20, x19, [sp, #96]
1000049c4:	fd 7b 07 a9	stp	x29, x30, [sp, #112]
1000049c8:	fd c3 01 91	add	x29, sp, #112
1000049cc:	f3 03 01 aa	mov	x19, x1
1000049d0:	1f 20 03 d5	nop
1000049d4:	28 d4 09 58	ldr	x8, #80516 ; literal pool symbol address: ___stack_chk_guard
1000049d8:	08 01 40 f9	ldr	x8, [x8]
1000049dc:	a8 83 1e f8	stur	x8, [x29, #-24]
1000049e0:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000049e4:	e0 93 83 3c	stur	q0, [sp, #57]
1000049e8:	e0 03 01 ad	stp	q0, q0, [sp, #32]
1000049ec:	e0 03 00 ad	stp	q0, q0, [sp]
1000049f0:	e0 03 01 aa	mov	x0, x1
1000049f4:	1f 34 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
1000049f8:	e0 01 00 b4	cbz	x0, 0x100004a34
1000049fc:	e1 03 00 91	mov	x1, sp
100004a00:	22 09 80 52	mov	w2, #73
100004a04:	03 20 80 52	mov	w3, #256
100004a08:	03 00 a1 72	movk	w3, #2048, lsl #16
100004a0c:	e1 33 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
100004a10:	e8 03 40 f9	ldr	x8, [sp]
100004a14:	49 68 8a d2	mov	x9, #21314
100004a18:	89 ea a8 f2	movk	x9, #18260, lsl #16
100004a1c:	09 aa ca f2	movk	x9, #21840, lsl #32
100004a20:	09 0a e9 f2	movk	x9, #18512, lsl #48
100004a24:	08 01 09 ca	eor	x8, x8, x9
100004a28:	e9 23 40 39	ldrb	w9, [sp, #8]
100004a2c:	08 01 09 aa	orr	x8, x8, x9
100004a30:	68 00 00 b4	cbz	x8, 0x100004a3c
100004a34:	00 02 80 52	mov	w0, #16
100004a38:	0a 00 00 14	b	0x100004a60
100004a3c:	28 00 80 52	mov	w8, #1
100004a40:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
100004a44:	28 31 07 39	strb	w8, [x9, #460]
100004a48:	e0 03 13 aa	mov	x0, x19
100004a4c:	05 34 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100004a50:	e8 03 00 aa	mov	x8, x0
100004a54:	00 00 80 52	mov	w0, #0
100004a58:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
100004a5c:	28 e9 00 f9	str	x8, [x9, #464]
100004a60:	a8 83 5e f8	ldur	x8, [x29, #-24]
100004a64:	1f 20 03 d5	nop
100004a68:	89 cf 09 58	ldr	x9, #80368 ; literal pool symbol address: ___stack_chk_guard
100004a6c:	29 01 40 f9	ldr	x9, [x9]
100004a70:	3f 01 08 eb	cmp	x9, x8
100004a74:	a1 00 00 54	b.ne	0x100004a88
100004a78:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
100004a7c:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
100004a80:	ff 03 02 91	add	sp, sp, #128
100004a84:	ff 0f 5f d6	retab
100004a88:	5e 34 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100004a8c:	7f 23 03 d5	pacibsp
100004a90:	ff 03 02 d1	sub	sp, sp, #128
100004a94:	f4 4f 06 a9	stp	x20, x19, [sp, #96]
100004a98:	fd 7b 07 a9	stp	x29, x30, [sp, #112]
100004a9c:	fd c3 01 91	add	x29, sp, #112
100004aa0:	f3 03 01 aa	mov	x19, x1
100004aa4:	1f 20 03 d5	nop
100004aa8:	88 cd 09 58	ldr	x8, #80304 ; literal pool symbol address: ___stack_chk_guard
100004aac:	08 01 40 f9	ldr	x8, [x8]
100004ab0:	a8 83 1e f8	stur	x8, [x29, #-24]
100004ab4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100004ab8:	e0 93 83 3c	stur	q0, [sp, #57]
100004abc:	e0 03 01 ad	stp	q0, q0, [sp, #32]
100004ac0:	e0 03 00 ad	stp	q0, q0, [sp]
100004ac4:	e0 03 01 aa	mov	x0, x1
100004ac8:	ea 33 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
100004acc:	80 02 00 b4	cbz	x0, 0x100004b1c
100004ad0:	e1 03 00 91	mov	x1, sp
100004ad4:	22 09 80 52	mov	w2, #73
100004ad8:	03 20 80 52	mov	w3, #256
100004adc:	03 00 a1 72	movk	w3, #2048, lsl #16
100004ae0:	ac 33 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
100004ae4:	e8 03 40 f9	ldr	x8, [sp]
100004ae8:	e9 08 8a d2	mov	x9, #20551
100004aec:	a9 0a a4 f2	movk	x9, #8277, lsl #16
100004af0:	a9 c8 cd f2	movk	x9, #28229, lsl #32
100004af4:	a9 4c ee f2	movk	x9, #29285, lsl #48
100004af8:	08 01 09 ca	eor	x8, x8, x9
100004afc:	e9 33 40 f8	ldur	x9, [sp, #3]
100004b00:	0a a4 88 d2	mov	x10, #17696
100004b04:	ca ad ac f2	movk	x10, #25966, lsl #16
100004b08:	4a ee cc f2	movk	x10, #26482, lsl #32
100004b0c:	2a 0f e0 f2	movk	x10, #121, lsl #48
100004b10:	29 01 0a ca	eor	x9, x9, x10
100004b14:	08 01 09 aa	orr	x8, x8, x9
100004b18:	68 00 00 b4	cbz	x8, 0x100004b24
100004b1c:	00 02 80 52	mov	w0, #16
100004b20:	0a 00 00 14	b	0x100004b48
100004b24:	28 00 80 52	mov	w8, #1
100004b28:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
100004b2c:	28 61 07 39	strb	w8, [x9, #472]
100004b30:	e0 03 13 aa	mov	x0, x19
100004b34:	cb 33 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100004b38:	e8 03 00 aa	mov	x8, x0
100004b3c:	00 00 80 52	mov	w0, #0
100004b40:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
100004b44:	28 f1 00 f9	str	x8, [x9, #480]
100004b48:	a8 83 5e f8	ldur	x8, [x29, #-24]
100004b4c:	1f 20 03 d5	nop
100004b50:	49 c8 09 58	ldr	x9, #80136 ; literal pool symbol address: ___stack_chk_guard
100004b54:	29 01 40 f9	ldr	x9, [x9]
100004b58:	3f 01 08 eb	cmp	x9, x8
100004b5c:	a1 00 00 54	b.ne	0x100004b70
100004b60:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
100004b64:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
100004b68:	ff 03 02 91	add	sp, sp, #128
100004b6c:	ff 0f 5f d6	retab
100004b70:	24 34 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100004b74:	7f 23 03 d5	pacibsp
100004b78:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
100004b7c:	f6 57 01 a9	stp	x22, x21, [sp, #16]
100004b80:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
100004b84:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
100004b88:	fd c3 00 91	add	x29, sp, #48
100004b8c:	a8 ae 0b 10	adr	x8, #95700
100004b90:	1f 20 03 d5	nop
100004b94:	16 21 40 b9	ldr	w22, [x8, #32]
100004b98:	d6 01 00 34	cbz	w22, 0x100004bd0
100004b9c:	f3 03 01 aa	mov	x19, x1
100004ba0:	14 00 80 d2	mov	x20, #0
100004ba4:	15 00 80 d2	mov	x21, #0
100004ba8:	17 01 40 f9	ldr	x23, [x8]
100004bac:	e0 03 13 aa	mov	x0, x19
100004bb0:	e1 03 14 aa	mov	x1, x20
100004bb4:	ef 33 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
100004bb8:	e0 7a 34 f8	str	x0, [x23, x20, lsl #3]
100004bbc:	15 00 15 8b	add	x21, x0, x21
100004bc0:	94 06 00 91	add	x20, x20, #1
100004bc4:	df 02 14 eb	cmp	x22, x20
100004bc8:	21 ff ff 54	b.ne	0x100004bac
100004bcc:	02 00 00 14	b	0x100004bd4
100004bd0:	15 00 80 d2	mov	x21, #0
100004bd4:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004bd8:	15 b5 00 f9	str	x21, [x8, #360]
100004bdc:	00 00 80 52	mov	w0, #0
100004be0:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
100004be4:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
100004be8:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
100004bec:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
100004bf0:	ff 0f 5f d6	retab
100004bf4:	7f 23 03 d5	pacibsp
100004bf8:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
100004bfc:	f6 57 01 a9	stp	x22, x21, [sp, #16]
100004c00:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
100004c04:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
100004c08:	fd c3 00 91	add	x29, sp, #48
100004c0c:	f3 03 01 aa	mov	x19, x1
100004c10:	e0 03 01 aa	mov	x0, x1
100004c14:	93 33 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100004c18:	1f 20 03 d5	nop
100004c1c:	a8 ad 0b 58	ldr	x8, #95668
100004c20:	1f 00 08 eb	cmp	x0, x8
100004c24:	81 02 00 54	b.ne	0x100004c74
100004c28:	48 aa 0b 10	adr	x8, #95560
100004c2c:	1f 20 03 d5	nop
100004c30:	16 11 40 b9	ldr	w22, [x8, #16]
100004c34:	b6 01 00 34	cbz	w22, 0x100004c68
100004c38:	14 00 80 d2	mov	x20, #0
100004c3c:	15 00 80 d2	mov	x21, #0
100004c40:	17 01 40 f9	ldr	x23, [x8]
100004c44:	e0 03 13 aa	mov	x0, x19
100004c48:	e1 03 14 aa	mov	x1, x20
100004c4c:	c9 33 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
100004c50:	e0 7a 34 f8	str	x0, [x23, x20, lsl #3]
100004c54:	15 00 15 8b	add	x21, x0, x21
100004c58:	94 06 00 91	add	x20, x20, #1
100004c5c:	df 02 14 eb	cmp	x22, x20
100004c60:	21 ff ff 54	b.ne	0x100004c44
100004c64:	02 00 00 14	b	0x100004c6c
100004c68:	15 00 80 d2	mov	x21, #0
100004c6c:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004c70:	15 bd 00 f9	str	x21, [x8, #376]
100004c74:	00 00 80 52	mov	w0, #0
100004c78:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
100004c7c:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
100004c80:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
100004c84:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
100004c88:	ff 0f 5f d6	retab
100004c8c:	7f 23 03 d5	pacibsp
100004c90:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
100004c94:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
100004c98:	fd 43 00 91	add	x29, sp, #16
100004c9c:	f3 03 01 aa	mov	x19, x1
100004ca0:	e0 03 01 aa	mov	x0, x1
100004ca4:	6f 33 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100004ca8:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004cac:	08 61 47 39	ldrb	w8, [x8, #472]
100004cb0:	1f 20 03 d5	nop
100004cb4:	69 a9 0b 58	ldr	x9, #95532
100004cb8:	1f 05 00 71	cmp	w8, #1
100004cbc:	00 00 49 fa	ccmp	x0, x9, #0, eq
100004cc0:	81 01 00 54	b.ne	0x100004cf0
100004cc4:	e0 03 13 aa	mov	x0, x19
100004cc8:	01 00 80 d2	mov	x1, #0
100004ccc:	99 33 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
100004cd0:	68 9b 86 d2	mov	x8, #13531
100004cd4:	c8 f6 ba f2	movk	x8, #55222, lsl #16
100004cd8:	48 d0 db f2	movk	x8, #56962, lsl #32
100004cdc:	68 63 e8 f2	movk	x8, #17179, lsl #48
100004ce0:	08 7c c8 9b	umulh	x8, x0, x8
100004ce4:	08 fd 52 d3	lsr	x8, x8, #18
100004ce8:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
100004cec:	28 c5 00 f9	str	x8, [x9, #392]
100004cf0:	00 00 80 52	mov	w0, #0
100004cf4:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
100004cf8:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
100004cfc:	ff 0f 5f d6	retab
100004d00:	7f 23 03 d5	pacibsp
100004d04:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100004d08:	fd 03 00 91	mov	x29, sp
100004d0c:	1f 20 03 d5	nop
100004d10:	48 bc 09 58	ldr	x8, #79752 ; literal pool symbol address: _kOSThermalNotificationPressureLevelName
100004d14:	00 01 40 f9	ldr	x0, [x8]
100004d18:	01 aa 0b 10	adr	x1, #95552
100004d1c:	1f 20 03 d5	nop
100004d20:	58 34 00 94	bl	0x100011e80 ; symbol stub for: _notify_register_check
100004d24:	1f 00 00 71	cmp	w0, #0
100004d28:	e8 17 9f 1a	cset	w8, eq
100004d2c:	c9 00 00 90	adrp	x9, 24 ; 0x10001c000
100004d30:	28 71 09 39	strb	w8, [x9, #604]
100004d34:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
100004d38:	ff 0f 5f d6	retab
100004d3c:	7f 23 03 d5	pacibsp
100004d40:	ff c3 00 d1	sub	sp, sp, #48
100004d44:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
100004d48:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
100004d4c:	fd 83 00 91	add	x29, sp, #32
100004d50:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004d54:	08 71 49 39	ldrb	w8, [x8, #604]
100004d58:	e8 05 00 34	cbz	w8, 0x100004e14
100004d5c:	1f 20 03 d5	nop
100004d60:	1f 20 03 d5	nop
100004d64:	a8 9c 0b 18	ldr	w8, 0x10001c0f8
100004d68:	1f 05 00 71	cmp	w8, #1
100004d6c:	60 02 00 54	b.eq	0x100004db8
100004d70:	28 05 00 35	cbnz	w8, 0x100004e14
100004d74:	b3 98 0b 10	adr	x19, #94996
100004d78:	1f 20 03 d5	nop
100004d7c:	63 22 40 f9	ldr	x3, [x19, #64]
100004d80:	80 5f 07 50	adr	x0, #60402 ; literal pool for: "\n\n**** Thermal pressure ****\n\n"
100004d84:	1f 20 03 d5	nop
100004d88:	c1 03 80 52	mov	w1, #30
100004d8c:	22 00 80 52	mov	w2, #1
100004d90:	e4 33 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100004d94:	60 22 40 f9	ldr	x0, [x19, #64]
100004d98:	1f 20 03 d5	nop
100004d9c:	28 a6 0b 58	ldr	x8, #95428
100004da0:	1f 11 00 f1	cmp	x8, #4
100004da4:	08 02 00 54	b.hi	0x100004de4
100004da8:	09 c6 09 10	adr	x9, #80064
100004dac:	1f 20 03 d5	nop
100004db0:	28 79 68 f8	ldr	x8, [x9, x8, lsl #3]
100004db4:	0e 00 00 14	b	0x100004dec
100004db8:	1f 20 03 d5	nop
100004dbc:	1f 20 03 d5	nop
100004dc0:	40 98 0b 58	ldr	x0, #94984
100004dc4:	1f 20 03 d5	nop
100004dc8:	c8 a4 0b 58	ldr	x8, #95384
100004dcc:	1f 11 00 f1	cmp	x8, #4
100004dd0:	68 01 00 54	b.hi	0x100004dfc
100004dd4:	a9 c4 09 10	adr	x9, #80020
100004dd8:	1f 20 03 d5	nop
100004ddc:	28 79 68 f8	ldr	x8, [x9, x8, lsl #3]
100004de0:	09 00 00 14	b	0x100004e04
100004de4:	08 61 07 50	adr	x8, #60450 ; literal pool for: "Undefined"
100004de8:	1f 20 03 d5	nop
100004dec:	e8 03 00 f9	str	x8, [sp]
100004df0:	01 5d 07 30	adr	x1, #60321 ; literal pool for: "Current pressure level: %s\n"
100004df4:	1f 20 03 d5	nop
100004df8:	06 00 00 14	b	0x100004e10
100004dfc:	48 60 07 50	adr	x8, #60426 ; literal pool for: "Undefined"
100004e00:	1f 20 03 d5	nop
100004e04:	e8 03 00 f9	str	x8, [sp]
100004e08:	21 5d 07 30	adr	x1, #60325 ; literal pool for: "<key>thermal_pressure</key><string>%s</string>\n"
100004e0c:	1f 20 03 d5	nop
100004e10:	b4 33 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100004e14:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
100004e18:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
100004e1c:	ff c3 00 91	add	sp, sp, #48
100004e20:	ff 0f 5f d6	retab
100004e24:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004e28:	08 71 49 39	ldrb	w8, [x8, #604]
100004e2c:	c8 00 00 34	cbz	w8, 0x100004e44
100004e30:	1f 20 03 d5	nop
100004e34:	20 a1 0b 18	ldr	w0, 0x10001c258
100004e38:	41 a1 0b 10	adr	x1, #95272
100004e3c:	1f 20 03 d5	nop
100004e40:	0c 34 00 14	b	0x100011e70 ; symbol stub for: _notify_get_state
100004e44:	c0 03 5f d6	ret
100004e48:	7f 23 03 d5	pacibsp
100004e4c:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
100004e50:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
100004e54:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
100004e58:	fd 83 00 91	add	x29, sp, #32
100004e5c:	28 00 80 52	mov	w8, #1
100004e60:	d4 00 00 90	adrp	x20, 24 ; 0x10001c000
100004e64:	88 a2 09 39	strb	w8, [x20, #616]
100004e68:	00 32 0a 10	adr	x0, #83520 ; Objc cfstring ref: @"Interrupt Statistics (by index)"
100004e6c:	1f 20 03 d5	nop
100004e70:	01 00 80 d2	mov	x1, #0
100004e74:	02 00 80 52	mov	w2, #0
100004e78:	03 00 80 d2	mov	x3, #0
100004e7c:	05 33 00 94	bl	0x100011a90 ; symbol stub for: _IOReportCopyChannelsInGroup
100004e80:	d5 00 00 90	adrp	x21, 24 ; 0x10001c000
100004e84:	a0 3a 01 f9	str	x0, [x21, #624]
100004e88:	40 03 00 b4	cbz	x0, 0x100004ef0
100004e8c:	15 33 00 94	bl	0x100011ae0 ; symbol stub for: _IOReportGetChannelCount
100004e90:	1f 00 00 71	cmp	w0, #0
100004e94:	cd 03 00 54	b.le	0x100004f0c
100004e98:	a1 3a 41 f9	ldr	x1, [x21, #624]
100004e9c:	f3 9e 0b 10	adr	x19, #95196
100004ea0:	1f 20 03 d5	nop
100004ea4:	00 00 80 d2	mov	x0, #0
100004ea8:	e2 03 13 aa	mov	x2, x19
100004eac:	03 00 80 52	mov	w3, #0
100004eb0:	04 00 80 d2	mov	x4, #0
100004eb4:	07 33 00 94	bl	0x100011ad0 ; symbol stub for: _IOReportCreateSubscription
100004eb8:	c8 00 00 90	adrp	x8, 24 ; 0x10001c000
100004ebc:	00 41 01 f9	str	x0, [x8, #640]
100004ec0:	68 02 40 f9	ldr	x8, [x19]
100004ec4:	88 03 00 b5	cbnz	x8, 0x100004f34
100004ec8:	1f 20 03 d5	nop
100004ecc:	a8 ac 09 58	ldr	x8, #79252 ; literal pool symbol address: ___stderrp
100004ed0:	03 01 40 f9	ldr	x3, [x8]
100004ed4:	00 5e 07 50	adr	x0, #60354 ; literal pool for: "IOReportCreateSubscription() failed\n"
100004ed8:	1f 20 03 d5	nop
100004edc:	33 00 80 52	mov	w19, #1
100004ee0:	81 04 80 52	mov	w1, #36
100004ee4:	22 00 80 52	mov	w2, #1
100004ee8:	8e 33 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100004eec:	11 00 00 14	b	0x100004f30
100004ef0:	1f 20 03 d5	nop
100004ef4:	68 ab 09 58	ldr	x8, #79212 ; literal pool symbol address: ___stderrp
100004ef8:	03 01 40 f9	ldr	x3, [x8]
100004efc:	e0 5a 07 50	adr	x0, #60254 ; literal pool for: "IOReportCopyChannelsForDriver() failed\n"
100004f00:	1f 20 03 d5	nop
100004f04:	e1 04 80 52	mov	w1, #39
100004f08:	07 00 00 14	b	0x100004f24
100004f0c:	1f 20 03 d5	nop
100004f10:	88 aa 09 58	ldr	x8, #79184 ; literal pool symbol address: ___stderrp
100004f14:	03 01 40 f9	ldr	x3, [x8]
100004f18:	40 5b 07 50	adr	x0, #60266 ; literal pool for: "No channels found!\n"
100004f1c:	1f 20 03 d5	nop
100004f20:	61 02 80 52	mov	w1, #19
100004f24:	22 00 80 52	mov	w2, #1
100004f28:	7e 33 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100004f2c:	13 00 80 52	mov	w19, #0
100004f30:	93 a2 09 39	strb	w19, [x20, #616]
100004f34:	a0 3a 41 f9	ldr	x0, [x21, #624]
100004f38:	60 00 00 b4	cbz	x0, 0x100004f44
100004f3c:	8d 32 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
100004f40:	bf 3a 01 f9	str	xzr, [x21, #624]
100004f44:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
100004f48:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
100004f4c:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
100004f50:	ff 0f 5f d6	retab
100004f54:	7f 23 03 d5	pacibsp
100004f58:	ff c3 01 d1	sub	sp, sp, #112
100004f5c:	e9 23 03 6d	stp	d9, d8, [sp, #48]
100004f60:	f6 57 04 a9	stp	x22, x21, [sp, #64]
100004f64:	f4 4f 05 a9	stp	x20, x19, [sp, #80]
100004f68:	fd 7b 06 a9	stp	x29, x30, [sp, #96]
100004f6c:	fd 83 01 91	add	x29, sp, #96
100004f70:	d4 00 00 90	adrp	x20, 24 ; 0x10001c000
100004f74:	88 46 41 f9	ldr	x8, [x20, #648]
100004f78:	28 08 00 b4	cbz	x8, 0x10000507c
100004f7c:	73 88 0b 10	adr	x19, #94476
100004f80:	1f 20 03 d5	nop
100004f84:	68 02 40 39	ldrb	w8, [x19]
100004f88:	28 01 00 34	cbz	w8, 0x100004fac
100004f8c:	89 33 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100004f90:	00 00 63 9e	ucvtf	d0, x0
100004f94:	61 06 40 fd	ldr	d1, [x19, #8]
100004f98:	20 08 60 1e	fmul	d0, d1, d0
100004f9c:	1f 20 03 d5	nop
100004fa0:	81 8f 06 5c	ldr	d1, 0x100012190
100004fa4:	08 18 61 1e	fdiv	d8, d0, d1
100004fa8:	06 00 00 14	b	0x100004fc0
100004fac:	68 0a 40 39	ldrb	w8, [x19, #2]
100004fb0:	68 00 00 34	cbz	w8, 0x100004fbc
100004fb4:	68 0e 40 fd	ldr	d8, [x19, #24]
100004fb8:	02 00 00 14	b	0x100004fc0
100004fbc:	68 0a 40 fd	ldr	d8, [x19, #16]
100004fc0:	95 88 0b 10	adr	x21, #94480
100004fc4:	1f 20 03 d5	nop
100004fc8:	a8 2a 40 b9	ldr	w8, [x21, #40]
100004fcc:	1f 05 00 71	cmp	w8, #1
100004fd0:	e0 00 00 54	b.eq	0x100004fec
100004fd4:	88 01 00 35	cbnz	w8, 0x100005004
100004fd8:	63 22 40 f9	ldr	x3, [x19, #64]
100004fdc:	e0 56 07 70	adr	x0, #60127 ; literal pool for: "\n**** Interrupt Sources ****\n"
100004fe0:	1f 20 03 d5	nop
100004fe4:	a1 03 80 52	mov	w1, #29
100004fe8:	05 00 00 14	b	0x100004ffc
100004fec:	63 22 40 f9	ldr	x3, [x19, #64]
100004ff0:	40 57 07 30	adr	x0, #60137 ; literal pool for: "<key>interrupt_sources</key>\n<dict>\n"
100004ff4:	1f 20 03 d5	nop
100004ff8:	81 04 80 52	mov	w1, #36
100004ffc:	22 00 80 52	mov	w2, #1
100005000:	48 33 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100005004:	80 46 41 f9	ldr	x0, [x20, #648]
100005008:	e8 23 00 91	add	x8, sp, #8
10000500c:	1f 20 03 d5	nop
100005010:	10 a2 09 58	ldr	x16, #78912 ; literal pool symbol address: __NSConcreteStackBlock
100005014:	f1 03 08 aa	mov	x17, x8
100005018:	31 5c ed f2	movk	x17, #27361, lsl #48
10000501c:	30 0a c1 da	pacda	x16, x17
100005020:	f0 07 00 f9	str	x16, [sp, #8]
100005024:	1f 20 03 d5	nop
100005028:	80 8b 06 5c	ldr	d0, 0x100012198
10000502c:	e0 0b 00 fd	str	d0, [sp, #16]
100005030:	08 41 00 91	add	x8, x8, #16
100005034:	50 05 00 10	adr	x16, #168
100005038:	1f 20 03 d5	nop
10000503c:	10 01 c1 da	pacia	x16, x8
100005040:	48 b4 09 10	adr	x8, #79496
100005044:	1f 20 03 d5	nop
100005048:	f0 a3 01 a9	stp	x16, x8, [sp, #24]
10000504c:	e8 17 00 fd	str	d8, [sp, #40]
100005050:	e1 23 00 91	add	x1, sp, #8
100005054:	a7 32 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
100005058:	a8 2a 40 b9	ldr	w8, [x21, #40]
10000505c:	1f 05 00 71	cmp	w8, #1
100005060:	e1 00 00 54	b.ne	0x10000507c
100005064:	63 22 40 f9	ldr	x3, [x19, #64]
100005068:	c0 46 07 50	adr	x0, #59610 ; literal pool for: "</dict>\n"
10000506c:	1f 20 03 d5	nop
100005070:	01 01 80 52	mov	w1, #8
100005074:	22 00 80 52	mov	w2, #1
100005078:	2a 33 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000507c:	fd 7b 46 a9	ldp	x29, x30, [sp, #96]
100005080:	f4 4f 45 a9	ldp	x20, x19, [sp, #80]
100005084:	f6 57 44 a9	ldp	x22, x21, [sp, #64]
100005088:	e9 23 43 6d	ldp	d9, d8, [sp, #48]
10000508c:	ff c3 01 91	add	sp, sp, #112
100005090:	ff 0f 5f d6	retab
100005094:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
100005098:	08 a1 49 39	ldrb	w8, [x8, #616]
10000509c:	1f 05 00 71	cmp	w8, #1
1000050a0:	c1 01 00 54	b.ne	0x1000050d8
1000050a4:	1f 20 03 d5	nop
1000050a8:	c4 8e 0b 58	ldr	x4, #94680
1000050ac:	1f 20 03 d5	nop
1000050b0:	45 8e 0b 58	ldr	x5, #94664
1000050b4:	e0 8e 0b 10	adr	x0, #94684
1000050b8:	1f 20 03 d5	nop
1000050bc:	e1 8e 0b 10	adr	x1, #94684
1000050c0:	1f 20 03 d5	nop
1000050c4:	e2 8e 0b 10	adr	x2, #94684
1000050c8:	1f 20 03 d5	nop
1000050cc:	e3 8d 0b 10	adr	x3, #94652
1000050d0:	1f 20 03 d5	nop
1000050d4:	e6 28 00 14	b	0x10000f46c
1000050d8:	c0 03 5f d6	ret
1000050dc:	7f 23 03 d5	pacibsp
1000050e0:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
1000050e4:	f6 57 01 a9	stp	x22, x21, [sp, #16]
1000050e8:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
1000050ec:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
1000050f0:	fd c3 00 91	add	x29, sp, #48
1000050f4:	ff 03 09 d1	sub	sp, sp, #576
1000050f8:	f7 03 01 aa	mov	x23, x1
1000050fc:	f3 03 00 aa	mov	x19, x0
100005100:	1f 20 03 d5	nop
100005104:	a8 9a 09 58	ldr	x8, #78676 ; literal pool symbol address: ___stack_chk_guard
100005108:	08 01 40 f9	ldr	x8, [x8]
10000510c:	a8 83 1c f8	stur	x8, [x29, #-56]
100005110:	e0 03 01 aa	mov	x0, x1
100005114:	01 00 80 d2	mov	x1, #0
100005118:	86 32 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000511c:	1f 04 00 f1	cmp	x0, #1
100005120:	4b 07 00 54	b.lt	0x100005208
100005124:	f4 03 00 aa	mov	x20, x0
100005128:	e0 03 17 aa	mov	x0, x23
10000512c:	55 32 00 94	bl	0x100011a80 ; symbol stub for: _IOReportChannelGetDriverName
100005130:	60 08 00 b4	cbz	x0, 0x10000523c
100005134:	f6 03 00 aa	mov	x22, x0
100005138:	01 20 80 52	mov	w1, #256
10000513c:	01 00 a1 72	movk	w1, #2048, lsl #16
100005140:	18 32 00 94	bl	0x1000119a0 ; symbol stub for: _CFStringGetCStringPtr
100005144:	f5 03 00 aa	mov	x21, x0
100005148:	e0 03 17 aa	mov	x0, x23
10000514c:	49 32 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
100005150:	80 07 00 b4	cbz	x0, 0x100005240
100005154:	01 20 80 52	mov	w1, #256
100005158:	01 00 a1 72	movk	w1, #2048, lsl #16
10000515c:	11 32 00 94	bl	0x1000119a0 ; symbol stub for: _CFStringGetCStringPtr
100005160:	17 04 00 d1	sub	x23, x0, #1
100005164:	e8 1e 40 38	ldrb	w8, [x23, #1]!
100005168:	1f 81 00 71	cmp	w8, #32
10000516c:	c0 ff ff 54	b.eq	0x100005164
100005170:	1f 20 03 d5	nop
100005174:	1f 20 03 d5	nop
100005178:	08 7c 0b 18	ldr	w8, 0x10001c0f8
10000517c:	1f 05 00 71	cmp	w8, #1
100005180:	a0 01 00 54	b.eq	0x1000051b4
100005184:	28 04 00 35	cbnz	w8, 0x100005208
100005188:	1f 20 03 d5	nop
10000518c:	1f 20 03 d5	nop
100005190:	c0 79 0b 58	ldr	x0, #94008
100005194:	80 02 62 9e	scvtf	d0, x20
100005198:	61 12 40 fd	ldr	d1, [x19, #32]
10000519c:	00 18 61 1e	fdiv	d0, d0, d1
1000051a0:	e0 0b 00 fd	str	d0, [sp, #16]
1000051a4:	f5 5f 00 a9	stp	x21, x23, [sp]
1000051a8:	21 4d 07 50	adr	x1, #59814 ; literal pool for: "%30s %36s: %.2f /s\n"
1000051ac:	1f 20 03 d5	nop
1000051b0:	15 00 00 14	b	0x100005204
1000051b4:	e0 03 16 aa	mov	x0, x22
1000051b8:	01 20 80 52	mov	w1, #256
1000051bc:	01 00 a1 72	movk	w1, #2048, lsl #16
1000051c0:	f8 31 00 94	bl	0x1000119a0 ; symbol stub for: _CFStringGetCStringPtr
1000051c4:	e1 e3 00 91	add	x1, sp, #56
1000051c8:	02 40 80 52	mov	w2, #512
1000051cc:	ee 27 00 94	bl	0x10000f184
1000051d0:	1f 20 03 d5	nop
1000051d4:	1f 20 03 d5	nop
1000051d8:	88 77 0b 58	ldr	x8, #93936
1000051dc:	80 02 62 9e	scvtf	d0, x20
1000051e0:	61 12 40 fd	ldr	d1, [x19, #32]
1000051e4:	00 18 61 1e	fdiv	d0, d0, d1
1000051e8:	e0 17 00 fd	str	d0, [sp, #40]
1000051ec:	e0 df 01 a9	stp	x0, x23, [sp, #24]
1000051f0:	f7 d3 00 a9	stp	x23, x20, [sp, #8]
1000051f4:	e0 03 00 f9	str	x0, [sp]
1000051f8:	41 4b 07 50	adr	x1, #59754 ; literal pool for: "<key>%s %s</key>\n<integer>%llu</integer>\n<key>%s %s rate</key>\n<real>%g</real>\n"
1000051fc:	1f 20 03 d5	nop
100005200:	e0 03 08 aa	mov	x0, x8
100005204:	b7 32 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005208:	a8 83 5c f8	ldur	x8, [x29, #-56]
10000520c:	1f 20 03 d5	nop
100005210:	49 92 09 58	ldr	x9, #78408 ; literal pool symbol address: ___stack_chk_guard
100005214:	29 01 40 f9	ldr	x9, [x9]
100005218:	3f 01 08 eb	cmp	x9, x8
10000521c:	41 01 00 54	b.ne	0x100005244
100005220:	00 00 80 52	mov	w0, #0
100005224:	ff 03 09 91	add	sp, sp, #576
100005228:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000522c:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
100005230:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
100005234:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
100005238:	ff 0f 5f d6	retab
10000523c:	cc 2f 00 94	bl	0x10001116c
100005240:	d6 2f 00 94	bl	0x100011198
100005244:	6f 32 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100005248:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
10000524c:	1f 55 01 f9	str	xzr, [x8, #680]
100005250:	08 83 0b 10	adr	x8, #94304
100005254:	1f 20 03 d5	nop
100005258:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000525c:	00 01 00 ad	stp	q0, q0, [x8]
100005260:	00 01 01 ad	stp	q0, q0, [x8, #32]
100005264:	00 01 02 ad	stp	q0, q0, [x8, #64]
100005268:	00 01 03 ad	stp	q0, q0, [x8, #96]
10000526c:	1f 41 00 f9	str	xzr, [x8, #128]
100005270:	c0 03 5f d6	ret
100005274:	7f 23 03 d5	pacibsp
100005278:	ff 03 02 d1	sub	sp, sp, #128
10000527c:	fc 6f 02 a9	stp	x28, x27, [sp, #32]
100005280:	fa 67 03 a9	stp	x26, x25, [sp, #48]
100005284:	f8 5f 04 a9	stp	x24, x23, [sp, #64]
100005288:	f6 57 05 a9	stp	x22, x21, [sp, #80]
10000528c:	f4 4f 06 a9	stp	x20, x19, [sp, #96]
100005290:	fd 7b 07 a9	stp	x29, x30, [sp, #112]
100005294:	fd c3 01 91	add	x29, sp, #112
100005298:	d6 71 0b 10	adr	x22, #93752
10000529c:	1f 20 03 d5	nop
1000052a0:	c8 2a 40 b9	ldr	w8, [x22, #40]
1000052a4:	35 6f 0b 10	adr	x21, #93668
1000052a8:	1f 20 03 d5	nop
1000052ac:	b7 00 00 f0	adrp	x23, 23 ; 0x10001c000
1000052b0:	1f 05 00 71	cmp	w8, #1
1000052b4:	00 02 00 54	b.eq	0x1000052f4
1000052b8:	a8 03 00 35	cbnz	w8, 0x10000532c
1000052bc:	a3 22 40 f9	ldr	x3, [x21, #64]
1000052c0:	a0 54 07 70	adr	x0, #60055 ; literal pool for: "\n\n**** Selective Forced Idle ****\n\n"
1000052c4:	1f 20 03 d5	nop
1000052c8:	61 04 80 52	mov	w1, #35
1000052cc:	22 00 80 52	mov	w2, #1
1000052d0:	94 32 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
1000052d4:	e8 56 41 f9	ldr	x8, [x23, #680]
1000052d8:	a8 02 00 b4	cbz	x8, 0x10000532c
1000052dc:	a0 22 40 f9	ldr	x0, [x21, #64]
1000052e0:	e8 03 00 f9	str	x8, [sp]
1000052e4:	a1 54 07 70	adr	x1, #60055 ; literal pool for: "Selective Forced Idle window:     %lluus\n"
1000052e8:	1f 20 03 d5	nop
1000052ec:	7d 32 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000052f0:	0f 00 00 14	b	0x10000532c
1000052f4:	a1 22 40 f9	ldr	x1, [x21, #64]
1000052f8:	60 55 07 30	adr	x0, #60077 ; literal pool for: "<key>sfi</key>\n<dict>\n"
1000052fc:	1f 20 03 d5	nop
100005300:	80 32 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100005304:	a0 22 40 f9	ldr	x0, [x21, #64]
100005308:	e8 56 41 f9	ldr	x8, [x23, #680]
10000530c:	e8 03 00 f9	str	x8, [sp]
100005310:	61 55 07 10	adr	x1, #60076 ; literal pool for: "<key>window_size_us</key><integer>%llu</integer>\n"
100005314:	1f 20 03 d5	nop
100005318:	72 32 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000531c:	a1 22 40 f9	ldr	x1, [x21, #64]
100005320:	60 56 07 50	adr	x0, #60110 ; literal pool for: "<key>sfi_classes</key>\n<dict>\n"
100005324:	1f 20 03 d5	nop
100005328:	76 32 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000532c:	18 00 80 d2	mov	x24, #0
100005330:	99 66 0b 10	adr	x25, #93392
100005334:	1f 20 03 d5	nop
100005338:	da 7b 0b 10	adr	x26, #94072
10000533c:	1f 20 03 d5	nop
100005340:	73 57 07 30	adr	x19, #60141 ; literal pool for: "<key>%s</key><integer>%llu</integer>\n"
100005344:	1f 20 03 d5	nop
100005348:	3b 0b e8 d2	mov	x27, #4636737291354636288
10000534c:	14 56 07 30	adr	x20, #60097 ; literal pool for: "%33s off-time: %lluus (%.2f%%)\n"
100005350:	1f 20 03 d5	nop
100005354:	28 6b 78 f8	ldr	x8, [x25, x24]
100005358:	48 03 00 b4	cbz	x8, 0x1000053c0
10000535c:	c9 2a 40 b9	ldr	w9, [x22, #40]
100005360:	3f 05 00 71	cmp	w9, #1
100005364:	80 01 00 54	b.eq	0x100005394
100005368:	c9 02 00 35	cbnz	w9, 0x1000053c0
10000536c:	49 6b 78 f8	ldr	x9, [x26, x24]
100005370:	89 02 00 b4	cbz	x9, 0x1000053c0
100005374:	ea 56 41 f9	ldr	x10, [x23, #680]
100005378:	8a 01 00 b4	cbz	x10, 0x1000053a8
10000537c:	20 01 63 9e	ucvtf	d0, x9
100005380:	41 01 63 9e	ucvtf	d1, x10
100005384:	00 18 61 1e	fdiv	d0, d0, d1
100005388:	61 03 67 9e	fmov	d1, x27
10000538c:	00 08 61 1e	fmul	d0, d0, d1
100005390:	07 00 00 14	b	0x1000053ac
100005394:	a0 22 40 f9	ldr	x0, [x21, #64]
100005398:	49 6b 78 f8	ldr	x9, [x26, x24]
10000539c:	e8 27 00 a9	stp	x8, x9, [sp]
1000053a0:	e1 03 13 aa	mov	x1, x19
1000053a4:	06 00 00 14	b	0x1000053bc
1000053a8:	00 e4 00 2f	movi	d0, #0000000000000000
1000053ac:	a0 22 40 f9	ldr	x0, [x21, #64]
1000053b0:	e0 0b 00 fd	str	d0, [sp, #16]
1000053b4:	e8 27 00 a9	stp	x8, x9, [sp]
1000053b8:	e1 03 14 aa	mov	x1, x20
1000053bc:	49 32 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000053c0:	18 23 00 91	add	x24, x24, #8
1000053c4:	1f 23 02 f1	cmp	x24, #136
1000053c8:	61 fc ff 54	b.ne	0x100005354
1000053cc:	c8 2a 40 b9	ldr	w8, [x22, #40]
1000053d0:	1f 05 00 71	cmp	w8, #1
1000053d4:	01 02 00 54	b.ne	0x100005414
1000053d8:	a1 22 40 f9	ldr	x1, [x21, #64]
1000053dc:	a0 53 07 70	adr	x0, #60023 ; literal pool for: "</dict>\n</dict>\n"
1000053e0:	1f 20 03 d5	nop
1000053e4:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
1000053e8:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
1000053ec:	f6 57 45 a9	ldp	x22, x21, [sp, #80]
1000053f0:	f8 5f 44 a9	ldp	x24, x23, [sp, #64]
1000053f4:	fa 67 43 a9	ldp	x26, x25, [sp, #48]
1000053f8:	fc 6f 42 a9	ldp	x28, x27, [sp, #32]
1000053fc:	ff 03 02 91	add	sp, sp, #128
100005400:	ff 23 03 d5	autibsp
100005404:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100005408:	50 00 f0 b6	tbz	x16, #62, 0x100005410
10000540c:	20 8e 38 d4	brk	#0xc471
100005410:	3c 32 00 14	b	0x100011d00 ; symbol stub for: _fputs
100005414:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
100005418:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
10000541c:	f6 57 45 a9	ldp	x22, x21, [sp, #80]
100005420:	f8 5f 44 a9	ldp	x24, x23, [sp, #64]
100005424:	fa 67 43 a9	ldp	x26, x25, [sp, #48]
100005428:	fc 6f 42 a9	ldp	x28, x27, [sp, #32]
10000542c:	ff 03 02 91	add	sp, sp, #128
100005430:	ff 0f 5f d6	retab
100005434:	7f 23 03 d5	pacibsp
100005438:	ff 43 01 d1	sub	sp, sp, #80
10000543c:	f8 5f 01 a9	stp	x24, x23, [sp, #16]
100005440:	f6 57 02 a9	stp	x22, x21, [sp, #32]
100005444:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
100005448:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
10000544c:	fd 03 01 91	add	x29, sp, #64
100005450:	c0 72 0b 10	adr	x0, #93784
100005454:	1f 20 03 d5	nop
100005458:	26 33 00 94	bl	0x1000120f0 ; symbol stub for: _system_get_sfi_window
10000545c:	1f 20 03 d5	nop
100005460:	16 80 09 58	ldr	x22, #77824 ; literal pool symbol address: ___stderrp
100005464:	1f 04 00 31	cmn	w0, #1
100005468:	e1 00 00 54	b.ne	0x100005484
10000546c:	c3 02 40 f9	ldr	x3, [x22]
100005470:	a0 4f 07 10	adr	x0, #59892 ; literal pool for: "Failed to get SFI window\n"
100005474:	1f 20 03 d5	nop
100005478:	21 03 80 52	mov	w1, #25
10000547c:	22 00 80 52	mov	w2, #1
100005480:	28 32 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100005484:	13 00 80 d2	mov	x19, #0
100005488:	54 71 0b 10	adr	x20, #93736
10000548c:	1f 20 03 d5	nop
100005490:	97 5b 0b 10	adr	x23, #93040
100005494:	1f 20 03 d5	nop
100005498:	35 4f 07 50	adr	x21, #59878 ; literal pool for: "Failed to get SFI class: %s"
10000549c:	1f 20 03 d5	nop
1000054a0:	e8 7a 73 f8	ldr	x8, [x23, x19, lsl #3]
1000054a4:	68 01 00 b4	cbz	x8, 0x1000054d0
1000054a8:	e0 03 13 aa	mov	x0, x19
1000054ac:	e1 03 14 aa	mov	x1, x20
1000054b0:	c8 32 00 94	bl	0x100011fd0 ; symbol stub for: _sfi_get_class_offtime
1000054b4:	1f 04 00 31	cmn	w0, #1
1000054b8:	c1 00 00 54	b.ne	0x1000054d0
1000054bc:	c0 02 40 f9	ldr	x0, [x22]
1000054c0:	e8 7a 73 f8	ldr	x8, [x23, x19, lsl #3]
1000054c4:	e8 03 00 f9	str	x8, [sp]
1000054c8:	e1 03 15 aa	mov	x1, x21
1000054cc:	05 32 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000054d0:	73 06 00 91	add	x19, x19, #1
1000054d4:	94 22 00 91	add	x20, x20, #8
1000054d8:	7f 46 00 f1	cmp	x19, #17
1000054dc:	21 fe ff 54	b.ne	0x1000054a0
1000054e0:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
1000054e4:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
1000054e8:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
1000054ec:	f8 5f 41 a9	ldp	x24, x23, [sp, #16]
1000054f0:	ff 43 01 91	add	sp, sp, #80
1000054f4:	ff 0f 5f d6	retab
1000054f8:	7f 23 03 d5	pacibsp
1000054fc:	ff 43 06 d1	sub	sp, sp, #400
100005500:	e9 23 12 6d	stp	d9, d8, [sp, #288]
100005504:	fc 6f 13 a9	stp	x28, x27, [sp, #304]
100005508:	fa 67 14 a9	stp	x26, x25, [sp, #320]
10000550c:	f8 5f 15 a9	stp	x24, x23, [sp, #336]
100005510:	f6 57 16 a9	stp	x22, x21, [sp, #352]
100005514:	f4 4f 17 a9	stp	x20, x19, [sp, #368]
100005518:	fd 7b 18 a9	stp	x29, x30, [sp, #384]
10000551c:	fd 03 06 91	add	x29, sp, #384
100005520:	1f 20 03 d5	nop
100005524:	a8 79 09 58	ldr	x8, #77620 ; literal pool symbol address: ___stack_chk_guard
100005528:	08 01 40 f9	ldr	x8, [x8]
10000552c:	a8 03 19 f8	stur	x8, [x29, #-112]
100005530:	bb 00 00 f0	adrp	x27, 23 ; 0x10001c000
100005534:	7f 3b 03 b9	str	wzr, [x27, #824]
100005538:	bc 00 00 f0	adrp	x28, 23 ; 0x10001c000
10000553c:	9f f3 0c 39	strb	wzr, [x28, #828]
100005540:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
100005544:	1f f5 0c 39	strb	wzr, [x8, #829]
100005548:	24 28 00 94	bl	0x10000f5d8
10000554c:	b3 6f 0b 10	adr	x19, #93684
100005550:	1f 20 03 d5	nop
100005554:	60 01 00 34	cbz	w0, 0x100005580
100005558:	f4 03 00 aa	mov	x20, x0
10000555c:	61 fe 09 10	adr	x1, #81868 ; Objc cfstring ref: @"voltage-states8"
100005560:	1f 20 03 d5	nop
100005564:	e0 03 13 aa	mov	x0, x19
100005568:	e2 03 14 aa	mov	x2, x20
10000556c:	03 00 80 52	mov	w3, #0
100005570:	48 28 00 94	bl	0x10000f690
100005574:	60 0a 00 b9	str	w0, [x19, #8]
100005578:	e0 03 14 aa	mov	x0, x20
10000557c:	15 31 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
100005580:	1f 20 03 d5	nop
100005584:	28 6e 0b 18	ldr	w8, 0x10001c348
100005588:	c8 20 00 34	cbz	w8, 0x1000059a0
10000558c:	16 00 80 52	mov	w22, #0
100005590:	1f 20 03 d5	nop
100005594:	e8 77 09 58	ldr	x8, #77564 ; literal pool symbol address: _kIOMainPortDefault
100005598:	15 01 40 b9	ldr	w21, [x8]
10000559c:	18 12 80 52	mov	w24, #144
1000055a0:	94 6d 0b 10	adr	x20, #93616
1000055a4:	1f 20 03 d5	nop
1000055a8:	77 3b 43 b9	ldr	w23, [x27, #824]
1000055ac:	f6 03 00 f9	str	x22, [sp]
1000055b0:	e0 43 02 91	add	x0, sp, #144
1000055b4:	01 10 80 52	mov	w1, #128
1000055b8:	62 4b 07 70	adr	x2, #59759 ; literal pool for: "IODeviceTree:/arm-io/ane%u"
1000055bc:	1f 20 03 d5	nop
1000055c0:	90 32 00 94	bl	0x100012000 ; symbol stub for: _snprintf
1000055c4:	e1 43 02 91	add	x1, sp, #144
1000055c8:	e0 03 15 aa	mov	x0, x21
1000055cc:	11 31 00 94	bl	0x100011a10 ; symbol stub for: _IORegistryEntryFromPath
1000055d0:	40 08 00 34	cbz	w0, 0x1000056d8
1000055d4:	f9 03 00 aa	mov	x25, x0
1000055d8:	e8 52 18 9b	madd	x8, x23, x24, x20
1000055dc:	1a 41 00 91	add	x26, x8, #16
1000055e0:	41 fb 09 10	adr	x1, #81768 ; Objc cfstring ref: @"ane-id"
1000055e4:	1f 20 03 d5	nop
1000055e8:	e2 03 1a aa	mov	x2, x26
1000055ec:	83 00 80 52	mov	w3, #4
1000055f0:	d8 27 00 94	bl	0x10000f550
1000055f4:	a0 00 00 36	tbz	w0, #0, 0x100005608
1000055f8:	48 03 40 b9	ldr	w8, [x26]
1000055fc:	1f 15 00 71	cmp	w8, #5
100005600:	63 00 00 54	b.lo	0x10000560c
100005604:	f6 00 00 14	b	0x1000059dc
100005608:	5f 03 00 b9	str	wzr, [x26]
10000560c:	e8 52 18 9b	madd	x8, x23, x24, x20
100005610:	1a 51 00 91	add	x26, x8, #20
100005614:	e0 03 19 aa	mov	x0, x25
100005618:	81 fa 09 10	adr	x1, #81744 ; Objc cfstring ref: @"die-id"
10000561c:	1f 20 03 d5	nop
100005620:	e2 03 1a aa	mov	x2, x26
100005624:	83 00 80 52	mov	w3, #4
100005628:	ca 27 00 94	bl	0x10000f550
10000562c:	40 00 00 37	tbnz	w0, #0, 0x100005634
100005630:	5f 03 00 b9	str	wzr, [x26]
100005634:	e8 52 18 9b	madd	x8, x23, x24, x20
100005638:	1a 61 00 91	add	x26, x8, #24
10000563c:	e0 03 19 aa	mov	x0, x25
100005640:	41 fa 09 10	adr	x1, #81736 ; Objc cfstring ref: @"die-ane-id"
100005644:	1f 20 03 d5	nop
100005648:	e2 03 1a aa	mov	x2, x26
10000564c:	83 00 80 52	mov	w3, #4
100005650:	c0 27 00 94	bl	0x10000f550
100005654:	40 00 00 37	tbnz	w0, #0, 0x10000565c
100005658:	5f 03 00 b9	str	wzr, [x26]
10000565c:	f7 52 18 9b	madd	x23, x23, x24, x20
100005660:	f3 02 00 f9	str	x19, [x23]
100005664:	68 0a 40 b9	ldr	w8, [x19, #8]
100005668:	00 05 00 11	add	w0, w8, #1
10000566c:	01 01 80 52	mov	w1, #8
100005670:	7c 31 00 94	bl	0x100011c60 ; symbol stub for: _calloc
100005674:	e0 36 00 f9	str	x0, [x23, #104]
100005678:	88 f3 4c 39	ldrb	w8, [x28, #828]
10000567c:	68 00 00 34	cbz	w8, 0x100005688
100005680:	28 00 80 52	mov	w8, #1
100005684:	06 00 00 14	b	0x10000569c
100005688:	68 3b 43 b9	ldr	w8, [x27, #824]
10000568c:	08 51 18 9b	madd	x8, x8, x24, x20
100005690:	08 15 40 b9	ldr	w8, [x8, #20]
100005694:	1f 01 00 71	cmp	w8, #0
100005698:	e8 07 9f 1a	cset	w8, ne
10000569c:	88 f3 0c 39	strb	w8, [x28, #828]
1000056a0:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
1000056a4:	09 f5 4c 39	ldrb	w9, [x8, #829]
1000056a8:	68 3b 43 b9	ldr	w8, [x27, #824]
1000056ac:	69 00 00 34	cbz	w9, 0x1000056b8
1000056b0:	29 00 80 52	mov	w9, #1
1000056b4:	05 00 00 14	b	0x1000056c8
1000056b8:	09 51 18 9b	madd	x9, x8, x24, x20
1000056bc:	29 19 40 b9	ldr	w9, [x9, #24]
1000056c0:	3f 01 00 71	cmp	w9, #0
1000056c4:	e9 07 9f 1a	cset	w9, ne
1000056c8:	aa 00 00 f0	adrp	x10, 23 ; 0x10001c000
1000056cc:	49 f5 0c 39	strb	w9, [x10, #829]
1000056d0:	08 05 00 11	add	w8, w8, #1
1000056d4:	68 3b 03 b9	str	w8, [x27, #824]
1000056d8:	d6 06 00 11	add	w22, w22, #1
1000056dc:	df 12 00 71	cmp	w22, #4
1000056e0:	41 f6 ff 54	b.ne	0x1000055a8
1000056e4:	68 3b 43 b9	ldr	w8, [x27, #824]
1000056e8:	c8 15 00 34	cbz	w8, 0x1000059a0
1000056ec:	1a 00 80 d2	mov	x26, #0
1000056f0:	73 64 0b 10	adr	x19, #93324
1000056f4:	1f 20 03 d5	nop
1000056f8:	37 c8 89 52	mov	w23, #20033
1000056fc:	b7 08 a0 72	movk	w23, #69, lsl #16
100005700:	f8 23 02 91	add	x24, sp, #136
100005704:	f9 43 02 91	add	x25, sp, #144
100005708:	34 3e 07 70	adr	x20, #59335 ; literal pool for: "%s%s"
10000570c:	1f 20 03 d5	nop
100005710:	35 3e 07 10	adr	x21, #59332 ; literal pool for: "%sANE%u"
100005714:	1f 20 03 d5	nop
100005718:	96 3d 07 30	adr	x22, #59313 ; literal pool for: "ANE%u"
10000571c:	1f 20 03 d5	nop
100005720:	ff 4b 00 f9	str	xzr, [sp, #144]
100005724:	88 f3 4c 39	ldrb	w8, [x28, #828]
100005728:	08 01 00 34	cbz	w8, 0x100005748
10000572c:	68 82 5e b8	ldur	w8, [x19, #-24]
100005730:	e8 03 00 f9	str	x8, [sp]
100005734:	e0 43 02 91	add	x0, sp, #144
100005738:	01 01 80 52	mov	w1, #8
10000573c:	22 3c 07 30	adr	x2, #59269 ; literal pool for: "DIE_%u_"
100005740:	1f 20 03 d5	nop
100005744:	2f 32 00 94	bl	0x100012000 ; symbol stub for: _snprintf
100005748:	ff 1b 01 79	strh	wzr, [sp, #140]
10000574c:	f7 8b 00 b9	str	w23, [sp, #136]
100005750:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
100005754:	08 f5 4c 39	ldrb	w8, [x8, #829]
100005758:	e8 00 00 34	cbz	w8, 0x100005774
10000575c:	68 c2 5e b8	ldur	w8, [x19, #-20]
100005760:	e8 03 00 f9	str	x8, [sp]
100005764:	e0 23 02 91	add	x0, sp, #136
100005768:	c1 00 80 52	mov	w1, #6
10000576c:	e2 03 16 aa	mov	x2, x22
100005770:	24 32 00 94	bl	0x100012000 ; symbol stub for: _snprintf
100005774:	60 42 00 d1	sub	x0, x19, #16
100005778:	f9 63 00 a9	stp	x25, x24, [sp]
10000577c:	01 02 80 52	mov	w1, #16
100005780:	e2 03 14 aa	mov	x2, x20
100005784:	1f 32 00 94	bl	0x100012000 ; symbol stub for: _snprintf
100005788:	68 c2 5e b8	ldur	w8, [x19, #-20]
10000578c:	f9 23 00 a9	stp	x25, x8, [sp]
100005790:	e0 03 13 aa	mov	x0, x19
100005794:	01 02 80 52	mov	w1, #16
100005798:	e2 03 15 aa	mov	x2, x21
10000579c:	19 32 00 94	bl	0x100012000 ; symbol stub for: _snprintf
1000057a0:	88 f3 4c 39	ldrb	w8, [x28, #828]
1000057a4:	60 42 00 91	add	x0, x19, #16
1000057a8:	e8 00 00 34	cbz	w8, 0x1000057c4
1000057ac:	69 22 7d 29	ldp	w9, w8, [x19, #-24]
1000057b0:	e8 27 00 a9	stp	x8, x9, [sp]
1000057b4:	01 02 80 52	mov	w1, #16
1000057b8:	22 39 07 10	adr	x2, #59172 ; literal pool for: "ANE%u_%u"
1000057bc:	1f 20 03 d5	nop
1000057c0:	04 00 00 14	b	0x1000057d0
1000057c4:	fa 03 00 f9	str	x26, [sp]
1000057c8:	01 02 80 52	mov	w1, #16
1000057cc:	e2 03 16 aa	mov	x2, x22
1000057d0:	0c 32 00 94	bl	0x100012000 ; symbol stub for: _snprintf
1000057d4:	5a 07 00 91	add	x26, x26, #1
1000057d8:	68 3b 43 b9	ldr	w8, [x27, #824]
1000057dc:	73 42 02 91	add	x19, x19, #144
1000057e0:	5f 03 08 eb	cmp	x26, x8
1000057e4:	e3 f9 ff 54	b.lo	0x100005720
1000057e8:	00 e7 09 10	adr	x0, #81120 ; Objc cfstring ref: @"SoC Stats"
1000057ec:	1f 20 03 d5	nop
1000057f0:	c1 e7 09 10	adr	x1, #81144 ; Objc cfstring ref: @"Performance States"
1000057f4:	1f 20 03 d5	nop
1000057f8:	c2 6c 0b 10	adr	x2, #93592
1000057fc:	1f 20 03 d5	nop
100005800:	c3 6c 0b 10	adr	x3, #93592
100005804:	1f 20 03 d5	nop
100005808:	f1 26 00 94	bl	0x10000f3cc
10000580c:	a0 0c 00 36	tbz	w0, #0, 0x1000059a0
100005810:	c0 e5 09 10	adr	x0, #81080 ; Objc cfstring ref: @"SoC Stats"
100005814:	1f 20 03 d5	nop
100005818:	81 e7 09 10	adr	x1, #81136 ; Objc cfstring ref: @"Cluster Power States"
10000581c:	1f 20 03 d5	nop
100005820:	02 6c 0b 10	adr	x2, #93568
100005824:	1f 20 03 d5	nop
100005828:	03 6c 0b 10	adr	x3, #93568
10000582c:	1f 20 03 d5	nop
100005830:	e7 26 00 94	bl	0x10000f3cc
100005834:	60 0b 00 34	cbz	w0, 0x1000059a0
100005838:	80 e1 09 10	adr	x0, #80944 ; Objc cfstring ref: @"Energy Model"
10000583c:	1f 20 03 d5	nop
100005840:	82 6b 0b 10	adr	x2, #93552
100005844:	1f 20 03 d5	nop
100005848:	83 6b 0b 10	adr	x3, #93552
10000584c:	1f 20 03 d5	nop
100005850:	01 00 80 d2	mov	x1, #0
100005854:	de 26 00 94	bl	0x10000f3cc
100005858:	b4 00 00 f0	adrp	x20, 23 ; 0x10001c000
10000585c:	80 c2 05 b9	str	w0, [x20, #1472]
100005860:	f3 43 02 91	add	x19, sp, #144
100005864:	ff 4f 09 a9	stp	xzr, x19, [sp, #144]
100005868:	1f 20 03 d5	nop
10000586c:	a0 49 06 5c	ldr	d0, 0x1000121a0
100005870:	e0 53 00 fd	str	d0, [sp, #160]
100005874:	ff ab 00 b9	str	wzr, [sp, #168]
100005878:	1f 20 03 d5	nop
10000587c:	e0 68 0b 58	ldr	x0, #93468
100005880:	e8 83 01 91	add	x8, sp, #96
100005884:	1f 20 03 d5	nop
100005888:	50 5e 09 58	ldr	x16, #76744 ; literal pool symbol address: __NSConcreteStackBlock
10000588c:	f1 03 08 aa	mov	x17, x8
100005890:	31 5c ed f2	movk	x17, #27361, lsl #48
100005894:	30 0a c1 da	pacda	x16, x17
100005898:	f0 33 00 f9	str	x16, [sp, #96]
10000589c:	1f 20 03 d5	nop
1000058a0:	48 48 06 5c	ldr	d8, 0x1000121a8
1000058a4:	e8 37 00 fd	str	d8, [sp, #104]
1000058a8:	08 41 00 91	add	x8, x8, #16
1000058ac:	d0 40 00 10	adr	x16, #2072
1000058b0:	1f 20 03 d5	nop
1000058b4:	10 01 c1 da	pacia	x16, x8
1000058b8:	08 75 09 10	adr	x8, #77472
1000058bc:	1f 20 03 d5	nop
1000058c0:	f0 23 07 a9	stp	x16, x8, [sp, #112]
1000058c4:	f3 43 00 f9	str	x19, [sp, #128]
1000058c8:	e1 83 01 91	add	x1, sp, #96
1000058cc:	91 30 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
1000058d0:	e8 4f 40 f9	ldr	x8, [sp, #152]
1000058d4:	1f 19 00 b9	str	wzr, [x8, #24]
1000058d8:	1f 20 03 d5	nop
1000058dc:	60 66 0b 58	ldr	x0, #93388
1000058e0:	e8 e3 00 91	add	x8, sp, #56
1000058e4:	1f 20 03 d5	nop
1000058e8:	50 5b 09 58	ldr	x16, #76648 ; literal pool symbol address: __NSConcreteStackBlock
1000058ec:	f1 03 08 aa	mov	x17, x8
1000058f0:	31 5c ed f2	movk	x17, #27361, lsl #48
1000058f4:	30 0a c1 da	pacda	x16, x17
1000058f8:	f0 1f 00 f9	str	x16, [sp, #56]
1000058fc:	e8 23 00 fd	str	d8, [sp, #64]
100005900:	08 41 00 91	add	x8, x8, #16
100005904:	b0 47 00 10	adr	x16, #2292
100005908:	1f 20 03 d5	nop
10000590c:	10 01 c1 da	pacia	x16, x8
100005910:	c8 73 09 10	adr	x8, #77432
100005914:	1f 20 03 d5	nop
100005918:	f0 a3 04 a9	stp	x16, x8, [sp, #72]
10000591c:	f3 2f 00 f9	str	x19, [sp, #88]
100005920:	e1 e3 00 91	add	x1, sp, #56
100005924:	7b 30 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
100005928:	88 c2 45 b9	ldr	w8, [x20, #1472]
10000592c:	e8 02 00 34	cbz	w8, 0x100005988
100005930:	e8 4f 40 f9	ldr	x8, [sp, #152]
100005934:	1f 19 00 b9	str	wzr, [x8, #24]
100005938:	1f 20 03 d5	nop
10000593c:	e0 63 0b 58	ldr	x0, #93308
100005940:	e8 43 00 91	add	x8, sp, #16
100005944:	1f 20 03 d5	nop
100005948:	50 58 09 58	ldr	x16, #76552 ; literal pool symbol address: __NSConcreteStackBlock
10000594c:	f1 03 08 aa	mov	x17, x8
100005950:	31 5c ed f2	movk	x17, #27361, lsl #48
100005954:	30 0a c1 da	pacda	x16, x17
100005958:	f0 0b 00 f9	str	x16, [sp, #16]
10000595c:	e8 0f 00 fd	str	d8, [sp, #24]
100005960:	08 41 00 91	add	x8, x8, #16
100005964:	70 4d 00 10	adr	x16, #2476
100005968:	1f 20 03 d5	nop
10000596c:	10 01 c1 da	pacia	x16, x8
100005970:	48 72 09 10	adr	x8, #77384
100005974:	1f 20 03 d5	nop
100005978:	f0 23 02 a9	stp	x16, x8, [sp, #32]
10000597c:	f3 1b 00 f9	str	x19, [sp, #48]
100005980:	e1 43 00 91	add	x1, sp, #16
100005984:	63 30 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
100005988:	28 00 80 52	mov	w8, #1
10000598c:	a9 00 00 f0	adrp	x9, 23 ; 0x10001c000
100005990:	28 11 17 39	strb	w8, [x9, #1476]
100005994:	e0 43 02 91	add	x0, sp, #144
100005998:	01 01 80 52	mov	w1, #8
10000599c:	89 30 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
1000059a0:	a8 03 59 f8	ldur	x8, [x29, #-112]
1000059a4:	1f 20 03 d5	nop
1000059a8:	89 55 09 58	ldr	x9, #76464 ; literal pool symbol address: ___stack_chk_guard
1000059ac:	29 01 40 f9	ldr	x9, [x9]
1000059b0:	3f 01 08 eb	cmp	x9, x8
1000059b4:	61 01 00 54	b.ne	0x1000059e0
1000059b8:	fd 7b 58 a9	ldp	x29, x30, [sp, #384]
1000059bc:	f4 4f 57 a9	ldp	x20, x19, [sp, #368]
1000059c0:	f6 57 56 a9	ldp	x22, x21, [sp, #352]
1000059c4:	f8 5f 55 a9	ldp	x24, x23, [sp, #336]
1000059c8:	fa 67 54 a9	ldp	x26, x25, [sp, #320]
1000059cc:	fc 6f 53 a9	ldp	x28, x27, [sp, #304]
1000059d0:	e9 23 52 6d	ldp	d9, d8, [sp, #288]
1000059d4:	ff 43 06 91	add	sp, sp, #400
1000059d8:	ff 0f 5f d6	retab
1000059dc:	fa 2d 00 94	bl	0x1000111c4
1000059e0:	88 30 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
1000059e4:	7f 23 03 d5	pacibsp
1000059e8:	ff c3 02 d1	sub	sp, sp, #176
1000059ec:	eb 2b 03 6d	stp	d11, d10, [sp, #48]
1000059f0:	e9 23 04 6d	stp	d9, d8, [sp, #64]
1000059f4:	fc 6f 05 a9	stp	x28, x27, [sp, #80]
1000059f8:	fa 67 06 a9	stp	x26, x25, [sp, #96]
1000059fc:	f8 5f 07 a9	stp	x24, x23, [sp, #112]
100005a00:	f6 57 08 a9	stp	x22, x21, [sp, #128]
100005a04:	f4 4f 09 a9	stp	x20, x19, [sp, #144]
100005a08:	fd 7b 0a a9	stp	x29, x30, [sp, #160]
100005a0c:	fd 83 02 91	add	x29, sp, #160
100005a10:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
100005a14:	08 11 57 39	ldrb	w8, [x8, #1476]
100005a18:	1f 05 00 71	cmp	w8, #1
100005a1c:	a1 21 00 54	b.ne	0x100005e50
100005a20:	97 35 0b 10	adr	x23, #91824
100005a24:	1f 20 03 d5	nop
100005a28:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005a2c:	f5 32 0b 10	adr	x21, #91740
100005a30:	1f 20 03 d5	nop
100005a34:	c8 00 00 34	cbz	w8, 0x100005a4c
100005a38:	1f 05 00 71	cmp	w8, #1
100005a3c:	01 01 00 54	b.ne	0x100005a5c
100005a40:	00 2b 07 30	adr	x0, #58721 ; literal pool for: "<key>ane</key>\n<array>\n"
100005a44:	1f 20 03 d5	nop
100005a48:	03 00 00 14	b	0x100005a54
100005a4c:	e0 29 07 50	adr	x0, #58686 ; literal pool for: "\n**** ANE usage ****\n\n"
100005a50:	1f 20 03 d5	nop
100005a54:	a1 22 40 f9	ldr	x1, [x21, #64]
100005a58:	aa 30 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100005a5c:	1f 20 03 d5	nop
100005a60:	c8 46 0b 18	ldr	w8, 0x10001c338
100005a64:	a8 1d 00 34	cbz	w8, 0x100005e18
100005a68:	1a 00 80 d2	mov	x26, #0
100005a6c:	08 e4 00 2f	movi	d8, #0000000000000000
100005a70:	1f 20 03 d5	nop
100005a74:	e9 38 06 5c	ldr	d9, 0x100012190
100005a78:	c8 46 0b 10	adr	x8, #92376
100005a7c:	1f 20 03 d5	nop
100005a80:	09 12 80 52	mov	w9, #144
100005a84:	5c 23 09 9b	madd	x28, x26, x9, x8
100005a88:	fb 03 1c aa	mov	x27, x28
100005a8c:	60 8f 46 f8	ldr	x0, [x27, #104]!
100005a90:	88 03 40 f9	ldr	x8, [x28]
100005a94:	01 01 40 f9	ldr	x1, [x8]
100005a98:	02 09 40 b9	ldr	w2, [x8, #8]
100005a9c:	3f 27 00 94	bl	0x10000f798
100005aa0:	f3 03 1c aa	mov	x19, x28
100005aa4:	60 8e 00 fc	str	d0, [x19, #8]!
100005aa8:	98 5b 47 a9	ldp	x24, x22, [x28, #112]
100005aac:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005ab0:	1f 05 00 71	cmp	w8, #1
100005ab4:	c0 02 00 54	b.eq	0x100005b0c
100005ab8:	c8 06 00 35	cbnz	w8, 0x100005b90
100005abc:	a0 22 40 f9	ldr	x0, [x21, #64]
100005ac0:	88 44 0b 10	adr	x8, #92304
100005ac4:	1f 20 03 d5	nop
100005ac8:	09 12 80 52	mov	w9, #144
100005acc:	53 23 09 9b	madd	x19, x26, x9, x8
100005ad0:	68 12 40 b9	ldr	w8, [x19, #16]
100005ad4:	e0 07 00 fd	str	d0, [sp, #8]
100005ad8:	e8 03 00 f9	str	x8, [sp]
100005adc:	e1 26 07 30	adr	x1, #58589 ; literal pool for: "ANE %u SW frequency: %0.0f MHz\n"
100005ae0:	1f 20 03 d5	nop
100005ae4:	7f 30 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005ae8:	56 04 00 b4	cbz	x22, 0x100005b70
100005aec:	c0 02 63 9e	ucvtf	d0, x22
100005af0:	c8 02 18 8b	add	x8, x22, x24
100005af4:	01 01 63 9e	ucvtf	d1, x8
100005af8:	00 18 61 1e	fdiv	d0, d0, d1
100005afc:	28 0b e8 d2	mov	x8, #4636737291354636288
100005b00:	01 01 67 9e	fmov	d1, x8
100005b04:	00 08 61 1e	fmul	d0, d0, d1
100005b08:	1b 00 00 14	b	0x100005b74
100005b0c:	a1 22 40 f9	ldr	x1, [x21, #64]
100005b10:	60 27 07 70	adr	x0, #58607 ; literal pool for: "<dict>\n"
100005b14:	1f 20 03 d5	nop
100005b18:	7a 30 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100005b1c:	a0 22 40 f9	ldr	x0, [x21, #64]
100005b20:	88 41 0b 10	adr	x8, #92208
100005b24:	1f 20 03 d5	nop
100005b28:	09 12 80 52	mov	w9, #144
100005b2c:	48 23 09 9b	madd	x8, x26, x9, x8
100005b30:	60 02 40 fd	ldr	d0, [x19]
100005b34:	09 29 42 29	ldp	w9, w10, [x8, #16]
100005b38:	08 19 40 b9	ldr	w8, [x8, #24]
100005b3c:	e0 0f 00 fd	str	d0, [sp, #24]
100005b40:	ea a3 00 a9	stp	x10, x8, [sp, #8]
100005b44:	e9 03 00 f9	str	x9, [sp]
100005b48:	e1 25 07 70	adr	x1, #58559 ; literal pool for: "<key>ane-id</key><integer>%u</integer>\n<key>die-id</key><integer>%u</integer>\n<key>die-ane-id</key><integer>%u</integer>\n<key>hw_resid_counters</key><false/>\n<key>freq_hz</key><real>%g</real>\n"
100005b4c:	1f 20 03 d5	nop
100005b50:	64 30 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005b54:	a3 22 40 f9	ldr	x3, [x21, #64]
100005b58:	a0 e1 06 10	adr	x0, #56372 ; literal pool for: "<key>dvfm_states</key>\n<array>\n"
100005b5c:	1f 20 03 d5	nop
100005b60:	e1 03 80 52	mov	w1, #31
100005b64:	22 00 80 52	mov	w2, #1
100005b68:	6e 30 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100005b6c:	09 00 00 14	b	0x100005b90
100005b70:	00 e4 00 2f	movi	d0, #0000000000000000
100005b74:	a0 22 40 f9	ldr	x0, [x21, #64]
100005b78:	68 12 40 b9	ldr	w8, [x19, #16]
100005b7c:	e0 07 00 fd	str	d0, [sp, #8]
100005b80:	e8 03 00 f9	str	x8, [sp]
100005b84:	a1 22 07 30	adr	x1, #58453 ; literal pool for: "ANE %u SW active residency: %6.2f%% ("
100005b88:	1f 20 03 d5	nop
100005b8c:	55 30 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005b90:	88 03 40 f9	ldr	x8, [x28]
100005b94:	09 09 40 b9	ldr	w9, [x8, #8]
100005b98:	c9 07 00 34	cbz	w9, 0x100005c90
100005b9c:	13 00 80 d2	mov	x19, #0
100005ba0:	89 3d 0b 10	adr	x9, #92080
100005ba4:	1f 20 03 d5	nop
100005ba8:	0a 12 80 52	mov	w10, #144
100005bac:	49 27 0a 9b	madd	x9, x26, x10, x9
100005bb0:	39 01 02 91	add	x25, x9, #128
100005bb4:	e9 2a 40 b9	ldr	w9, [x23, #40]
100005bb8:	3f 05 00 71	cmp	w9, #1
100005bbc:	60 03 00 54	b.eq	0x100005c28
100005bc0:	e9 05 00 35	cbnz	w9, 0x100005c7c
100005bc4:	08 01 40 f9	ldr	x8, [x8]
100005bc8:	0a 79 73 fc	ldr	d10, [x8, x19, lsl #3]
100005bcc:	b4 22 40 f9	ldr	x20, [x21, #64]
100005bd0:	68 03 40 f9	ldr	x8, [x27]
100005bd4:	08 79 73 f8	ldr	x8, [x8, x19, lsl #3]
100005bd8:	89 0c 80 52	mov	w9, #100
100005bdc:	01 7d 09 9b	mul	x1, x8, x9
100005be0:	22 03 40 f9	ldr	x2, [x25]
100005be4:	e0 b3 00 91	add	x0, sp, #44
100005be8:	ca 25 00 94	bl	0x10000f310
100005bec:	88 03 40 f9	ldr	x8, [x28]
100005bf0:	08 09 40 b9	ldr	w8, [x8, #8]
100005bf4:	08 05 00 51	sub	w8, w8, #1
100005bf8:	7f 02 08 eb	cmp	x19, x8
100005bfc:	08 de 06 50	adr	x8, #56258 ; literal pool for: " "
100005c00:	1f 20 03 d5	nop
100005c04:	e9 dd 06 10	adr	x9, #56252 ; literal pool for: ")\n"
100005c08:	1f 20 03 d5	nop
100005c0c:	28 01 88 9a	csel	x8, x9, x8, eq
100005c10:	ea 03 00 fd	str	d10, [sp]
100005c14:	e0 a3 00 a9	stp	x0, x8, [sp, #8]
100005c18:	e0 03 14 aa	mov	x0, x20
100005c1c:	81 dc 06 10	adr	x1, #56208 ; literal pool for: "%0.0f MHz: %s%%%s"
100005c20:	1f 20 03 d5	nop
100005c24:	15 00 00 14	b	0x100005c78
100005c28:	69 03 40 f9	ldr	x9, [x27]
100005c2c:	20 79 73 fc	ldr	d0, [x9, x19, lsl #3]
100005c30:	00 d8 61 7e	ucvtf	d0, d0
100005c34:	29 03 40 f9	ldr	x9, [x25]
100005c38:	89 00 00 b4	cbz	x9, 0x100005c48
100005c3c:	21 01 63 9e	ucvtf	d1, x9
100005c40:	01 18 61 1e	fdiv	d1, d0, d1
100005c44:	02 00 00 14	b	0x100005c4c
100005c48:	01 e4 00 2f	movi	d1, #0000000000000000
100005c4c:	a0 22 40 f9	ldr	x0, [x21, #64]
100005c50:	08 01 40 f9	ldr	x8, [x8]
100005c54:	02 79 73 fc	ldr	d2, [x8, x19, lsl #3]
100005c58:	a3 06 40 fd	ldr	d3, [x21, #8]
100005c5c:	60 08 60 1e	fmul	d0, d3, d0
100005c60:	08 00 79 9e	fcvtzu	x8, d0
100005c64:	e1 0b 00 fd	str	d1, [sp, #16]
100005c68:	e8 07 00 f9	str	x8, [sp, #8]
100005c6c:	e2 03 00 fd	str	d2, [sp]
100005c70:	81 da 06 70	adr	x1, #56147 ; literal pool for: "<dict>\n<key>freq</key><integer>%0.0f</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
100005c74:	1f 20 03 d5	nop
100005c78:	1a 30 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005c7c:	73 06 00 91	add	x19, x19, #1
100005c80:	88 03 40 f9	ldr	x8, [x28]
100005c84:	09 09 40 b9	ldr	w9, [x8, #8]
100005c88:	7f 02 09 eb	cmp	x19, x9
100005c8c:	43 f9 ff 54	b.lo	0x100005bb4
100005c90:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005c94:	1f 05 00 71	cmp	w8, #1
100005c98:	c1 00 00 54	b.ne	0x100005cb0
100005c9c:	a1 22 40 f9	ldr	x1, [x21, #64]
100005ca0:	40 dd 06 50	adr	x0, #56234 ; literal pool for: "</array>\n"
100005ca4:	1f 20 03 d5	nop
100005ca8:	16 30 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100005cac:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005cb0:	1f 05 00 71	cmp	w8, #1
100005cb4:	60 01 00 54	b.eq	0x100005ce0
100005cb8:	a8 04 00 35	cbnz	w8, 0x100005d4c
100005cbc:	18 03 00 b4	cbz	x24, 0x100005d1c
100005cc0:	00 03 63 9e	ucvtf	d0, x24
100005cc4:	c8 02 18 8b	add	x8, x22, x24
100005cc8:	01 01 63 9e	ucvtf	d1, x8
100005ccc:	00 18 61 1e	fdiv	d0, d0, d1
100005cd0:	28 0b e8 d2	mov	x8, #4636737291354636288
100005cd4:	01 01 67 9e	fmov	d1, x8
100005cd8:	00 08 61 1e	fmul	d0, d0, d1
100005cdc:	11 00 00 14	b	0x100005d20
100005ce0:	a0 22 40 f9	ldr	x0, [x21, #64]
100005ce4:	00 03 63 9e	ucvtf	d0, x24
100005ce8:	a1 06 40 fd	ldr	d1, [x21, #8]
100005cec:	21 08 60 1e	fmul	d1, d1, d0
100005cf0:	28 00 79 9e	fcvtzu	x8, d1
100005cf4:	c9 02 18 8b	add	x9, x22, x24
100005cf8:	21 01 63 9e	ucvtf	d1, x9
100005cfc:	00 18 61 1e	fdiv	d0, d0, d1
100005d00:	1f 03 00 f1	cmp	x24, #0
100005d04:	00 0d 60 1e	fcsel	d0, d8, d0, eq
100005d08:	e0 07 00 fd	str	d0, [sp, #8]
100005d0c:	e8 03 00 f9	str	x8, [sp]
100005d10:	e1 dc 06 70	adr	x1, #56223 ; literal pool for: "<key>idle_ns</key><integer>%llu</integer>\n<key>idle_ratio</key><real>%g</real>\n"
100005d14:	1f 20 03 d5	nop
100005d18:	0c 00 00 14	b	0x100005d48
100005d1c:	00 e4 00 2f	movi	d0, #0000000000000000
100005d20:	a0 22 40 f9	ldr	x0, [x21, #64]
100005d24:	68 31 0b 10	adr	x8, #91692
100005d28:	1f 20 03 d5	nop
100005d2c:	09 12 80 52	mov	w9, #144
100005d30:	48 23 09 9b	madd	x8, x26, x9, x8
100005d34:	08 11 40 b9	ldr	w8, [x8, #16]
100005d38:	e0 07 00 fd	str	d0, [sp, #8]
100005d3c:	e8 03 00 f9	str	x8, [sp]
100005d40:	41 1c 07 10	adr	x1, #58248 ; literal pool for: "ANE %u idle residency: %6.2f%%\n"
100005d44:	1f 20 03 d5	nop
100005d48:	e6 2f 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005d4c:	1f 20 03 d5	nop
100005d50:	88 43 0b 18	ldr	w8, 0x10001c5c0
100005d54:	68 04 00 34	cbz	w8, 0x100005de0
100005d58:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005d5c:	1f 05 00 71	cmp	w8, #1
100005d60:	c0 02 00 54	b.eq	0x100005db8
100005d64:	08 05 00 35	cbnz	w8, 0x100005e04
100005d68:	a0 22 40 f9	ldr	x0, [x21, #64]
100005d6c:	28 2f 0b 10	adr	x8, #91620
100005d70:	1f 20 03 d5	nop
100005d74:	09 12 80 52	mov	w9, #144
100005d78:	48 23 09 9b	madd	x8, x26, x9, x8
100005d7c:	00 45 40 fd	ldr	d0, [x8, #136]
100005d80:	00 d8 61 7e	ucvtf	d0, d0
100005d84:	1f 20 03 d5	nop
100005d88:	01 42 0b 5c	ldr	d1, 0x10001c5c8
100005d8c:	21 d8 61 7e	ucvtf	d1, d1
100005d90:	a2 06 40 fd	ldr	d2, [x21, #8]
100005d94:	41 08 61 1e	fmul	d1, d2, d1
100005d98:	21 18 69 1e	fdiv	d1, d1, d9
100005d9c:	00 18 61 1e	fdiv	d0, d0, d1
100005da0:	08 11 40 b9	ldr	w8, [x8, #16]
100005da4:	e0 07 00 fd	str	d0, [sp, #8]
100005da8:	e8 03 00 f9	str	x8, [sp]
100005dac:	e1 19 07 10	adr	x1, #58172 ; literal pool for: "ANE %u Power: %0.0f mW\n"
100005db0:	1f 20 03 d5	nop
100005db4:	0a 00 00 14	b	0x100005ddc
100005db8:	a0 22 40 f9	ldr	x0, [x21, #64]
100005dbc:	a8 2c 0b 10	adr	x8, #91540
100005dc0:	1f 20 03 d5	nop
100005dc4:	09 12 80 52	mov	w9, #144
100005dc8:	48 23 09 9b	madd	x8, x26, x9, x8
100005dcc:	08 45 40 f9	ldr	x8, [x8, #136]
100005dd0:	e8 03 00 f9	str	x8, [sp]
100005dd4:	61 19 07 10	adr	x1, #58156 ; literal pool for: "<key>ane_energy</key><integer>%llu</integer>\n"
100005dd8:	1f 20 03 d5	nop
100005ddc:	c1 2f 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100005de0:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005de4:	1f 05 00 71	cmp	w8, #1
100005de8:	e1 00 00 54	b.ne	0x100005e04
100005dec:	a3 22 40 f9	ldr	x3, [x21, #64]
100005df0:	80 da 06 50	adr	x0, #56146 ; literal pool for: "</dict>\n"
100005df4:	1f 20 03 d5	nop
100005df8:	01 01 80 52	mov	w1, #8
100005dfc:	22 00 80 52	mov	w2, #1
100005e00:	c8 2f 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100005e04:	5a 07 00 91	add	x26, x26, #1
100005e08:	1f 20 03 d5	nop
100005e0c:	68 29 0b 18	ldr	w8, 0x10001c338
100005e10:	5f 03 08 eb	cmp	x26, x8
100005e14:	23 e3 ff 54	b.lo	0x100005a78
100005e18:	e8 2a 40 b9	ldr	w8, [x23, #40]
100005e1c:	48 01 00 34	cbz	w8, 0x100005e44
100005e20:	1f 05 00 71	cmp	w8, #1
100005e24:	61 01 00 54	b.ne	0x100005e50
100005e28:	a3 22 40 f9	ldr	x3, [x21, #64]
100005e2c:	e0 d0 06 50	adr	x0, #55838 ; literal pool for: "</array>\n"
100005e30:	1f 20 03 d5	nop
100005e34:	21 01 80 52	mov	w1, #9
100005e38:	22 00 80 52	mov	w2, #1
100005e3c:	b9 2f 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100005e40:	04 00 00 14	b	0x100005e50
100005e44:	a1 22 40 f9	ldr	x1, [x21, #64]
100005e48:	40 01 80 52	mov	w0, #10
100005e4c:	a9 2f 00 94	bl	0x100011cf0 ; symbol stub for: _fputc
100005e50:	fd 7b 4a a9	ldp	x29, x30, [sp, #160]
100005e54:	f4 4f 49 a9	ldp	x20, x19, [sp, #144]
100005e58:	f6 57 48 a9	ldp	x22, x21, [sp, #128]
100005e5c:	f8 5f 47 a9	ldp	x24, x23, [sp, #112]
100005e60:	fa 67 46 a9	ldp	x26, x25, [sp, #96]
100005e64:	fc 6f 45 a9	ldp	x28, x27, [sp, #80]
100005e68:	e9 23 44 6d	ldp	d9, d8, [sp, #64]
100005e6c:	eb 2b 43 6d	ldp	d11, d10, [sp, #48]
100005e70:	ff c3 02 91	add	sp, sp, #176
100005e74:	ff 0f 5f d6	retab
100005e78:	7f 23 03 d5	pacibsp
100005e7c:	ff 43 03 d1	sub	sp, sp, #208
100005e80:	e9 23 0a 6d	stp	d9, d8, [sp, #160]
100005e84:	f4 4f 0b a9	stp	x20, x19, [sp, #176]
100005e88:	fd 7b 0c a9	stp	x29, x30, [sp, #192]
100005e8c:	fd 03 03 91	add	x29, sp, #192
100005e90:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
100005e94:	08 11 57 39	ldrb	w8, [x8, #1476]
100005e98:	1f 05 00 71	cmp	w8, #1
100005e9c:	a1 10 00 54	b.ne	0x1000060b0
100005ea0:	48 0f 0b 10	adr	x8, #90600
100005ea4:	1f 20 03 d5	nop
100005ea8:	09 01 40 39	ldrb	w9, [x8]
100005eac:	69 00 00 34	cbz	w9, 0x100005eb8
100005eb0:	c0 2f 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100005eb4:	06 00 00 14	b	0x100005ecc
100005eb8:	09 09 40 39	ldrb	w9, [x8, #2]
100005ebc:	69 00 00 34	cbz	w9, 0x100005ec8
100005ec0:	00 15 40 f9	ldr	x0, [x8, #40]
100005ec4:	02 00 00 14	b	0x100005ecc
100005ec8:	00 11 40 f9	ldr	x0, [x8, #32]
100005ecc:	a8 00 00 f0	adrp	x8, 23 ; 0x10001c000
100005ed0:	00 e5 02 f9	str	x0, [x8, #1480]
100005ed4:	1f 20 03 d5	nop
100005ed8:	c4 35 0b 58	ldr	x4, #91832
100005edc:	1f 20 03 d5	nop
100005ee0:	c5 35 0b 58	ldr	x5, #91832
100005ee4:	60 37 0b 10	adr	x0, #91884
100005ee8:	1f 20 03 d5	nop
100005eec:	61 37 0b 10	adr	x1, #91884
100005ef0:	1f 20 03 d5	nop
100005ef4:	62 37 0b 10	adr	x2, #91884
100005ef8:	1f 20 03 d5	nop
100005efc:	63 37 0b 10	adr	x3, #91884
100005f00:	1f 20 03 d5	nop
100005f04:	5a 25 00 94	bl	0x10000f46c
100005f08:	1f 20 03 d5	nop
100005f0c:	a4 34 0b 58	ldr	x4, #91796
100005f10:	1f 20 03 d5	nop
100005f14:	a5 34 0b 58	ldr	x5, #91796
100005f18:	c0 36 0b 10	adr	x0, #91864
100005f1c:	1f 20 03 d5	nop
100005f20:	c1 36 0b 10	adr	x1, #91864
100005f24:	1f 20 03 d5	nop
100005f28:	c2 36 0b 10	adr	x2, #91864
100005f2c:	1f 20 03 d5	nop
100005f30:	c3 36 0b 10	adr	x3, #91864
100005f34:	1f 20 03 d5	nop
100005f38:	4d 25 00 94	bl	0x10000f46c
100005f3c:	b3 00 00 f0	adrp	x19, 23 ; 0x10001c000
100005f40:	68 c2 45 b9	ldr	w8, [x19, #1472]
100005f44:	c8 01 00 34	cbz	w8, 0x100005f7c
100005f48:	1f 20 03 d5	nop
100005f4c:	24 33 0b 58	ldr	x4, #91748
100005f50:	1f 20 03 d5	nop
100005f54:	25 33 0b 58	ldr	x5, #91748
100005f58:	c0 35 0b 10	adr	x0, #91832
100005f5c:	1f 20 03 d5	nop
100005f60:	c1 35 0b 10	adr	x1, #91832
100005f64:	1f 20 03 d5	nop
100005f68:	c2 35 0b 10	adr	x2, #91832
100005f6c:	1f 20 03 d5	nop
100005f70:	c3 35 0b 10	adr	x3, #91832
100005f74:	1f 20 03 d5	nop
100005f78:	3d 25 00 94	bl	0x10000f46c
100005f7c:	b4 03 01 d1	sub	x20, x29, #64
100005f80:	bf 53 3c a9	stp	xzr, x20, [x29, #-64]
100005f84:	1f 20 03 d5	nop
100005f88:	c0 10 06 5c	ldr	d0, 0x1000121a0
100005f8c:	a0 03 1d fc	stur	d0, [x29, #-48]
100005f90:	bf 83 1d b8	stur	wzr, [x29, #-40]
100005f94:	1f 20 03 d5	nop
100005f98:	80 32 0b 58	ldr	x0, #91728
100005f9c:	e8 63 01 91	add	x8, sp, #88
100005fa0:	1f 20 03 d5	nop
100005fa4:	70 25 09 58	ldr	x16, #74924 ; literal pool symbol address: __NSConcreteStackBlock
100005fa8:	f1 03 08 aa	mov	x17, x8
100005fac:	31 5c ed f2	movk	x17, #27361, lsl #48
100005fb0:	30 0a c1 da	pacda	x16, x17
100005fb4:	f0 2f 00 f9	str	x16, [sp, #88]
100005fb8:	1f 20 03 d5	nop
100005fbc:	68 0f 06 5c	ldr	d8, 0x1000121a8
100005fc0:	e8 33 00 fd	str	d8, [sp, #96]
100005fc4:	08 41 00 91	add	x8, x8, #16
100005fc8:	10 23 00 10	adr	x16, #1120
100005fcc:	1f 20 03 d5	nop
100005fd0:	10 01 c1 da	pacia	x16, x8
100005fd4:	a8 40 09 10	adr	x8, #75796
100005fd8:	1f 20 03 d5	nop
100005fdc:	f0 a3 06 a9	stp	x16, x8, [sp, #104]
100005fe0:	f4 3f 00 f9	str	x20, [sp, #120]
100005fe4:	e1 63 01 91	add	x1, sp, #88
100005fe8:	c2 2e 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
100005fec:	a8 83 5c f8	ldur	x8, [x29, #-56]
100005ff0:	1f 19 00 b9	str	wzr, [x8, #24]
100005ff4:	1f 20 03 d5	nop
100005ff8:	80 30 0b 58	ldr	x0, #91664
100005ffc:	e8 c3 00 91	add	x8, sp, #48
100006000:	1f 20 03 d5	nop
100006004:	70 22 09 58	ldr	x16, #74828 ; literal pool symbol address: __NSConcreteStackBlock
100006008:	f1 03 08 aa	mov	x17, x8
10000600c:	31 5c ed f2	movk	x17, #27361, lsl #48
100006010:	30 0a c1 da	pacda	x16, x17
100006014:	f0 1b 00 f9	str	x16, [sp, #48]
100006018:	e8 1f 00 fd	str	d8, [sp, #56]
10000601c:	08 41 00 91	add	x8, x8, #16
100006020:	50 28 00 10	adr	x16, #1288
100006024:	1f 20 03 d5	nop
100006028:	10 01 c1 da	pacia	x16, x8
10000602c:	68 3f 09 10	adr	x8, #75756
100006030:	1f 20 03 d5	nop
100006034:	f0 23 04 a9	stp	x16, x8, [sp, #64]
100006038:	f4 2b 00 f9	str	x20, [sp, #80]
10000603c:	e1 c3 00 91	add	x1, sp, #48
100006040:	ac 2e 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
100006044:	68 c2 45 b9	ldr	w8, [x19, #1472]
100006048:	e8 02 00 34	cbz	w8, 0x1000060a4
10000604c:	a8 83 5c f8	ldur	x8, [x29, #-56]
100006050:	1f 19 00 b9	str	wzr, [x8, #24]
100006054:	1f 20 03 d5	nop
100006058:	80 2e 0b 58	ldr	x0, #91600
10000605c:	e8 23 00 91	add	x8, sp, #8
100006060:	1f 20 03 d5	nop
100006064:	70 1f 09 58	ldr	x16, #74732 ; literal pool symbol address: __NSConcreteStackBlock
100006068:	f1 03 08 aa	mov	x17, x8
10000606c:	31 5c ed f2	movk	x17, #27361, lsl #48
100006070:	30 0a c1 da	pacda	x16, x17
100006074:	f0 07 00 f9	str	x16, [sp, #8]
100006078:	e8 0b 00 fd	str	d8, [sp, #16]
10000607c:	08 41 00 91	add	x8, x8, #16
100006080:	f0 2b 00 10	adr	x16, #1404
100006084:	1f 20 03 d5	nop
100006088:	10 01 c1 da	pacia	x16, x8
10000608c:	e8 3d 09 10	adr	x8, #75708
100006090:	1f 20 03 d5	nop
100006094:	f0 a3 01 a9	stp	x16, x8, [sp, #24]
100006098:	f4 17 00 f9	str	x20, [sp, #40]
10000609c:	e1 23 00 91	add	x1, sp, #8
1000060a0:	94 2e 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
1000060a4:	a0 03 01 d1	sub	x0, x29, #64
1000060a8:	01 01 80 52	mov	w1, #8
1000060ac:	c5 2e 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
1000060b0:	fd 7b 4c a9	ldp	x29, x30, [sp, #192]
1000060b4:	f4 4f 4b a9	ldp	x20, x19, [sp, #176]
1000060b8:	e9 23 4a 6d	ldp	d9, d8, [sp, #160]
1000060bc:	ff 43 03 91	add	sp, sp, #208
1000060c0:	ff 0f 5f d6	retab
1000060c4:	7f 23 03 d5	pacibsp
1000060c8:	ff 43 02 d1	sub	sp, sp, #144
1000060cc:	f6 57 06 a9	stp	x22, x21, [sp, #96]
1000060d0:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
1000060d4:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
1000060d8:	fd 03 02 91	add	x29, sp, #128
1000060dc:	f4 03 01 aa	mov	x20, x1
1000060e0:	f3 03 00 aa	mov	x19, x0
1000060e4:	1f 20 03 d5	nop
1000060e8:	88 1b 09 58	ldr	x8, #74608 ; literal pool symbol address: ___stack_chk_guard
1000060ec:	08 01 40 f9	ldr	x8, [x8]
1000060f0:	a8 83 1d f8	stur	x8, [x29, #-40]
1000060f4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000060f8:	e0 93 83 3c	stur	q0, [sp, #57]
1000060fc:	e0 03 01 ad	stp	q0, q0, [sp, #32]
100006100:	e0 03 00 ad	stp	q0, q0, [sp]
100006104:	e0 03 01 aa	mov	x0, x1
100006108:	5a 2e 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
10000610c:	c0 04 00 b4	cbz	x0, 0x1000061a4
100006110:	e1 03 00 91	mov	x1, sp
100006114:	22 09 80 52	mov	w2, #73
100006118:	03 20 80 52	mov	w3, #256
10000611c:	03 00 a1 72	movk	w3, #2048, lsl #16
100006120:	1c 2e 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
100006124:	68 12 40 f9	ldr	x8, [x19, #32]
100006128:	08 05 40 f9	ldr	x8, [x8, #8]
10000612c:	08 19 40 b9	ldr	w8, [x8, #24]
100006130:	1f 20 03 d5	nop
100006134:	29 10 0b 18	ldr	w9, 0x10001c338
100006138:	1f 01 09 6b	cmp	w8, w9
10000613c:	42 03 00 54	b.hs	0x1000061a4
100006140:	09 12 80 52	mov	w9, #144
100006144:	76 10 0b 10	adr	x22, #90636
100006148:	1f 20 03 d5	nop
10000614c:	08 59 09 9b	madd	x8, x8, x9, x22
100006150:	01 71 00 91	add	x1, x8, #28
100006154:	15 02 80 52	mov	w21, #16
100006158:	e0 03 00 91	mov	x0, sp
10000615c:	02 02 80 52	mov	w2, #16
100006160:	cc 2f 00 94	bl	0x100012090 ; symbol stub for: _strncmp
100006164:	20 02 00 35	cbnz	w0, 0x1000061a8
100006168:	e0 03 14 aa	mov	x0, x20
10000616c:	3d 2e 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100006170:	15 00 80 52	mov	w21, #0
100006174:	68 12 40 f9	ldr	x8, [x19, #32]
100006178:	08 05 40 f9	ldr	x8, [x8, #8]
10000617c:	08 19 40 b9	ldr	w8, [x8, #24]
100006180:	09 12 80 52	mov	w9, #144
100006184:	08 59 09 9b	madd	x8, x8, x9, x22
100006188:	00 29 00 f9	str	x0, [x8, #80]
10000618c:	68 12 40 f9	ldr	x8, [x19, #32]
100006190:	08 05 40 f9	ldr	x8, [x8, #8]
100006194:	09 19 40 b9	ldr	w9, [x8, #24]
100006198:	29 05 00 11	add	w9, w9, #1
10000619c:	09 19 00 b9	str	w9, [x8, #24]
1000061a0:	02 00 00 14	b	0x1000061a8
1000061a4:	15 02 80 52	mov	w21, #16
1000061a8:	a8 83 5d f8	ldur	x8, [x29, #-40]
1000061ac:	1f 20 03 d5	nop
1000061b0:	49 15 09 58	ldr	x9, #74408 ; literal pool symbol address: ___stack_chk_guard
1000061b4:	29 01 40 f9	ldr	x9, [x9]
1000061b8:	3f 01 08 eb	cmp	x9, x8
1000061bc:	e1 00 00 54	b.ne	0x1000061d8
1000061c0:	e0 03 15 aa	mov	x0, x21
1000061c4:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
1000061c8:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
1000061cc:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
1000061d0:	ff 43 02 91	add	sp, sp, #144
1000061d4:	ff 0f 5f d6	retab
1000061d8:	8a 2e 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
1000061dc:	00 80 00 91	add	x0, x0, #32
1000061e0:	21 10 40 f9	ldr	x1, [x1, #32]
1000061e4:	02 01 80 52	mov	w2, #8
1000061e8:	72 2e 00 14	b	0x100011bb0 ; symbol stub for: __Block_object_assign
1000061ec:	00 10 40 f9	ldr	x0, [x0, #32]
1000061f0:	01 01 80 52	mov	w1, #8
1000061f4:	73 2e 00 14	b	0x100011bc0 ; symbol stub for: __Block_object_dispose
1000061f8:	7f 23 03 d5	pacibsp
1000061fc:	ff 43 02 d1	sub	sp, sp, #144
100006200:	f6 57 06 a9	stp	x22, x21, [sp, #96]
100006204:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
100006208:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
10000620c:	fd 03 02 91	add	x29, sp, #128
100006210:	f4 03 01 aa	mov	x20, x1
100006214:	f3 03 00 aa	mov	x19, x0
100006218:	1f 20 03 d5	nop
10000621c:	e8 11 09 58	ldr	x8, #74300 ; literal pool symbol address: ___stack_chk_guard
100006220:	08 01 40 f9	ldr	x8, [x8]
100006224:	a8 83 1d f8	stur	x8, [x29, #-40]
100006228:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000622c:	e0 93 83 3c	stur	q0, [sp, #57]
100006230:	e0 03 01 ad	stp	q0, q0, [sp, #32]
100006234:	e0 03 00 ad	stp	q0, q0, [sp]
100006238:	e0 03 01 aa	mov	x0, x1
10000623c:	0d 2e 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
100006240:	c0 04 00 b4	cbz	x0, 0x1000062d8
100006244:	e1 03 00 91	mov	x1, sp
100006248:	22 09 80 52	mov	w2, #73
10000624c:	03 20 80 52	mov	w3, #256
100006250:	03 00 a1 72	movk	w3, #2048, lsl #16
100006254:	cf 2d 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
100006258:	68 12 40 f9	ldr	x8, [x19, #32]
10000625c:	08 05 40 f9	ldr	x8, [x8, #8]
100006260:	08 19 40 b9	ldr	w8, [x8, #24]
100006264:	1f 20 03 d5	nop
100006268:	89 06 0b 18	ldr	w9, 0x10001c338
10000626c:	1f 01 09 6b	cmp	w8, w9
100006270:	42 03 00 54	b.hs	0x1000062d8
100006274:	09 12 80 52	mov	w9, #144
100006278:	d6 06 0b 10	adr	x22, #90328
10000627c:	1f 20 03 d5	nop
100006280:	08 59 09 9b	madd	x8, x8, x9, x22
100006284:	01 b1 00 91	add	x1, x8, #44
100006288:	15 02 80 52	mov	w21, #16
10000628c:	e0 03 00 91	mov	x0, sp
100006290:	02 02 80 52	mov	w2, #16
100006294:	7f 2f 00 94	bl	0x100012090 ; symbol stub for: _strncmp
100006298:	20 02 00 35	cbnz	w0, 0x1000062dc
10000629c:	e0 03 14 aa	mov	x0, x20
1000062a0:	f0 2d 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
1000062a4:	15 00 80 52	mov	w21, #0
1000062a8:	68 12 40 f9	ldr	x8, [x19, #32]
1000062ac:	08 05 40 f9	ldr	x8, [x8, #8]
1000062b0:	08 19 40 b9	ldr	w8, [x8, #24]
1000062b4:	09 12 80 52	mov	w9, #144
1000062b8:	08 59 09 9b	madd	x8, x8, x9, x22
1000062bc:	00 2d 00 f9	str	x0, [x8, #88]
1000062c0:	68 12 40 f9	ldr	x8, [x19, #32]
1000062c4:	08 05 40 f9	ldr	x8, [x8, #8]
1000062c8:	09 19 40 b9	ldr	w9, [x8, #24]
1000062cc:	29 05 00 11	add	w9, w9, #1
1000062d0:	09 19 00 b9	str	w9, [x8, #24]
1000062d4:	02 00 00 14	b	0x1000062dc
1000062d8:	15 02 80 52	mov	w21, #16
1000062dc:	a8 83 5d f8	ldur	x8, [x29, #-40]
1000062e0:	1f 20 03 d5	nop
1000062e4:	a9 0b 09 58	ldr	x9, #74100 ; literal pool symbol address: ___stack_chk_guard
1000062e8:	29 01 40 f9	ldr	x9, [x9]
1000062ec:	3f 01 08 eb	cmp	x9, x8
1000062f0:	e1 00 00 54	b.ne	0x10000630c
1000062f4:	e0 03 15 aa	mov	x0, x21
1000062f8:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
1000062fc:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
100006300:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
100006304:	ff 43 02 91	add	sp, sp, #144
100006308:	ff 0f 5f d6	retab
10000630c:	3d 2e 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100006310:	7f 23 03 d5	pacibsp
100006314:	ff 43 02 d1	sub	sp, sp, #144
100006318:	f6 57 06 a9	stp	x22, x21, [sp, #96]
10000631c:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
100006320:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
100006324:	fd 03 02 91	add	x29, sp, #128
100006328:	f4 03 01 aa	mov	x20, x1
10000632c:	f3 03 00 aa	mov	x19, x0
100006330:	1f 20 03 d5	nop
100006334:	28 09 09 58	ldr	x8, #74020 ; literal pool symbol address: ___stack_chk_guard
100006338:	08 01 40 f9	ldr	x8, [x8]
10000633c:	a8 83 1d f8	stur	x8, [x29, #-40]
100006340:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100006344:	e0 93 83 3c	stur	q0, [sp, #57]
100006348:	e0 03 01 ad	stp	q0, q0, [sp, #32]
10000634c:	e0 03 00 ad	stp	q0, q0, [sp]
100006350:	e0 03 01 aa	mov	x0, x1
100006354:	c7 2d 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
100006358:	c0 04 00 b4	cbz	x0, 0x1000063f0
10000635c:	e1 03 00 91	mov	x1, sp
100006360:	22 09 80 52	mov	w2, #73
100006364:	03 20 80 52	mov	w3, #256
100006368:	03 00 a1 72	movk	w3, #2048, lsl #16
10000636c:	89 2d 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
100006370:	68 12 40 f9	ldr	x8, [x19, #32]
100006374:	08 05 40 f9	ldr	x8, [x8, #8]
100006378:	08 19 40 b9	ldr	w8, [x8, #24]
10000637c:	1f 20 03 d5	nop
100006380:	c9 fd 0a 18	ldr	w9, 0x10001c338
100006384:	1f 01 09 6b	cmp	w8, w9
100006388:	42 03 00 54	b.hs	0x1000063f0
10000638c:	09 12 80 52	mov	w9, #144
100006390:	16 fe 0a 10	adr	x22, #90048
100006394:	1f 20 03 d5	nop
100006398:	08 59 09 9b	madd	x8, x8, x9, x22
10000639c:	01 f1 00 91	add	x1, x8, #60
1000063a0:	15 02 80 52	mov	w21, #16
1000063a4:	e0 03 00 91	mov	x0, sp
1000063a8:	02 02 80 52	mov	w2, #16
1000063ac:	39 2f 00 94	bl	0x100012090 ; symbol stub for: _strncmp
1000063b0:	20 02 00 35	cbnz	w0, 0x1000063f4
1000063b4:	e0 03 14 aa	mov	x0, x20
1000063b8:	aa 2d 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
1000063bc:	15 00 80 52	mov	w21, #0
1000063c0:	68 12 40 f9	ldr	x8, [x19, #32]
1000063c4:	08 05 40 f9	ldr	x8, [x8, #8]
1000063c8:	08 19 40 b9	ldr	w8, [x8, #24]
1000063cc:	09 12 80 52	mov	w9, #144
1000063d0:	08 59 09 9b	madd	x8, x8, x9, x22
1000063d4:	00 31 00 f9	str	x0, [x8, #96]
1000063d8:	68 12 40 f9	ldr	x8, [x19, #32]
1000063dc:	08 05 40 f9	ldr	x8, [x8, #8]
1000063e0:	09 19 40 b9	ldr	w9, [x8, #24]
1000063e4:	29 05 00 11	add	w9, w9, #1
1000063e8:	09 19 00 b9	str	w9, [x8, #24]
1000063ec:	02 00 00 14	b	0x1000063f4
1000063f0:	15 02 80 52	mov	w21, #16
1000063f4:	a8 83 5d f8	ldur	x8, [x29, #-40]
1000063f8:	1f 20 03 d5	nop
1000063fc:	e9 02 09 58	ldr	x9, #73820 ; literal pool symbol address: ___stack_chk_guard
100006400:	29 01 40 f9	ldr	x9, [x9]
100006404:	3f 01 08 eb	cmp	x9, x8
100006408:	e1 00 00 54	b.ne	0x100006424
10000640c:	e0 03 15 aa	mov	x0, x21
100006410:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
100006414:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
100006418:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
10000641c:	ff 43 02 91	add	sp, sp, #144
100006420:	ff 0f 5f d6	retab
100006424:	f7 2d 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100006428:	7f 23 03 d5	pacibsp
10000642c:	fa 67 bb a9	stp	x26, x25, [sp, #-80]!
100006430:	f8 5f 01 a9	stp	x24, x23, [sp, #16]
100006434:	f6 57 02 a9	stp	x22, x21, [sp, #32]
100006438:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
10000643c:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
100006440:	fd 03 01 91	add	x29, sp, #64
100006444:	f4 03 01 aa	mov	x20, x1
100006448:	f3 03 00 aa	mov	x19, x0
10000644c:	e0 03 01 aa	mov	x0, x1
100006450:	84 2d 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100006454:	68 12 40 f9	ldr	x8, [x19, #32]
100006458:	08 05 40 f9	ldr	x8, [x8, #8]
10000645c:	08 19 40 b9	ldr	w8, [x8, #24]
100006460:	96 f7 0a 10	adr	x22, #89840
100006464:	1f 20 03 d5	nop
100006468:	09 12 80 52	mov	w9, #144
10000646c:	09 59 a9 9b	umaddl	x9, w8, w9, x22
100006470:	29 29 40 f9	ldr	x9, [x9, #80]
100006474:	1f 00 09 eb	cmp	x0, x9
100006478:	21 04 00 54	b.ne	0x1000064fc
10000647c:	09 12 80 52	mov	w9, #144
100006480:	09 59 09 9b	madd	x9, x8, x9, x22
100006484:	2a 01 40 f9	ldr	x10, [x9]
100006488:	58 09 40 b9	ldr	w24, [x10, #8]
10000648c:	18 02 00 34	cbz	w24, 0x1000064cc
100006490:	15 00 80 d2	mov	x21, #0
100006494:	17 00 80 d2	mov	x23, #0
100006498:	39 35 40 f9	ldr	x25, [x9, #104]
10000649c:	e0 03 14 aa	mov	x0, x20
1000064a0:	e1 03 15 aa	mov	x1, x21
1000064a4:	b3 2d 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
1000064a8:	20 7b 35 f8	str	x0, [x25, x21, lsl #3]
1000064ac:	17 00 17 8b	add	x23, x0, x23
1000064b0:	b5 06 00 91	add	x21, x21, #1
1000064b4:	1f 03 15 eb	cmp	x24, x21
1000064b8:	21 ff ff 54	b.ne	0x10000649c
1000064bc:	68 12 40 f9	ldr	x8, [x19, #32]
1000064c0:	08 05 40 f9	ldr	x8, [x8, #8]
1000064c4:	08 19 40 b9	ldr	w8, [x8, #24]
1000064c8:	02 00 00 14	b	0x1000064d0
1000064cc:	17 00 80 d2	mov	x23, #0
1000064d0:	09 12 80 52	mov	w9, #144
1000064d4:	08 59 09 9b	madd	x8, x8, x9, x22
1000064d8:	17 41 00 f9	str	x23, [x8, #128]
1000064dc:	68 12 40 f9	ldr	x8, [x19, #32]
1000064e0:	08 05 40 f9	ldr	x8, [x8, #8]
1000064e4:	09 19 40 b9	ldr	w9, [x8, #24]
1000064e8:	29 05 00 11	add	w9, w9, #1
1000064ec:	09 19 00 b9	str	w9, [x8, #24]
1000064f0:	68 12 40 f9	ldr	x8, [x19, #32]
1000064f4:	08 05 40 f9	ldr	x8, [x8, #8]
1000064f8:	08 19 40 b9	ldr	w8, [x8, #24]
1000064fc:	1f 20 03 d5	nop
100006500:	c9 f1 0a 18	ldr	w9, 0x10001c338
100006504:	2a 22 80 52	mov	w10, #273
100006508:	1f 01 09 6b	cmp	w8, w9
10000650c:	e0 33 8a 1a	csel	w0, wzr, w10, lo
100006510:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
100006514:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
100006518:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
10000651c:	f8 5f 41 a9	ldp	x24, x23, [sp, #16]
100006520:	fa 67 c5 a8	ldp	x26, x25, [sp], #80
100006524:	ff 0f 5f d6	retab
100006528:	7f 23 03 d5	pacibsp
10000652c:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
100006530:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
100006534:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
100006538:	fd 83 00 91	add	x29, sp, #32
10000653c:	f4 03 01 aa	mov	x20, x1
100006540:	f3 03 00 aa	mov	x19, x0
100006544:	e0 03 01 aa	mov	x0, x1
100006548:	46 2d 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000654c:	68 12 40 f9	ldr	x8, [x19, #32]
100006550:	08 05 40 f9	ldr	x8, [x8, #8]
100006554:	08 19 40 b9	ldr	w8, [x8, #24]
100006558:	09 12 80 52	mov	w9, #144
10000655c:	b5 ef 0a 10	adr	x21, #89588
100006560:	1f 20 03 d5	nop
100006564:	09 55 09 9b	madd	x9, x8, x9, x21
100006568:	29 2d 40 f9	ldr	x9, [x9, #88]
10000656c:	1f 00 09 eb	cmp	x0, x9
100006570:	41 03 00 54	b.ne	0x1000065d8
100006574:	e0 03 14 aa	mov	x0, x20
100006578:	01 00 80 52	mov	w1, #0
10000657c:	7d 2d 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
100006580:	68 12 40 f9	ldr	x8, [x19, #32]
100006584:	08 05 40 f9	ldr	x8, [x8, #8]
100006588:	08 19 40 b9	ldr	w8, [x8, #24]
10000658c:	16 12 80 52	mov	w22, #144
100006590:	08 55 16 9b	madd	x8, x8, x22, x21
100006594:	00 39 00 f9	str	x0, [x8, #112]
100006598:	e0 03 14 aa	mov	x0, x20
10000659c:	21 00 80 52	mov	w1, #1
1000065a0:	74 2d 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
1000065a4:	68 12 40 f9	ldr	x8, [x19, #32]
1000065a8:	08 05 40 f9	ldr	x8, [x8, #8]
1000065ac:	08 19 40 b9	ldr	w8, [x8, #24]
1000065b0:	08 55 16 9b	madd	x8, x8, x22, x21
1000065b4:	00 3d 00 f9	str	x0, [x8, #120]
1000065b8:	68 12 40 f9	ldr	x8, [x19, #32]
1000065bc:	08 05 40 f9	ldr	x8, [x8, #8]
1000065c0:	09 19 40 b9	ldr	w9, [x8, #24]
1000065c4:	29 05 00 11	add	w9, w9, #1
1000065c8:	09 19 00 b9	str	w9, [x8, #24]
1000065cc:	68 12 40 f9	ldr	x8, [x19, #32]
1000065d0:	08 05 40 f9	ldr	x8, [x8, #8]
1000065d4:	08 19 40 b9	ldr	w8, [x8, #24]
1000065d8:	1f 20 03 d5	nop
1000065dc:	e9 ea 0a 18	ldr	w9, 0x10001c338
1000065e0:	2a 22 80 52	mov	w10, #273
1000065e4:	1f 01 09 6b	cmp	w8, w9
1000065e8:	e0 33 8a 1a	csel	w0, wzr, w10, lo
1000065ec:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
1000065f0:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
1000065f4:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
1000065f8:	ff 0f 5f d6	retab
1000065fc:	7f 23 03 d5	pacibsp
100006600:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
100006604:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
100006608:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000660c:	fd 83 00 91	add	x29, sp, #32
100006610:	f4 03 01 aa	mov	x20, x1
100006614:	f3 03 00 aa	mov	x19, x0
100006618:	e0 03 01 aa	mov	x0, x1
10000661c:	11 2d 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
100006620:	68 12 40 f9	ldr	x8, [x19, #32]
100006624:	08 05 40 f9	ldr	x8, [x8, #8]
100006628:	08 19 40 b9	ldr	w8, [x8, #24]
10000662c:	09 12 80 52	mov	w9, #144
100006630:	15 e9 0a 10	adr	x21, #89376
100006634:	1f 20 03 d5	nop
100006638:	09 55 09 9b	madd	x9, x8, x9, x21
10000663c:	29 31 40 f9	ldr	x9, [x9, #96]
100006640:	1f 00 09 eb	cmp	x0, x9
100006644:	41 02 00 54	b.ne	0x10000668c
100006648:	e0 03 14 aa	mov	x0, x20
10000664c:	01 00 80 d2	mov	x1, #0
100006650:	38 2d 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
100006654:	68 12 40 f9	ldr	x8, [x19, #32]
100006658:	08 05 40 f9	ldr	x8, [x8, #8]
10000665c:	08 19 40 b9	ldr	w8, [x8, #24]
100006660:	09 12 80 52	mov	w9, #144
100006664:	08 55 09 9b	madd	x8, x8, x9, x21
100006668:	00 45 00 f9	str	x0, [x8, #136]
10000666c:	68 12 40 f9	ldr	x8, [x19, #32]
100006670:	08 05 40 f9	ldr	x8, [x8, #8]
100006674:	09 19 40 b9	ldr	w9, [x8, #24]
100006678:	29 05 00 11	add	w9, w9, #1
10000667c:	09 19 00 b9	str	w9, [x8, #24]
100006680:	68 12 40 f9	ldr	x8, [x19, #32]
100006684:	08 05 40 f9	ldr	x8, [x8, #8]
100006688:	08 19 40 b9	ldr	w8, [x8, #24]
10000668c:	1f 20 03 d5	nop
100006690:	49 e5 0a 18	ldr	w9, 0x10001c338
100006694:	2a 22 80 52	mov	w10, #273
100006698:	1f 01 09 6b	cmp	w8, w9
10000669c:	e0 33 8a 1a	csel	w0, wzr, w10, lo
1000066a0:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
1000066a4:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
1000066a8:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
1000066ac:	ff 0f 5f d6	retab
1000066b0:	7f 23 03 d5	pacibsp
1000066b4:	ff c3 01 d1	sub	sp, sp, #112
1000066b8:	f4 4f 05 a9	stp	x20, x19, [sp, #80]
1000066bc:	fd 7b 06 a9	stp	x29, x30, [sp, #96]
1000066c0:	fd 83 01 91	add	x29, sp, #96
1000066c4:	20 77 09 10	adr	x0, #77540 ; Objc cfstring ref: @"AMC Stats"
1000066c8:	1f 20 03 d5	nop
1000066cc:	e1 77 09 10	adr	x1, #77564 ; Objc cfstring ref: @"Perf Counters"
1000066d0:	1f 20 03 d5	nop
1000066d4:	e2 fa 0a 10	adr	x2, #89948
1000066d8:	1f 20 03 d5	nop
1000066dc:	e3 fa 0a 10	adr	x3, #89948
1000066e0:	1f 20 03 d5	nop
1000066e4:	3a 23 00 94	bl	0x10000f3cc
1000066e8:	a8 00 00 d0	adrp	x8, 22 ; 0x10001c000
1000066ec:	00 41 06 b9	str	w0, [x8, #1600]
1000066f0:	60 05 00 34	cbz	w0, 0x10000679c
1000066f4:	b3 00 00 d0	adrp	x19, 22 ; 0x10001c000
1000066f8:	60 1e 43 f9	ldr	x0, [x19, #1592]
1000066fc:	f9 2c 00 94	bl	0x100011ae0 ; symbol stub for: _IOReportGetChannelCount
100006700:	08 7c 40 93	sxtw	x8, w0
100006704:	a9 00 00 d0	adrp	x9, 22 ; 0x10001c000
100006708:	28 25 03 f9	str	x8, [x9, #1608]
10000670c:	08 7c 7f 93	sbfiz	x8, x0, #1, #32
100006710:	08 c1 20 8b	add	x8, x8, w0, sxtw
100006714:	00 f1 7d d3	lsl	x0, x8, #3
100006718:	be 2d 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000671c:	a8 00 00 d0	adrp	x8, 22 ; 0x10001c000
100006720:	00 29 03 f9	str	x0, [x8, #1616]
100006724:	e8 c3 00 91	add	x8, sp, #48
100006728:	ff 23 03 a9	stp	xzr, x8, [sp, #48]
10000672c:	1f 20 03 d5	nop
100006730:	80 d3 05 5c	ldr	d0, 0x1000121a0
100006734:	e0 23 00 fd	str	d0, [sp, #64]
100006738:	ff 27 00 f9	str	xzr, [sp, #72]
10000673c:	60 1e 43 f9	ldr	x0, [x19, #1592]
100006740:	e9 23 00 91	add	x9, sp, #8
100006744:	1f 20 03 d5	nop
100006748:	50 e8 08 58	ldr	x16, #72968 ; literal pool symbol address: __NSConcreteStackBlock
10000674c:	f1 03 09 aa	mov	x17, x9
100006750:	31 5c ed f2	movk	x17, #27361, lsl #48
100006754:	30 0a c1 da	pacda	x16, x17
100006758:	f0 07 00 f9	str	x16, [sp, #8]
10000675c:	1f 20 03 d5	nop
100006760:	40 d2 05 5c	ldr	d0, 0x1000121a8
100006764:	e0 0b 00 fd	str	d0, [sp, #16]
100006768:	29 41 00 91	add	x9, x9, #16
10000676c:	10 1a 00 10	adr	x16, #832
100006770:	1f 20 03 d5	nop
100006774:	30 01 c1 da	pacia	x16, x9
100006778:	c9 09 09 10	adr	x9, #74040
10000677c:	1f 20 03 d5	nop
100006780:	f0 a7 01 a9	stp	x16, x9, [sp, #24]
100006784:	e8 17 00 f9	str	x8, [sp, #40]
100006788:	e1 23 00 91	add	x1, sp, #8
10000678c:	e1 2c 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
100006790:	e0 c3 00 91	add	x0, sp, #48
100006794:	01 01 80 52	mov	w1, #8
100006798:	0a 2d 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000679c:	fd 7b 46 a9	ldp	x29, x30, [sp, #96]
1000067a0:	f4 4f 45 a9	ldp	x20, x19, [sp, #80]
1000067a4:	ff c3 01 91	add	sp, sp, #112
1000067a8:	ff 0f 5f d6	retab
1000067ac:	7f 23 03 d5	pacibsp
1000067b0:	ff 43 02 d1	sub	sp, sp, #144
1000067b4:	e9 23 02 6d	stp	d9, d8, [sp, #32]
1000067b8:	fc 6f 03 a9	stp	x28, x27, [sp, #48]
1000067bc:	fa 67 04 a9	stp	x26, x25, [sp, #64]
1000067c0:	f8 5f 05 a9	stp	x24, x23, [sp, #80]
1000067c4:	f6 57 06 a9	stp	x22, x21, [sp, #96]
1000067c8:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
1000067cc:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
1000067d0:	fd 03 02 91	add	x29, sp, #128
1000067d4:	1f 20 03 d5	nop
1000067d8:	48 f3 0a 18	ldr	w8, 0x10001c640
1000067dc:	88 07 00 34	cbz	w8, 0x1000068cc
1000067e0:	1f 20 03 d5	nop
1000067e4:	1f 20 03 d5	nop
1000067e8:	88 c8 0a 18	ldr	w8, 0x10001c0f8
1000067ec:	1f 05 00 71	cmp	w8, #1
1000067f0:	00 08 00 54	b.eq	0x1000068f0
1000067f4:	c8 06 00 35	cbnz	w8, 0x1000068cc
1000067f8:	94 c4 0a 10	adr	x20, #88208
1000067fc:	1f 20 03 d5	nop
100006800:	81 22 40 f9	ldr	x1, [x20, #64]
100006804:	00 cb 06 70	adr	x0, #55651 ; literal pool for: "\n**** Bandwidth Counters ****\n\n"
100006808:	1f 20 03 d5	nop
10000680c:	3d 2d 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100006810:	b5 00 00 d0	adrp	x21, 22 ; 0x10001c000
100006814:	a8 26 43 f9	ldr	x8, [x21, #1608]
100006818:	a8 05 00 b4	cbz	x8, 0x1000068cc
10000681c:	16 00 80 d2	mov	x22, #0
100006820:	17 00 80 d2	mov	x23, #0
100006824:	b8 00 00 d0	adrp	x24, 22 ; 0x10001c000
100006828:	99 cf 06 70	adr	x25, #55795 ; literal pool for: "MB"
10000682c:	1f 20 03 d5	nop
100006830:	ba 00 00 d0	adrp	x26, 22 ; 0x10001c000
100006834:	1f 20 03 d5	nop
100006838:	c8 ca 05 5c	ldr	d8, 0x100012190
10000683c:	53 ca 06 70	adr	x19, #55627 ; literal pool for: "%-32s: %.3f %s/s\n"
100006840:	1f 20 03 d5	nop
100006844:	db ce 06 50	adr	x27, #55770 ; literal pool for: ""
100006848:	1f 20 03 d5	nop
10000684c:	08 2b 43 f9	ldr	x8, [x24, #1616]
100006850:	09 01 16 8b	add	x9, x8, x22
100006854:	20 85 40 a9	ldp	x0, x1, [x9, #8]
100006858:	29 fc 78 d3	lsr	x9, x1, #56
10000685c:	3f 25 00 f1	cmp	x9, #9
100006860:	e1 00 00 54	b.ne	0x10000687c
100006864:	02 c0 d2 d2	mov	x2, #164926744166400
100006868:	02 20 e1 f2	movk	x2, #2304, lsl #48
10000686c:	ad 2c 00 94	bl	0x100011b20 ; symbol stub for: _IOReportScaleValue
100006870:	08 2b 43 f9	ldr	x8, [x24, #1616]
100006874:	e9 03 19 aa	mov	x9, x25
100006878:	03 00 00 14	b	0x100006884
10000687c:	00 00 63 9e	ucvtf	d0, x0
100006880:	e9 03 1b aa	mov	x9, x27
100006884:	41 2f 43 fd	ldr	d1, [x26, #1624]
100006888:	21 d8 61 7e	ucvtf	d1, d1
10000688c:	82 06 40 fd	ldr	d2, [x20, #8]
100006890:	41 08 61 1e	fmul	d1, d2, d1
100006894:	21 18 68 1e	fdiv	d1, d1, d8
100006898:	00 18 61 1e	fdiv	d0, d0, d1
10000689c:	80 22 40 f9	ldr	x0, [x20, #64]
1000068a0:	08 69 76 f8	ldr	x8, [x8, x22]
1000068a4:	e9 0b 00 f9	str	x9, [sp, #16]
1000068a8:	e8 03 00 f9	str	x8, [sp]
1000068ac:	e0 07 00 fd	str	d0, [sp, #8]
1000068b0:	e1 03 13 aa	mov	x1, x19
1000068b4:	0b 2d 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000068b8:	f7 06 00 91	add	x23, x23, #1
1000068bc:	a8 26 43 f9	ldr	x8, [x21, #1608]
1000068c0:	d6 62 00 91	add	x22, x22, #24
1000068c4:	ff 02 08 eb	cmp	x23, x8
1000068c8:	23 fc ff 54	b.lo	0x10000684c
1000068cc:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
1000068d0:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
1000068d4:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
1000068d8:	f8 5f 45 a9	ldp	x24, x23, [sp, #80]
1000068dc:	fa 67 44 a9	ldp	x26, x25, [sp, #64]
1000068e0:	fc 6f 43 a9	ldp	x28, x27, [sp, #48]
1000068e4:	e9 23 42 6d	ldp	d9, d8, [sp, #32]
1000068e8:	ff 43 02 91	add	sp, sp, #144
1000068ec:	ff 0f 5f d6	retab
1000068f0:	d4 bc 0a 10	adr	x20, #87960
1000068f4:	1f 20 03 d5	nop
1000068f8:	81 22 40 f9	ldr	x1, [x20, #64]
1000068fc:	e0 c4 06 30	adr	x0, #55453 ; literal pool for: "<key>bandwidth_counters</key>\n<array>\n"
100006900:	1f 20 03 d5	nop
100006904:	ff 2c 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100006908:	b5 00 00 d0	adrp	x21, 22 ; 0x10001c000
10000690c:	a8 26 43 f9	ldr	x8, [x21, #1608]
100006910:	48 02 00 b4	cbz	x8, 0x100006958
100006914:	16 00 80 d2	mov	x22, #0
100006918:	17 00 80 d2	mov	x23, #0
10000691c:	b8 00 00 d0	adrp	x24, 22 ; 0x10001c000
100006920:	13 c5 06 10	adr	x19, #55456 ; literal pool for: "<dict>\n<key>name</key><string>%s</string>\n<key>value</key><integer>%llu</integer>\n</dict>\n"
100006924:	1f 20 03 d5	nop
100006928:	80 22 40 f9	ldr	x0, [x20, #64]
10000692c:	08 2b 43 f9	ldr	x8, [x24, #1616]
100006930:	08 01 16 8b	add	x8, x8, x22
100006934:	09 21 40 a9	ldp	x9, x8, [x8]
100006938:	e9 23 00 a9	stp	x9, x8, [sp]
10000693c:	e1 03 13 aa	mov	x1, x19
100006940:	e8 2c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100006944:	f7 06 00 91	add	x23, x23, #1
100006948:	a8 26 43 f9	ldr	x8, [x21, #1608]
10000694c:	d6 62 00 91	add	x22, x22, #24
100006950:	ff 02 08 eb	cmp	x23, x8
100006954:	a3 fe ff 54	b.lo	0x100006928
100006958:	81 22 40 f9	ldr	x1, [x20, #64]
10000695c:	60 77 06 50	adr	x0, #52974 ; literal pool for: "</array>\n"
100006960:	1f 20 03 d5	nop
100006964:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
100006968:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
10000696c:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
100006970:	f8 5f 45 a9	ldp	x24, x23, [sp, #80]
100006974:	fa 67 44 a9	ldp	x26, x25, [sp, #64]
100006978:	fc 6f 43 a9	ldp	x28, x27, [sp, #48]
10000697c:	e9 23 42 6d	ldp	d9, d8, [sp, #32]
100006980:	ff 43 02 91	add	sp, sp, #144
100006984:	ff 23 03 d5	autibsp
100006988:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
10000698c:	50 00 f0 b6	tbz	x16, #62, 0x100006994
100006990:	20 8e 38 d4	brk	#0xc471
100006994:	db 2c 00 14	b	0x100011d00 ; symbol stub for: _fputs
100006998:	7f 23 03 d5	pacibsp
10000699c:	ff c3 01 d1	sub	sp, sp, #112
1000069a0:	f4 4f 05 a9	stp	x20, x19, [sp, #80]
1000069a4:	fd 7b 06 a9	stp	x29, x30, [sp, #96]
1000069a8:	fd 83 01 91	add	x29, sp, #96
1000069ac:	1f 20 03 d5	nop
1000069b0:	88 e4 0a 18	ldr	w8, 0x10001c640
1000069b4:	48 07 00 34	cbz	w8, 0x100006a9c
1000069b8:	88 b6 0a 10	adr	x8, #87760
1000069bc:	1f 20 03 d5	nop
1000069c0:	09 01 40 39	ldrb	w9, [x8]
1000069c4:	69 00 00 34	cbz	w9, 0x1000069d0
1000069c8:	fa 2c 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
1000069cc:	06 00 00 14	b	0x1000069e4
1000069d0:	09 09 40 39	ldrb	w9, [x8, #2]
1000069d4:	69 00 00 34	cbz	w9, 0x1000069e0
1000069d8:	00 15 40 f9	ldr	x0, [x8, #40]
1000069dc:	02 00 00 14	b	0x1000069e4
1000069e0:	00 11 40 f9	ldr	x0, [x8, #32]
1000069e4:	a8 00 00 d0	adrp	x8, 22 ; 0x10001c000
1000069e8:	00 2d 03 f9	str	x0, [x8, #1624]
1000069ec:	1f 20 03 d5	nop
1000069f0:	04 e2 0a 58	ldr	x4, #89152
1000069f4:	1f 20 03 d5	nop
1000069f8:	05 e2 0a 58	ldr	x5, #89152
1000069fc:	20 e3 0a 10	adr	x0, #89188
100006a00:	1f 20 03 d5	nop
100006a04:	21 e3 0a 10	adr	x1, #89188
100006a08:	1f 20 03 d5	nop
100006a0c:	22 e3 0a 10	adr	x2, #89188
100006a10:	1f 20 03 d5	nop
100006a14:	33 e3 0a 10	adr	x19, #89188
100006a18:	1f 20 03 d5	nop
100006a1c:	e3 03 13 aa	mov	x3, x19
100006a20:	93 22 00 94	bl	0x10000f46c
100006a24:	e8 c3 00 91	add	x8, sp, #48
100006a28:	ff 23 03 a9	stp	xzr, x8, [sp, #48]
100006a2c:	1f 20 03 d5	nop
100006a30:	80 bb 05 5c	ldr	d0, 0x1000121a0
100006a34:	e0 23 00 fd	str	d0, [sp, #64]
100006a38:	ff 27 00 f9	str	xzr, [sp, #72]
100006a3c:	60 02 40 f9	ldr	x0, [x19]
100006a40:	e9 23 00 91	add	x9, sp, #8
100006a44:	1f 20 03 d5	nop
100006a48:	50 d0 08 58	ldr	x16, #72200 ; literal pool symbol address: __NSConcreteStackBlock
100006a4c:	f1 03 09 aa	mov	x17, x9
100006a50:	31 5c ed f2	movk	x17, #27361, lsl #48
100006a54:	30 0a c1 da	pacda	x16, x17
100006a58:	f0 07 00 f9	str	x16, [sp, #8]
100006a5c:	1f 20 03 d5	nop
100006a60:	40 ba 05 5c	ldr	d0, 0x1000121a8
100006a64:	e0 0b 00 fd	str	d0, [sp, #16]
100006a68:	29 41 00 91	add	x9, x9, #16
100006a6c:	90 0a 00 10	adr	x16, #336
100006a70:	1f 20 03 d5	nop
100006a74:	30 01 c1 da	pacia	x16, x9
100006a78:	49 f3 08 10	adr	x9, #73320
100006a7c:	1f 20 03 d5	nop
100006a80:	f0 a7 01 a9	stp	x16, x9, [sp, #24]
100006a84:	e8 17 00 f9	str	x8, [sp, #40]
100006a88:	e1 23 00 91	add	x1, sp, #8
100006a8c:	19 2c 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
100006a90:	e0 c3 00 91	add	x0, sp, #48
100006a94:	01 01 80 52	mov	w1, #8
100006a98:	4a 2c 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
100006a9c:	fd 7b 46 a9	ldp	x29, x30, [sp, #96]
100006aa0:	f4 4f 45 a9	ldp	x20, x19, [sp, #80]
100006aa4:	ff c3 01 91	add	sp, sp, #112
100006aa8:	ff 0f 5f d6	retab
100006aac:	7f 23 03 d5	pacibsp
100006ab0:	ff 03 02 d1	sub	sp, sp, #128
100006ab4:	f4 4f 06 a9	stp	x20, x19, [sp, #96]
100006ab8:	fd 7b 07 a9	stp	x29, x30, [sp, #112]
100006abc:	fd c3 01 91	add	x29, sp, #112
100006ac0:	f3 03 00 aa	mov	x19, x0
100006ac4:	1f 20 03 d5	nop
100006ac8:	88 cc 08 58	ldr	x8, #72080 ; literal pool symbol address: ___stack_chk_guard
100006acc:	08 01 40 f9	ldr	x8, [x8]
100006ad0:	a8 83 1e f8	stur	x8, [x29, #-24]
100006ad4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100006ad8:	e0 93 83 3c	stur	q0, [sp, #57]
100006adc:	e0 03 01 ad	stp	q0, q0, [sp, #32]
100006ae0:	e0 03 00 ad	stp	q0, q0, [sp]
100006ae4:	e0 03 01 aa	mov	x0, x1
100006ae8:	e2 2b 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
100006aec:	40 04 00 b4	cbz	x0, 0x100006b74
100006af0:	e1 03 00 91	mov	x1, sp
100006af4:	22 09 80 52	mov	w2, #73
100006af8:	03 20 80 52	mov	w3, #256
100006afc:	03 00 a1 72	movk	w3, #2048, lsl #16
100006b00:	a4 2b 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
100006b04:	e0 03 00 91	mov	x0, sp
100006b08:	21 09 80 52	mov	w1, #73
100006b0c:	69 2d 00 94	bl	0x1000120b0 ; symbol stub for: _strnlen
100006b10:	14 04 00 91	add	x20, x0, #1
100006b14:	e0 03 14 aa	mov	x0, x20
100006b18:	be 2c 00 94	bl	0x100011e10 ; symbol stub for: _malloc
100006b1c:	1f 20 03 d5	nop
100006b20:	88 d9 0a 58	ldr	x8, #88880
100006b24:	69 12 40 f9	ldr	x9, [x19, #32]
100006b28:	29 05 40 f9	ldr	x9, [x9, #8]
100006b2c:	29 0d 40 f9	ldr	x9, [x9, #24]
100006b30:	0a 03 80 52	mov	w10, #24
100006b34:	29 7d 0a 9b	mul	x9, x9, x10
100006b38:	00 69 29 f8	str	x0, [x8, x9]
100006b3c:	69 12 40 f9	ldr	x9, [x19, #32]
100006b40:	29 05 40 f9	ldr	x9, [x9, #8]
100006b44:	29 0d 40 f9	ldr	x9, [x9, #24]
100006b48:	29 7d 0a 9b	mul	x9, x9, x10
100006b4c:	00 69 69 f8	ldr	x0, [x8, x9]
100006b50:	e1 03 00 91	mov	x1, sp
100006b54:	e2 03 14 aa	mov	x2, x20
100006b58:	52 2d 00 94	bl	0x1000120a0 ; symbol stub for: _strncpy
100006b5c:	00 00 80 52	mov	w0, #0
100006b60:	68 12 40 f9	ldr	x8, [x19, #32]
100006b64:	08 05 40 f9	ldr	x8, [x8, #8]
100006b68:	08 61 00 91	add	x8, x8, #24
100006b6c:	29 00 80 52	mov	w9, #1
100006b70:	05 00 00 14	b	0x100006b84
100006b74:	00 02 80 52	mov	w0, #16
100006b78:	09 00 80 92	mov	x9, #-1
100006b7c:	68 d6 0a 10	adr	x8, #88780
100006b80:	1f 20 03 d5	nop
100006b84:	0a 01 40 f9	ldr	x10, [x8]
100006b88:	49 01 09 8b	add	x9, x10, x9
100006b8c:	09 01 00 f9	str	x9, [x8]
100006b90:	a8 83 5e f8	ldur	x8, [x29, #-24]
100006b94:	1f 20 03 d5	nop
100006b98:	09 c6 08 58	ldr	x9, #71872 ; literal pool symbol address: ___stack_chk_guard
100006b9c:	29 01 40 f9	ldr	x9, [x9]
100006ba0:	3f 01 08 eb	cmp	x9, x8
100006ba4:	a1 00 00 54	b.ne	0x100006bb8
100006ba8:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
100006bac:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
100006bb0:	ff 03 02 91	add	sp, sp, #128
100006bb4:	ff 0f 5f d6	retab
100006bb8:	12 2c 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100006bbc:	7f 23 03 d5	pacibsp
100006bc0:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
100006bc4:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
100006bc8:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
100006bcc:	fd 83 00 91	add	x29, sp, #32
100006bd0:	e8 03 01 aa	mov	x8, x1
100006bd4:	f3 03 00 aa	mov	x19, x0
100006bd8:	b4 00 00 d0	adrp	x20, 22 ; 0x10001c000
100006bdc:	89 2a 43 f9	ldr	x9, [x20, #1616]
100006be0:	0a 10 40 f9	ldr	x10, [x0, #32]
100006be4:	4a 05 40 f9	ldr	x10, [x10, #8]
100006be8:	4a 0d 40 f9	ldr	x10, [x10, #24]
100006bec:	15 03 80 52	mov	w21, #24
100006bf0:	49 25 15 9b	madd	x9, x10, x21, x9
100006bf4:	21 41 00 91	add	x1, x9, #16
100006bf8:	e0 03 08 aa	mov	x0, x8
100006bfc:	cd 2b 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
100006c00:	88 2a 43 f9	ldr	x8, [x20, #1616]
100006c04:	69 12 40 f9	ldr	x9, [x19, #32]
100006c08:	29 05 40 f9	ldr	x9, [x9, #8]
100006c0c:	29 0d 40 f9	ldr	x9, [x9, #24]
100006c10:	28 21 15 9b	madd	x8, x9, x21, x8
100006c14:	00 05 00 f9	str	x0, [x8, #8]
100006c18:	68 12 40 f9	ldr	x8, [x19, #32]
100006c1c:	08 05 40 f9	ldr	x8, [x8, #8]
100006c20:	09 0d 40 f9	ldr	x9, [x8, #24]
100006c24:	29 05 00 91	add	x9, x9, #1
100006c28:	09 0d 00 f9	str	x9, [x8, #24]
100006c2c:	00 00 80 52	mov	w0, #0
100006c30:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
100006c34:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
100006c38:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
100006c3c:	ff 0f 5f d6	retab
100006c40:	c0 03 5f d6	ret
100006c44:	7f 23 03 d5	pacibsp
100006c48:	ff 83 02 d1	sub	sp, sp, #160
100006c4c:	e9 23 03 6d	stp	d9, d8, [sp, #48]
100006c50:	fc 6f 04 a9	stp	x28, x27, [sp, #64]
100006c54:	fa 67 05 a9	stp	x26, x25, [sp, #80]
100006c58:	f8 5f 06 a9	stp	x24, x23, [sp, #96]
100006c5c:	f6 57 07 a9	stp	x22, x21, [sp, #112]
100006c60:	f4 4f 08 a9	stp	x20, x19, [sp, #128]
100006c64:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
100006c68:	fd 43 02 91	add	x29, sp, #144
100006c6c:	1f 20 03 d5	nop
100006c70:	88 d0 0a 18	ldr	w8, 0x10001c680
100006c74:	e8 13 00 f9	str	x8, [sp, #32]
100006c78:	96 a0 0a 10	adr	x22, #87056
100006c7c:	1f 20 03 d5	nop
100006c80:	c8 02 40 39	ldrb	w8, [x22]
100006c84:	28 01 00 34	cbz	w8, 0x100006ca8
100006c88:	4a 2c 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100006c8c:	00 00 63 9e	ucvtf	d0, x0
100006c90:	c1 06 40 fd	ldr	d1, [x22, #8]
100006c94:	20 08 60 1e	fmul	d0, d1, d0
100006c98:	1f 20 03 d5	nop
100006c9c:	a1 a7 05 5c	ldr	d1, 0x100012190
100006ca0:	08 18 61 1e	fdiv	d8, d0, d1
100006ca4:	06 00 00 14	b	0x100006cbc
100006ca8:	c8 0a 40 39	ldrb	w8, [x22, #2]
100006cac:	68 00 00 34	cbz	w8, 0x100006cb8
100006cb0:	c8 0e 40 fd	ldr	d8, [x22, #24]
100006cb4:	02 00 00 14	b	0x100006cbc
100006cb8:	c8 0a 40 fd	ldr	d8, [x22, #16]
100006cbc:	08 21 60 1e	fcmp	d8, #0.0
100006cc0:	2d 12 00 54	b.le	0x100006f04
100006cc4:	78 a0 0a 10	adr	x24, #87052
100006cc8:	1f 20 03 d5	nop
100006ccc:	08 2b 40 b9	ldr	w8, [x24, #40]
100006cd0:	1f 05 00 71	cmp	w8, #1
100006cd4:	e0 01 00 54	b.eq	0x100006d10
100006cd8:	48 02 00 35	cbnz	w8, 0x100006d20
100006cdc:	c0 22 40 f9	ldr	x0, [x22, #64]
100006ce0:	c8 02 40 39	ldrb	w8, [x22]
100006ce4:	c9 ad 06 50	adr	x9, #54714 ; literal pool for: "Session"
100006ce8:	1f 20 03 d5	nop
100006cec:	8a a9 06 50	adr	x10, #54578 ; literal pool for: ""
100006cf0:	1f 20 03 d5	nop
100006cf4:	1f 01 00 71	cmp	w8, #0
100006cf8:	48 01 89 9a	csel	x8, x10, x9, eq
100006cfc:	e8 03 00 f9	str	x8, [sp]
100006d00:	a1 ab 06 70	adr	x1, #54647 ; literal pool for: "\n**** %s Interrupt distribution ****\n\n"
100006d04:	1f 20 03 d5	nop
100006d08:	f6 2b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100006d0c:	05 00 00 14	b	0x100006d20
100006d10:	c1 22 40 f9	ldr	x1, [x22, #64]
100006d14:	80 ac 06 50	adr	x0, #54674 ; literal pool for: "<key>interrupts</key>\n<array>\n"
100006d18:	1f 20 03 d5	nop
100006d1c:	f9 2b 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100006d20:	e8 13 40 f9	ldr	x8, [sp, #32]
100006d24:	08 0b 00 34	cbz	w8, 0x100006e84
100006d28:	19 00 80 d2	mov	x25, #0
100006d2c:	1a 00 80 d2	mov	x26, #0
100006d30:	08 00 80 52	mov	w8, #0
100006d34:	bb 00 00 d0	adrp	x27, 22 ; 0x10001c000
100006d38:	1c cb 0a 10	adr	x28, #88416
100006d3c:	1f 20 03 d5	nop
100006d40:	93 ca 0a 10	adr	x19, #88400
100006d44:	1f 20 03 d5	nop
100006d48:	15 00 80 d2	mov	x21, #0
100006d4c:	14 00 80 52	mov	w20, #0
100006d50:	fa 17 00 f9	str	x26, [sp, #40]
100006d54:	c9 0a 40 39	ldrb	w9, [x22, #2]
100006d58:	6a 47 43 f9	ldr	x10, [x27, #1672]
100006d5c:	4a 01 19 8b	add	x10, x10, x25
100006d60:	4a 79 75 b8	ldr	w10, [x10, x21, lsl #2]
100006d64:	3f 01 00 71	cmp	w9, #0
100006d68:	89 03 93 9a	csel	x9, x28, x19, eq
100006d6c:	29 01 40 f9	ldr	x9, [x9]
100006d70:	29 01 19 8b	add	x9, x9, x25
100006d74:	29 79 75 b8	ldr	w9, [x9, x21, lsl #2]
100006d78:	57 01 09 6b	subs	w23, w10, w9
100006d7c:	00 06 00 54	b.eq	0x100006e3c
100006d80:	a8 01 00 37	tbnz	w8, #0, 0x100006db4
100006d84:	08 2b 40 b9	ldr	w8, [x24, #40]
100006d88:	c8 00 00 34	cbz	w8, 0x100006da0
100006d8c:	1f 05 00 71	cmp	w8, #1
100006d90:	41 01 00 54	b.ne	0x100006db8
100006d94:	c1 a9 06 50	adr	x1, #54586 ; literal pool for: "<dict>\n<key>cpu</key><integer>%u</integer>\n<key>interrupts</key>\n<array>\n"
100006d98:	1f 20 03 d5	nop
100006d9c:	03 00 00 14	b	0x100006da8
100006da0:	21 a9 06 30	adr	x1, #54565 ; literal pool for: "CPU %u:\n"
100006da4:	1f 20 03 d5	nop
100006da8:	c0 22 40 f9	ldr	x0, [x22, #64]
100006dac:	fa 03 00 f9	str	x26, [sp]
100006db0:	cc 2b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100006db4:	08 2b 40 b9	ldr	w8, [x24, #40]
100006db8:	1f 05 00 71	cmp	w8, #1
100006dbc:	60 02 00 54	b.eq	0x100006e08
100006dc0:	a8 03 00 35	cbnz	w8, 0x100006e34
100006dc4:	c0 22 40 f9	ldr	x0, [x22, #64]
100006dc8:	bf 02 00 f1	cmp	x21, #0
100006dcc:	68 ab 06 70	adr	x8, #54639 ; literal pool for: "|-> "
100006dd0:	1f 20 03 d5	nop
100006dd4:	09 ab 06 10	adr	x9, #54624 ; literal pool for: "Total "
100006dd8:	1f 20 03 d5	nop
100006ddc:	28 01 88 9a	csel	x8, x9, x8, eq
100006de0:	49 db 08 10	adr	x9, #72552
100006de4:	1f 20 03 d5	nop
100006de8:	29 79 75 f8	ldr	x9, [x9, x21, lsl #3]
100006dec:	e0 02 63 1e	ucvtf	d0, w23
100006df0:	00 18 68 1e	fdiv	d0, d0, d8
100006df4:	e0 0b 00 fd	str	d0, [sp, #16]
100006df8:	e8 27 00 a9	stp	x8, x9, [sp]
100006dfc:	e1 a8 06 10	adr	x1, #54556 ; literal pool for: "\t%s%s: %.2f interrupts/sec\n"
100006e00:	1f 20 03 d5	nop
100006e04:	0b 00 00 14	b	0x100006e30
100006e08:	c0 22 40 f9	ldr	x0, [x22, #64]
100006e0c:	e8 d9 08 10	adr	x8, #72508
100006e10:	1f 20 03 d5	nop
100006e14:	08 79 75 f8	ldr	x8, [x8, x21, lsl #3]
100006e18:	e0 02 63 1e	ucvtf	d0, w23
100006e1c:	00 18 68 1e	fdiv	d0, d0, d8
100006e20:	e0 0b 00 fd	str	d0, [sp, #16]
100006e24:	e8 5f 00 a9	stp	x8, x23, [sp]
100006e28:	c1 a8 06 10	adr	x1, #54552 ; literal pool for: "<dict>\n<key>name</key><string>%s</string>\n<key>events</key><integer>%u</integer>\n<key>events_per_s</key><real>%g</real>\n</dict>\n"
100006e2c:	1f 20 03 d5	nop
100006e30:	ac 2b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100006e34:	94 06 00 11	add	w20, w20, #1
100006e38:	28 00 80 52	mov	w8, #1
100006e3c:	b5 06 00 91	add	x21, x21, #1
100006e40:	bf 0e 00 f1	cmp	x21, #3
100006e44:	81 f8 ff 54	b.ne	0x100006d54
100006e48:	fa 17 40 f9	ldr	x26, [sp, #40]
100006e4c:	34 01 00 34	cbz	w20, 0x100006e70
100006e50:	08 2b 40 b9	ldr	w8, [x24, #40]
100006e54:	1f 05 00 71	cmp	w8, #1
100006e58:	a1 00 00 54	b.ne	0x100006e6c
100006e5c:	c1 22 40 f9	ldr	x1, [x22, #64]
100006e60:	00 ab 06 30	adr	x0, #54625 ; literal pool for: "</array>\n</dict>\n"
100006e64:	1f 20 03 d5	nop
100006e68:	a6 2b 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100006e6c:	08 00 80 52	mov	w8, #0
100006e70:	5a 07 00 91	add	x26, x26, #1
100006e74:	39 33 00 91	add	x25, x25, #12
100006e78:	e9 13 40 f9	ldr	x9, [sp, #32]
100006e7c:	5f 03 09 eb	cmp	x26, x9
100006e80:	41 f6 ff 54	b.ne	0x100006d48
100006e84:	08 2b 40 b9	ldr	w8, [x24, #40]
100006e88:	c8 00 00 34	cbz	w8, 0x100006ea0
100006e8c:	1f 05 00 71	cmp	w8, #1
100006e90:	81 02 00 54	b.ne	0x100006ee0
100006e94:	a0 4d 06 50	adr	x0, #51638 ; literal pool for: "</array>\n"
100006e98:	1f 20 03 d5	nop
100006e9c:	03 00 00 14	b	0x100006ea8
100006ea0:	80 a9 06 70	adr	x0, #54579 ; literal pool for: "\n\n"
100006ea4:	1f 20 03 d5	nop
100006ea8:	c1 22 40 f9	ldr	x1, [x22, #64]
100006eac:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
100006eb0:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
100006eb4:	f6 57 47 a9	ldp	x22, x21, [sp, #112]
100006eb8:	f8 5f 46 a9	ldp	x24, x23, [sp, #96]
100006ebc:	fa 67 45 a9	ldp	x26, x25, [sp, #80]
100006ec0:	fc 6f 44 a9	ldp	x28, x27, [sp, #64]
100006ec4:	e9 23 43 6d	ldp	d9, d8, [sp, #48]
100006ec8:	ff 83 02 91	add	sp, sp, #160
100006ecc:	ff 23 03 d5	autibsp
100006ed0:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100006ed4:	50 00 f0 b6	tbz	x16, #62, 0x100006edc
100006ed8:	20 8e 38 d4	brk	#0xc471
100006edc:	89 2b 00 14	b	0x100011d00 ; symbol stub for: _fputs
100006ee0:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
100006ee4:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
100006ee8:	f6 57 47 a9	ldp	x22, x21, [sp, #112]
100006eec:	f8 5f 46 a9	ldp	x24, x23, [sp, #96]
100006ef0:	fa 67 45 a9	ldp	x26, x25, [sp, #80]
100006ef4:	fc 6f 44 a9	ldp	x28, x27, [sp, #64]
100006ef8:	e9 23 43 6d	ldp	d9, d8, [sp, #48]
100006efc:	ff 83 02 91	add	sp, sp, #160
100006f00:	ff 0f 5f d6	retab
100006f04:	bb 28 00 94	bl	0x1000111f0
100006f08:	7f 23 03 d5	pacibsp
100006f0c:	ff 43 01 d1	sub	sp, sp, #80
100006f10:	f6 57 02 a9	stp	x22, x21, [sp, #32]
100006f14:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
100006f18:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
100006f1c:	fd 03 01 91	add	x29, sp, #64
100006f20:	ff 1f 00 b9	str	wzr, [sp, #28]
100006f24:	ff 0b 00 f9	str	xzr, [sp, #16]
100006f28:	ff 0f 00 b9	str	wzr, [sp, #12]
100006f2c:	a9 2b 00 94	bl	0x100011dd0 ; symbol stub for: _mach_host_self
100006f30:	e2 73 00 91	add	x2, sp, #28
100006f34:	e3 43 00 91	add	x3, sp, #16
100006f38:	e4 33 00 91	add	x4, sp, #12
100006f3c:	61 00 80 52	mov	w1, #3
100006f40:	01 00 a2 72	movk	w1, #4096, lsl #16
100006f44:	8f 2b 00 94	bl	0x100011d80 ; symbol stub for: _host_processor_info
100006f48:	80 03 00 35	cbnz	w0, 0x100006fb8
100006f4c:	e8 0f 40 b9	ldr	w8, [sp, #12]
100006f50:	e0 1f 40 b9	ldr	w0, [sp, #28]
100006f54:	08 09 c0 1a	udiv	w8, w8, w0
100006f58:	1f 25 00 71	cmp	w8, #9
100006f5c:	e1 02 00 54	b.ne	0x100006fb8
100006f60:	54 89 0a 10	adr	x20, #86312
100006f64:	1f 20 03 d5	nop
100006f68:	88 02 40 39	ldrb	w8, [x20]
100006f6c:	b5 00 00 d0	adrp	x21, 22 ; 0x10001c000
100006f70:	b3 00 00 d0	adrp	x19, 22 ; 0x10001c000
100006f74:	c8 03 00 34	cbz	w8, 0x100006fec
100006f78:	81 01 80 52	mov	w1, #12
100006f7c:	39 2b 00 94	bl	0x100011c60 ; symbol stub for: _calloc
100006f80:	60 4a 03 f9	str	x0, [x19, #1680]
100006f84:	e0 1f 40 b9	ldr	w0, [sp, #28]
100006f88:	81 01 80 52	mov	w1, #12
100006f8c:	35 2b 00 94	bl	0x100011c60 ; symbol stub for: _calloc
100006f90:	a0 46 03 f9	str	x0, [x21, #1672]
100006f94:	e0 1f 40 b9	ldr	w0, [sp, #28]
100006f98:	81 01 80 52	mov	w1, #12
100006f9c:	31 2b 00 94	bl	0x100011c60 ; symbol stub for: _calloc
100006fa0:	a8 00 00 d0	adrp	x8, 22 ; 0x10001c000
100006fa4:	00 4d 03 f9	str	x0, [x8, #1688]
100006fa8:	e9 1f 40 b9	ldr	w9, [sp, #28]
100006fac:	1f 20 03 d5	nop
100006fb0:	09 81 06 b9	str	w9, [x8, #1664]
100006fb4:	16 00 00 14	b	0x10000700c
100006fb8:	1f 20 03 d5	nop
100006fbc:	28 a5 08 58	ldr	x8, #70820 ; literal pool symbol address: ___stderrp
100006fc0:	03 01 40 f9	ldr	x3, [x8]
100006fc4:	00 a1 06 10	adr	x0, #54304 ; literal pool for: "host_processor_info PROCESSOR_CPU_STAT call failed\n"
100006fc8:	1f 20 03 d5	nop
100006fcc:	61 06 80 52	mov	w1, #51
100006fd0:	22 00 80 52	mov	w2, #1
100006fd4:	53 2b 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100006fd8:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
100006fdc:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
100006fe0:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
100006fe4:	ff 43 01 91	add	sp, sp, #80
100006fe8:	ff 0f 5f d6	retab
100006fec:	1f 20 03 d5	nop
100006ff0:	48 b5 0a 58	ldr	x8, #87720
100006ff4:	a1 46 43 f9	ldr	x1, [x21, #1672]
100006ff8:	09 04 00 8b	add	x9, x0, x0, lsl #1
100006ffc:	22 f5 7e d3	lsl	x2, x9, #2
100007000:	e0 03 08 aa	mov	x0, x8
100007004:	8b 2b 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
100007008:	e9 1f 40 b9	ldr	w9, [sp, #28]
10000700c:	e1 0b 40 f9	ldr	x1, [sp, #16]
100007010:	a8 46 43 f9	ldr	x8, [x21, #1672]
100007014:	e9 01 00 34	cbz	w9, 0x100007050
100007018:	09 00 80 d2	mov	x9, #0
10000701c:	0a 21 00 91	add	x10, x8, #8
100007020:	2b 20 00 91	add	x11, x1, #8
100007024:	60 81 5f fc	ldur	d0, [x11, #-8]
100007028:	40 81 1f fc	stur	d0, [x10, #-8]
10000702c:	6c 45 42 b8	ldr	w12, [x11], #36
100007030:	4c c5 00 b8	str	w12, [x10], #12
100007034:	29 05 00 91	add	x9, x9, #1
100007038:	ec 1f 40 b9	ldr	w12, [sp, #28]
10000703c:	3f 01 0c eb	cmp	x9, x12
100007040:	23 ff ff 54	b.lo	0x100007024
100007044:	89 05 0c 8b	add	x9, x12, x12, lsl #1
100007048:	22 f5 7e d3	lsl	x2, x9, #2
10000704c:	02 00 00 14	b	0x100007054
100007050:	02 00 80 d2	mov	x2, #0
100007054:	89 02 40 39	ldrb	w9, [x20]
100007058:	a9 00 00 34	cbz	w9, 0x10000706c
10000705c:	60 4a 43 f9	ldr	x0, [x19, #1680]
100007060:	e1 03 08 aa	mov	x1, x8
100007064:	73 2b 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
100007068:	e1 0b 40 f9	ldr	x1, [sp, #16]
10000706c:	1f 20 03 d5	nop
100007070:	88 a1 08 58	ldr	x8, #70704 ; literal pool symbol address: _mach_task_self_
100007074:	00 01 40 b9	ldr	w0, [x8]
100007078:	e8 0f 40 b9	ldr	w8, [sp, #12]
10000707c:	02 f5 7e d3	lsl	x2, x8, #2
100007080:	2c 2c 00 94	bl	0x100012130 ; symbol stub for: _vm_deallocate
100007084:	d5 ff ff 17	b	0x100006fd8
100007088:	7f 23 03 d5	pacibsp
10000708c:	ff 03 04 d1	sub	sp, sp, #256
100007090:	fc 6f 0a a9	stp	x28, x27, [sp, #160]
100007094:	fa 67 0b a9	stp	x26, x25, [sp, #176]
100007098:	f8 5f 0c a9	stp	x24, x23, [sp, #192]
10000709c:	f6 57 0d a9	stp	x22, x21, [sp, #208]
1000070a0:	f4 4f 0e a9	stp	x20, x19, [sp, #224]
1000070a4:	fd 7b 0f a9	stp	x29, x30, [sp, #240]
1000070a8:	fd c3 03 91	add	x29, sp, #240
1000070ac:	fa 03 01 aa	mov	x26, x1
1000070b0:	fb 03 00 aa	mov	x27, x0
1000070b4:	bf 03 19 f8	stur	xzr, [x29, #-112]
1000070b8:	ff 3f 00 f9	str	xzr, [sp, #120]
1000070bc:	ff 77 00 b9	str	wzr, [sp, #116]
1000070c0:	ff 7f 06 a9	stp	xzr, xzr, [sp, #96]
1000070c4:	ff 7f 05 a9	stp	xzr, xzr, [sp, #80]
1000070c8:	ff 7f 04 a9	stp	xzr, xzr, [sp, #64]
1000070cc:	08 00 80 12	mov	w8, #-1
1000070d0:	e8 3f 00 b9	str	w8, [sp, #60]
1000070d4:	1f 20 03 d5	nop
1000070d8:	88 9c 08 58	ldr	x8, #70544 ; literal pool symbol address: ___stdoutp
1000070dc:	08 01 40 f9	ldr	x8, [x8]
1000070e0:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000070e4:	28 65 00 f9	str	x8, [x9, #200]
1000070e8:	e0 03 01 91	add	x0, sp, #64
1000070ec:	91 2b 00 94	bl	0x100011f30 ; symbol stub for: _posix_spawnattr_init
1000070f0:	f5 03 00 aa	mov	x21, x0
1000070f4:	bf 2a 00 94	bl	0x100011bf0 ; symbol stub for: ___error
1000070f8:	15 00 00 b9	str	w21, [x0]
1000070fc:	75 6e 00 35	cbnz	w21, 0x100007ec8
100007100:	e0 03 01 91	add	x0, sp, #64
100007104:	01 08 80 52	mov	w1, #64
100007108:	92 2b 00 94	bl	0x100011f50 ; symbol stub for: _posix_spawnattr_setflags
10000710c:	f5 03 00 aa	mov	x21, x0
100007110:	b8 2a 00 94	bl	0x100011bf0 ; symbol stub for: ___error
100007114:	15 00 00 b9	str	w21, [x0]
100007118:	b5 6d 00 35	cbnz	w21, 0x100007ecc
10000711c:	bf 83 19 b8	stur	wzr, [x29, #-104]
100007120:	88 00 80 52	mov	w8, #4
100007124:	a8 03 1a f8	stur	x8, [x29, #-96]
100007128:	e0 b1 06 50	adr	x0, #54846 ; literal pool for: "sysctl.proc_translated"
10000712c:	1f 20 03 d5	nop
100007130:	a1 a3 01 d1	sub	x1, x29, #104
100007134:	a2 83 01 d1	sub	x2, x29, #96
100007138:	03 00 80 d2	mov	x3, #0
10000713c:	04 00 80 d2	mov	x4, #0
100007140:	e8 2b 00 94	bl	0x1000120e0 ; symbol stub for: _sysctlbyname
100007144:	b3 00 00 b0	adrp	x19, 21 ; 0x10001c000
100007148:	1f 04 00 31	cmn	w0, #1
10000714c:	80 02 00 54	b.eq	0x10000719c
100007150:	a8 83 59 b8	ldur	w8, [x29, #-104]
100007154:	1f 05 00 71	cmp	w8, #1
100007158:	e8 17 9f 1a	cset	w8, eq
10000715c:	68 82 1a 39	strb	w8, [x19, #1696]
100007160:	21 02 00 54	b.ne	0x1000071a4
100007164:	88 01 80 52	mov	w8, #12
100007168:	08 20 a0 72	movk	w8, #256, lsl #16
10000716c:	e8 3f 00 b9	str	w8, [sp, #60]
100007170:	e0 03 01 91	add	x0, sp, #64
100007174:	e2 f3 00 91	add	x2, sp, #60
100007178:	e3 23 01 91	add	x3, sp, #72
10000717c:	21 00 80 52	mov	w1, #1
100007180:	70 2b 00 94	bl	0x100011f40 ; symbol stub for: _posix_spawnattr_setbinpref_np
100007184:	1f 04 00 31	cmn	w0, #1
100007188:	c0 6b 00 54	b.eq	0x100007f00
10000718c:	e8 27 40 f9	ldr	x8, [sp, #72]
100007190:	1f 05 00 f1	cmp	x8, #1
100007194:	80 00 00 54	b.eq	0x1000071a4
100007198:	88 28 00 94	bl	0x1000113b8
10000719c:	95 2a 00 94	bl	0x100011bf0 ; symbol stub for: ___error
1000071a0:	7f 82 1a 39	strb	wzr, [x19, #1696]
1000071a4:	a3 03 00 94	bl	0x100008030
1000071a8:	60 00 00 34	cbz	w0, 0x1000071b4
1000071ac:	bc 03 00 94	bl	0x10000809c
1000071b0:	e0 00 00 34	cbz	w0, 0x1000071cc
1000071b4:	9f 03 00 94	bl	0x100008030
1000071b8:	c0 02 00 34	cbz	w0, 0x100007210
1000071bc:	b8 03 00 94	bl	0x10000809c
1000071c0:	80 02 00 34	cbz	w0, 0x100007210
1000071c4:	68 82 5a 39	ldrb	w8, [x19, #1696]
1000071c8:	48 02 00 34	cbz	w8, 0x100007210
1000071cc:	81 2a 00 94	bl	0x100011bd0 ; symbol stub for: __NSGetEnviron
1000071d0:	05 00 40 f9	ldr	x5, [x0]
1000071d4:	81 97 06 70	adr	x1, #54003 ; literal pool for: "/usr/appleinternal/bin/powermetrics_internal"
1000071d8:	1f 20 03 d5	nop
1000071dc:	e3 03 01 91	add	x3, sp, #64
1000071e0:	00 00 80 d2	mov	x0, #0
1000071e4:	02 00 80 d2	mov	x2, #0
1000071e8:	e4 03 1a aa	mov	x4, x26
1000071ec:	4d 2b 00 94	bl	0x100011f20 ; symbol stub for: _posix_spawn
1000071f0:	1f 20 03 d5	nop
1000071f4:	68 93 08 58	ldr	x8, #70252 ; literal pool symbol address: ___stderrp
1000071f8:	03 01 40 f9	ldr	x3, [x8]
1000071fc:	c0 97 06 10	adr	x0, #54008 ; literal pool for: "Failed to launch /usr/appleinternal/bin/powermetrics_internal\n"
100007200:	1f 20 03 d5	nop
100007204:	c1 07 80 52	mov	w1, #62
100007208:	22 00 80 52	mov	w2, #1
10000720c:	c5 2a 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100007210:	08 00 80 52	mov	w8, #0
100007214:	f3 0d 06 10	adr	x19, #49596
100007218:	1f 20 03 d5	nop
10000721c:	34 ba 08 10	adr	x20, #71492
100007220:	1f 20 03 d5	nop
100007224:	b6 00 00 b0	adrp	x22, 21 ; 0x10001c000
100007228:	dc dd 08 10	adr	x28, #72632
10000722c:	1f 20 03 d5	nop
100007230:	18 03 80 52	mov	w24, #24
100007234:	35 e0 08 10	adr	x21, #72708
100007238:	1f 20 03 d5	nop
10000723c:	fa 0f 00 f9	str	x26, [sp, #24]
100007240:	fb 17 00 b9	str	w27, [sp, #20]
100007244:	f7 03 08 aa	mov	x23, x8
100007248:	e0 03 1b aa	mov	x0, x27
10000724c:	e1 03 1a aa	mov	x1, x26
100007250:	e2 03 13 aa	mov	x2, x19
100007254:	e3 03 14 aa	mov	x3, x20
100007258:	04 00 80 d2	mov	x4, #0
10000725c:	b9 2a 00 94	bl	0x100011d40 ; symbol stub for: _getopt_long
100007260:	1f 10 05 71	cmp	w0, #324
100007264:	2d 02 00 54	b.le	0x1000072a8
100007268:	10 14 05 51	sub	w16, w0, #325
10000726c:	1f ca 00 71	cmp	w16, #50
100007270:	08 60 00 54	b.hi	0x100007e70
100007274:	1f ca 00 f1	cmp	x16, #50
100007278:	10 92 9f 9a	csel	x16, x16, xzr, ls
10000727c:	51 67 00 10	adr	x17, #3304
100007280:	1f 20 03 d5	nop
100007284:	30 7a b0 b8	ldrsw	x16, [x17, x16, lsl #2]
100007288:	11 00 00 10	adr	x17, #0
10000728c:	30 02 10 8b	add	x16, x17, x16
100007290:	00 02 1f d6	br	x16
100007294:	28 00 80 52	mov	w8, #1
100007298:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
10000729c:	28 55 04 39	strb	w8, [x9, #277]
1000072a0:	e8 03 17 aa	mov	x8, x23
1000072a4:	e8 ff ff 17	b	0x100007244
1000072a8:	1f 50 01 71	cmp	w0, #84
1000072ac:	6d 03 00 54	b.le	0x100007318
1000072b0:	10 84 01 51	sub	w16, w0, #97
1000072b4:	1f 5e 00 71	cmp	w16, #23
1000072b8:	c8 04 00 54	b.hi	0x100007350
1000072bc:	1f 5e 00 f1	cmp	x16, #23
1000072c0:	10 92 9f 9a	csel	x16, x16, xzr, ls
1000072c4:	11 62 00 10	adr	x17, #3136
1000072c8:	1f 20 03 d5	nop
1000072cc:	30 7a b0 b8	ldrsw	x16, [x17, x16, lsl #2]
1000072d0:	11 00 00 10	adr	x17, #0
1000072d4:	30 02 10 8b	add	x16, x17, x16
1000072d8:	00 02 1f d6	br	x16
1000072dc:	1f 20 03 d5	nop
1000072e0:	48 8e 08 58	ldr	x8, #70088 ; literal pool symbol address: _optarg
1000072e4:	00 01 40 f9	ldr	x0, [x8]
1000072e8:	41 70 0a 10	adr	x1, #85512
1000072ec:	1f 20 03 d5	nop
1000072f0:	8c 1f 00 94	bl	0x10000f120
1000072f4:	e8 03 17 aa	mov	x8, x23
1000072f8:	60 fa ff 35	cbnz	w0, 0x100007244
1000072fc:	ea 03 17 aa	mov	x10, x23
100007300:	1f 20 03 d5	nop
100007304:	1f 20 03 d5	nop
100007308:	49 6f 0a 58	ldr	x9, #85480
10000730c:	e8 03 17 aa	mov	x8, x23
100007310:	a9 f9 ff b6	tbz	x9, #63, 0x100007244
100007314:	e7 02 00 14	b	0x100007eb0
100007318:	1f 08 01 71	cmp	w0, #66
10000731c:	2d 01 00 54	b.le	0x100007340
100007320:	1f 0c 01 71	cmp	w0, #67
100007324:	60 02 00 54	b.eq	0x100007370
100007328:	1f 3c 01 71	cmp	w0, #79
10000732c:	21 5a 00 54	b.ne	0x100007e70
100007330:	48 00 80 52	mov	w8, #2
100007334:	c8 fe 00 b9	str	w8, [x22, #252]
100007338:	e8 03 17 aa	mov	x8, x23
10000733c:	c2 ff ff 17	b	0x100007244
100007340:	28 00 80 52	mov	w8, #1
100007344:	1f 04 01 71	cmp	w0, #65
100007348:	e0 f7 ff 54	b.eq	0x100007244
10000734c:	91 01 00 14	b	0x100007990
100007350:	1f 54 01 71	cmp	w0, #85
100007354:	20 2a 00 54	b.eq	0x100007898
100007358:	1f 5c 01 71	cmp	w0, #87
10000735c:	a1 58 00 54	b.ne	0x100007e70
100007360:	28 00 80 52	mov	w8, #1
100007364:	c8 fe 00 b9	str	w8, [x22, #252]
100007368:	e8 03 17 aa	mov	x8, x23
10000736c:	b6 ff ff 17	b	0x100007244
100007370:	df fe 00 b9	str	wzr, [x22, #252]
100007374:	e8 03 17 aa	mov	x8, x23
100007378:	b3 ff ff 17	b	0x100007244
10000737c:	28 00 80 52	mov	w8, #1
100007380:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007384:	28 2d 04 39	strb	w8, [x9, #267]
100007388:	e8 03 17 aa	mov	x8, x23
10000738c:	ae ff ff 17	b	0x100007244
100007390:	28 00 80 52	mov	w8, #1
100007394:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007398:	28 4d 04 39	strb	w8, [x9, #275]
10000739c:	e8 03 17 aa	mov	x8, x23
1000073a0:	a9 ff ff 17	b	0x100007244
1000073a4:	28 00 80 52	mov	w8, #1
1000073a8:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000073ac:	28 69 04 39	strb	w8, [x9, #282]
1000073b0:	e8 03 17 aa	mov	x8, x23
1000073b4:	a4 ff ff 17	b	0x100007244
1000073b8:	28 00 80 52	mov	w8, #1
1000073bc:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000073c0:	28 45 04 39	strb	w8, [x9, #273]
1000073c4:	e8 03 17 aa	mov	x8, x23
1000073c8:	9f ff ff 17	b	0x100007244
1000073cc:	28 00 80 52	mov	w8, #1
1000073d0:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000073d4:	28 49 04 39	strb	w8, [x9, #274]
1000073d8:	e8 03 17 aa	mov	x8, x23
1000073dc:	9a ff ff 17	b	0x100007244
1000073e0:	28 00 80 52	mov	w8, #1
1000073e4:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000073e8:	28 3d 04 39	strb	w8, [x9, #271]
1000073ec:	e8 03 17 aa	mov	x8, x23
1000073f0:	95 ff ff 17	b	0x100007244
1000073f4:	28 00 80 52	mov	w8, #1
1000073f8:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000073fc:	28 51 04 39	strb	w8, [x9, #276]
100007400:	e8 03 17 aa	mov	x8, x23
100007404:	90 ff ff 17	b	0x100007244
100007408:	28 00 80 52	mov	w8, #1
10000740c:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007410:	28 29 04 39	strb	w8, [x9, #266]
100007414:	e8 03 17 aa	mov	x8, x23
100007418:	8b ff ff 17	b	0x100007244
10000741c:	28 00 80 52	mov	w8, #1
100007420:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007424:	28 59 04 39	strb	w8, [x9, #278]
100007428:	e8 03 17 aa	mov	x8, x23
10000742c:	86 ff ff 17	b	0x100007244
100007430:	28 00 80 52	mov	w8, #1
100007434:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007438:	28 65 04 39	strb	w8, [x9, #281]
10000743c:	e8 03 17 aa	mov	x8, x23
100007440:	81 ff ff 17	b	0x100007244
100007444:	28 00 80 52	mov	w8, #1
100007448:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
10000744c:	28 41 04 39	strb	w8, [x9, #272]
100007450:	e8 03 17 aa	mov	x8, x23
100007454:	7c ff ff 17	b	0x100007244
100007458:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
10000745c:	1f a1 03 39	strb	wzr, [x8, #232]
100007460:	e8 03 17 aa	mov	x8, x23
100007464:	78 ff ff 17	b	0x100007244
100007468:	28 00 80 52	mov	w8, #1
10000746c:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007470:	28 31 04 39	strb	w8, [x9, #268]
100007474:	e8 03 17 aa	mov	x8, x23
100007478:	73 ff ff 17	b	0x100007244
10000747c:	28 00 80 52	mov	w8, #1
100007480:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007484:	28 25 04 39	strb	w8, [x9, #265]
100007488:	e8 03 17 aa	mov	x8, x23
10000748c:	6e ff ff 17	b	0x100007244
100007490:	28 00 80 52	mov	w8, #1
100007494:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007498:	28 35 04 39	strb	w8, [x9, #269]
10000749c:	e8 03 17 aa	mov	x8, x23
1000074a0:	69 ff ff 17	b	0x100007244
1000074a4:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
1000074a8:	29 00 80 52	mov	w9, #1
1000074ac:	09 a9 03 39	strb	w9, [x8, #234]
1000074b0:	e8 03 17 aa	mov	x8, x23
1000074b4:	64 ff ff 17	b	0x100007244
1000074b8:	28 00 80 52	mov	w8, #1
1000074bc:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000074c0:	28 6d 04 39	strb	w8, [x9, #283]
1000074c4:	e8 03 17 aa	mov	x8, x23
1000074c8:	5f ff ff 17	b	0x100007244
1000074cc:	28 00 80 52	mov	w8, #1
1000074d0:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000074d4:	28 5d 04 39	strb	w8, [x9, #279]
1000074d8:	e8 03 17 aa	mov	x8, x23
1000074dc:	5a ff ff 17	b	0x100007244
1000074e0:	28 00 80 52	mov	w8, #1
1000074e4:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000074e8:	28 a5 03 39	strb	w8, [x9, #233]
1000074ec:	e8 03 17 aa	mov	x8, x23
1000074f0:	55 ff ff 17	b	0x100007244
1000074f4:	28 00 80 52	mov	w8, #1
1000074f8:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000074fc:	28 39 04 39	strb	w8, [x9, #270]
100007500:	e8 03 17 aa	mov	x8, x23
100007504:	50 ff ff 17	b	0x100007244
100007508:	1f 20 03 d5	nop
10000750c:	e8 7c 08 58	ldr	x8, #69532 ; literal pool symbol address: _optarg
100007510:	00 01 40 f9	ldr	x0, [x8]
100007514:	f9 03 17 aa	mov	x25, x23
100007518:	57 5e 0a 10	adr	x23, #84936
10000751c:	1f 20 03 d5	nop
100007520:	e1 03 17 aa	mov	x1, x23
100007524:	ff 1e 00 94	bl	0x10000f120
100007528:	e8 02 40 f9	ldr	x8, [x23]
10000752c:	1f 00 00 71	cmp	w0, #0
100007530:	00 09 42 ba	ccmn	x8, #2, #0, eq
100007534:	e8 03 19 aa	mov	x8, x25
100007538:	6c e8 ff 54	b.gt	0x100007244
10000753c:	5e 02 00 14	b	0x100007eb4
100007540:	f9 03 17 aa	mov	x25, x23
100007544:	1f 20 03 d5	nop
100007548:	08 7b 08 58	ldr	x8, #69472 ; literal pool symbol address: _optarg
10000754c:	17 01 40 f9	ldr	x23, [x8]
100007550:	e0 03 17 aa	mov	x0, x23
100007554:	21 82 06 10	adr	x1, #53316 ; literal pool for: "text"
100007558:	1f 20 03 d5	nop
10000755c:	b1 2a 00 94	bl	0x100012020 ; symbol stub for: _strcasecmp
100007560:	a0 1f 00 34	cbz	w0, 0x100007954
100007564:	e0 03 17 aa	mov	x0, x23
100007568:	a1 81 06 30	adr	x1, #53301 ; literal pool for: "plist"
10000756c:	1f 20 03 d5	nop
100007570:	ac 2a 00 94	bl	0x100012020 ; symbol stub for: _strcasecmp
100007574:	e8 03 19 aa	mov	x8, x25
100007578:	60 e6 ff 35	cbnz	w0, 0x100007244
10000757c:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
100007580:	29 00 80 52	mov	w9, #1
100007584:	09 f9 00 b9	str	w9, [x8, #248]
100007588:	e8 03 19 aa	mov	x8, x25
10000758c:	2e ff ff 17	b	0x100007244
100007590:	1f 20 03 d5	nop
100007594:	a8 78 08 58	ldr	x8, #69396 ; literal pool symbol address: _optarg
100007598:	00 01 40 f9	ldr	x0, [x8]
10000759c:	e1 59 0a 10	adr	x1, #84796
1000075a0:	1f 20 03 d5	nop
1000075a4:	df 1e 00 94	bl	0x10000f120
1000075a8:	e8 03 17 aa	mov	x8, x23
1000075ac:	c0 e4 ff 35	cbnz	w0, 0x100007244
1000075b0:	ea 03 17 aa	mov	x10, x23
1000075b4:	1f 20 03 d5	nop
1000075b8:	1f 20 03 d5	nop
1000075bc:	e9 58 0a 58	ldr	x9, #84764
1000075c0:	e8 03 17 aa	mov	x8, x23
1000075c4:	09 e4 ff b6	tbz	x9, #63, 0x100007244
1000075c8:	3c 02 00 14	b	0x100007eb8
1000075cc:	1f 20 03 d5	nop
1000075d0:	c8 76 08 58	ldr	x8, #69336 ; literal pool symbol address: _optarg
1000075d4:	00 01 40 f9	ldr	x0, [x8]
1000075d8:	f9 03 17 aa	mov	x25, x23
1000075dc:	b7 57 0a 10	adr	x23, #84724
1000075e0:	1f 20 03 d5	nop
1000075e4:	e1 03 17 aa	mov	x1, x23
1000075e8:	ce 1e 00 94	bl	0x10000f120
1000075ec:	e8 02 40 f9	ldr	x8, [x23]
1000075f0:	1f 00 00 71	cmp	w0, #0
1000075f4:	00 09 42 ba	ccmn	x8, #2, #0, eq
1000075f8:	e8 03 19 aa	mov	x8, x25
1000075fc:	4c e2 ff 54	b.gt	0x100007244
100007600:	2f 02 00 14	b	0x100007ebc
100007604:	1f 20 03 d5	nop
100007608:	08 75 08 58	ldr	x8, #69280 ; literal pool symbol address: _optarg
10000760c:	00 01 40 f9	ldr	x0, [x8]
100007610:	e1 7f 06 10	adr	x1, #53244 ; literal pool for: "w"
100007614:	1f 20 03 d5	nop
100007618:	ae 29 00 94	bl	0x100011cd0 ; symbol stub for: _fopen
10000761c:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
100007620:	00 65 00 f9	str	x0, [x8, #200]
100007624:	e8 03 17 aa	mov	x8, x23
100007628:	e0 e0 ff b5	cbnz	x0, 0x100007244
10000762c:	25 02 00 14	b	0x100007ec0
100007630:	f9 03 17 aa	mov	x25, x23
100007634:	1f 20 03 d5	nop
100007638:	88 73 08 58	ldr	x8, #69232 ; literal pool symbol address: _optarg
10000763c:	17 01 40 f9	ldr	x23, [x8]
100007640:	e0 03 17 aa	mov	x0, x23
100007644:	61 7f 06 30	adr	x1, #53229 ; literal pool for: "cputime"
100007648:	1f 20 03 d5	nop
10000764c:	75 2a 00 94	bl	0x100012020 ; symbol stub for: _strcasecmp
100007650:	a0 18 00 34	cbz	w0, 0x100007964
100007654:	e0 03 17 aa	mov	x0, x23
100007658:	01 7f 06 30	adr	x1, #53217 ; literal pool for: "wakeups"
10000765c:	1f 20 03 d5	nop
100007660:	70 2a 00 94	bl	0x100012020 ; symbol stub for: _strcasecmp
100007664:	60 18 00 34	cbz	w0, 0x100007970
100007668:	e0 03 17 aa	mov	x0, x23
10000766c:	a1 7e 06 30	adr	x1, #53205 ; literal pool for: "composite"
100007670:	1f 20 03 d5	nop
100007674:	6b 2a 00 94	bl	0x100012020 ; symbol stub for: _strcasecmp
100007678:	40 18 00 34	cbz	w0, 0x100007980
10000767c:	e0 03 17 aa	mov	x0, x23
100007680:	41 7e 06 70	adr	x1, #53195 ; literal pool for: "pid"
100007684:	1f 20 03 d5	nop
100007688:	66 2a 00 94	bl	0x100012020 ; symbol stub for: _strcasecmp
10000768c:	a0 3e 00 35	cbnz	w0, 0x100007e60
100007690:	68 00 80 52	mov	w8, #3
100007694:	bc 00 00 14	b	0x100007984
100007698:	1f 20 03 d5	nop
10000769c:	68 70 08 58	ldr	x8, #69132 ; literal pool symbol address: _optarg
1000076a0:	16 01 40 f9	ldr	x22, [x8]
1000076a4:	e0 03 16 aa	mov	x0, x22
1000076a8:	76 2a 00 94	bl	0x100012080 ; symbol stub for: _strlen
1000076ac:	e0 1b 00 f9	str	x0, [sp, #48]
1000076b0:	56 3d 00 b4	cbz	x22, 0x100007e58
1000076b4:	f7 27 00 b9	str	w23, [sp, #36]
1000076b8:	e0 03 16 aa	mov	x0, x22
1000076bc:	81 05 80 52	mov	w1, #44
1000076c0:	5c 2a 00 94	bl	0x100012030 ; symbol stub for: _strchr
1000076c4:	e0 02 00 b4	cbz	x0, 0x100007720
1000076c8:	1f 14 00 38	strb	wzr, [x0], #1
1000076cc:	fc ff ff 17	b	0x1000076bc
1000076d0:	1f 20 03 d5	nop
1000076d4:	a8 6e 08 58	ldr	x8, #69076 ; literal pool symbol address: _optarg
1000076d8:	00 01 40 f9	ldr	x0, [x8]
1000076dc:	e1 e3 01 91	add	x1, sp, #120
1000076e0:	90 1e 00 94	bl	0x10000f120
1000076e4:	e8 3f 40 f9	ldr	x8, [sp, #120]
1000076e8:	1f 00 00 71	cmp	w0, #0
1000076ec:	00 09 40 fa	ccmp	x8, #0, #0, eq
1000076f0:	ad 3e 00 54	b.le	0x100007ec4
1000076f4:	09 7d 80 52	mov	w9, #1000
1000076f8:	08 7d 09 9b	mul	x8, x8, x9
1000076fc:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007700:	28 81 00 f9	str	x8, [x9, #256]
100007704:	e8 03 17 aa	mov	x8, x23
100007708:	cf fe ff 17	b	0x100007244
10000770c:	28 00 80 52	mov	w8, #1
100007710:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007714:	28 21 04 39	strb	w8, [x9, #264]
100007718:	e8 03 17 aa	mov	x8, x23
10000771c:	ca fe ff 17	b	0x100007244
100007720:	e8 1b 40 f9	ldr	x8, [sp, #48]
100007724:	d4 02 08 8b	add	x20, x22, x8
100007728:	1f 05 00 f1	cmp	x8, #1
10000772c:	ab 03 00 54	b.lt	0x1000077a0
100007730:	f7 03 16 aa	mov	x23, x22
100007734:	13 00 80 d2	mov	x19, #0
100007738:	88 6b 73 f8	ldr	x8, [x28, x19]
10000773c:	01 01 40 f9	ldr	x1, [x8]
100007740:	e0 03 17 aa	mov	x0, x23
100007744:	3f 2a 00 94	bl	0x100012040 ; symbol stub for: _strcmp
100007748:	00 02 00 34	cbz	w0, 0x100007788
10000774c:	73 22 00 91	add	x19, x19, #8
100007750:	7f 62 01 f1	cmp	x19, #88
100007754:	21 ff ff 54	b.ne	0x100007738
100007758:	08 00 80 d2	mov	x8, #0
10000775c:	29 00 80 52	mov	w9, #1
100007760:	f3 03 09 aa	mov	x19, x9
100007764:	08 7d 18 9b	mul	x8, x8, x24
100007768:	a1 6a 68 f8	ldr	x1, [x21, x8]
10000776c:	e0 03 17 aa	mov	x0, x23
100007770:	34 2a 00 94	bl	0x100012040 ; symbol stub for: _strcmp
100007774:	a0 00 00 34	cbz	w0, 0x100007788
100007778:	09 00 80 52	mov	w9, #0
10000777c:	28 00 80 52	mov	w8, #1
100007780:	13 ff 07 37	tbnz	w19, #0, 0x100007760
100007784:	c7 01 00 14	b	0x100007ea0
100007788:	e0 03 17 aa	mov	x0, x23
10000778c:	3d 2a 00 94	bl	0x100012080 ; symbol stub for: _strlen
100007790:	08 00 17 8b	add	x8, x0, x23
100007794:	17 05 00 91	add	x23, x8, #1
100007798:	ff 02 14 eb	cmp	x23, x20
10000779c:	c3 fc ff 54	b.lo	0x100007734
1000077a0:	f6 17 00 f9	str	x22, [sp, #40]
1000077a4:	13 00 80 d2	mov	x19, #0
1000077a8:	e8 1b 40 f9	ldr	x8, [sp, #48]
1000077ac:	1f 05 00 f1	cmp	x8, #1
1000077b0:	6b 06 00 54	b.lt	0x10000787c
1000077b4:	16 00 80 52	mov	w22, #0
1000077b8:	9b 7b 73 f8	ldr	x27, [x28, x19, lsl #3]
1000077bc:	77 03 40 f9	ldr	x23, [x27]
1000077c0:	fa 17 40 f9	ldr	x26, [sp, #40]
1000077c4:	e0 03 1a aa	mov	x0, x26
1000077c8:	e1 03 17 aa	mov	x1, x23
1000077cc:	1d 2a 00 94	bl	0x100012040 ; symbol stub for: _strcmp
1000077d0:	80 04 00 34	cbz	w0, 0x100007860
1000077d4:	19 00 80 d2	mov	x25, #0
1000077d8:	28 7f 18 9b	mul	x8, x25, x24
1000077dc:	a1 6a 68 f8	ldr	x1, [x21, x8]
1000077e0:	e0 03 1a aa	mov	x0, x26
1000077e4:	17 2a 00 94	bl	0x100012040 ; symbol stub for: _strcmp
1000077e8:	40 02 00 35	cbnz	w0, 0x100007830
1000077ec:	29 57 18 9b	madd	x9, x25, x24, x21
1000077f0:	2a 09 40 f9	ldr	x10, [x9, #16]
1000077f4:	48 01 40 f9	ldr	x8, [x10]
1000077f8:	1f 01 1b eb	cmp	x8, x27
1000077fc:	20 02 00 54	b.eq	0x100007840
100007800:	08 00 80 d2	mov	x8, #0
100007804:	29 05 40 f9	ldr	x9, [x9, #8]
100007808:	4a 21 00 91	add	x10, x10, #8
10000780c:	2b 05 00 d1	sub	x11, x9, #1
100007810:	7f 01 08 eb	cmp	x11, x8
100007814:	e0 00 00 54	b.eq	0x100007830
100007818:	4c 79 68 f8	ldr	x12, [x10, x8, lsl #3]
10000781c:	08 05 00 91	add	x8, x8, #1
100007820:	9f 01 1b eb	cmp	x12, x27
100007824:	61 ff ff 54	b.ne	0x100007810
100007828:	1f 01 09 eb	cmp	x8, x9
10000782c:	a3 00 00 54	b.lo	0x100007840
100007830:	39 07 00 91	add	x25, x25, #1
100007834:	3f 0b 00 f1	cmp	x25, #2
100007838:	01 fd ff 54	b.ne	0x1000077d8
10000783c:	02 00 00 14	b	0x100007844
100007840:	36 00 80 52	mov	w22, #1
100007844:	e0 03 1a aa	mov	x0, x26
100007848:	0e 2a 00 94	bl	0x100012080 ; symbol stub for: _strlen
10000784c:	08 00 1a 8b	add	x8, x0, x26
100007850:	1a 05 00 91	add	x26, x8, #1
100007854:	5f 03 14 eb	cmp	x26, x20
100007858:	63 fb ff 54	b.lo	0x1000077c4
10000785c:	16 01 00 36	tbz	w22, #0, 0x10000787c
100007860:	aa 00 00 b0	adrp	x10, 21 ; 0x10001c000
100007864:	48 a5 46 b9	ldr	w8, [x10, #1700]
100007868:	09 05 00 11	add	w9, w8, #1
10000786c:	49 a5 06 b9	str	w9, [x10, #1700]
100007870:	c9 71 0a 10	adr	x9, #85560
100007874:	1f 20 03 d5	nop
100007878:	3b 79 28 f8	str	x27, [x9, x8, lsl #3]
10000787c:	73 06 00 91	add	x19, x19, #1
100007880:	7f 2e 00 f1	cmp	x19, #11
100007884:	21 f9 ff 54	b.ne	0x1000077a8
100007888:	e8 27 40 b9	ldr	w8, [sp, #36]
10000788c:	fa 0f 40 f9	ldr	x26, [sp, #24]
100007890:	fb 17 40 b9	ldr	w27, [sp, #20]
100007894:	2a 00 00 14	b	0x10000793c
100007898:	f7 27 00 b9	str	w23, [sp, #36]
10000789c:	1f 20 03 d5	nop
1000078a0:	48 60 08 58	ldr	x8, #68616 ; literal pool symbol address: _optarg
1000078a4:	17 01 40 f9	ldr	x23, [x8]
1000078a8:	e0 03 17 aa	mov	x0, x23
1000078ac:	f5 29 00 94	bl	0x100012080 ; symbol stub for: _strlen
1000078b0:	77 2d 00 b4	cbz	x23, 0x100007e5c
1000078b4:	f9 03 00 aa	mov	x25, x0
1000078b8:	e0 03 17 aa	mov	x0, x23
1000078bc:	81 05 80 52	mov	w1, #44
1000078c0:	dc 29 00 94	bl	0x100012030 ; symbol stub for: _strchr
1000078c4:	60 00 00 b4	cbz	x0, 0x1000078d0
1000078c8:	1f 14 00 38	strb	wzr, [x0], #1
1000078cc:	fc ff ff 17	b	0x1000078bc
1000078d0:	e8 27 40 b9	ldr	w8, [sp, #36]
1000078d4:	3f 07 00 f1	cmp	x25, #1
1000078d8:	6b cb ff 54	b.lt	0x100007244
1000078dc:	f3 02 19 8b	add	x19, x23, x25
1000078e0:	14 00 80 d2	mov	x20, #0
1000078e4:	96 6b 74 f8	ldr	x22, [x28, x20]
1000078e8:	c1 02 40 f9	ldr	x1, [x22]
1000078ec:	e0 03 17 aa	mov	x0, x23
1000078f0:	d4 29 00 94	bl	0x100012040 ; symbol stub for: _strcmp
1000078f4:	60 00 00 35	cbnz	w0, 0x100007900
1000078f8:	c8 42 40 39	ldrb	w8, [x22, #16]
1000078fc:	a8 00 00 35	cbnz	w8, 0x100007910
100007900:	94 22 00 91	add	x20, x20, #8
100007904:	9f 62 01 f1	cmp	x20, #88
100007908:	e1 fe ff 54	b.ne	0x1000078e4
10000790c:	4e 01 00 14	b	0x100007e44
100007910:	c8 0e 40 f9	ldr	x8, [x22, #24]
100007914:	68 00 00 b4	cbz	x8, 0x100007920
100007918:	29 00 80 52	mov	w9, #1
10000791c:	09 01 00 39	strb	w9, [x8]
100007920:	e0 03 17 aa	mov	x0, x23
100007924:	d7 29 00 94	bl	0x100012080 ; symbol stub for: _strlen
100007928:	08 00 17 8b	add	x8, x0, x23
10000792c:	17 05 00 91	add	x23, x8, #1
100007930:	ff 02 13 eb	cmp	x23, x19
100007934:	63 fd ff 54	b.lo	0x1000078e0
100007938:	e8 27 40 b9	ldr	w8, [sp, #36]
10000793c:	b3 d4 05 10	adr	x19, #47764
100007940:	1f 20 03 d5	nop
100007944:	f4 80 08 10	adr	x20, #69660
100007948:	1f 20 03 d5	nop
10000794c:	b6 00 00 b0	adrp	x22, 21 ; 0x10001c000
100007950:	3d fe ff 17	b	0x100007244
100007954:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
100007958:	1f f9 00 b9	str	wzr, [x8, #248]
10000795c:	e8 03 19 aa	mov	x8, x25
100007960:	39 fe ff 17	b	0x100007244
100007964:	df fe 00 b9	str	wzr, [x22, #252]
100007968:	e8 03 19 aa	mov	x8, x25
10000796c:	36 fe ff 17	b	0x100007244
100007970:	28 00 80 52	mov	w8, #1
100007974:	c8 fe 00 b9	str	w8, [x22, #252]
100007978:	e8 03 19 aa	mov	x8, x25
10000797c:	32 fe ff 17	b	0x100007244
100007980:	48 00 80 52	mov	w8, #2
100007984:	c8 fe 00 b9	str	w8, [x22, #252]
100007988:	e8 03 19 aa	mov	x8, x25
10000798c:	2e fe ff 17	b	0x100007244
100007990:	1f 04 00 31	cmn	w0, #1
100007994:	e1 26 00 54	b.ne	0x100007e70
100007998:	f3 03 17 aa	mov	x19, x23
10000799c:	e5 28 00 94	bl	0x100011d30 ; symbol stub for: _geteuid
1000079a0:	80 29 00 35	cbnz	w0, 0x100007ed0
1000079a4:	93 03 00 36	tbz	w19, #0, 0x100007a14
1000079a8:	80 07 41 ad	ldp	q0, q1, [x28, #32]
1000079ac:	e9 67 0a 10	adr	x9, #85244
1000079b0:	1f 20 03 d5	nop
1000079b4:	20 05 01 ad	stp	q0, q1, [x9, #32]
1000079b8:	80 13 c0 3d	ldr	q0, [x28, #64]
1000079bc:	20 11 80 3d	str	q0, [x9, #64]
1000079c0:	88 2b 40 f9	ldr	x8, [x28, #80]
1000079c4:	28 29 00 f9	str	x8, [x9, #80]
1000079c8:	80 07 40 ad	ldp	q0, q1, [x28]
1000079cc:	20 05 00 ad	stp	q0, q1, [x9]
1000079d0:	68 01 80 52	mov	w8, #11
1000079d4:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
1000079d8:	28 a5 06 b9	str	w8, [x9, #1700]
1000079dc:	68 38 0a 10	adr	x8, #83724
1000079e0:	1f 20 03 d5	nop
1000079e4:	29 00 80 52	mov	w9, #1
1000079e8:	09 01 00 39	strb	w9, [x8]
1000079ec:	09 cd 00 39	strb	w9, [x8, #51]
1000079f0:	29 20 80 52	mov	w9, #257
1000079f4:	09 11 03 78	sturh	w9, [x8, #49]
1000079f8:	e9 c3 00 b2	mov	x9, #72340172838076673
1000079fc:	09 71 02 f8	stur	x9, [x8, #39]
100007a00:	09 11 00 f9	str	x9, [x8, #32]
100007a04:	12 00 00 14	b	0x100007a4c
100007a08:	00 00 80 52	mov	w0, #0
100007a0c:	c9 01 00 94	bl	0x100008130
100007a10:	0b 01 00 14	b	0x100007e3c
100007a14:	1f 20 03 d5	nop
100007a18:	68 64 0a 18	ldr	w8, 0x10001c6a4
100007a1c:	88 01 00 35	cbnz	w8, 0x100007a4c
100007a20:	08 9c 08 10	adr	x8, #70528
100007a24:	1f 20 03 d5	nop
100007a28:	00 05 40 ad	ldp	q0, q1, [x8]
100007a2c:	e9 63 0a 10	adr	x9, #85116
100007a30:	1f 20 03 d5	nop
100007a34:	20 05 00 ad	stp	q0, q1, [x9]
100007a38:	00 05 41 ad	ldp	q0, q1, [x8, #32]
100007a3c:	20 05 01 ad	stp	q0, q1, [x9, #32]
100007a40:	08 01 80 52	mov	w8, #8
100007a44:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007a48:	28 a5 06 b9	str	w8, [x9, #1700]
100007a4c:	1f 20 03 d5	nop
100007a50:	83 34 0a 58	ldr	x3, #83600
100007a54:	7f 04 00 f1	cmp	x3, #1
100007a58:	e0 00 00 54	b.eq	0x100007a74
100007a5c:	83 01 00 b5	cbnz	x3, 0x100007a8c
100007a60:	1f 20 03 d5	nop
100007a64:	20 33 0a 58	ldr	x0, #83556
100007a68:	01 00 80 d2	mov	x1, #0
100007a6c:	42 00 80 52	mov	w2, #2
100007a70:	0d 00 00 14	b	0x100007aa4
100007a74:	1f 20 03 d5	nop
100007a78:	80 32 0a 58	ldr	x0, #83536
100007a7c:	01 00 80 d2	mov	x1, #0
100007a80:	22 00 80 52	mov	w2, #1
100007a84:	03 00 80 d2	mov	x3, #0
100007a88:	07 00 00 14	b	0x100007aa4
100007a8c:	7f 04 00 f1	cmp	x3, #1
100007a90:	cb 00 00 54	b.lt	0x100007aa8
100007a94:	1f 20 03 d5	nop
100007a98:	80 31 0a 58	ldr	x0, #83504
100007a9c:	01 00 80 d2	mov	x1, #0
100007aa0:	02 00 80 52	mov	w2, #0
100007aa4:	47 29 00 94	bl	0x100011fc0 ; symbol stub for: _setvbuf
100007aa8:	a0 c3 01 d1	sub	x0, x29, #112
100007aac:	d5 28 00 94	bl	0x100011e00 ; symbol stub for: _mach_timebase_info
100007ab0:	a0 07 72 2d	ldp	s0, s1, [x29, #-112]
100007ab4:	00 d8 61 7e	ucvtf	d0, d0
100007ab8:	21 d8 61 7e	ucvtf	d1, d1
100007abc:	00 18 61 1e	fdiv	d0, d0, d1
100007ac0:	b6 00 00 b0	adrp	x22, 21 ; 0x10001c000
100007ac4:	c0 4a 00 fd	str	d0, [x22, #144]
100007ac8:	80 5f 06 10	adr	x0, #52208 ; literal pool for: "hw.model"
100007acc:	1f 20 03 d5	nop
100007ad0:	93 61 0a 10	adr	x19, #85040
100007ad4:	1f 20 03 d5	nop
100007ad8:	e1 03 13 aa	mov	x1, x19
100007adc:	02 08 80 52	mov	w2, #64
100007ae0:	01 02 00 94	bl	0x1000082e4
100007ae4:	e0 5e 06 30	adr	x0, #52189 ; literal pool for: "kern.osversion"
100007ae8:	1f 20 03 d5	nop
100007aec:	b5 62 0a 10	adr	x21, #85076
100007af0:	1f 20 03 d5	nop
100007af4:	e1 03 15 aa	mov	x1, x21
100007af8:	02 08 80 52	mov	w2, #64
100007afc:	fa 01 00 94	bl	0x1000082e4
100007b00:	80 5e 06 10	adr	x0, #52176 ; literal pool for: "kern.bootargs"
100007b04:	1f 20 03 d5	nop
100007b08:	d4 63 0a 10	adr	x20, #85112
100007b0c:	1f 20 03 d5	nop
100007b10:	e1 03 14 aa	mov	x1, x20
100007b14:	02 80 80 52	mov	w2, #1024
100007b18:	f3 01 00 94	bl	0x1000082e4
100007b1c:	08 02 80 52	mov	w8, #16
100007b20:	a8 83 19 f8	stur	x8, [x29, #-104]
100007b24:	1f 20 03 d5	nop
100007b28:	80 34 05 5c	ldr	d0, 0x1000121b8
100007b2c:	a0 03 1a fc	stur	d0, [x29, #-96]
100007b30:	82 82 0a 10	adr	x2, #86096
100007b34:	1f 20 03 d5	nop
100007b38:	a0 83 01 d1	sub	x0, x29, #96
100007b3c:	a3 a3 01 d1	sub	x3, x29, #104
100007b40:	41 00 80 52	mov	w1, #2
100007b44:	04 00 80 d2	mov	x4, #0
100007b48:	05 00 80 d2	mov	x5, #0
100007b4c:	61 29 00 94	bl	0x1000120d0 ; symbol stub for: _sysctl
100007b50:	60 1d 00 35	cbnz	w0, 0x100007efc
100007b54:	c0 4a 40 fd	ldr	d0, [x22, #144]
100007b58:	08 00 79 9e	fcvtzu	x8, d0
100007b5c:	76 2c 0a 50	adr	x22, #83342
100007b60:	1f 20 03 d5	nop
100007b64:	c9 62 41 f8	ldur	x9, [x22, #22]
100007b68:	28 09 c8 9a	udiv	x8, x9, x8
100007b6c:	c8 62 01 f8	stur	x8, [x22, #22]
100007b70:	f0 3d 00 10	adr	x16, #1980
100007b74:	1f 20 03 d5	nop
100007b78:	f0 23 c1 da	paciza	x16
100007b7c:	e1 03 10 aa	mov	x1, x16
100007b80:	a0 03 80 52	mov	w0, #29
100007b84:	17 29 00 94	bl	0x100011fe0 ; symbol stub for: _signal
100007b88:	50 3d 00 10	adr	x16, #1960
100007b8c:	1f 20 03 d5	nop
100007b90:	f0 23 c1 da	paciza	x16
100007b94:	e1 03 10 aa	mov	x1, x16
100007b98:	e0 02 80 52	mov	w0, #23
100007b9c:	11 29 00 94	bl	0x100011fe0 ; symbol stub for: _signal
100007ba0:	c8 02 40 39	ldrb	w8, [x22]
100007ba4:	1f 01 00 71	cmp	w8, #0
100007ba8:	b0 3d 00 10	adr	x16, #1972
100007bac:	1f 20 03 d5	nop
100007bb0:	f0 23 c1 da	paciza	x16
100007bb4:	e8 03 10 aa	mov	x8, x16
100007bb8:	b0 3e 00 10	adr	x16, #2004
100007bbc:	1f 20 03 d5	nop
100007bc0:	f0 23 c1 da	paciza	x16
100007bc4:	16 02 88 9a	csel	x22, x16, x8, eq
100007bc8:	40 00 80 52	mov	w0, #2
100007bcc:	e1 03 16 aa	mov	x1, x22
100007bd0:	04 29 00 94	bl	0x100011fe0 ; symbol stub for: _signal
100007bd4:	e0 01 80 52	mov	w0, #15
100007bd8:	e1 03 16 aa	mov	x1, x22
100007bdc:	01 29 00 94	bl	0x100011fe0 ; symbol stub for: _signal
100007be0:	20 00 80 52	mov	w0, #1
100007be4:	e1 03 16 aa	mov	x1, x22
100007be8:	fe 28 00 94	bl	0x100011fe0 ; symbol stub for: _signal
100007bec:	68 00 88 52	mov	w8, #16387
100007bf0:	08 08 a2 72	movk	w8, #4160, lsl #16
100007bf4:	e8 77 00 b9	str	w8, [sp, #116]
100007bf8:	1f 20 03 d5	nop
100007bfc:	48 55 0a 18	ldr	w8, 0x10001c6a4
100007c00:	48 02 00 34	cbz	w8, 0x100007c48
100007c04:	16 00 80 d2	mov	x22, #0
100007c08:	09 55 0a 10	adr	x9, #84640
100007c0c:	1f 20 03 d5	nop
100007c10:	29 79 76 f8	ldr	x9, [x9, x22, lsl #3]
100007c14:	2a 41 40 39	ldrb	w10, [x9, #16]
100007c18:	aa 00 00 34	cbz	w10, 0x100007c2c
100007c1c:	2a 0d 40 f9	ldr	x10, [x9, #24]
100007c20:	ea 00 00 b4	cbz	x10, 0x100007c3c
100007c24:	4a 01 40 39	ldrb	w10, [x10]
100007c28:	aa 00 00 34	cbz	w10, 0x100007c3c
100007c2c:	28 11 40 f9	ldr	x8, [x9, #32]
100007c30:	1f 09 3f d6	blraaz	x8
100007c34:	1f 20 03 d5	nop
100007c38:	68 53 0a 18	ldr	w8, 0x10001c6a4
100007c3c:	d6 06 00 91	add	x22, x22, #1
100007c40:	df 42 28 eb	cmp	x22, w8, uxtw
100007c44:	23 fe ff 54	b.lo	0x100007c08
100007c48:	1f 20 03 d5	nop
100007c4c:	68 25 0a 18	ldr	w8, 0x10001c0f8
100007c50:	48 03 00 35	cbnz	w8, 0x100007cb8
100007c54:	b6 00 00 b0	adrp	x22, 21 ; 0x10001c000
100007c58:	c0 66 40 f9	ldr	x0, [x22, #200]
100007c5c:	f3 03 00 f9	str	x19, [sp]
100007c60:	e1 53 06 50	adr	x1, #51838 ; literal pool for: "Machine model: %s\n"
100007c64:	1f 20 03 d5	nop
100007c68:	1e 28 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100007c6c:	c0 66 40 f9	ldr	x0, [x22, #200]
100007c70:	f5 03 00 f9	str	x21, [sp]
100007c74:	e1 53 06 30	adr	x1, #51837 ; literal pool for: "OS version: %s\n"
100007c78:	1f 20 03 d5	nop
100007c7c:	19 28 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100007c80:	c0 66 40 f9	ldr	x0, [x22, #200]
100007c84:	f4 03 00 f9	str	x20, [sp]
100007c88:	c1 53 06 30	adr	x1, #51833 ; literal pool for: "Boot arguments: %s\n"
100007c8c:	1f 20 03 d5	nop
100007c90:	14 28 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100007c94:	d3 66 40 f9	ldr	x19, [x22, #200]
100007c98:	40 77 0a 10	adr	x0, #85736
100007c9c:	1f 20 03 d5	nop
100007ca0:	f8 27 00 94	bl	0x100011c80 ; symbol stub for: _ctime
100007ca4:	e0 03 00 f9	str	x0, [sp]
100007ca8:	61 53 06 30	adr	x1, #51821 ; literal pool for: "Boot time: %s\n"
100007cac:	1f 20 03 d5	nop
100007cb0:	e0 03 13 aa	mov	x0, x19
100007cb4:	0b 28 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100007cb8:	e8 01 80 52	mov	w8, #15
100007cbc:	a8 03 1a b8	stur	w8, [x29, #-96]
100007cc0:	4c 28 00 94	bl	0x100011df0 ; symbol stub for: _mach_thread_self
100007cc4:	a2 83 01 d1	sub	x2, x29, #96
100007cc8:	61 00 80 52	mov	w1, #3
100007ccc:	23 00 80 52	mov	w3, #1
100007cd0:	10 29 00 94	bl	0x100012110 ; symbol stub for: _thread_policy_set
100007cd4:	20 01 00 34	cbz	w0, 0x100007cf8
100007cd8:	1f 20 03 d5	nop
100007cdc:	28 3c 08 58	ldr	x8, #67460 ; literal pool symbol address: ___stderrp
100007ce0:	03 01 40 f9	ldr	x3, [x8]
100007ce4:	00 52 06 10	adr	x0, #51776 ; literal pool for: "Could not elevate thread priority. Samples may be less accurate.\n"
100007ce8:	1f 20 03 d5	nop
100007cec:	21 08 80 52	mov	w1, #65
100007cf0:	22 00 80 52	mov	w2, #1
100007cf4:	0b 28 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100007cf8:	2e 28 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100007cfc:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
100007d00:	00 c9 05 f9	str	x0, [x8, #2960]
100007d04:	b3 00 00 b0	adrp	x19, 21 ; 0x10001c000
100007d08:	b4 00 00 b0	adrp	x20, 21 ; 0x10001c000
100007d0c:	b5 00 00 b0	adrp	x21, 21 ; 0x10001c000
100007d10:	f6 f9 9e d2	mov	x22, #63439
100007d14:	76 6a bc f2	movk	x22, #58195, lsl #16
100007d18:	b6 74 d3 f2	movk	x22, #39845, lsl #32
100007d1c:	96 18 e4 f2	movk	x22, #8388, lsl #48
100007d20:	17 48 88 52	mov	w23, #16960
100007d24:	f7 01 a0 72	movk	w23, #15, lsl #16
100007d28:	78 4a 8b d2	mov	x24, #23123
100007d2c:	78 13 b4 f2	movk	x24, #41115, lsl #16
100007d30:	f8 05 d7 f2	movk	x24, #47151, lsl #32
100007d34:	98 08 e0 f2	movk	x24, #68, lsl #48
100007d38:	19 40 99 52	mov	w25, #51712
100007d3c:	59 73 a7 72	movk	w25, #15258, lsl #16
100007d40:	5a 1a 0a 10	adr	x26, #82760
100007d44:	1f 20 03 d5	nop
100007d48:	1a 28 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100007d4c:	40 1f 00 f9	str	x0, [x26, #56]
100007d50:	e1 d3 01 91	add	x1, sp, #116
100007d54:	20 00 80 52	mov	w0, #1
100007d58:	02 00 80 d2	mov	x2, #0
100007d5c:	a5 28 00 94	bl	0x100011ff0 ; symbol stub for: _sigprocmask
100007d60:	90 01 00 94	bl	0x1000083a0
100007d64:	e1 d3 01 91	add	x1, sp, #116
100007d68:	40 00 80 52	mov	w0, #2
100007d6c:	02 00 80 d2	mov	x2, #0
100007d70:	a0 28 00 94	bl	0x100011ff0 ; symbol stub for: _sigprocmask
100007d74:	5f 03 00 39	strb	wzr, [x26]
100007d78:	7f 62 2e 39	strb	wzr, [x19, #2968]
100007d7c:	40 23 40 f9	ldr	x0, [x26, #64]
100007d80:	d0 27 00 94	bl	0x100011cc0 ; symbol stub for: _fflush
100007d84:	48 1b 40 f9	ldr	x8, [x26, #48]
100007d88:	09 05 00 91	add	x9, x8, #1
100007d8c:	49 1b 00 f9	str	x9, [x26, #48]
100007d90:	89 6a 40 f9	ldr	x9, [x20, #208]
100007d94:	3f 05 00 b1	cmn	x9, #1
100007d98:	08 11 49 fa	ccmp	x8, x9, #8, ne
100007d9c:	2a 04 00 54	b.ge	0x100007e20
100007da0:	a8 6e 40 f9	ldr	x8, [x21, #216]
100007da4:	09 7d 56 9b	smulh	x9, x8, x22
100007da8:	2a fd 47 93	asr	x10, x9, #7
100007dac:	49 fd 49 8b	add	x9, x10, x9, lsr #63
100007db0:	0a 7d 17 9b	mul	x10, x8, x23
100007db4:	4b fd 49 d3	lsr	x11, x10, #9
100007db8:	6b 7d d8 9b	umulh	x11, x11, x24
100007dbc:	6b fd 4b d3	lsr	x11, x11, #11
100007dc0:	6a a9 19 9b	msub	x10, x11, x25, x10
100007dc4:	e9 2b 06 a9	stp	x9, x10, [sp, #96]
100007dc8:	c8 01 00 b4	cbz	x8, 0x100007e00
100007dcc:	e0 83 01 91	add	x0, sp, #96
100007dd0:	e1 43 01 91	add	x1, sp, #80
100007dd4:	23 28 00 94	bl	0x100011e60 ; symbol stub for: _nanosleep
100007dd8:	a0 00 f8 36	tbz	w0, #31, 0x100007dec
100007ddc:	85 27 00 94	bl	0x100011bf0 ; symbol stub for: ___error
100007de0:	00 00 40 b9	ldr	w0, [x0]
100007de4:	e0 17 c0 3d	ldr	q0, [sp, #80]
100007de8:	e0 1b 80 3d	str	q0, [sp, #96]
100007dec:	68 62 6e 39	ldrb	w8, [x19, #2968]
100007df0:	1f 10 00 71	cmp	w0, #4
100007df4:	a1 fa ff 54	b.ne	0x100007d48
100007df8:	a8 fe 07 37	tbnz	w8, #0, 0x100007dcc
100007dfc:	d3 ff ff 17	b	0x100007d48
100007e00:	24 28 00 94	bl	0x100011e90 ; symbol stub for: _pause
100007e04:	7b 27 00 94	bl	0x100011bf0 ; symbol stub for: ___error
100007e08:	09 00 40 b9	ldr	w9, [x0]
100007e0c:	68 62 6e 39	ldrb	w8, [x19, #2968]
100007e10:	3f 11 00 71	cmp	w9, #4
100007e14:	a1 f9 ff 54	b.ne	0x100007d48
100007e18:	48 ff 07 37	tbnz	w8, #0, 0x100007e00
100007e1c:	cb ff ff 17	b	0x100007d48
100007e20:	a8 00 00 b0	adrp	x8, 21 ; 0x10001c000
100007e24:	08 a9 43 39	ldrb	w8, [x8, #234]
100007e28:	a8 00 00 34	cbz	w8, 0x100007e3c
100007e2c:	28 00 80 52	mov	w8, #1
100007e30:	a9 00 00 b0	adrp	x9, 21 ; 0x10001c000
100007e34:	28 29 02 39	strb	w8, [x9, #138]
100007e38:	5a 01 00 94	bl	0x1000083a0
100007e3c:	13 00 80 52	mov	w19, #0
100007e40:	0f 00 00 14	b	0x100007e7c
100007e44:	f7 03 00 f9	str	x23, [sp]
100007e48:	81 62 06 30	adr	x1, #52305 ; literal pool for: "unrecognized unhide option: %s"
100007e4c:	1f 20 03 d5	nop
100007e50:	00 08 80 52	mov	w0, #64
100007e54:	8f 27 00 94	bl	0x100011c90 ; symbol stub for: _errx
100007e58:	2d 25 00 94	bl	0x10001130c
100007e5c:	42 25 00 94	bl	0x100011364
100007e60:	f7 03 00 f9	str	x23, [sp]
100007e64:	40 3f 06 70	adr	x0, #51179 ; literal pool for: "unrecognized order: %s"
100007e68:	1f 20 03 d5	nop
100007e6c:	b5 28 00 94	bl	0x100012140 ; symbol stub for: _warnx
100007e70:	13 08 80 52	mov	w19, #64
100007e74:	00 08 80 52	mov	w0, #64
100007e78:	ae 00 00 94	bl	0x100008130
100007e7c:	e0 03 13 aa	mov	x0, x19
100007e80:	fd 7b 4f a9	ldp	x29, x30, [sp, #240]
100007e84:	f4 4f 4e a9	ldp	x20, x19, [sp, #224]
100007e88:	f6 57 4d a9	ldp	x22, x21, [sp, #208]
100007e8c:	f8 5f 4c a9	ldp	x24, x23, [sp, #192]
100007e90:	fa 67 4b a9	ldp	x26, x25, [sp, #176]
100007e94:	fc 6f 4a a9	ldp	x28, x27, [sp, #160]
100007e98:	ff 03 04 91	add	sp, sp, #256
100007e9c:	ff 0f 5f d6	retab
100007ea0:	f7 03 00 f9	str	x23, [sp]
100007ea4:	41 5e 06 70	adr	x1, #52171 ; literal pool for: "unrecognized sampler: %s"
100007ea8:	1f 20 03 d5	nop
100007eac:	e9 ff ff 17	b	0x100007e50
100007eb0:	e5 24 00 94	bl	0x100011244
100007eb4:	ef 24 00 94	bl	0x100011270
100007eb8:	f9 24 00 94	bl	0x10001129c
100007ebc:	03 25 00 94	bl	0x1000112c8
100007ec0:	0d 25 00 94	bl	0x1000112f4
100007ec4:	1d 25 00 94	bl	0x100011338
100007ec8:	4c 25 00 94	bl	0x1000113f8
100007ecc:	41 25 00 94	bl	0x1000113d0
100007ed0:	1f 20 03 d5	nop
100007ed4:	68 2c 08 58	ldr	x8, #66956 ; literal pool symbol address: ___stderrp
100007ed8:	13 01 40 f9	ldr	x19, [x8]
100007edc:	a1 27 00 94	bl	0x100011d60 ; symbol stub for: _getprogname
100007ee0:	e0 03 00 f9	str	x0, [sp]
100007ee4:	61 3d 06 70	adr	x1, #51119 ; literal pool for: "%s must be invoked as the superuser\n"
100007ee8:	1f 20 03 d5	nop
100007eec:	e0 03 13 aa	mov	x0, x19
100007ef0:	7c 27 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100007ef4:	20 00 80 52	mov	w0, #1
100007ef8:	6a 27 00 94	bl	0x100011ca0 ; symbol stub for: _exit
100007efc:	c8 24 00 94	bl	0x10001121c
100007f00:	24 25 00 94	bl	0x100011390
100007f04:	0c 00 00 00	udf	#12
100007f08:	38 02 00 00	udf	#568
100007f0c:	a0 0b 00 00	udf	#2976
100007f10:	a0 0b 00 00	udf	#2976
100007f14:	a0 0b 00 00	udf	#2976
100007f18:	70 02 00 00	udf	#624
100007f1c:	a0 0b 00 00	udf	#2976
100007f20:	38 07 00 00	udf	#1848
100007f24:	c0 02 00 00	udf	#704
100007f28:	a0 0b 00 00	udf	#2976
100007f2c:	a0 0b 00 00	udf	#2976
100007f30:	a0 0b 00 00	udf	#2976
100007f34:	a0 0b 00 00	udf	#2976
100007f38:	fc 02 00 00	udf	#764
100007f3c:	34 03 00 00	udf	#820
100007f40:	a0 0b 00 00	udf	#2976
100007f44:	a0 0b 00 00	udf	#2976
100007f48:	60 03 00 00	udf	#864
100007f4c:	c8 03 00 00	udf	#968
100007f50:	00 04 00 00	udf	#1024
100007f54:	a0 0b 00 00	udf	#2976
100007f58:	a0 0b 00 00	udf	#2976
100007f5c:	a0 0b 00 00	udf	#2976
100007f60:	3c 04 00 00	udf	#1084
100007f64:	0c 00 00 00	udf	#12
100007f68:	e8 0b 00 00	udf	#3048
100007f6c:	08 01 00 00	udf	#264
100007f70:	1c 01 00 00	udf	#284
100007f74:	30 01 00 00	udf	#304
100007f78:	e8 0b 00 00	udf	#3048
100007f7c:	e8 0b 00 00	udf	#3048
100007f80:	e8 0b 00 00	udf	#3048
100007f84:	e8 0b 00 00	udf	#3048
100007f88:	44 01 00 00	udf	#324
100007f8c:	e8 0b 00 00	udf	#3048
100007f90:	58 01 00 00	udf	#344
100007f94:	6c 01 00 00	udf	#364
100007f98:	80 01 00 00	udf	#384
100007f9c:	94 01 00 00	udf	#404
100007fa0:	30 02 00 00	udf	#560
100007fa4:	e8 0b 00 00	udf	#3048
100007fa8:	e8 0b 00 00	udf	#3048
100007fac:	e8 0b 00 00	udf	#3048
100007fb0:	a8 01 00 00	udf	#424
100007fb4:	e8 0b 00 00	udf	#3048
100007fb8:	44 02 00 00	udf	#580
100007fbc:	e8 0b 00 00	udf	#3048
100007fc0:	e8 0b 00 00	udf	#3048
100007fc4:	e8 0b 00 00	udf	#3048
100007fc8:	e8 0b 00 00	udf	#3048
100007fcc:	e8 0b 00 00	udf	#3048
100007fd0:	e8 0b 00 00	udf	#3048
100007fd4:	e8 0b 00 00	udf	#3048
100007fd8:	e8 0b 00 00	udf	#3048
100007fdc:	bc 01 00 00	udf	#444
100007fe0:	d0 01 00 00	udf	#464
100007fe4:	e0 01 00 00	udf	#480
100007fe8:	e8 0b 00 00	udf	#3048
100007fec:	e8 0b 00 00	udf	#3048
100007ff0:	e8 0b 00 00	udf	#3048
100007ff4:	58 02 00 00	udf	#600
100007ff8:	e8 0b 00 00	udf	#3048
100007ffc:	e8 0b 00 00	udf	#3048
100008000:	e8 0b 00 00	udf	#3048
100008004:	e8 0b 00 00	udf	#3048
100008008:	e8 0b 00 00	udf	#3048
10000800c:	e8 0b 00 00	udf	#3048
100008010:	e8 0b 00 00	udf	#3048
100008014:	f4 01 00 00	udf	#500
100008018:	08 02 00 00	udf	#520
10000801c:	1c 02 00 00	udf	#540
100008020:	6c 02 00 00	udf	#620
100008024:	e8 0b 00 00	udf	#3048
100008028:	e8 0b 00 00	udf	#3048
10000802c:	f4 00 00 00	udf	#244
100008030:	7f 23 03 d5	pacibsp
100008034:	ff 83 02 d1	sub	sp, sp, #160
100008038:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
10000803c:	fd 43 02 91	add	x29, sp, #144
100008040:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100008044:	e0 83 03 ad	stp	q0, q0, [sp, #112]
100008048:	e0 83 02 ad	stp	q0, q0, [sp, #80]
10000804c:	e0 83 01 ad	stp	q0, q0, [sp, #48]
100008050:	e0 83 00 ad	stp	q0, q0, [sp, #16]
100008054:	e0 03 80 3d	str	q0, [sp]
100008058:	60 23 06 70	adr	x0, #50287 ; literal pool for: "/usr/appleinternal/bin/powermetrics_internal"
10000805c:	1f 20 03 d5	nop
100008060:	e1 03 00 91	mov	x1, sp
100008064:	eb 27 00 94	bl	0x100012010 ; symbol stub for: _stat
100008068:	1f 04 00 31	cmn	w0, #1
10000806c:	00 01 00 54	b.eq	0x10000808c
100008070:	60 38 06 30	adr	x0, #50957 ; literal pool for: "/var/db/disableAppleInternal"
100008074:	1f 20 03 d5	nop
100008078:	e1 03 00 91	mov	x1, sp
10000807c:	e5 27 00 94	bl	0x100012010 ; symbol stub for: _stat
100008080:	1f 00 00 71	cmp	w0, #0
100008084:	e0 07 9f 1a	cset	w0, ne
100008088:	02 00 00 14	b	0x100008090
10000808c:	00 00 80 52	mov	w0, #0
100008090:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
100008094:	ff 83 02 91	add	sp, sp, #160
100008098:	ff 0f 5f d6	retab
10000809c:	7f 23 03 d5	pacibsp
1000080a0:	fc 6f be a9	stp	x28, x27, [sp, #-32]!
1000080a4:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
1000080a8:	fd 43 00 91	add	x29, sp, #16
1000080ac:	09 02 82 52	mov	w9, #4112
1000080b0:	1f 20 03 d5	nop
1000080b4:	f0 1f 08 58	ldr	x16, #66556
1000080b8:	1f 0a 3f d6	blraaz	x16
1000080bc:	ff 07 40 d1	sub	sp, sp, #1, lsl #12
1000080c0:	ff 43 00 d1	sub	sp, sp, #16
1000080c4:	1f 20 03 d5	nop
1000080c8:	88 1c 08 58	ldr	x8, #66448 ; literal pool symbol address: ___stack_chk_guard
1000080cc:	08 01 40 f9	ldr	x8, [x8]
1000080d0:	a8 83 1e f8	stur	x8, [x29, #-24]
1000080d4:	1f 27 00 94	bl	0x100011d50 ; symbol stub for: _getpid
1000080d8:	e1 23 00 91	add	x1, sp, #8
1000080dc:	02 00 82 52	mov	w2, #4096
1000080e0:	a8 27 00 94	bl	0x100011f80 ; symbol stub for: _proc_pidpath
1000080e4:	01 1f 06 70	adr	x1, #50147 ; literal pool for: "/usr/appleinternal/bin/powermetrics_internal"
1000080e8:	1f 20 03 d5	nop
1000080ec:	e0 23 00 91	add	x0, sp, #8
1000080f0:	a2 05 80 52	mov	w2, #45
1000080f4:	4b 27 00 94	bl	0x100011e20 ; symbol stub for: _memcmp
1000080f8:	1f 00 00 71	cmp	w0, #0
1000080fc:	e0 17 9f 1a	cset	w0, eq
100008100:	a8 83 5e f8	ldur	x8, [x29, #-24]
100008104:	1f 20 03 d5	nop
100008108:	89 1a 08 58	ldr	x9, #66384 ; literal pool symbol address: ___stack_chk_guard
10000810c:	29 01 40 f9	ldr	x9, [x9]
100008110:	3f 01 08 eb	cmp	x9, x8
100008114:	c1 00 00 54	b.ne	0x10000812c
100008118:	ff 07 40 91	add	sp, sp, #1, lsl #12
10000811c:	ff 43 00 91	add	sp, sp, #16
100008120:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
100008124:	fc 6f c2 a8	ldp	x28, x27, [sp], #32
100008128:	ff 0f 5f d6	retab
10000812c:	b5 26 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100008130:	7f 23 03 d5	pacibsp
100008134:	ff 03 02 d1	sub	sp, sp, #128
100008138:	fc 6f 02 a9	stp	x28, x27, [sp, #32]
10000813c:	fa 67 03 a9	stp	x26, x25, [sp, #48]
100008140:	f8 5f 04 a9	stp	x24, x23, [sp, #64]
100008144:	f6 57 05 a9	stp	x22, x21, [sp, #80]
100008148:	f4 4f 06 a9	stp	x20, x19, [sp, #96]
10000814c:	fd 7b 07 a9	stp	x29, x30, [sp, #112]
100008150:	fd c3 01 91	add	x29, sp, #112
100008154:	1f 20 03 d5	nop
100008158:	88 18 08 58	ldr	x8, #66320 ; literal pool symbol address: ___stdoutp
10000815c:	1f 20 03 d5	nop
100008160:	09 18 08 58	ldr	x9, #66304 ; literal pool symbol address: ___stderrp
100008164:	e0 1f 00 b9	str	w0, [sp, #28]
100008168:	1f 00 00 71	cmp	w0, #0
10000816c:	08 01 89 9a	csel	x8, x8, x9, eq
100008170:	14 01 40 f9	ldr	x20, [x8]
100008174:	fb 26 00 94	bl	0x100011d60 ; symbol stub for: _getprogname
100008178:	e0 03 00 f9	str	x0, [sp]
10000817c:	61 02 05 10	adr	x1, #41036
100008180:	1f 20 03 d5	nop
100008184:	e0 03 14 aa	mov	x0, x20
100008188:	d6 26 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000818c:	c0 03 05 10	adr	x0, #41080
100008190:	1f 20 03 d5	nop
100008194:	e1 03 14 aa	mov	x1, x20
100008198:	da 26 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000819c:	40 40 06 50	adr	x0, #51210 ; literal pool for: "The following samplers are supported by --samplers:\n\n"
1000081a0:	1f 20 03 d5	nop
1000081a4:	a1 06 80 52	mov	w1, #53
1000081a8:	22 00 80 52	mov	w2, #1
1000081ac:	e3 03 14 aa	mov	x3, x20
1000081b0:	dc 26 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
1000081b4:	13 00 80 d2	mov	x19, #0
1000081b8:	56 61 08 10	adr	x22, #68648
1000081bc:	1f 20 03 d5	nop
1000081c0:	f5 40 06 10	adr	x21, #51228 ; literal pool for: "    %-15s   %s\n"
1000081c4:	1f 20 03 d5	nop
1000081c8:	c8 6a 73 f8	ldr	x8, [x22, x19]
1000081cc:	09 41 40 39	ldrb	w9, [x8, #16]
1000081d0:	c9 00 00 35	cbnz	w9, 0x1000081e8
1000081d4:	09 21 40 a9	ldp	x9, x8, [x8]
1000081d8:	e9 23 00 a9	stp	x9, x8, [sp]
1000081dc:	e0 03 14 aa	mov	x0, x20
1000081e0:	e1 03 15 aa	mov	x1, x21
1000081e4:	bf 26 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000081e8:	73 22 00 91	add	x19, x19, #8
1000081ec:	7f 62 01 f1	cmp	x19, #88
1000081f0:	c1 fe ff 54	b.ne	0x1000081c8
1000081f4:	d5 3f 06 10	adr	x21, #51192 ; literal pool for: "\n"
1000081f8:	1f 20 03 d5	nop
1000081fc:	e0 03 15 aa	mov	x0, x21
100008200:	e1 03 14 aa	mov	x1, x20
100008204:	bf 26 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008208:	20 3f 06 50	adr	x0, #51174 ; literal pool for: "and the following sampler groups are supported by --samplers:\n\n"
10000820c:	1f 20 03 d5	nop
100008210:	e1 07 80 52	mov	w1, #63
100008214:	22 00 80 52	mov	w2, #1
100008218:	e3 03 14 aa	mov	x3, x20
10000821c:	c1 26 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100008220:	18 00 80 d2	mov	x24, #0
100008224:	19 03 80 52	mov	w25, #24
100008228:	9a 60 08 10	adr	x26, #68624
10000822c:	1f 20 03 d5	nop
100008230:	f6 3f 06 50	adr	x22, #51198 ; literal pool for: "    %-11s   "
100008234:	1f 20 03 d5	nop
100008238:	17 40 06 70	adr	x23, #51203 ; literal pool for: ","
10000823c:	1f 20 03 d5	nop
100008240:	13 6b 19 9b	madd	x19, x24, x25, x26
100008244:	68 02 40 f9	ldr	x8, [x19]
100008248:	e8 03 00 f9	str	x8, [sp]
10000824c:	e0 03 14 aa	mov	x0, x20
100008250:	e1 03 16 aa	mov	x1, x22
100008254:	a3 26 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008258:	1b 00 80 d2	mov	x27, #0
10000825c:	68 f2 40 a9	ldp	x8, x28, [x19, #8]
100008260:	1f 05 00 f1	cmp	x8, #1
100008264:	13 85 9f 9a	csinc	x19, x8, xzr, hi
100008268:	88 7b 7b f8	ldr	x8, [x28, x27, lsl #3]
10000826c:	09 41 40 39	ldrb	w9, [x8, #16]
100008270:	29 01 00 35	cbnz	w9, 0x100008294
100008274:	bb 00 00 b4	cbz	x27, 0x100008288
100008278:	e0 03 17 aa	mov	x0, x23
10000827c:	e1 03 14 aa	mov	x1, x20
100008280:	a0 26 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008284:	88 7b 7b f8	ldr	x8, [x28, x27, lsl #3]
100008288:	00 01 40 f9	ldr	x0, [x8]
10000828c:	e1 03 14 aa	mov	x1, x20
100008290:	9c 26 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008294:	7b 07 00 91	add	x27, x27, #1
100008298:	7f 02 1b eb	cmp	x19, x27
10000829c:	61 fe ff 54	b.ne	0x100008268
1000082a0:	e0 03 15 aa	mov	x0, x21
1000082a4:	e1 03 14 aa	mov	x1, x20
1000082a8:	96 26 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000082ac:	18 07 00 91	add	x24, x24, #1
1000082b0:	1f 0b 00 f1	cmp	x24, #2
1000082b4:	61 fc ff 54	b.ne	0x100008240
1000082b8:	e0 03 14 aa	mov	x0, x20
1000082bc:	81 26 00 94	bl	0x100011cc0 ; symbol stub for: _fflush
1000082c0:	e0 1f 40 b9	ldr	w0, [sp, #28]
1000082c4:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
1000082c8:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
1000082cc:	f6 57 45 a9	ldp	x22, x21, [sp, #80]
1000082d0:	f8 5f 44 a9	ldp	x24, x23, [sp, #64]
1000082d4:	fa 67 43 a9	ldp	x26, x25, [sp, #48]
1000082d8:	fc 6f 42 a9	ldp	x28, x27, [sp, #32]
1000082dc:	ff 03 02 91	add	sp, sp, #128
1000082e0:	ff 0f 5f d6	retab
1000082e4:	7f 23 03 d5	pacibsp
1000082e8:	ff c3 00 d1	sub	sp, sp, #48
1000082ec:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
1000082f0:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
1000082f4:	fd 83 00 91	add	x29, sp, #32
1000082f8:	f3 03 00 aa	mov	x19, x0
1000082fc:	e2 07 00 f9	str	x2, [sp, #8]
100008300:	e2 23 00 91	add	x2, sp, #8
100008304:	03 00 80 d2	mov	x3, #0
100008308:	04 00 80 d2	mov	x4, #0
10000830c:	75 27 00 94	bl	0x1000120e0 ; symbol stub for: _sysctlbyname
100008310:	a0 00 00 35	cbnz	w0, 0x100008324
100008314:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
100008318:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000831c:	ff c3 00 91	add	sp, sp, #48
100008320:	ff 0f 5f d6	retab
100008324:	e0 03 13 aa	mov	x0, x19
100008328:	3e 24 00 94	bl	0x100011420
10000832c:	c0 03 5f d6	ret
100008330:	7f 23 03 d5	pacibsp
100008334:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100008338:	fd 03 00 91	mov	x29, sp
10000833c:	1f 20 03 d5	nop
100008340:	40 ec 09 58	ldr	x0, #81288
100008344:	5f 26 00 94	bl	0x100011cc0 ; symbol stub for: _fflush
100008348:	28 00 80 52	mov	w8, #1
10000834c:	a9 00 00 90	adrp	x9, 20 ; 0x10001c000
100008350:	28 61 2e 39	strb	w8, [x9, #2968]
100008354:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
100008358:	ff 0f 5f d6	retab
10000835c:	7f 23 03 d5	pacibsp
100008360:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100008364:	fd 03 00 91	mov	x29, sp
100008368:	a8 00 00 90	adrp	x8, 20 ; 0x10001c000
10000836c:	08 21 42 39	ldrb	w8, [x8, #136]
100008370:	a8 00 00 35	cbnz	w8, 0x100008384
100008374:	28 00 80 52	mov	w8, #1
100008378:	a9 00 00 90	adrp	x9, 20 ; 0x10001c000
10000837c:	28 29 02 39	strb	w8, [x9, #138]
100008380:	08 00 00 94	bl	0x1000083a0
100008384:	00 00 80 52	mov	w0, #0
100008388:	46 26 00 94	bl	0x100011ca0 ; symbol stub for: _exit
10000838c:	7f 23 03 d5	pacibsp
100008390:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100008394:	fd 03 00 91	mov	x29, sp
100008398:	00 00 80 52	mov	w0, #0
10000839c:	41 26 00 94	bl	0x100011ca0 ; symbol stub for: _exit
1000083a0:	7f 23 03 d5	pacibsp
1000083a4:	ff 43 04 d1	sub	sp, sp, #272
1000083a8:	e9 23 0c 6d	stp	d9, d8, [sp, #192]
1000083ac:	f8 5f 0d a9	stp	x24, x23, [sp, #208]
1000083b0:	f6 57 0e a9	stp	x22, x21, [sp, #224]
1000083b4:	f4 4f 0f a9	stp	x20, x19, [sp, #240]
1000083b8:	fd 7b 10 a9	stp	x29, x30, [sp, #256]
1000083bc:	fd 03 04 91	add	x29, sp, #256
1000083c0:	1f 20 03 d5	nop
1000083c4:	a8 04 08 58	ldr	x8, #65684 ; literal pool symbol address: ___stack_chk_guard
1000083c8:	08 01 40 f9	ldr	x8, [x8]
1000083cc:	a8 83 1b f8	stur	x8, [x29, #-72]
1000083d0:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000083d4:	e0 83 04 ad	stp	q0, q0, [sp, #144]
1000083d8:	e0 83 03 ad	stp	q0, q0, [sp, #112]
1000083dc:	00 00 80 d2	mov	x0, #0
1000083e0:	50 27 00 94	bl	0x100012120 ; symbol stub for: _time
1000083e4:	ff 03 06 a9	stp	xzr, x0, [sp, #96]
1000083e8:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000083ec:	e0 03 02 ad	stp	q0, q0, [sp, #64]
1000083f0:	e0 0f 80 3d	str	q0, [sp, #48]
1000083f4:	6f 26 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
1000083f8:	b4 00 00 90	adrp	x20, 20 ; 0x10001c000
1000083fc:	88 22 42 39	ldrb	w8, [x20, #136]
100008400:	a9 00 00 90	adrp	x9, 20 ; 0x10001c000
100008404:	68 02 00 35	cbnz	w8, 0x100008450
100008408:	2a d1 45 f9	ldr	x10, [x9, #2976]
10000840c:	0a 00 0a cb	sub	x10, x0, x10
100008410:	0b e4 09 10	adr	x11, #81024
100008414:	1f 20 03 d5	nop
100008418:	40 01 63 9e	ucvtf	d0, x10
10000841c:	61 01 40 fd	ldr	d1, [x11]
100008420:	20 08 60 1e	fmul	d0, d1, d0
100008424:	1f 20 03 d5	nop
100008428:	4c 3b 0a 58	ldr	x12, #83816
10000842c:	0c 00 0c cb	sub	x12, x0, x12
100008430:	82 01 63 9e	ucvtf	d2, x12
100008434:	21 08 62 1e	fmul	d1, d1, d2
100008438:	1f 20 03 d5	nop
10000843c:	a2 ea 04 5c	ldr	d2, 0x100012190
100008440:	00 18 62 1e	fdiv	d0, d0, d2
100008444:	6a b1 01 a9	stp	x10, x12, [x11, #24]
100008448:	21 18 62 1e	fdiv	d1, d1, d2
10000844c:	60 85 00 6d	stp	d0, d1, [x11, #8]
100008450:	20 d1 05 f9	str	x0, [x9, #2976]
100008454:	b3 00 00 90	adrp	x19, 20 ; 0x10001c000
100008458:	69 a6 46 b9	ldr	w9, [x19, #1700]
10000845c:	49 02 00 34	cbz	w9, 0x1000084a4
100008460:	15 00 80 d2	mov	x21, #0
100008464:	36 12 0a 10	adr	x22, #82500
100008468:	1f 20 03 d5	nop
10000846c:	c8 7a 75 f8	ldr	x8, [x22, x21, lsl #3]
100008470:	0a 41 40 39	ldrb	w10, [x8, #16]
100008474:	aa 00 00 34	cbz	w10, 0x100008488
100008478:	0a 0d 40 f9	ldr	x10, [x8, #24]
10000847c:	ca 00 00 b4	cbz	x10, 0x100008494
100008480:	4a 01 40 39	ldrb	w10, [x10]
100008484:	8a 00 00 34	cbz	w10, 0x100008494
100008488:	08 19 40 f9	ldr	x8, [x8, #48]
10000848c:	1f 09 3f d6	blraaz	x8
100008490:	69 a6 46 b9	ldr	w9, [x19, #1700]
100008494:	b5 06 00 91	add	x21, x21, #1
100008498:	bf 42 29 eb	cmp	x21, w9, uxtw
10000849c:	83 fe ff 54	b.lo	0x10000846c
1000084a0:	88 22 42 39	ldrb	w8, [x20, #136]
1000084a4:	a9 00 00 90	adrp	x9, 20 ; 0x10001c000
1000084a8:	29 a5 43 39	ldrb	w9, [x9, #233]
1000084ac:	1f 01 00 71	cmp	w8, #0
1000084b0:	20 19 40 7a	ccmp	w9, #0, #0, ne
1000084b4:	40 10 00 54	b.eq	0x1000086bc
1000084b8:	a8 00 00 34	cbz	w8, 0x1000084cc
1000084bc:	08 e4 00 2f	movi	d8, #0000000000000000
1000084c0:	36 32 06 30	adr	x22, #50757 ; literal pool for: "Lifetime"
1000084c4:	1f 20 03 d5	nop
1000084c8:	0d 00 00 14	b	0x1000084fc
1000084cc:	a8 00 00 90	adrp	x8, 20 ; 0x10001c000
1000084d0:	08 29 42 39	ldrb	w8, [x8, #138]
1000084d4:	c8 00 00 34	cbz	w8, 0x1000084ec
1000084d8:	1f 20 03 d5	nop
1000084dc:	28 de 09 5c	ldr	d8, 0x10001c0a0
1000084e0:	76 31 06 50	adr	x22, #50734 ; literal pool for: "Summary"
1000084e4:	1f 20 03 d5	nop
1000084e8:	05 00 00 14	b	0x1000084fc
1000084ec:	1f 20 03 d5	nop
1000084f0:	48 dd 09 5c	ldr	d8, 0x10001c098
1000084f4:	16 31 06 50	adr	x22, #50722 ; literal pool for: "Sampled"
1000084f8:	1f 20 03 d5	nop
1000084fc:	b5 00 00 90	adrp	x21, 20 ; 0x10001c000
100008500:	a8 fa 40 b9	ldr	w8, [x21, #248]
100008504:	b4 00 00 90	adrp	x20, 20 ; 0x10001c000
100008508:	88 07 00 34	cbz	w8, 0x1000085f8
10000850c:	1f 05 00 71	cmp	w8, #1
100008510:	01 0a 00 54	b.ne	0x100008650
100008514:	88 26 42 39	ldrb	w8, [x20, #137]
100008518:	b6 00 00 90	adrp	x22, 20 ; 0x10001c000
10000851c:	88 00 00 35	cbnz	w8, 0x10000852c
100008520:	c1 66 40 f9	ldr	x1, [x22, #200]
100008524:	00 00 80 52	mov	w0, #0
100008528:	f2 25 00 94	bl	0x100011cf0 ; symbol stub for: _fputc
10000852c:	f7 da 09 10	adr	x23, #80732
100008530:	1f 20 03 d5	nop
100008534:	e1 22 40 f9	ldr	x1, [x23, #64]
100008538:	80 75 05 70	adr	x0, #44723
10000853c:	1f 20 03 d5	nop
100008540:	f0 25 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008544:	e0 22 40 f9	ldr	x0, [x23, #64]
100008548:	e8 02 40 39	ldrb	w8, [x23]
10000854c:	e9 0a 40 39	ldrb	w9, [x23, #2]
100008550:	29 01 00 12	and	w9, w9, #0x1
100008554:	2a 36 06 50	adr	x10, #50886 ; literal pool for: "true"
100008558:	1f 20 03 d5	nop
10000855c:	08 01 09 2a	orr	w8, w8, w9
100008560:	a9 35 06 10	adr	x9, #50868 ; literal pool for: "false"
100008564:	1f 20 03 d5	nop
100008568:	1f 01 00 71	cmp	w8, #0
10000856c:	28 11 8a 9a	csel	x8, x9, x10, ne
100008570:	1f 20 03 d5	nop
100008574:	e0 e0 04 5c	ldr	d0, 0x100012190
100008578:	00 09 60 1e	fmul	d0, d8, d0
10000857c:	09 00 79 9e	fcvtzu	x9, d0
100008580:	1f 20 03 d5	nop
100008584:	ea 2f 0a 58	ldr	x10, #83452
100008588:	cb 0f 0a 10	adr	x11, #82424
10000858c:	1f 20 03 d5	nop
100008590:	eb 2b 02 a9	stp	x11, x10, [sp, #32]
100008594:	6a 0d 0a 10	adr	x10, #82348
100008598:	1f 20 03 d5	nop
10000859c:	2b 0b 0a 10	adr	x11, #82276
1000085a0:	1f 20 03 d5	nop
1000085a4:	eb 2b 01 a9	stp	x11, x10, [sp, #16]
1000085a8:	e8 27 00 a9	stp	x8, x9, [sp]
1000085ac:	81 2b 06 50	adr	x1, #50546 ; literal pool for: "<key>is_delta</key><%s/>\n<key>elapsed_ns</key><integer>%llu</integer>\n<key>hw_model</key><string>%s</string>\n<key>kern_osversion</key><string>%s</string>\n<key>kern_bootargs</key><string>%s</string>\n<key>kern_boottime</key><integer>%ld</integer>\n"
1000085b0:	1f 20 03 d5	nop
1000085b4:	cb 25 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000085b8:	e0 a3 01 91	add	x0, sp, #104
1000085bc:	e1 c3 00 91	add	x1, sp, #48
1000085c0:	ec 25 00 94	bl	0x100011d70 ; symbol stub for: _gmtime_r
1000085c4:	e3 03 00 aa	mov	x3, x0
1000085c8:	a2 32 06 70	adr	x2, #50775 ; literal pool for: "%FT%TZ"
1000085cc:	1f 20 03 d5	nop
1000085d0:	f7 c3 01 91	add	x23, sp, #112
1000085d4:	e0 c3 01 91	add	x0, sp, #112
1000085d8:	01 08 80 52	mov	w1, #64
1000085dc:	a5 26 00 94	bl	0x100012070 ; symbol stub for: _strftime
1000085e0:	80 03 00 b4	cbz	x0, 0x100008650
1000085e4:	c0 66 40 f9	ldr	x0, [x22, #200]
1000085e8:	f7 03 00 f9	str	x23, [sp]
1000085ec:	c1 31 06 50	adr	x1, #50746 ; literal pool for: "<key>timestamp</key><date>%s</date>\n"
1000085f0:	1f 20 03 d5	nop
1000085f4:	16 00 00 14	b	0x10000864c
1000085f8:	e0 a3 01 91	add	x0, sp, #104
1000085fc:	e1 c3 00 91	add	x1, sp, #48
100008600:	e8 25 00 94	bl	0x100011da0 ; symbol stub for: _localtime_r
100008604:	e3 03 00 aa	mov	x3, x0
100008608:	02 32 06 70	adr	x2, #50755 ; literal pool for: "%a %b %e %T %Y %z"
10000860c:	1f 20 03 d5	nop
100008610:	f7 c3 01 91	add	x23, sp, #112
100008614:	e0 c3 01 91	add	x0, sp, #112
100008618:	01 08 80 52	mov	w1, #64
10000861c:	95 26 00 94	bl	0x100012070 ; symbol stub for: _strftime
100008620:	40 00 00 b5	cbnz	x0, 0x100008628
100008624:	ff c3 01 39	strb	wzr, [sp, #112]
100008628:	1f 20 03 d5	nop
10000862c:	e0 d4 09 58	ldr	x0, #80540
100008630:	1f 20 03 d5	nop
100008634:	60 dc 04 5c	ldr	d0, 0x1000121c0
100008638:	00 09 60 1e	fmul	d0, d8, d0
10000863c:	e0 0b 00 fd	str	d0, [sp, #16]
100008640:	f6 5f 00 a9	stp	x22, x23, [sp]
100008644:	c1 30 06 30	adr	x1, #50713 ; literal pool for: "\n\n*** %s system activity (%s) (%.2fms elapsed) ***\n\n"
100008648:	1f 20 03 d5	nop
10000864c:	a5 25 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008650:	68 a6 46 b9	ldr	w8, [x19, #1700]
100008654:	28 02 00 34	cbz	w8, 0x100008698
100008658:	16 00 80 d2	mov	x22, #0
10000865c:	77 02 0a 10	adr	x23, #81996
100008660:	1f 20 03 d5	nop
100008664:	e9 7a 76 f8	ldr	x9, [x23, x22, lsl #3]
100008668:	2a 41 40 39	ldrb	w10, [x9, #16]
10000866c:	aa 00 00 34	cbz	w10, 0x100008680
100008670:	2a 0d 40 f9	ldr	x10, [x9, #24]
100008674:	ca 00 00 b4	cbz	x10, 0x10000868c
100008678:	4a 01 40 39	ldrb	w10, [x10]
10000867c:	8a 00 00 34	cbz	w10, 0x10000868c
100008680:	28 15 40 f9	ldr	x8, [x9, #40]
100008684:	1f 09 3f d6	blraaz	x8
100008688:	68 a6 46 b9	ldr	w8, [x19, #1700]
10000868c:	d6 06 00 91	add	x22, x22, #1
100008690:	df 42 28 eb	cmp	x22, w8, uxtw
100008694:	83 fe ff 54	b.lo	0x100008664
100008698:	a8 fa 40 b9	ldr	w8, [x21, #248]
10000869c:	1f 05 00 71	cmp	w8, #1
1000086a0:	c1 00 00 54	b.ne	0x1000086b8
1000086a4:	1f 20 03 d5	nop
1000086a8:	01 d1 09 58	ldr	x1, #80416
1000086ac:	40 6f 05 70	adr	x0, #44523
1000086b0:	1f 20 03 d5	nop
1000086b4:	93 25 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000086b8:	9f 26 02 39	strb	wzr, [x20, #137]
1000086bc:	a8 83 5b f8	ldur	x8, [x29, #-72]
1000086c0:	1f 20 03 d5	nop
1000086c4:	a9 ec 07 58	ldr	x9, #64916 ; literal pool symbol address: ___stack_chk_guard
1000086c8:	29 01 40 f9	ldr	x9, [x9]
1000086cc:	3f 01 08 eb	cmp	x9, x8
1000086d0:	01 01 00 54	b.ne	0x1000086f0
1000086d4:	fd 7b 50 a9	ldp	x29, x30, [sp, #256]
1000086d8:	f4 4f 4f a9	ldp	x20, x19, [sp, #240]
1000086dc:	f6 57 4e a9	ldp	x22, x21, [sp, #224]
1000086e0:	f8 5f 4d a9	ldp	x24, x23, [sp, #208]
1000086e4:	e9 23 4c 6d	ldp	d9, d8, [sp, #192]
1000086e8:	ff 43 04 91	add	sp, sp, #272
1000086ec:	ff 0f 5f d6	retab
1000086f0:	44 25 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
1000086f4:	00 08 80 52	mov	w0, #64
1000086f8:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
1000086fc:	50 00 f0 b6	tbz	x16, #62, 0x100008704
100008700:	20 8e 38 d4	brk	#0xc471
100008704:	63 25 00 14	b	0x100011c90 ; symbol stub for: _errx
100008708:	e0 08 80 52	mov	w0, #71
10000870c:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100008710:	50 00 f0 b6	tbz	x16, #62, 0x100008718
100008714:	20 8e 38 d4	brk	#0xc471
100008718:	5e 25 00 14	b	0x100011c90 ; symbol stub for: _errx
10000871c:	7f 23 03 d5	pacibsp
100008720:	ff 43 01 d1	sub	sp, sp, #80
100008724:	e9 23 01 6d	stp	d9, d8, [sp, #16]
100008728:	f6 57 02 a9	stp	x22, x21, [sp, #32]
10000872c:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
100008730:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
100008734:	fd 03 01 91	add	x29, sp, #64
100008738:	ff 0f 00 b9	str	wzr, [sp, #12]
10000873c:	60 23 0a 10	adr	x0, #83052
100008740:	1f 20 03 d5	nop
100008744:	16 1d 00 94	bl	0x10000fb9c
100008748:	80 23 0a 10	adr	x0, #83056
10000874c:	1f 20 03 d5	nop
100008750:	13 1d 00 94	bl	0x10000fb9c
100008754:	a0 23 0a 10	adr	x0, #83060
100008758:	1f 20 03 d5	nop
10000875c:	10 1d 00 94	bl	0x10000fb9c
100008760:	c0 23 0a 10	adr	x0, #83064
100008764:	1f 20 03 d5	nop
100008768:	0d 1d 00 94	bl	0x10000fb9c
10000876c:	e0 23 0a 10	adr	x0, #83068
100008770:	1f 20 03 d5	nop
100008774:	0a 1d 00 94	bl	0x10000fb9c
100008778:	d3 ca 09 10	adr	x19, #80216
10000877c:	1f 20 03 d5	nop
100008780:	68 02 41 39	ldrb	w8, [x19, #64]
100008784:	08 02 00 34	cbz	w8, 0x1000087c4
100008788:	80 23 0a 10	adr	x0, #83056
10000878c:	1f 20 03 d5	nop
100008790:	66 1d 00 94	bl	0x10000fd28
100008794:	a0 23 0a 10	adr	x0, #83060
100008798:	1f 20 03 d5	nop
10000879c:	63 1d 00 94	bl	0x10000fd28
1000087a0:	c0 23 0a 10	adr	x0, #83064
1000087a4:	1f 20 03 d5	nop
1000087a8:	60 1d 00 94	bl	0x10000fd28
1000087ac:	e0 23 0a 10	adr	x0, #83068
1000087b0:	1f 20 03 d5	nop
1000087b4:	5d 1d 00 94	bl	0x10000fd28
1000087b8:	00 24 0a 10	adr	x0, #83072
1000087bc:	1f 20 03 d5	nop
1000087c0:	bd 1d 00 94	bl	0x10000feb4
1000087c4:	68 2e 80 b9	ldrsw	x8, [x19, #44]
1000087c8:	1f 15 00 71	cmp	w8, #5
1000087cc:	42 06 00 54	b.hs	0x100008894
1000087d0:	c9 3e 08 10	adr	x9, #67544
1000087d4:	1f 20 03 d5	nop
1000087d8:	28 79 68 f8	ldr	x8, [x9, x8, lsl #3]
1000087dc:	a9 00 00 d0	adrp	x9, 22 ; 0x10001e000
1000087e0:	28 65 02 f9	str	x8, [x9, #1224]
1000087e4:	68 0a 41 39	ldrb	w8, [x19, #66]
1000087e8:	69 16 41 39	ldrb	w9, [x19, #69]
1000087ec:	08 01 09 2a	orr	w8, w8, w9
1000087f0:	1f 01 00 71	cmp	w8, #0
1000087f4:	08 01 80 92	mov	x8, #-9
1000087f8:	08 01 9f da	csinv	x8, x8, xzr, eq
1000087fc:	69 ee 40 39	ldrb	w9, [x19, #59]
100008800:	0a f9 78 92	and	x10, x8, #0xffffffffffffff7f
100008804:	3f 01 00 71	cmp	w9, #0
100008808:	40 01 88 9a	csel	x0, x10, x8, eq
10000880c:	b5 25 00 94	bl	0x100011ee0 ; symbol stub for: _pm_samples_init
100008810:	a8 00 00 90	adrp	x8, 20 ; 0x10001c000
100008814:	00 25 06 f9	str	x0, [x8, #3144]
100008818:	e8 33 00 91	add	x8, sp, #12
10000881c:	08 0c 00 f9	str	x8, [x0, #24]
100008820:	6c 25 00 94	bl	0x100011dd0 ; symbol stub for: _mach_host_self
100008824:	14 00 80 d2	mov	x20, #0
100008828:	a8 00 00 90	adrp	x8, 20 ; 0x10001c000
10000882c:	00 51 0c b9	str	w0, [x8, #3152]
100008830:	60 06 40 fd	ldr	d0, [x19, #8]
100008834:	00 d8 61 5e	scvtf	d0, d0
100008838:	1f 20 03 d5	nop
10000883c:	21 cc 04 5c	ldr	d1, 0x1000121c0
100008840:	d3 63 05 10	adr	x19, #44152
100008844:	1f 20 03 d5	nop
100008848:	08 10 7e 1e	fmov	d8, #-1.00000000
10000884c:	75 20 0a 10	adr	x21, #82956
100008850:	1f 20 03 d5	nop
100008854:	09 18 61 1e	fdiv	d9, d0, d1
100008858:	60 6a 74 fc	ldr	d0, [x19, x20]
10000885c:	00 d8 61 7e	ucvtf	d0, d0
100008860:	00 18 69 1e	fdiv	d0, d0, d9
100008864:	00 19 60 1e	fdiv	d0, d8, d0
100008868:	12 25 00 94	bl	0x100011cb0 ; symbol stub for: _exp
10000886c:	a0 6a 34 fc	str	d0, [x21, x20]
100008870:	94 22 00 91	add	x20, x20, #8
100008874:	9f a2 00 f1	cmp	x20, #40
100008878:	01 ff ff 54	b.ne	0x100008858
10000887c:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
100008880:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
100008884:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
100008888:	e9 23 41 6d	ldp	d9, d8, [sp, #16]
10000888c:	ff 43 01 91	add	sp, sp, #80
100008890:	ff 0f 5f d6	retab
100008894:	ef 22 00 94	bl	0x100011450
100008898:	7f 23 03 d5	pacibsp
10000889c:	ef 3b b6 6d	stp	d15, d14, [sp, #-160]!
1000088a0:	ed 33 01 6d	stp	d13, d12, [sp, #16]
1000088a4:	eb 2b 02 6d	stp	d11, d10, [sp, #32]
1000088a8:	e9 23 03 6d	stp	d9, d8, [sp, #48]
1000088ac:	fc 6f 04 a9	stp	x28, x27, [sp, #64]
1000088b0:	fa 67 05 a9	stp	x26, x25, [sp, #80]
1000088b4:	f8 5f 06 a9	stp	x24, x23, [sp, #96]
1000088b8:	f6 57 07 a9	stp	x22, x21, [sp, #112]
1000088bc:	f4 4f 08 a9	stp	x20, x19, [sp, #128]
1000088c0:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
1000088c4:	fd 43 02 91	add	x29, sp, #144
1000088c8:	ff c3 0b d1	sub	sp, sp, #752
1000088cc:	1f 20 03 d5	nop
1000088d0:	48 dc 07 58	ldr	x8, #64392 ; literal pool symbol address: ___stack_chk_guard
1000088d4:	08 01 40 f9	ldr	x8, [x8]
1000088d8:	a8 03 16 f8	stur	x8, [x29, #-160]
1000088dc:	f3 c3 01 91	add	x19, sp, #112
1000088e0:	e0 c3 01 91	add	x0, sp, #112
1000088e4:	01 44 80 52	mov	w1, #544
1000088e8:	da 24 00 94	bl	0x100011c50 ; symbol stub for: _bzero
1000088ec:	28 00 80 12	mov	w8, #-2
1000088f0:	e8 73 00 b9	str	w8, [sp, #112]
1000088f4:	60 02 7e b2	orr	x0, x19, #0x4
1000088f8:	21 1f 06 70	adr	x1, #50151 ; literal pool for: "ALL_TASKS"
1000088fc:	1f 20 03 d5	nop
100008900:	42 01 80 52	mov	w2, #10
100008904:	03 10 80 52	mov	w3, #128
100008908:	c6 24 00 94	bl	0x100011c20 ; symbol stub for: ___strlcpy_chk
10000890c:	33 be 09 10	adr	x19, #79812
100008910:	1f 20 03 d5	nop
100008914:	68 2a 40 b9	ldr	w8, [x19, #40]
100008918:	9a bb 09 10	adr	x26, #79728
10000891c:	1f 20 03 d5	nop
100008920:	1f 05 00 71	cmp	w8, #1
100008924:	40 02 00 54	b.eq	0x10000896c
100008928:	e8 0d 00 35	cbnz	w8, 0x100008ae4
10000892c:	41 23 40 f9	ldr	x1, [x26, #64]
100008930:	c0 1d 06 30	adr	x0, #50105 ; literal pool for: "*** Running tasks ***\n\n"
100008934:	1f 20 03 d5	nop
100008938:	f2 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000893c:	4a 0b 40 39	ldrb	w10, [x26, #2]
100008940:	40 23 40 f9	ldr	x0, [x26, #64]
100008944:	c9 1e 06 50	adr	x9, #50138 ; literal pool for: "  "
100008948:	1f 20 03 d5	nop
10000894c:	68 1e 06 30	adr	x8, #50125 ; literal pool for: "Name"
100008950:	1f 20 03 d5	nop
100008954:	8a 01 00 34	cbz	w10, 0x100008984
100008958:	e8 27 00 a9	stp	x8, x9, [sp]
10000895c:	61 20 06 50	adr	x1, #50190 ; literal pool for: "%-32s%s ID     CPU ms/s  samp ms/s [total]     User%%  Deadlines/s [total] (<2 ms, 2-5 ms)  Wakeups/s [total] (Intr, Pkg idle)  Dead"
100008960:	1f 20 03 d5	nop
100008964:	df 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008968:	18 00 00 14	b	0x1000089c8
10000896c:	68 02 41 39	ldrb	w8, [x19, #64]
100008970:	41 23 40 f9	ldr	x1, [x26, #64]
100008974:	28 0b 00 34	cbz	w8, 0x100008ad8
100008978:	40 2b 06 50	adr	x0, #50538 ; literal pool for: "<key>coalitions</key>\n<array>\n"
10000897c:	1f 20 03 d5	nop
100008980:	58 00 00 14	b	0x100008ae0
100008984:	e8 27 00 a9	stp	x8, x9, [sp]
100008988:	c1 1b 06 30	adr	x1, #50041 ; literal pool for: "%-32s%s ID     CPU ms/s"
10000898c:	1f 20 03 d5	nop
100008990:	d4 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008994:	68 1a 41 39	ldrb	w8, [x19, #70]
100008998:	49 03 40 39	ldrb	w9, [x26]
10000899c:	1f 01 00 71	cmp	w8, #0
1000089a0:	20 19 40 7a	ccmp	w9, #0, #0, ne
1000089a4:	a1 00 00 54	b.ne	0x1000089b8
1000089a8:	41 23 40 f9	ldr	x1, [x26, #64]
1000089ac:	a0 1b 06 30	adr	x0, #50037 ; literal pool for: "  samp ms/s"
1000089b0:	1f 20 03 d5	nop
1000089b4:	d3 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000089b8:	41 23 40 f9	ldr	x1, [x26, #64]
1000089bc:	80 1b 06 30	adr	x0, #50033 ; literal pool for: "  User%  Deadlines (<2 ms, 2-5 ms)  Wakeups (Intr, Pkg idle)"
1000089c0:	1f 20 03 d5	nop
1000089c4:	cf 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000089c8:	68 ee 40 39	ldrb	w8, [x19, #59]
1000089cc:	a8 00 00 34	cbz	w8, 0x1000089e0
1000089d0:	41 23 40 f9	ldr	x1, [x26, #64]
1000089d4:	c0 20 06 70	adr	x0, #50203 ; literal pool for: "  SFI ms/s"
1000089d8:	1f 20 03 d5	nop
1000089dc:	c9 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000089e0:	68 e6 40 39	ldrb	w8, [x19, #57]
1000089e4:	a8 00 00 34	cbz	w8, 0x1000089f8
1000089e8:	41 23 40 f9	ldr	x1, [x26, #64]
1000089ec:	60 20 06 50	adr	x0, #50190 ; literal pool for: "  QoS (L/T)"
1000089f0:	1f 20 03 d5	nop
1000089f4:	c3 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
1000089f8:	68 f6 40 39	ldrb	w8, [x19, #61]
1000089fc:	a8 00 00 34	cbz	w8, 0x100008a10
100008a00:	41 23 40 f9	ldr	x1, [x26, #64]
100008a04:	00 20 06 50	adr	x0, #50178 ; literal pool for: "  RPID  PPID"
100008a08:	1f 20 03 d5	nop
100008a0c:	bd 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008a10:	68 06 41 39	ldrb	w8, [x19, #65]
100008a14:	e8 00 00 34	cbz	w8, 0x100008a30
100008a18:	43 23 40 f9	ldr	x3, [x26, #64]
100008a1c:	a0 1f 06 70	adr	x0, #50167 ; literal pool for: "  Bytes Read  Bytes Written  Pageins"
100008a20:	1f 20 03 d5	nop
100008a24:	81 04 80 52	mov	w1, #36
100008a28:	22 00 80 52	mov	w2, #1
100008a2c:	bd 24 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100008a30:	68 0a 41 39	ldrb	w8, [x19, #66]
100008a34:	e8 00 00 34	cbz	w8, 0x100008a50
100008a38:	43 23 40 f9	ldr	x3, [x26, #64]
100008a3c:	e0 1f 06 10	adr	x0, #50172 ; literal pool for: "  Packets (In/Out)       Bytes (In/Out)      "
100008a40:	1f 20 03 d5	nop
100008a44:	a1 05 80 52	mov	w1, #45
100008a48:	22 00 80 52	mov	w2, #1
100008a4c:	b5 24 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100008a50:	68 0e 41 39	ldrb	w8, [x19, #67]
100008a54:	e8 00 00 34	cbz	w8, 0x100008a70
100008a58:	43 23 40 f9	ldr	x3, [x26, #64]
100008a5c:	40 20 06 50	adr	x0, #50186 ; literal pool for: "  GPU ms/s"
100008a60:	1f 20 03 d5	nop
100008a64:	41 01 80 52	mov	w1, #10
100008a68:	22 00 80 52	mov	w2, #1
100008a6c:	ad 24 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100008a70:	68 12 41 39	ldrb	w8, [x19, #68]
100008a74:	e8 00 00 34	cbz	w8, 0x100008a90
100008a78:	43 23 40 f9	ldr	x3, [x26, #64]
100008a7c:	a0 1f 06 30	adr	x0, #50165 ; literal pool for: " QOS (ms/s) Disabled Maint   BG      Util   Default  U-Init  U-Intr"
100008a80:	1f 20 03 d5	nop
100008a84:	61 08 80 52	mov	w1, #67
100008a88:	22 00 80 52	mov	w2, #1
100008a8c:	a5 24 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100008a90:	68 2e 41 39	ldrb	w8, [x19, #75]
100008a94:	a8 00 00 34	cbz	w8, 0x100008aa8
100008a98:	40 23 40 f9	ldr	x0, [x26, #64]
100008a9c:	c1 20 06 30	adr	x1, #50201 ; literal pool for: "  PCPU ms/s %%PCPU  Switches"
100008aa0:	1f 20 03 d5	nop
100008aa4:	8f 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008aa8:	68 16 41 39	ldrb	w8, [x19, #69]
100008aac:	e8 00 00 34	cbz	w8, 0x100008ac8
100008ab0:	43 23 40 f9	ldr	x3, [x26, #64]
100008ab4:	e0 20 06 50	adr	x0, #50206 ; literal pool for: "  Energy Impact"
100008ab8:	1f 20 03 d5	nop
100008abc:	e1 01 80 52	mov	w1, #15
100008ac0:	22 00 80 52	mov	w2, #1
100008ac4:	97 24 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100008ac8:	41 23 40 f9	ldr	x1, [x26, #64]
100008acc:	00 f9 05 10	adr	x0, #48928 ; literal pool for: "\n"
100008ad0:	1f 20 03 d5	nop
100008ad4:	03 00 00 14	b	0x100008ae0
100008ad8:	40 21 06 30	adr	x0, #50217 ; literal pool for: "<key>tasks</key>\n<array>\n"
100008adc:	1f 20 03 d5	nop
100008ae0:	88 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008ae4:	68 02 41 39	ldrb	w8, [x19, #64]
100008ae8:	a8 2d 00 34	cbz	w8, 0x10000909c
100008aec:	b9 00 00 90	adrp	x25, 20 ; 0x10001c000
100008af0:	28 07 4c b9	ldr	w8, [x25, #3076]
100008af4:	e8 2f 00 34	cbz	w8, 0x1000090f0
100008af8:	13 00 80 52	mov	w19, #0
100008afc:	a8 23 03 d1	sub	x8, x29, #200
100008b00:	08 41 00 91	add	x8, x8, #16
100008b04:	e8 2f 00 f9	str	x8, [sp, #88]
100008b08:	94 07 0a 10	adr	x20, #82160
100008b0c:	1f 20 03 d5	nop
100008b10:	1f 20 03 d5	nop
100008b14:	e0 b3 04 5c	ldr	d0, 0x100012190
100008b18:	e0 37 00 fd	str	d0, [sp, #104]
100008b1c:	1f 20 03 d5	nop
100008b20:	80 4c 05 5c	ldr	d0, 0x1000134b0
100008b24:	e0 33 00 fd	str	d0, [sp, #96]
100008b28:	1f 20 03 d5	nop
100008b2c:	a0 b4 04 5c	ldr	d0, 0x1000121c0
100008b30:	e0 2b 00 fd	str	d0, [sp, #80]
100008b34:	1f 20 03 d5	nop
100008b38:	00 b3 04 5c	ldr	d0, 0x100012198
100008b3c:	e0 27 00 fd	str	d0, [sp, #72]
100008b40:	5c 03 0a 10	adr	x28, #82024
100008b44:	1f 20 03 d5	nop
100008b48:	17 44 80 52	mov	w23, #544
100008b4c:	e0 03 14 aa	mov	x0, x20
100008b50:	e1 03 13 aa	mov	x1, x19
100008b54:	92 1c 00 94	bl	0x10000fd9c
100008b58:	09 30 04 91	add	x9, x0, #268
100008b5c:	28 29 40 a9	ldp	x8, x10, [x9]
100008b60:	40 07 40 fd	ldr	d0, [x26, #8]
100008b64:	48 01 08 8b	add	x8, x10, x8
100008b68:	01 01 63 9e	ucvtf	d1, x8
100008b6c:	0a 08 61 1e	fmul	d10, d0, d1
100008b70:	48 0b 40 39	ldrb	w8, [x26, #2]
100008b74:	4a 83 00 91	add	x10, x26, #32
100008b78:	4b a3 00 91	add	x11, x26, #40
100008b7c:	1f 01 00 71	cmp	w8, #0
100008b80:	48 01 8b 9a	csel	x8, x10, x11, eq
100008b84:	48 21 60 1e	fcmp	d10, #0.0
100008b88:	00 28 00 54	b.eq	0x100009088
100008b8c:	f6 03 00 aa	mov	x22, x0
100008b90:	01 08 41 fd	ldr	d1, [x0, #528]
100008b94:	21 d8 61 7e	ucvtf	d1, d1
100008b98:	01 08 61 1e	fmul	d1, d0, d1
100008b9c:	e2 37 40 fd	ldr	d2, [sp, #104]
100008ba0:	2d 18 62 1e	fdiv	d13, d1, d2
100008ba4:	a8 21 60 1e	fcmp	d13, #0.0
100008ba8:	00 27 00 54	b.eq	0x100009088
100008bac:	d4 02 40 f9	ldr	x20, [x22]
100008bb0:	3b 61 41 a9	ldp	x27, x24, [x9, #16]
100008bb4:	d5 22 02 91	add	x21, x22, #136
100008bb8:	e1 33 40 fd	ldr	d1, [sp, #96]
100008bbc:	a1 09 61 1e	fmul	d1, d13, d1
100008bc0:	48 19 61 1e	fdiv	d8, d10, d1
100008bc4:	62 03 63 9e	ucvtf	d2, x27
100008bc8:	03 03 63 9e	ucvtf	d3, x24
100008bcc:	4b 18 6d 1e	fdiv	d11, d2, d13
100008bd0:	6c 18 6d 1e	fdiv	d12, d3, d13
100008bd4:	c2 0e 5c 6d	ldp	d2, d3, [x22, #448]
100008bd8:	42 d8 61 7e	ucvtf	d2, d2
100008bdc:	4e 18 6d 1e	fdiv	d14, d2, d13
100008be0:	62 d8 61 7e	ucvtf	d2, d3
100008be4:	4f 18 6d 1e	fdiv	d15, d2, d13
100008be8:	02 01 40 fd	ldr	d2, [x8]
100008bec:	42 d8 61 7e	ucvtf	d2, d2
100008bf0:	00 08 62 1e	fmul	d0, d0, d2
100008bf4:	c2 ee 40 fd	ldr	d2, [x22, #472]
100008bf8:	42 d8 61 7e	ucvtf	d2, d2
100008bfc:	40 19 60 1e	fdiv	d0, d10, d0
100008c00:	e3 2b 40 fd	ldr	d3, [sp, #80]
100008c04:	09 08 63 1e	fmul	d9, d0, d3
100008c08:	1f 20 03 d5	nop
100008c0c:	1f 20 03 d5	nop
100008c10:	48 a7 09 18	ldr	w8, 0x10001c0f8
100008c14:	40 18 61 1e	fdiv	d0, d2, d1
100008c18:	1f 05 00 71	cmp	w8, #1
100008c1c:	20 03 00 54	b.eq	0x100008c80
100008c20:	e8 1c 00 35	cbnz	w8, 0x100008fbc
100008c24:	e0 23 00 fd	str	d0, [sp, #64]
100008c28:	c1 22 00 91	add	x1, x22, #8
100008c2c:	a0 a7 03 d1	sub	x0, x29, #233
100008c30:	22 04 80 52	mov	w2, #33
100008c34:	23 04 80 52	mov	w3, #33
100008c38:	fa 23 00 94	bl	0x100011c20 ; symbol stub for: ___strlcpy_chk
100008c3c:	40 23 40 f9	ldr	x0, [x26, #64]
100008c40:	e9 06 06 50	adr	x9, #49374 ; literal pool for: "  "
100008c44:	1f 20 03 d5	nop
100008c48:	a8 a7 03 d1	sub	x8, x29, #233
100008c4c:	e8 27 00 a9	stp	x8, x9, [sp]
100008c50:	41 17 06 50	adr	x1, #49898 ; literal pool for: "%-32s%s "
100008c54:	1f 20 03 d5	nop
100008c58:	22 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008c5c:	41 23 40 f9	ldr	x1, [x26, #64]
100008c60:	9f 06 00 b1	cmn	x20, #1
100008c64:	e0 08 00 54	b.eq	0x100008d80
100008c68:	f4 03 00 f9	str	x20, [sp]
100008c6c:	e0 03 01 aa	mov	x0, x1
100008c70:	81 16 06 70	adr	x1, #49875 ; literal pool for: "%-5llu"
100008c74:	1f 20 03 d5	nop
100008c78:	1a 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008c7c:	44 00 00 14	b	0x100008d8c
100008c80:	e0 23 00 fd	str	d0, [sp, #64]
100008c84:	41 23 40 f9	ldr	x1, [x26, #64]
100008c88:	a0 9b 05 70	adr	x0, #45943 ; literal pool for: "<dict>\n"
100008c8c:	1f 20 03 d5	nop
100008c90:	1c 24 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008c94:	9f 06 00 b1	cmn	x20, #1
100008c98:	c0 00 00 54	b.eq	0x100008cb0
100008c9c:	40 23 40 f9	ldr	x0, [x26, #64]
100008ca0:	f4 03 00 f9	str	x20, [sp]
100008ca4:	c1 1d 06 70	adr	x1, #50107 ; literal pool for: "<key>id</key><integer>%llu</integer>\n"
100008ca8:	1f 20 03 d5	nop
100008cac:	0d 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008cb0:	40 23 40 f9	ldr	x0, [x26, #64]
100008cb4:	c8 22 00 91	add	x8, x22, #8
100008cb8:	49 01 79 9e	fcvtzu	x9, d10
100008cbc:	e8 0b 00 fd	str	d8, [sp, #16]
100008cc0:	e8 27 00 a9	stp	x8, x9, [sp]
100008cc4:	01 1e 06 30	adr	x1, #50113 ; literal pool for: "<key>name</key><string>%s</string>\n<key>cputime_ns</key><integer>%llu</integer>\n<key>cputime_ms_per_s</key><real>%g</real>\n"
100008cc8:	1f 20 03 d5	nop
100008ccc:	05 24 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008cd0:	48 03 40 39	ldrb	w8, [x26]
100008cd4:	c8 00 00 35	cbnz	w8, 0x100008cec
100008cd8:	40 23 40 f9	ldr	x0, [x26, #64]
100008cdc:	e9 03 00 fd	str	d9, [sp]
100008ce0:	01 21 06 30	adr	x1, #50209 ; literal pool for: "<key>cputime_sample_ms_per_s</key><real>%g</real>\n"
100008ce4:	1f 20 03 d5	nop
100008ce8:	fe 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008cec:	40 23 40 f9	ldr	x0, [x26, #64]
100008cf0:	c8 26 5c a9	ldp	x8, x9, [x22, #448]
100008cf4:	ef 1f 00 fd	str	d15, [sp, #56]
100008cf8:	e9 1b 00 f9	str	x9, [sp, #48]
100008cfc:	ee 17 00 fd	str	d14, [sp, #40]
100008d00:	e8 13 00 f9	str	x8, [sp, #32]
100008d04:	ec 0f 00 fd	str	d12, [sp, #24]
100008d08:	f8 0b 00 f9	str	x24, [sp, #16]
100008d0c:	eb 07 00 fd	str	d11, [sp, #8]
100008d10:	fb 03 00 f9	str	x27, [sp]
100008d14:	01 21 06 10	adr	x1, #50208 ; literal pool for: "<key>intr_wakeups</key><integer>%llu</integer>\n<key>intr_wakeups_per_s</key><real>%g</real>\n<key>idle_wakeups</key><integer>%llu</integer>\n<key>idle_wakeups_per_s</key><real>%g</real>\n<key>diskio_bytesread</key><integer>%llu</integer>\n<key>diskio_bytesread_per_s</key><real>%g</real>\n<key>diskio_byteswritten</key><integer>%llu</integer>\n<key>diskio_byteswritten_per_s</key><real>%g</real>\n"
100008d18:	1f 20 03 d5	nop
100008d1c:	f1 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008d20:	c8 ee 40 f9	ldr	x8, [x22, #472]
100008d24:	08 01 00 b4	cbz	x8, 0x100008d44
100008d28:	40 23 40 f9	ldr	x0, [x26, #64]
100008d2c:	e0 23 40 fd	ldr	d0, [sp, #64]
100008d30:	e0 07 00 fd	str	d0, [sp, #8]
100008d34:	e8 03 00 f9	str	x8, [sp]
100008d38:	01 2c 06 70	adr	x1, #50563 ; literal pool for: "<key>gputime_ns</key><integer>%llu</integer>\n<key>gputime_ms_per_s</key><real>%g</real>\n"
100008d3c:	1f 20 03 d5	nop
100008d40:	e8 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008d44:	56 23 40 f9	ldr	x22, [x26, #64]
100008d48:	e0 03 15 aa	mov	x0, x21
100008d4c:	59 24 00 94	bl	0x100011eb0 ; symbol stub for: _pm_energy_impact
100008d50:	08 40 60 1e	fmov	d8, d0
100008d54:	e0 03 15 aa	mov	x0, x21
100008d58:	56 24 00 94	bl	0x100011eb0 ; symbol stub for: _pm_energy_impact
100008d5c:	00 18 6d 1e	fdiv	d0, d0, d13
100008d60:	e8 03 00 6d	stp	d8, d0, [sp]
100008d64:	e0 03 16 aa	mov	x0, x22
100008d68:	61 2d 06 10	adr	x1, #50604 ; literal pool for: "<key>energy_impact</key><real>%g</real>\n<key>energy_impact_per_s</key><real>%g</real>\n"
100008d6c:	1f 20 03 d5	nop
100008d70:	dc 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008d74:	60 0c 06 30	adr	x0, #49549 ; literal pool for: "<key>tasks</key>\n<array>\n"
100008d78:	1f 20 03 d5	nop
100008d7c:	8e 00 00 14	b	0x100008fb4
100008d80:	40 0e 06 50	adr	x0, #49610 ; literal pool for: "     "
100008d84:	1f 20 03 d5	nop
100008d88:	de 23 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008d8c:	48 0b 40 39	ldrb	w8, [x26, #2]
100008d90:	40 23 40 f9	ldr	x0, [x26, #64]
100008d94:	c8 01 00 34	cbz	w8, 0x100008dcc
100008d98:	e0 33 40 fd	ldr	d0, [sp, #96]
100008d9c:	40 19 60 1e	fdiv	d0, d10, d0
100008da0:	f8 1b 00 f9	str	x24, [sp, #48]
100008da4:	ec 17 00 fd	str	d12, [sp, #40]
100008da8:	fb 13 00 f9	str	x27, [sp, #32]
100008dac:	e8 27 00 6d	stp	d8, d9, [sp]
100008db0:	e0 2f 01 6d	stp	d0, d11, [sp, #16]
100008db4:	61 0f 06 50	adr	x1, #49646 ; literal pool for: "  %-7.2f   %-7.2f   [%-9.2f]                                             %-7.2f [%-7llu] %-7.2f [%-7llu]       "
100008db8:	1f 20 03 d5	nop
100008dbc:	c9 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008dc0:	96 98 09 10	adr	x22, #78608
100008dc4:	1f 20 03 d5	nop
100008dc8:	15 00 00 14	b	0x100008e1c
100008dcc:	e8 03 00 fd	str	d8, [sp]
100008dd0:	01 0c 06 10	adr	x1, #49536 ; literal pool for: "  %-7.2f"
100008dd4:	1f 20 03 d5	nop
100008dd8:	c2 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008ddc:	b6 97 09 10	adr	x22, #78580
100008de0:	1f 20 03 d5	nop
100008de4:	c8 1a 41 39	ldrb	w8, [x22, #70]
100008de8:	08 01 00 34	cbz	w8, 0x100008e08
100008dec:	48 03 40 39	ldrb	w8, [x26]
100008df0:	c8 00 00 35	cbnz	w8, 0x100008e08
100008df4:	40 23 40 f9	ldr	x0, [x26, #64]
100008df8:	e9 03 00 fd	str	d9, [sp]
100008dfc:	e1 0a 06 30	adr	x1, #49501 ; literal pool for: "   %-7.2f "
100008e00:	1f 20 03 d5	nop
100008e04:	b7 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008e08:	40 23 40 f9	ldr	x0, [x26, #64]
100008e0c:	eb 33 00 6d	stp	d11, d12, [sp]
100008e10:	a1 0a 06 10	adr	x1, #49492 ; literal pool for: "                                     %-7.2f %-7.2f           "
100008e14:	1f 20 03 d5	nop
100008e18:	b2 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008e1c:	c8 ee 40 39	ldrb	w8, [x22, #59]
100008e20:	08 01 00 34	cbz	w8, 0x100008e40
100008e24:	40 23 40 f9	ldr	x0, [x26, #64]
100008e28:	a8 9f 05 50	adr	x8, #46070 ; literal pool for: ""
100008e2c:	1f 20 03 d5	nop
100008e30:	e8 03 00 f9	str	x8, [sp]
100008e34:	e1 0e 06 50	adr	x1, #49630 ; literal pool for: "%11s"
100008e38:	1f 20 03 d5	nop
100008e3c:	a9 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008e40:	c8 e6 40 39	ldrb	w8, [x22, #57]
100008e44:	08 01 00 34	cbz	w8, 0x100008e64
100008e48:	40 23 40 f9	ldr	x0, [x26, #64]
100008e4c:	88 9e 05 50	adr	x8, #46034 ; literal pool for: ""
100008e50:	1f 20 03 d5	nop
100008e54:	e8 03 00 f9	str	x8, [sp]
100008e58:	c1 0d 06 50	adr	x1, #49594 ; literal pool for: "%11s"
100008e5c:	1f 20 03 d5	nop
100008e60:	a0 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008e64:	c8 f6 40 39	ldrb	w8, [x22, #61]
100008e68:	08 01 00 34	cbz	w8, 0x100008e88
100008e6c:	40 23 40 f9	ldr	x0, [x26, #64]
100008e70:	68 9d 05 50	adr	x8, #45998 ; literal pool for: ""
100008e74:	1f 20 03 d5	nop
100008e78:	e8 03 00 f9	str	x8, [sp]
100008e7c:	a1 0c 06 50	adr	x1, #49558 ; literal pool for: "%11s"
100008e80:	1f 20 03 d5	nop
100008e84:	97 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008e88:	c8 06 41 39	ldrb	w8, [x22, #65]
100008e8c:	08 01 00 34	cbz	w8, 0x100008eac
100008e90:	9f 06 00 b1	cmn	x20, #1
100008e94:	c0 00 00 54	b.eq	0x100008eac
100008e98:	40 23 40 f9	ldr	x0, [x26, #64]
100008e9c:	ee 3f 00 6d	stp	d14, d15, [sp]
100008ea0:	a1 0b 06 70	adr	x1, #49527 ; literal pool for: "%10.1f %14.1f           "
100008ea4:	1f 20 03 d5	nop
100008ea8:	08 00 00 14	b	0x100008ec8
100008eac:	08 01 00 34	cbz	w8, 0x100008ecc
100008eb0:	40 23 40 f9	ldr	x0, [x26, #64]
100008eb4:	48 9b 05 50	adr	x8, #45930 ; literal pool for: ""
100008eb8:	1f 20 03 d5	nop
100008ebc:	e8 03 00 f9	str	x8, [sp]
100008ec0:	81 0b 06 10	adr	x1, #49520 ; literal pool for: "%36s"
100008ec4:	1f 20 03 d5	nop
100008ec8:	86 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008ecc:	c8 0a 41 39	ldrb	w8, [x22, #66]
100008ed0:	08 01 00 34	cbz	w8, 0x100008ef0
100008ed4:	40 23 40 f9	ldr	x0, [x26, #64]
100008ed8:	28 9a 05 50	adr	x8, #45894 ; literal pool for: ""
100008edc:	1f 20 03 d5	nop
100008ee0:	e8 03 00 f9	str	x8, [sp]
100008ee4:	81 0a 06 30	adr	x1, #49489 ; literal pool for: "%45s"
100008ee8:	1f 20 03 d5	nop
100008eec:	7d 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008ef0:	c8 0e 41 39	ldrb	w8, [x22, #67]
100008ef4:	28 01 00 34	cbz	w8, 0x100008f18
100008ef8:	9f 06 00 b1	cmn	x20, #1
100008efc:	e0 00 00 54	b.eq	0x100008f18
100008f00:	40 23 40 f9	ldr	x0, [x26, #64]
100008f04:	e0 23 40 fd	ldr	d0, [sp, #64]
100008f08:	e0 03 00 fd	str	d0, [sp]
100008f0c:	61 09 06 50	adr	x1, #49454 ; literal pool for: "%-7.2f   "
100008f10:	1f 20 03 d5	nop
100008f14:	08 00 00 14	b	0x100008f34
100008f18:	08 01 00 34	cbz	w8, 0x100008f38
100008f1c:	40 23 40 f9	ldr	x0, [x26, #64]
100008f20:	e8 97 05 50	adr	x8, #45822 ; literal pool for: ""
100008f24:	1f 20 03 d5	nop
100008f28:	e8 03 00 f9	str	x8, [sp]
100008f2c:	c1 08 06 10	adr	x1, #49432 ; literal pool for: "%10s"
100008f30:	1f 20 03 d5	nop
100008f34:	6b 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008f38:	c8 0a 41 39	ldrb	w8, [x22, #66]
100008f3c:	08 01 00 34	cbz	w8, 0x100008f5c
100008f40:	40 23 40 f9	ldr	x0, [x26, #64]
100008f44:	c8 96 05 50	adr	x8, #45786 ; literal pool for: ""
100008f48:	1f 20 03 d5	nop
100008f4c:	e8 03 00 f9	str	x8, [sp]
100008f50:	c1 07 06 30	adr	x1, #49401 ; literal pool for: "%67s"
100008f54:	1f 20 03 d5	nop
100008f58:	62 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008f5c:	c8 2e 41 39	ldrb	w8, [x22, #75]
100008f60:	08 01 00 34	cbz	w8, 0x100008f80
100008f64:	40 23 40 f9	ldr	x0, [x26, #64]
100008f68:	a8 95 05 50	adr	x8, #45750 ; literal pool for: ""
100008f6c:	1f 20 03 d5	nop
100008f70:	e8 03 00 f9	str	x8, [sp]
100008f74:	c1 06 06 50	adr	x1, #49370 ; literal pool for: "%27s"
100008f78:	1f 20 03 d5	nop
100008f7c:	59 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008f80:	c8 16 41 39	ldrb	w8, [x22, #69]
100008f84:	48 01 00 34	cbz	w8, 0x100008fac
100008f88:	56 23 40 f9	ldr	x22, [x26, #64]
100008f8c:	e0 03 15 aa	mov	x0, x21
100008f90:	c8 23 00 94	bl	0x100011eb0 ; symbol stub for: _pm_energy_impact
100008f94:	00 18 6d 1e	fdiv	d0, d0, d13
100008f98:	e0 03 00 fd	str	d0, [sp]
100008f9c:	e0 03 16 aa	mov	x0, x22
100008fa0:	81 05 06 70	adr	x1, #49331 ; literal pool for: "%-7.2f     "
100008fa4:	1f 20 03 d5	nop
100008fa8:	4e 23 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100008fac:	00 d2 05 10	adr	x0, #47680 ; literal pool for: "\n"
100008fb0:	1f 20 03 d5	nop
100008fb4:	41 23 40 f9	ldr	x1, [x26, #64]
100008fb8:	52 23 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100008fbc:	a8 23 03 d1	sub	x8, x29, #200
100008fc0:	1f 20 03 d5	nop
100008fc4:	70 a4 07 58	ldr	x16, #62604 ; literal pool symbol address: __NSConcreteStackBlock
100008fc8:	f1 03 08 aa	mov	x17, x8
100008fcc:	31 5c ed f2	movk	x17, #27361, lsl #48
100008fd0:	30 0a c1 da	pacda	x16, x17
100008fd4:	b0 83 13 f8	stur	x16, [x29, #-200]
100008fd8:	e0 27 40 fd	ldr	d0, [sp, #72]
100008fdc:	a0 03 14 fc	stur	d0, [x29, #-192]
100008fe0:	e8 2f 40 f9	ldr	x8, [sp, #88]
100008fe4:	70 f4 00 10	adr	x16, #7820
100008fe8:	1f 20 03 d5	nop
100008fec:	10 01 c1 da	pacia	x16, x8
100008ff0:	88 f5 07 10	adr	x8, #65200
100008ff4:	1f 20 03 d5	nop
100008ff8:	b0 a3 34 a9	stp	x16, x8, [x29, #-184]
100008ffc:	b4 83 15 f8	stur	x20, [x29, #-168]
100009000:	a2 23 03 d1	sub	x2, x29, #200
100009004:	e0 03 1c aa	mov	x0, x28
100009008:	01 00 80 d2	mov	x1, #0
10000900c:	43 1b 00 94	bl	0x10000fd18
100009010:	a0 1b 00 b4	cbz	x0, 0x100009384
100009014:	f5 03 00 aa	mov	x21, x0
100009018:	88 03 40 f9	ldr	x8, [x28]
10000901c:	89 0f 40 b9	ldr	w9, [x28, #12]
100009020:	28 21 17 9b	madd	x8, x9, x23, x8
100009024:	bf 02 08 eb	cmp	x21, x8
100009028:	a2 01 00 54	b.hs	0x10000905c
10000902c:	a8 d6 40 f9	ldr	x8, [x21, #424]
100009030:	1f 01 14 eb	cmp	x8, x20
100009034:	41 01 00 54	b.ne	0x10000905c
100009038:	e0 c3 01 91	add	x0, sp, #112
10000903c:	e2 c3 01 91	add	x2, sp, #112
100009040:	e1 03 15 aa	mov	x1, x21
100009044:	af 23 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
100009048:	e0 03 15 aa	mov	x0, x21
10000904c:	21 00 80 52	mov	w1, #1
100009050:	2b 05 00 94	bl	0x10000a4fc
100009054:	b5 82 08 91	add	x21, x21, #544
100009058:	f0 ff ff 17	b	0x100009018
10000905c:	1f 20 03 d5	nop
100009060:	1f 20 03 d5	nop
100009064:	a8 84 09 18	ldr	w8, 0x10001c0f8
100009068:	1f 05 00 71	cmp	w8, #1
10000906c:	74 dc 09 10	adr	x20, #80780
100009070:	1f 20 03 d5	nop
100009074:	a1 00 00 54	b.ne	0x100009088
100009078:	41 23 40 f9	ldr	x1, [x26, #64]
10000907c:	20 9a 05 30	adr	x0, #45893 ; literal pool for: "</array>\n</dict>\n"
100009080:	1f 20 03 d5	nop
100009084:	1f 23 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100009088:	73 06 00 11	add	w19, w19, #1
10000908c:	28 07 4c b9	ldr	w8, [x25, #3076]
100009090:	7f 02 08 6b	cmp	w19, w8
100009094:	c3 d5 ff 54	b.lo	0x100008b4c
100009098:	16 00 00 14	b	0x1000090f0
10000909c:	1f 20 03 d5	nop
1000090a0:	a8 d8 09 18	ldr	w8, 0x10001cbb4
1000090a4:	68 02 00 34	cbz	w8, 0x1000090f0
1000090a8:	13 00 80 52	mov	w19, #0
1000090ac:	f4 d7 09 10	adr	x20, #80636
1000090b0:	1f 20 03 d5	nop
1000090b4:	e0 03 14 aa	mov	x0, x20
1000090b8:	e1 03 13 aa	mov	x1, x19
1000090bc:	d5 1a 00 94	bl	0x10000fc10
1000090c0:	f5 03 00 aa	mov	x21, x0
1000090c4:	e0 c3 01 91	add	x0, sp, #112
1000090c8:	e2 c3 01 91	add	x2, sp, #112
1000090cc:	e1 03 15 aa	mov	x1, x21
1000090d0:	8c 23 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
1000090d4:	e0 03 15 aa	mov	x0, x21
1000090d8:	01 00 80 52	mov	w1, #0
1000090dc:	08 05 00 94	bl	0x10000a4fc
1000090e0:	73 06 00 11	add	w19, w19, #1
1000090e4:	88 0e 40 b9	ldr	w8, [x20, #12]
1000090e8:	7f 02 08 6b	cmp	w19, w8
1000090ec:	43 fe ff 54	b.lo	0x1000090b4
1000090f0:	13 7f 09 10	adr	x19, #77792
1000090f4:	1f 20 03 d5	nop
1000090f8:	68 2a 40 b9	ldr	w8, [x19, #40]
1000090fc:	1f 05 00 71	cmp	w8, #1
100009100:	a1 00 00 54	b.ne	0x100009114
100009104:	41 23 40 f9	ldr	x1, [x26, #64]
100009108:	80 f0 05 70	adr	x0, #48659 ; literal pool for: "</array>\n<key>all_tasks</key>\n"
10000910c:	1f 20 03 d5	nop
100009110:	fc 22 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100009114:	48 0b 40 39	ldrb	w8, [x26, #2]
100009118:	49 83 00 91	add	x9, x26, #32
10000911c:	4a a3 00 91	add	x10, x26, #40
100009120:	1f 01 00 71	cmp	w8, #0
100009124:	28 01 8a 9a	csel	x8, x9, x10, eq
100009128:	08 01 40 f9	ldr	x8, [x8]
10000912c:	e8 ff 00 f9	str	x8, [sp, #504]
100009130:	e0 c3 01 91	add	x0, sp, #112
100009134:	01 00 80 52	mov	w1, #0
100009138:	f1 04 00 94	bl	0x10000a4fc
10000913c:	48 03 40 39	ldrb	w8, [x26]
100009140:	e8 0f 00 35	cbnz	w8, 0x10000933c
100009144:	48 0b 40 39	ldrb	w8, [x26, #2]
100009148:	69 2a 40 b9	ldr	w9, [x19, #40]
10000914c:	1f 01 00 71	cmp	w8, #0
100009150:	24 09 41 7a	ccmp	w9, #1, #4, eq
100009154:	40 0f 00 54	b.eq	0x10000933c
100009158:	68 12 40 f9	ldr	x8, [x19, #32]
10000915c:	08 0f 00 b4	cbz	x8, 0x10000933c
100009160:	49 1b 40 f9	ldr	x9, [x26, #48]
100009164:	2a 0d c8 9a	sdiv	x10, x9, x8
100009168:	48 a5 08 9b	msub	x8, x10, x8, x9
10000916c:	88 0e 00 b5	cbnz	x8, 0x10000933c
100009170:	41 23 40 f9	ldr	x1, [x26, #64]
100009174:	a0 7a 06 50	adr	x0, #53078 ; literal pool for: "\n\n**** Average cumulatively decayed power score ****\n\n"
100009178:	1f 20 03 d5	nop
10000917c:	e1 22 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100009180:	40 d1 09 10	adr	x0, #80424
100009184:	1f 20 03 d5	nop
100009188:	10 e8 00 10	adr	x16, #7424
10000918c:	1f 20 03 d5	nop
100009190:	f0 23 c1 da	paciza	x16
100009194:	e1 03 10 aa	mov	x1, x16
100009198:	ac 1a 00 94	bl	0x10000fc48
10000919c:	40 23 40 f9	ldr	x0, [x26, #64]
1000091a0:	e8 30 05 50	adr	x8, #42526 ; literal pool for: " "
1000091a4:	1f 20 03 d5	nop
1000091a8:	e8 03 00 f9	str	x8, [sp]
1000091ac:	a1 7a 06 30	adr	x1, #53077 ; literal pool for: "      %-32s"
1000091b0:	1f 20 03 d5	nop
1000091b4:	cb 22 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000091b8:	14 00 80 d2	mov	x20, #0
1000091bc:	b5 23 03 d1	sub	x21, x29, #200
1000091c0:	16 e8 07 10	adr	x22, #64768
1000091c4:	1f 20 03 d5	nop
1000091c8:	33 7a 06 30	adr	x19, #53061 ; literal pool for: "\t   %-10s"
1000091cc:	1f 20 03 d5	nop
1000091d0:	bf 6a 34 f8	str	xzr, [x21, x20]
1000091d4:	40 23 40 f9	ldr	x0, [x26, #64]
1000091d8:	c8 6a 74 f8	ldr	x8, [x22, x20]
1000091dc:	e8 03 00 f9	str	x8, [sp]
1000091e0:	e1 03 13 aa	mov	x1, x19
1000091e4:	bf 22 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000091e8:	94 22 00 91	add	x20, x20, #8
1000091ec:	9f a2 00 f1	cmp	x20, #40
1000091f0:	01 ff ff 54	b.ne	0x1000091d0
1000091f4:	41 23 40 f9	ldr	x1, [x26, #64]
1000091f8:	a0 bf 05 10	adr	x0, #47092 ; literal pool for: "\n"
1000091fc:	1f 20 03 d5	nop
100009200:	c0 22 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100009204:	9b 00 00 f0	adrp	x27, 19 ; 0x10001c000
100009208:	68 b7 4b b9	ldr	w8, [x27, #2996]
10000920c:	88 09 00 34	cbz	w8, 0x10000933c
100009210:	13 00 80 52	mov	w19, #0
100009214:	b4 cc 09 10	adr	x20, #80276
100009218:	1f 20 03 d5	nop
10000921c:	b6 23 03 d1	sub	x22, x29, #200
100009220:	1f 20 03 d5	nop
100009224:	68 7b 04 5c	ldr	d8, 0x100012190
100009228:	9c 14 05 10	adr	x28, #41616
10000922c:	1f 20 03 d5	nop
100009230:	18 78 06 50	adr	x24, #52994 ; literal pool for: "\t%10g"
100009234:	1f 20 03 d5	nop
100009238:	e0 03 14 aa	mov	x0, x20
10000923c:	e1 03 13 aa	mov	x1, x19
100009240:	74 1a 00 94	bl	0x10000fc10
100009244:	f9 03 00 aa	mov	x25, x0
100009248:	01 10 00 91	add	x1, x0, #4
10000924c:	a0 a7 03 d1	sub	x0, x29, #233
100009250:	22 04 80 52	mov	w2, #33
100009254:	23 04 80 52	mov	w3, #33
100009258:	72 22 00 94	bl	0x100011c20 ; symbol stub for: ___strlcpy_chk
10000925c:	08 00 80 d2	mov	x8, #0
100009260:	29 c3 06 91	add	x9, x25, #432
100009264:	20 69 68 fc	ldr	d0, [x9, x8]
100009268:	c1 6a 68 fc	ldr	d1, [x22, x8]
10000926c:	00 28 61 1e	fadd	d0, d0, d1
100009270:	c0 6a 28 fc	str	d0, [x22, x8]
100009274:	08 21 00 91	add	x8, x8, #8
100009278:	1f a1 00 f1	cmp	x8, #40
10000927c:	41 ff ff 54	b.ne	0x100009264
100009280:	7f 3e 00 71	cmp	w19, #15
100009284:	48 05 00 54	b.hi	0x10000932c
100009288:	40 23 40 f9	ldr	x0, [x26, #64]
10000928c:	28 03 40 b9	ldr	w8, [x25]
100009290:	a9 a7 03 d1	sub	x9, x29, #233
100009294:	e8 27 00 a9	stp	x8, x9, [sp]
100009298:	e1 73 06 70	adr	x1, #52863 ; literal pool for: "[%-5i]%-32s"
10000929c:	1f 20 03 d5	nop
1000092a0:	90 22 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000092a4:	15 00 80 d2	mov	x21, #0
1000092a8:	37 c3 06 91	add	x23, x25, #432
1000092ac:	28 cf 40 f9	ldr	x8, [x25, #408]
1000092b0:	49 17 40 f9	ldr	x9, [x26, #40]
1000092b4:	4a 8f 43 a9	ldp	x10, x3, [x26, #56]
1000092b8:	48 01 08 cb	sub	x8, x10, x8
1000092bc:	1f 01 09 eb	cmp	x8, x9
1000092c0:	08 31 89 9a	csel	x8, x8, x9, lo
1000092c4:	00 01 63 9e	ucvtf	d0, x8
1000092c8:	41 07 40 fd	ldr	d1, [x26, #8]
1000092cc:	20 08 60 1e	fmul	d0, d1, d0
1000092d0:	00 18 68 1e	fdiv	d0, d0, d8
1000092d4:	81 6b 75 fc	ldr	d1, [x28, x21]
1000092d8:	21 d8 61 7e	ucvtf	d1, d1
1000092dc:	00 20 61 1e	fcmp	d0, d1
1000092e0:	44 01 00 54	b.mi	0x100009308
1000092e4:	e0 6a 75 fc	ldr	d0, [x23, x21]
1000092e8:	e0 03 00 fd	str	d0, [sp]
1000092ec:	e0 03 03 aa	mov	x0, x3
1000092f0:	e1 03 18 aa	mov	x1, x24
1000092f4:	7b 22 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000092f8:	b5 22 00 91	add	x21, x21, #8
1000092fc:	bf a2 00 f1	cmp	x21, #40
100009300:	61 fd ff 54	b.ne	0x1000092ac
100009304:	06 00 00 14	b	0x10000931c
100009308:	c0 70 06 70	adr	x0, #52763 ; literal pool for: "\t<calculating>"
10000930c:	1f 20 03 d5	nop
100009310:	c1 01 80 52	mov	w1, #14
100009314:	22 00 80 52	mov	w2, #1
100009318:	82 22 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000931c:	41 23 40 f9	ldr	x1, [x26, #64]
100009320:	60 b6 05 10	adr	x0, #46796 ; literal pool for: "\n"
100009324:	1f 20 03 d5	nop
100009328:	76 22 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000932c:	73 06 00 11	add	w19, w19, #1
100009330:	68 b7 4b b9	ldr	w8, [x27, #2996]
100009334:	7f 02 08 6b	cmp	w19, w8
100009338:	03 f8 ff 54	b.lo	0x100009238
10000933c:	a8 03 56 f8	ldur	x8, [x29, #-160]
100009340:	1f 20 03 d5	nop
100009344:	a9 88 07 58	ldr	x9, #61716 ; literal pool symbol address: ___stack_chk_guard
100009348:	29 01 40 f9	ldr	x9, [x9]
10000934c:	3f 01 08 eb	cmp	x9, x8
100009350:	c1 01 00 54	b.ne	0x100009388
100009354:	ff c3 0b 91	add	sp, sp, #752
100009358:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
10000935c:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
100009360:	f6 57 47 a9	ldp	x22, x21, [sp, #112]
100009364:	f8 5f 46 a9	ldp	x24, x23, [sp, #96]
100009368:	fa 67 45 a9	ldp	x26, x25, [sp, #80]
10000936c:	fc 6f 44 a9	ldp	x28, x27, [sp, #64]
100009370:	e9 23 43 6d	ldp	d9, d8, [sp, #48]
100009374:	eb 2b 42 6d	ldp	d11, d10, [sp, #32]
100009378:	ed 33 41 6d	ldp	d13, d12, [sp, #16]
10000937c:	ef 3b ca 6c	ldp	d15, d14, [sp], #160
100009380:	ff 0f 5f d6	retab
100009384:	3e 20 00 94	bl	0x10001147c
100009388:	1e 22 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000938c:	7f 23 03 d5	pacibsp
100009390:	fc 6f ba a9	stp	x28, x27, [sp, #-96]!
100009394:	fa 67 01 a9	stp	x26, x25, [sp, #16]
100009398:	f8 5f 02 a9	stp	x24, x23, [sp, #32]
10000939c:	f6 57 03 a9	stp	x22, x21, [sp, #48]
1000093a0:	f4 4f 04 a9	stp	x20, x19, [sp, #64]
1000093a4:	fd 7b 05 a9	stp	x29, x30, [sp, #80]
1000093a8:	fd 43 01 91	add	x29, sp, #80
1000093ac:	ff 03 35 d1	sub	sp, sp, #3392
1000093b0:	1f 20 03 d5	nop
1000093b4:	28 85 07 58	ldr	x8, #61604 ; literal pool symbol address: ___stack_chk_guard
1000093b8:	08 01 40 f9	ldr	x8, [x8]
1000093bc:	a8 03 1a f8	stur	x8, [x29, #-96]
1000093c0:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000093c4:	e0 b7 82 3d	str	q0, [sp, #2768]
1000093c8:	e0 b3 82 3d	str	q0, [sp, #2752]
1000093cc:	e0 af 82 3d	str	q0, [sp, #2736]
1000093d0:	e0 ab 82 3d	str	q0, [sp, #2720]
1000093d4:	e0 a7 82 3d	str	q0, [sp, #2704]
1000093d8:	e0 a3 82 3d	str	q0, [sp, #2688]
1000093dc:	e0 9f 82 3d	str	q0, [sp, #2672]
1000093e0:	e0 9b 82 3d	str	q0, [sp, #2656]
1000093e4:	e0 97 82 3d	str	q0, [sp, #2640]
1000093e8:	e0 93 82 3d	str	q0, [sp, #2624]
1000093ec:	e0 8f 82 3d	str	q0, [sp, #2608]
1000093f0:	e0 8b 82 3d	str	q0, [sp, #2592]
1000093f4:	e0 87 82 3d	str	q0, [sp, #2576]
1000093f8:	e0 83 82 3d	str	q0, [sp, #2560]
1000093fc:	e0 7f 82 3d	str	q0, [sp, #2544]
100009400:	e0 7b 82 3d	str	q0, [sp, #2528]
100009404:	e0 77 82 3d	str	q0, [sp, #2512]
100009408:	e0 73 82 3d	str	q0, [sp, #2496]
10000940c:	e0 6f 82 3d	str	q0, [sp, #2480]
100009410:	e0 6b 82 3d	str	q0, [sp, #2464]
100009414:	e0 67 82 3d	str	q0, [sp, #2448]
100009418:	e0 63 82 3d	str	q0, [sp, #2432]
10000941c:	e0 5f 82 3d	str	q0, [sp, #2416]
100009420:	e0 5b 82 3d	str	q0, [sp, #2400]
100009424:	e0 57 82 3d	str	q0, [sp, #2384]
100009428:	e0 53 82 3d	str	q0, [sp, #2368]
10000942c:	e0 4f 82 3d	str	q0, [sp, #2352]
100009430:	e0 4b 82 3d	str	q0, [sp, #2336]
100009434:	e0 47 82 3d	str	q0, [sp, #2320]
100009438:	e0 43 82 3d	str	q0, [sp, #2304]
10000943c:	e0 3f 82 3d	str	q0, [sp, #2288]
100009440:	e0 3b 82 3d	str	q0, [sp, #2272]
100009444:	e0 2f 82 3d	str	q0, [sp, #2224]
100009448:	e0 2b 82 3d	str	q0, [sp, #2208]
10000944c:	e0 27 82 3d	str	q0, [sp, #2192]
100009450:	e0 23 82 3d	str	q0, [sp, #2176]
100009454:	e0 1f 82 3d	str	q0, [sp, #2160]
100009458:	e0 1b 82 3d	str	q0, [sp, #2144]
10000945c:	e0 17 82 3d	str	q0, [sp, #2128]
100009460:	e0 13 82 3d	str	q0, [sp, #2112]
100009464:	e0 0f 82 3d	str	q0, [sp, #2096]
100009468:	e0 0b 82 3d	str	q0, [sp, #2080]
10000946c:	e0 07 82 3d	str	q0, [sp, #2064]
100009470:	e0 03 82 3d	str	q0, [sp, #2048]
100009474:	e0 ff 81 3d	str	q0, [sp, #2032]
100009478:	e0 fb 81 3d	str	q0, [sp, #2016]
10000947c:	e0 f7 81 3d	str	q0, [sp, #2000]
100009480:	e0 f3 81 3d	str	q0, [sp, #1984]
100009484:	e0 ef 81 3d	str	q0, [sp, #1968]
100009488:	e0 eb 81 3d	str	q0, [sp, #1952]
10000948c:	e0 e7 81 3d	str	q0, [sp, #1936]
100009490:	e0 e3 81 3d	str	q0, [sp, #1920]
100009494:	e0 df 81 3d	str	q0, [sp, #1904]
100009498:	e0 db 81 3d	str	q0, [sp, #1888]
10000949c:	e0 d7 81 3d	str	q0, [sp, #1872]
1000094a0:	e0 d3 81 3d	str	q0, [sp, #1856]
1000094a4:	e0 cf 81 3d	str	q0, [sp, #1840]
1000094a8:	e0 cb 81 3d	str	q0, [sp, #1824]
1000094ac:	e0 c7 81 3d	str	q0, [sp, #1808]
1000094b0:	e0 c3 81 3d	str	q0, [sp, #1792]
1000094b4:	e0 bf 81 3d	str	q0, [sp, #1776]
1000094b8:	e0 bb 81 3d	str	q0, [sp, #1760]
1000094bc:	e0 b7 81 3d	str	q0, [sp, #1744]
1000094c0:	e0 b3 81 3d	str	q0, [sp, #1728]
1000094c4:	e0 a7 81 3d	str	q0, [sp, #1680]
1000094c8:	e0 a3 81 3d	str	q0, [sp, #1664]
1000094cc:	e0 9f 81 3d	str	q0, [sp, #1648]
1000094d0:	e0 9b 81 3d	str	q0, [sp, #1632]
1000094d4:	e0 97 81 3d	str	q0, [sp, #1616]
1000094d8:	e0 93 81 3d	str	q0, [sp, #1600]
1000094dc:	e0 8f 81 3d	str	q0, [sp, #1584]
1000094e0:	e0 8b 81 3d	str	q0, [sp, #1568]
1000094e4:	e0 87 81 3d	str	q0, [sp, #1552]
1000094e8:	e0 83 81 3d	str	q0, [sp, #1536]
1000094ec:	e0 7f 81 3d	str	q0, [sp, #1520]
1000094f0:	e0 7b 81 3d	str	q0, [sp, #1504]
1000094f4:	e0 77 81 3d	str	q0, [sp, #1488]
1000094f8:	e0 73 81 3d	str	q0, [sp, #1472]
1000094fc:	e0 6f 81 3d	str	q0, [sp, #1456]
100009500:	e0 6b 81 3d	str	q0, [sp, #1440]
100009504:	e0 67 81 3d	str	q0, [sp, #1424]
100009508:	e0 63 81 3d	str	q0, [sp, #1408]
10000950c:	e0 5f 81 3d	str	q0, [sp, #1392]
100009510:	e0 5b 81 3d	str	q0, [sp, #1376]
100009514:	e0 57 81 3d	str	q0, [sp, #1360]
100009518:	e0 53 81 3d	str	q0, [sp, #1344]
10000951c:	e0 4f 81 3d	str	q0, [sp, #1328]
100009520:	e0 4b 81 3d	str	q0, [sp, #1312]
100009524:	e0 47 81 3d	str	q0, [sp, #1296]
100009528:	e0 43 81 3d	str	q0, [sp, #1280]
10000952c:	e0 3f 81 3d	str	q0, [sp, #1264]
100009530:	e0 3b 81 3d	str	q0, [sp, #1248]
100009534:	e0 37 81 3d	str	q0, [sp, #1232]
100009538:	e0 33 81 3d	str	q0, [sp, #1216]
10000953c:	e0 2f 81 3d	str	q0, [sp, #1200]
100009540:	e0 2b 81 3d	str	q0, [sp, #1184]
100009544:	e0 1f 81 3d	str	q0, [sp, #1136]
100009548:	e0 1b 81 3d	str	q0, [sp, #1120]
10000954c:	e0 17 81 3d	str	q0, [sp, #1104]
100009550:	e0 13 81 3d	str	q0, [sp, #1088]
100009554:	e0 0f 81 3d	str	q0, [sp, #1072]
100009558:	e0 0b 81 3d	str	q0, [sp, #1056]
10000955c:	e0 07 81 3d	str	q0, [sp, #1040]
100009560:	e0 83 1f ad	stp	q0, q0, [sp, #1008]
100009564:	e0 83 1e ad	stp	q0, q0, [sp, #976]
100009568:	e0 83 1d ad	stp	q0, q0, [sp, #944]
10000956c:	e0 83 1c ad	stp	q0, q0, [sp, #912]
100009570:	e0 83 1b ad	stp	q0, q0, [sp, #880]
100009574:	e0 83 1a ad	stp	q0, q0, [sp, #848]
100009578:	e0 83 19 ad	stp	q0, q0, [sp, #816]
10000957c:	e0 83 18 ad	stp	q0, q0, [sp, #784]
100009580:	e0 83 17 ad	stp	q0, q0, [sp, #752]
100009584:	e0 83 16 ad	stp	q0, q0, [sp, #720]
100009588:	e0 83 15 ad	stp	q0, q0, [sp, #688]
10000958c:	e0 83 14 ad	stp	q0, q0, [sp, #656]
100009590:	e0 a3 80 3d	str	q0, [sp, #640]
100009594:	e0 83 11 ad	stp	q0, q0, [sp, #560]
100009598:	e0 83 10 ad	stp	q0, q0, [sp, #528]
10000959c:	e0 83 0f ad	stp	q0, q0, [sp, #496]
1000095a0:	e0 83 0e ad	stp	q0, q0, [sp, #464]
1000095a4:	e0 83 0d ad	stp	q0, q0, [sp, #432]
1000095a8:	e0 83 0c ad	stp	q0, q0, [sp, #400]
1000095ac:	e0 83 0b ad	stp	q0, q0, [sp, #368]
1000095b0:	e0 83 0a ad	stp	q0, q0, [sp, #336]
1000095b4:	e0 83 09 ad	stp	q0, q0, [sp, #304]
1000095b8:	e0 83 08 ad	stp	q0, q0, [sp, #272]
1000095bc:	e0 83 07 ad	stp	q0, q0, [sp, #240]
1000095c0:	e0 83 06 ad	stp	q0, q0, [sp, #208]
1000095c4:	e0 83 05 ad	stp	q0, q0, [sp, #176]
1000095c8:	e0 83 04 ad	stp	q0, q0, [sp, #144]
1000095cc:	e0 83 03 ad	stp	q0, q0, [sp, #112]
1000095d0:	e0 83 02 ad	stp	q0, q0, [sp, #80]
1000095d4:	20 af 09 10	adr	x0, #79332
1000095d8:	1f 20 03 d5	nop
1000095dc:	73 af 09 10	adr	x19, #79340
1000095e0:	1f 20 03 d5	nop
1000095e4:	e1 03 13 aa	mov	x1, x19
1000095e8:	96 19 00 94	bl	0x10000fc40
1000095ec:	e0 03 13 aa	mov	x0, x19
1000095f0:	86 19 00 94	bl	0x10000fc08
1000095f4:	60 b4 09 10	adr	x0, #79500
1000095f8:	1f 20 03 d5	nop
1000095fc:	01 44 80 52	mov	w1, #544
100009600:	94 21 00 94	bl	0x100011c50 ; symbol stub for: _bzero
100009604:	68 56 09 10	adr	x8, #76492
100009608:	1f 20 03 d5	nop
10000960c:	08 01 41 39	ldrb	w8, [x8, #64]
100009610:	88 01 00 34	cbz	w8, 0x100009640
100009614:	a0 af 09 10	adr	x0, #79348
100009618:	1f 20 03 d5	nop
10000961c:	f3 af 09 10	adr	x19, #79356
100009620:	1f 20 03 d5	nop
100009624:	e1 03 13 aa	mov	x1, x19
100009628:	e9 19 00 94	bl	0x10000fdcc
10000962c:	60 b0 09 10	adr	x0, #79372
100009630:	1f 20 03 d5	nop
100009634:	3b 1a 00 94	bl	0x10000ff20
100009638:	e0 03 13 aa	mov	x0, x19
10000963c:	d6 19 00 94	bl	0x10000fd94
100009640:	1f 20 03 d5	nop
100009644:	88 ac 09 18	ldr	w8, 0x10001cbd4
100009648:	08 6e 00 35	cbnz	w8, 0x10000a408
10000964c:	e0 03 1b 91	add	x0, sp, #1728
100009650:	14 06 00 94	bl	0x10000aea0
100009654:	a0 ab 09 10	adr	x0, #79220
100009658:	1f 20 03 d5	nop
10000965c:	e1 03 1b 91	add	x1, sp, #1728
100009660:	68 19 00 94	bl	0x10000fc00
100009664:	99 00 00 f0	adrp	x25, 19 ; 0x10001c000
100009668:	20 27 46 f9	ldr	x0, [x25, #3144]
10000966c:	21 22 00 94	bl	0x100011ef0 ; symbol stub for: _pm_samples_sample
100009670:	1f 04 00 71	cmp	w0, #1
100009674:	cb 6c 00 54	b.lt	0x10000a40c
100009678:	f6 03 00 aa	mov	x22, x0
10000967c:	17 00 80 52	mov	w23, #0
100009680:	e8 43 01 91	add	x8, sp, #80
100009684:	08 31 04 91	add	x8, x8, #268
100009688:	e8 0f 00 f9	str	x8, [sp, #24]
10000968c:	e8 03 0a 91	add	x8, sp, #640
100009690:	18 a1 06 91	add	x24, x8, #424
100009694:	1b 61 07 91	add	x27, x8, #472
100009698:	15 02 80 52	mov	w21, #16
10000969c:	1f 20 03 d5	nop
1000096a0:	1a 70 07 58	ldr	x26, #60928 ; literal pool symbol address: _mach_task_self_
1000096a4:	20 27 46 f9	ldr	x0, [x25, #3144]
1000096a8:	e1 03 17 aa	mov	x1, x23
1000096ac:	09 22 00 94	bl	0x100011ed0 ; symbol stub for: _pm_samples_get
1000096b0:	fc 03 00 aa	mov	x28, x0
1000096b4:	08 c8 40 f9	ldr	x8, [x0, #400]
1000096b8:	14 01 40 b9	ldr	w20, [x8]
1000096bc:	ff 57 09 29	stp	wzr, w21, [sp, #72]
1000096c0:	e0 03 0a 91	add	x0, sp, #640
1000096c4:	01 44 80 52	mov	w1, #544
1000096c8:	62 21 00 94	bl	0x100011c50 ; symbol stub for: _bzero
1000096cc:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000096d0:	e0 cf 82 3d	str	q0, [sp, #2864]
1000096d4:	e0 cb 82 3d	str	q0, [sp, #2848]
1000096d8:	e0 c7 82 3d	str	q0, [sp, #2832]
1000096dc:	e0 c3 82 3d	str	q0, [sp, #2816]
1000096e0:	e0 03 01 ad	stp	q0, q0, [sp, #32]
1000096e4:	ff 23 00 f9	str	xzr, [sp, #64]
1000096e8:	93 03 40 b9	ldr	w19, [x28]
1000096ec:	e0 03 0a 91	add	x0, sp, #640
1000096f0:	e1 03 1c aa	mov	x1, x28
1000096f4:	02 33 80 52	mov	w2, #408
1000096f8:	ce 21 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
1000096fc:	a8 4e 09 10	adr	x8, #76244
100009700:	1f 20 03 d5	nop
100009704:	08 01 41 39	ldrb	w8, [x8, #64]
100009708:	68 01 00 34	cbz	w8, 0x100009734
10000970c:	e3 83 00 91	add	x3, sp, #32
100009710:	e0 03 13 aa	mov	x0, x19
100009714:	81 02 80 52	mov	w1, #20
100009718:	22 00 80 52	mov	w2, #1
10000971c:	04 05 80 52	mov	w4, #40
100009720:	14 22 00 94	bl	0x100011f70 ; symbol stub for: _proc_pidinfo
100009724:	1f a0 00 71	cmp	w0, #40
100009728:	61 05 00 54	b.ne	0x1000097d4
10000972c:	e8 13 40 f9	ldr	x8, [sp, #32]
100009730:	e8 17 02 f9	str	x8, [sp, #1064]
100009734:	e8 4c 09 10	adr	x8, #76188
100009738:	1f 20 03 d5	nop
10000973c:	08 e5 40 39	ldrb	w8, [x8, #57]
100009740:	7f 02 00 71	cmp	w19, #0
100009744:	04 19 40 7a	ccmp	w8, #0, #4, ne
100009748:	60 02 00 54	b.eq	0x100009794
10000974c:	e2 03 2c 91	add	x2, sp, #2816
100009750:	e3 33 01 91	add	x3, sp, #76
100009754:	e4 23 01 91	add	x4, sp, #72
100009758:	e0 03 14 aa	mov	x0, x20
10000975c:	81 00 80 52	mov	w1, #4
100009760:	68 22 00 94	bl	0x100012100 ; symbol stub for: _task_policy_get
100009764:	80 01 00 34	cbz	w0, 0x100009794
100009768:	fc 03 00 aa	mov	x28, x0
10000976c:	1f 20 03 d5	nop
100009770:	88 67 07 58	ldr	x8, #60656 ; literal pool symbol address: ___stderrp
100009774:	13 01 40 f9	ldr	x19, [x8]
100009778:	92 21 00 94	bl	0x100011dc0 ; symbol stub for: _mach_error_string
10000977c:	fc 03 00 a9	stp	x28, x0, [sp]
100009780:	e0 03 13 aa	mov	x0, x19
100009784:	41 55 06 50	adr	x1, #51882 ; literal pool for: "task_policy_get(TASK_POLICY_STATE) failed %u %s\n"
100009788:	1f 20 03 d5	nop
10000978c:	55 21 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100009790:	19 00 00 14	b	0x1000097f4
100009794:	1f 20 03 d5	nop
100009798:	1f 20 03 d5	nop
10000979c:	28 49 09 58	ldr	x8, #76068
1000097a0:	e9 07 42 f9	ldr	x9, [sp, #1032]
1000097a4:	08 01 09 cb	sub	x8, x8, x9
1000097a8:	e8 0f 02 f9	str	x8, [sp, #1048]
1000097ac:	e0 e7 07 6f	movi.2d	v0, #0xffffffffffffffff
1000097b0:	e0 4f 02 fd	str	d0, [sp, #1176]
1000097b4:	13 02 00 34	cbz	w19, 0x1000097f4
1000097b8:	e0 c3 c2 3d	ldr	q0, [sp, #2816]
1000097bc:	e1 c7 c2 3d	ldr	q1, [sp, #2832]
1000097c0:	60 07 00 ad	stp	q0, q1, [x27]
1000097c4:	e0 cb c2 3d	ldr	q0, [sp, #2848]
1000097c8:	e1 cf c2 3d	ldr	q1, [sp, #2864]
1000097cc:	60 07 01 ad	stp	q0, q1, [x27, #32]
1000097d0:	09 00 00 14	b	0x1000097f4
1000097d4:	1f 20 03 d5	nop
1000097d8:	48 64 07 58	ldr	x8, #60552 ; literal pool symbol address: ___stderrp
1000097dc:	03 01 40 f9	ldr	x3, [x8]
1000097e0:	00 51 06 50	adr	x0, #51746 ; literal pool for: "proc_pidinfo(PROC_PIDCOALITIONINFO) failed\n"
1000097e4:	1f 20 03 d5	nop
1000097e8:	61 05 80 52	mov	w1, #43
1000097ec:	22 00 80 52	mov	w2, #1
1000097f0:	4c 21 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
1000097f4:	e8 46 09 10	adr	x8, #75996
1000097f8:	1f 20 03 d5	nop
1000097fc:	08 01 41 39	ldrb	w8, [x8, #64]
100009800:	a8 00 00 34	cbz	w8, 0x100009814
100009804:	a0 a1 09 10	adr	x0, #78900
100009808:	1f 20 03 d5	nop
10000980c:	e1 03 18 aa	mov	x1, x24
100009810:	c2 19 00 94	bl	0x10000ff18
100009814:	e1 03 0a 91	add	x1, sp, #640
100009818:	80 9d 09 10	adr	x0, #78768
10000981c:	1f 20 03 d5	nop
100009820:	f8 18 00 94	bl	0x10000fc00
100009824:	40 03 40 b9	ldr	w0, [x26]
100009828:	e1 03 14 aa	mov	x1, x20
10000982c:	6d 21 00 94	bl	0x100011de0 ; symbol stub for: _mach_port_deallocate
100009830:	f7 06 00 11	add	w23, w23, #1
100009834:	df 02 17 6b	cmp	w22, w23
100009838:	61 f3 ff 54	b.ne	0x1000096a4
10000983c:	e0 9f 09 10	adr	x0, #78844
100009840:	1f 20 03 d5	nop
100009844:	21 b6 07 10	adr	x1, #63172
100009848:	1f 20 03 d5	nop
10000984c:	d0 19 00 94	bl	0x10000ff8c
100009850:	08 44 09 10	adr	x8, #75904
100009854:	1f 20 03 d5	nop
100009858:	08 01 41 39	ldrb	w8, [x8, #64]
10000985c:	a8 0c 00 34	cbz	w8, 0x1000099f0
100009860:	54 21 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100009864:	df 06 00 71	cmp	w22, #1
100009868:	4b 0c 00 54	b.lt	0x1000099f0
10000986c:	f7 03 00 aa	mov	x23, x0
100009870:	15 00 80 d2	mov	x21, #0
100009874:	18 00 80 52	mov	w24, #0
100009878:	e8 43 01 91	add	x8, sp, #80
10000987c:	19 01 7d b2	orr	x25, x8, #0x8
100009880:	da 9d 09 10	adr	x26, #78776
100009884:	1f 20 03 d5	nop
100009888:	9b 9c 09 10	adr	x27, #78736
10000988c:	1f 20 03 d5	nop
100009890:	d4 99 09 10	adr	x20, #78648
100009894:	1f 20 03 d5	nop
100009898:	e0 03 1a aa	mov	x0, x26
10000989c:	e1 03 18 aa	mov	x1, x24
1000098a0:	a2 19 00 94	bl	0x10000ff28
1000098a4:	13 00 40 f9	ldr	x19, [x0]
1000098a8:	78 00 00 34	cbz	w24, 0x1000098b4
1000098ac:	7f 02 15 eb	cmp	x19, x21
1000098b0:	80 09 00 54	b.eq	0x1000099e0
1000098b4:	ff 13 06 f9	str	xzr, [sp, #3104]
1000098b8:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000098bc:	e0 07 83 3d	str	q0, [sp, #3088]
1000098c0:	e0 03 83 3d	str	q0, [sp, #3072]
1000098c4:	e0 ff 82 3d	str	q0, [sp, #3056]
1000098c8:	e0 fb 82 3d	str	q0, [sp, #3040]
1000098cc:	e0 f7 82 3d	str	q0, [sp, #3024]
1000098d0:	e0 f3 82 3d	str	q0, [sp, #3008]
1000098d4:	e0 ef 82 3d	str	q0, [sp, #2992]
1000098d8:	e0 eb 82 3d	str	q0, [sp, #2976]
1000098dc:	e0 e7 82 3d	str	q0, [sp, #2960]
1000098e0:	e0 e3 82 3d	str	q0, [sp, #2944]
1000098e4:	e0 df 82 3d	str	q0, [sp, #2928]
1000098e8:	e0 db 82 3d	str	q0, [sp, #2912]
1000098ec:	e0 d7 82 3d	str	q0, [sp, #2896]
1000098f0:	e0 d3 82 3d	str	q0, [sp, #2880]
1000098f4:	e0 cf 82 3d	str	q0, [sp, #2864]
1000098f8:	e0 cb 82 3d	str	q0, [sp, #2848]
1000098fc:	e0 c7 82 3d	str	q0, [sp, #2832]
100009900:	e0 c3 82 3d	str	q0, [sp, #2816]
100009904:	e1 03 2c 91	add	x1, sp, #2816
100009908:	e0 03 13 aa	mov	x0, x19
10000990c:	02 25 80 52	mov	w2, #296
100009910:	d8 20 00 94	bl	0x100011c70 ; symbol stub for: _coalition_info_resource_usage
100009914:	60 03 00 34	cbz	w0, 0x100009980
100009918:	1f 20 03 d5	nop
10000991c:	28 5a 07 58	ldr	x8, #60228 ; literal pool symbol address: ___stderrp
100009920:	03 01 40 f9	ldr	x3, [x8]
100009924:	e0 46 06 50	adr	x0, #51422 ; literal pool for: "proc_pidinfo(PROC_PIDCOALITIONINFO) failed\n"
100009928:	1f 20 03 d5	nop
10000992c:	61 05 80 52	mov	w1, #43
100009930:	22 00 80 52	mov	w2, #1
100009934:	fb 20 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100009938:	e0 43 01 91	add	x0, sp, #80
10000993c:	01 46 80 52	mov	w1, #560
100009940:	c4 20 00 94	bl	0x100011c50 ; symbol stub for: _bzero
100009944:	1c 00 80 52	mov	w28, #0
100009948:	e0 03 14 aa	mov	x0, x20
10000994c:	e1 03 1c aa	mov	x1, x28
100009950:	b0 18 00 94	bl	0x10000fc10
100009954:	08 d4 40 f9	ldr	x8, [x0, #424]
100009958:	1f 01 13 eb	cmp	x8, x19
10000995c:	a1 00 00 54	b.ne	0x100009970
100009960:	e1 03 00 aa	mov	x1, x0
100009964:	e0 43 01 91	add	x0, sp, #80
100009968:	e2 03 17 aa	mov	x2, x23
10000996c:	92 05 00 94	bl	0x10000afb4
100009970:	9c 07 00 11	add	w28, w28, #1
100009974:	df 02 1c 6b	cmp	w22, w28
100009978:	81 fe ff 54	b.ne	0x100009948
10000997c:	16 00 00 14	b	0x1000099d4
100009980:	e0 03 19 aa	mov	x0, x25
100009984:	01 43 80 52	mov	w1, #536
100009988:	b2 20 00 94	bl	0x100011c50 ; symbol stub for: _bzero
10000998c:	f3 2b 00 f9	str	x19, [sp, #80]
100009990:	e0 c3 c2 3d	ldr	q0, [sp, #2816]
100009994:	e0 9f 80 3d	str	q0, [sp, #624]
100009998:	e8 8f 45 f9	ldr	x8, [sp, #2840]
10000999c:	e9 0f 40 f9	ldr	x9, [sp, #24]
1000099a0:	28 01 00 f9	str	x8, [x9]
1000099a4:	e0 cb c2 3d	ldr	q0, [sp, #2848]
1000099a8:	e1 cf c2 3d	ldr	q1, [sp, #2864]
1000099ac:	20 05 80 3d	str	q0, [x9, #16]
1000099b0:	e1 87 80 3d	str	q1, [sp, #528]
1000099b4:	e8 af 45 f9	ldr	x8, [sp, #2904]
1000099b8:	e9 a3 45 f9	ldr	x9, [sp, #2880]
1000099bc:	e0 03 17 aa	mov	x0, x23
1000099c0:	e8 27 01 f9	str	x8, [sp, #584]
1000099c4:	e9 17 01 f9	str	x9, [sp, #552]
1000099c8:	57 00 00 b5	cbnz	x23, 0x1000099d0
1000099cc:	f9 20 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
1000099d0:	e0 33 01 f9	str	x0, [sp, #608]
1000099d4:	e1 43 01 91	add	x1, sp, #80
1000099d8:	e0 03 1b aa	mov	x0, x27
1000099dc:	ec 18 00 94	bl	0x10000fd8c
1000099e0:	18 07 00 11	add	w24, w24, #1
1000099e4:	f5 03 13 aa	mov	x21, x19
1000099e8:	1f 03 16 6b	cmp	w24, w22
1000099ec:	61 f5 ff 54	b.ne	0x100009898
1000099f0:	d8 34 09 10	adr	x24, #75416
1000099f4:	1f 20 03 d5	nop
1000099f8:	08 03 40 39	ldrb	w8, [x24]
1000099fc:	c8 00 00 34	cbz	w8, 0x100009a14
100009a00:	40 8f 09 10	adr	x0, #78312
100009a04:	1f 20 03 d5	nop
100009a08:	01 8e 09 10	adr	x1, #78272
100009a0c:	1f 20 03 d5	nop
100009a10:	8c 18 00 94	bl	0x10000fc40
100009a14:	a0 8c 09 10	adr	x0, #78228
100009a18:	1f 20 03 d5	nop
100009a1c:	7b 18 00 94	bl	0x10000fc08
100009a20:	08 03 40 39	ldrb	w8, [x24]
100009a24:	36 8d 09 10	adr	x22, #78244
100009a28:	1f 20 03 d5	nop
100009a2c:	88 02 00 34	cbz	w8, 0x100009a7c
100009a30:	1f 20 03 d5	nop
100009a34:	08 8d 09 18	ldr	w8, 0x10001cbd4
100009a38:	e8 27 00 34	cbz	w8, 0x100009f34
100009a3c:	13 00 80 52	mov	w19, #0
100009a40:	35 00 80 52	mov	w21, #1
100009a44:	34 8b 09 10	adr	x20, #78180
100009a48:	1f 20 03 d5	nop
100009a4c:	e0 03 16 aa	mov	x0, x22
100009a50:	e1 03 13 aa	mov	x1, x19
100009a54:	6f 18 00 94	bl	0x10000fc10
100009a58:	e1 03 00 aa	mov	x1, x0
100009a5c:	15 84 06 39	strb	w21, [x0, #417]
100009a60:	e0 03 14 aa	mov	x0, x20
100009a64:	67 18 00 94	bl	0x10000fc00
100009a68:	73 06 00 11	add	w19, w19, #1
100009a6c:	c8 0e 40 b9	ldr	w8, [x22, #12]
100009a70:	7f 02 08 6b	cmp	w19, w8
100009a74:	c3 fe ff 54	b.lo	0x100009a4c
100009a78:	2f 01 00 14	b	0x100009f34
100009a7c:	16 00 80 52	mov	w22, #0
100009a80:	9b 00 00 f0	adrp	x27, 19 ; 0x10001c000
100009a84:	69 c7 4b b9	ldr	w9, [x27, #3012]
100009a88:	3f 01 00 71	cmp	w9, #0
100009a8c:	eb 07 9f 1a	cset	w11, ne
100009a90:	1f 20 03 d5	nop
100009a94:	08 8a 09 18	ldr	w8, 0x10001cbd4
100009a98:	1f 01 00 71	cmp	w8, #0
100009a9c:	ea 07 9f 1a	cset	w10, ne
100009aa0:	f7 03 16 aa	mov	x23, x22
100009aa4:	c9 08 00 34	cbz	w9, 0x100009bbc
100009aa8:	a8 08 00 34	cbz	w8, 0x100009bbc
100009aac:	17 00 80 52	mov	w23, #0
100009ab0:	16 00 80 52	mov	w22, #0
100009ab4:	b3 88 09 10	adr	x19, #78100
100009ab8:	1f 20 03 d5	nop
100009abc:	f4 87 09 10	adr	x20, #78076
100009ac0:	1f 20 03 d5	nop
100009ac4:	35 00 80 52	mov	w21, #1
100009ac8:	18 87 09 10	adr	x24, #78048
100009acc:	1f 20 03 d5	nop
100009ad0:	e0 03 13 aa	mov	x0, x19
100009ad4:	e1 03 16 aa	mov	x1, x22
100009ad8:	4e 18 00 94	bl	0x10000fc10
100009adc:	fa 03 00 aa	mov	x26, x0
100009ae0:	e0 03 14 aa	mov	x0, x20
100009ae4:	e1 03 17 aa	mov	x1, x23
100009ae8:	4a 18 00 94	bl	0x10000fc10
100009aec:	f9 03 00 aa	mov	x25, x0
100009af0:	08 00 40 b9	ldr	w8, [x0]
100009af4:	49 03 40 b9	ldr	w9, [x26]
100009af8:	08 01 09 6b	subs	w8, w8, w9
100009afc:	64 01 00 54	b.mi	0x100009b28
100009b00:	49 2c 09 10	adr	x9, #75144
100009b04:	1f 20 03 d5	nop
100009b08:	29 09 40 39	ldrb	w9, [x9, #2]
100009b0c:	88 03 00 34	cbz	w8, 0x100009b7c
100009b10:	09 04 00 35	cbnz	w9, 0x100009b90
100009b14:	55 87 06 39	strb	w21, [x26, #417]
100009b18:	e0 03 18 aa	mov	x0, x24
100009b1c:	e1 03 1a aa	mov	x1, x26
100009b20:	38 18 00 94	bl	0x10000fc00
100009b24:	1b 00 00 14	b	0x100009b90
100009b28:	08 2b 09 10	adr	x8, #75104
100009b2c:	1f 20 03 d5	nop
100009b30:	08 09 40 39	ldrb	w8, [x8, #2]
100009b34:	c8 01 00 35	cbnz	w8, 0x100009b6c
100009b38:	5a 8a 09 10	adr	x26, #78152
100009b3c:	1f 20 03 d5	nop
100009b40:	e0 03 1a aa	mov	x0, x26
100009b44:	e1 03 19 aa	mov	x1, x25
100009b48:	e2 03 1a aa	mov	x2, x26
100009b4c:	ed 20 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
100009b50:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100009b54:	40 8f 8b 3c	str	q0, [x26, #184]!
100009b58:	5f 4b 00 f9	str	xzr, [x26, #144]
100009b5c:	40 83 03 ad	stp	q0, q0, [x26, #112]
100009b60:	40 83 02 ad	stp	q0, q0, [x26, #80]
100009b64:	40 83 01 ad	stp	q0, q0, [x26, #48]
100009b68:	40 83 00 ad	stp	q0, q0, [x26, #16]
100009b6c:	e0 03 19 aa	mov	x0, x25
100009b70:	49 05 00 94	bl	0x10000b094
100009b74:	f7 06 00 11	add	w23, w23, #1
100009b78:	07 00 00 14	b	0x100009b94
100009b7c:	89 00 00 35	cbnz	w9, 0x100009b8c
100009b80:	e0 03 1a aa	mov	x0, x26
100009b84:	e1 03 19 aa	mov	x1, x25
100009b88:	72 05 00 94	bl	0x10000b150
100009b8c:	f7 06 00 11	add	w23, w23, #1
100009b90:	d6 06 00 11	add	w22, w22, #1
100009b94:	69 c7 4b b9	ldr	w9, [x27, #3012]
100009b98:	1f 20 03 d5	nop
100009b9c:	c8 81 09 18	ldr	w8, 0x10001cbd4
100009ba0:	df 02 08 6b	cmp	w22, w8
100009ba4:	ea 27 9f 1a	cset	w10, lo
100009ba8:	ff 02 09 6b	cmp	w23, w9
100009bac:	eb 27 9f 1a	cset	w11, lo
100009bb0:	62 00 00 54	b.hs	0x100009bbc
100009bb4:	df 02 08 6b	cmp	w22, w8
100009bb8:	c3 f8 ff 54	b.lo	0x100009ad0
100009bbc:	4b 04 00 34	cbz	w11, 0x100009c44
100009bc0:	ff 02 09 6b	cmp	w23, w9
100009bc4:	f5 85 09 10	adr	x21, #78012
100009bc8:	1f 20 03 d5	nop
100009bcc:	f8 25 09 10	adr	x24, #74940
100009bd0:	1f 20 03 d5	nop
100009bd4:	c2 06 00 54	b.hs	0x100009cac
100009bd8:	13 7f 09 10	adr	x19, #77792
100009bdc:	1f 20 03 d5	nop
100009be0:	e0 03 13 aa	mov	x0, x19
100009be4:	e1 03 17 aa	mov	x1, x23
100009be8:	0a 18 00 94	bl	0x10000fc10
100009bec:	f4 03 00 aa	mov	x20, x0
100009bf0:	08 0b 40 39	ldrb	w8, [x24, #2]
100009bf4:	a8 01 00 35	cbnz	w8, 0x100009c28
100009bf8:	e0 03 15 aa	mov	x0, x21
100009bfc:	e1 03 14 aa	mov	x1, x20
100009c00:	e2 03 15 aa	mov	x2, x21
100009c04:	bf 20 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
100009c08:	e8 03 15 aa	mov	x8, x21
100009c0c:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100009c10:	00 8d 8b 3c	str	q0, [x8, #184]!
100009c14:	1f 49 00 f9	str	xzr, [x8, #144]
100009c18:	00 81 03 ad	stp	q0, q0, [x8, #112]
100009c1c:	00 81 02 ad	stp	q0, q0, [x8, #80]
100009c20:	00 81 01 ad	stp	q0, q0, [x8, #48]
100009c24:	00 81 00 ad	stp	q0, q0, [x8, #16]
100009c28:	e0 03 14 aa	mov	x0, x20
100009c2c:	1a 05 00 94	bl	0x10000b094
100009c30:	f7 06 00 11	add	w23, w23, #1
100009c34:	68 c7 4b b9	ldr	w8, [x27, #3012]
100009c38:	ff 02 08 6b	cmp	w23, w8
100009c3c:	23 fd ff 54	b.lo	0x100009be0
100009c40:	1b 00 00 14	b	0x100009cac
100009c44:	38 22 09 10	adr	x24, #74820
100009c48:	1f 20 03 d5	nop
100009c4c:	09 0b 40 39	ldrb	w9, [x24, #2]
100009c50:	3f 01 00 71	cmp	w9, #0
100009c54:	eb 17 9f 1a	cset	w11, eq
100009c58:	4a 01 0b 0a	and	w10, w10, w11
100009c5c:	5f 05 00 71	cmp	w10, #1
100009c60:	81 02 00 54	b.ne	0x100009cb0
100009c64:	df 02 08 6b	cmp	w22, w8
100009c68:	22 02 00 54	b.hs	0x100009cac
100009c6c:	34 00 80 52	mov	w20, #1
100009c70:	d3 79 09 10	adr	x19, #77624
100009c74:	1f 20 03 d5	nop
100009c78:	95 7a 09 10	adr	x21, #77648
100009c7c:	1f 20 03 d5	nop
100009c80:	e0 03 15 aa	mov	x0, x21
100009c84:	e1 03 16 aa	mov	x1, x22
100009c88:	e2 17 00 94	bl	0x10000fc10
100009c8c:	e1 03 00 aa	mov	x1, x0
100009c90:	14 84 06 39	strb	w20, [x0, #417]
100009c94:	e0 03 13 aa	mov	x0, x19
100009c98:	da 17 00 94	bl	0x10000fc00
100009c9c:	d6 06 00 11	add	w22, w22, #1
100009ca0:	a8 0e 40 b9	ldr	w8, [x21, #12]
100009ca4:	df 02 08 6b	cmp	w22, w8
100009ca8:	c3 fe ff 54	b.lo	0x100009c80
100009cac:	09 0b 40 39	ldrb	w9, [x24, #2]
100009cb0:	29 14 00 34	cbz	w9, 0x100009f34
100009cb4:	b3 79 09 10	adr	x19, #77620
100009cb8:	1f 20 03 d5	nop
100009cbc:	f4 77 09 10	adr	x20, #77564
100009cc0:	1f 20 03 d5	nop
100009cc4:	e0 03 14 aa	mov	x0, x20
100009cc8:	e1 03 13 aa	mov	x1, x19
100009ccc:	dd 17 00 94	bl	0x10000fc40
100009cd0:	e0 03 14 aa	mov	x0, x20
100009cd4:	e1 03 13 aa	mov	x1, x19
100009cd8:	da 17 00 94	bl	0x10000fc40
100009cdc:	16 00 80 52	mov	w22, #0
100009ce0:	88 0e 40 b9	ldr	w8, [x20, #12]
100009ce4:	1f 01 00 71	cmp	w8, #0
100009ce8:	eb 07 9f 1a	cset	w11, ne
100009cec:	1f 20 03 d5	nop
100009cf0:	29 77 09 18	ldr	w9, 0x10001cbd4
100009cf4:	3f 01 00 71	cmp	w9, #0
100009cf8:	ea 07 9f 1a	cset	w10, ne
100009cfc:	f7 03 16 aa	mov	x23, x22
100009d00:	28 07 00 34	cbz	w8, 0x100009de4
100009d04:	09 07 00 34	cbz	w9, 0x100009de4
100009d08:	17 00 80 52	mov	w23, #0
100009d0c:	16 00 80 52	mov	w22, #0
100009d10:	d3 75 09 10	adr	x19, #77496
100009d14:	1f 20 03 d5	nop
100009d18:	14 75 09 10	adr	x20, #77472
100009d1c:	1f 20 03 d5	nop
100009d20:	35 00 80 52	mov	w21, #1
100009d24:	38 74 09 10	adr	x24, #77444
100009d28:	1f 20 03 d5	nop
100009d2c:	e0 03 13 aa	mov	x0, x19
100009d30:	e1 03 16 aa	mov	x1, x22
100009d34:	b7 17 00 94	bl	0x10000fc10
100009d38:	f9 03 00 aa	mov	x25, x0
100009d3c:	e0 03 14 aa	mov	x0, x20
100009d40:	e1 03 17 aa	mov	x1, x23
100009d44:	b3 17 00 94	bl	0x10000fc10
100009d48:	e1 03 00 aa	mov	x1, x0
100009d4c:	08 00 40 b9	ldr	w8, [x0]
100009d50:	29 03 40 b9	ldr	w9, [x25]
100009d54:	08 01 09 6b	subs	w8, w8, w9
100009d58:	e4 00 00 54	b.mi	0x100009d74
100009d5c:	88 02 00 34	cbz	w8, 0x100009dac
100009d60:	35 87 06 39	strb	w21, [x25, #417]
100009d64:	e0 03 18 aa	mov	x0, x24
100009d68:	e1 03 19 aa	mov	x1, x25
100009d6c:	a5 17 00 94	bl	0x10000fc00
100009d70:	12 00 00 14	b	0x100009db8
100009d74:	79 78 09 10	adr	x25, #77580
100009d78:	1f 20 03 d5	nop
100009d7c:	e0 03 19 aa	mov	x0, x25
100009d80:	e2 03 19 aa	mov	x2, x25
100009d84:	5f 20 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
100009d88:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100009d8c:	20 8f 8b 3c	str	q0, [x25, #184]!
100009d90:	3f 4b 00 f9	str	xzr, [x25, #144]
100009d94:	20 83 03 ad	stp	q0, q0, [x25, #112]
100009d98:	20 83 02 ad	stp	q0, q0, [x25, #80]
100009d9c:	20 83 01 ad	stp	q0, q0, [x25, #48]
100009da0:	f7 06 00 11	add	w23, w23, #1
100009da4:	20 83 00 ad	stp	q0, q0, [x25, #16]
100009da8:	05 00 00 14	b	0x100009dbc
100009dac:	e0 03 19 aa	mov	x0, x25
100009db0:	e8 04 00 94	bl	0x10000b150
100009db4:	f7 06 00 11	add	w23, w23, #1
100009db8:	d6 06 00 11	add	w22, w22, #1
100009dbc:	68 c7 4b b9	ldr	w8, [x27, #3012]
100009dc0:	1f 20 03 d5	nop
100009dc4:	89 70 09 18	ldr	w9, 0x10001cbd4
100009dc8:	df 02 09 6b	cmp	w22, w9
100009dcc:	ea 27 9f 1a	cset	w10, lo
100009dd0:	ff 02 08 6b	cmp	w23, w8
100009dd4:	eb 27 9f 1a	cset	w11, lo
100009dd8:	62 00 00 54	b.hs	0x100009de4
100009ddc:	df 02 09 6b	cmp	w22, w9
100009de0:	63 fa ff 54	b.lo	0x100009d2c
100009de4:	ab 03 00 34	cbz	w11, 0x100009e58
100009de8:	ff 02 08 6b	cmp	w23, w8
100009dec:	b5 74 09 10	adr	x21, #77460
100009df0:	1f 20 03 d5	nop
100009df4:	b8 14 09 10	adr	x24, #74388
100009df8:	1f 20 03 d5	nop
100009dfc:	f3 6d 09 10	adr	x19, #77244
100009e00:	1f 20 03 d5	nop
100009e04:	c2 05 00 54	b.hs	0x100009ebc
100009e08:	e0 03 13 aa	mov	x0, x19
100009e0c:	e1 03 17 aa	mov	x1, x23
100009e10:	80 17 00 94	bl	0x10000fc10
100009e14:	e1 03 00 aa	mov	x1, x0
100009e18:	e0 03 15 aa	mov	x0, x21
100009e1c:	e2 03 15 aa	mov	x2, x21
100009e20:	38 20 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
100009e24:	e8 03 15 aa	mov	x8, x21
100009e28:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100009e2c:	00 8d 8b 3c	str	q0, [x8, #184]!
100009e30:	1f 49 00 f9	str	xzr, [x8, #144]
100009e34:	00 81 03 ad	stp	q0, q0, [x8, #112]
100009e38:	00 81 02 ad	stp	q0, q0, [x8, #80]
100009e3c:	00 81 01 ad	stp	q0, q0, [x8, #48]
100009e40:	00 81 00 ad	stp	q0, q0, [x8, #16]
100009e44:	f7 06 00 11	add	w23, w23, #1
100009e48:	68 0e 40 b9	ldr	w8, [x19, #12]
100009e4c:	ff 02 08 6b	cmp	w23, w8
100009e50:	c3 fd ff 54	b.lo	0x100009e08
100009e54:	1a 00 00 14	b	0x100009ebc
100009e58:	df 02 09 6b	cmp	w22, w9
100009e5c:	e8 27 9f 1a	cset	w8, lo
100009e60:	48 01 08 0a	and	w8, w10, w8
100009e64:	1f 05 00 71	cmp	w8, #1
100009e68:	d5 70 09 10	adr	x21, #77336
100009e6c:	1f 20 03 d5	nop
100009e70:	d8 10 09 10	adr	x24, #74264
100009e74:	1f 20 03 d5	nop
100009e78:	97 6a 09 10	adr	x23, #77136
100009e7c:	1f 20 03 d5	nop
100009e80:	e1 01 00 54	b.ne	0x100009ebc
100009e84:	34 00 80 52	mov	w20, #1
100009e88:	13 69 09 10	adr	x19, #77088
100009e8c:	1f 20 03 d5	nop
100009e90:	e0 03 17 aa	mov	x0, x23
100009e94:	e1 03 16 aa	mov	x1, x22
100009e98:	5e 17 00 94	bl	0x10000fc10
100009e9c:	e1 03 00 aa	mov	x1, x0
100009ea0:	14 84 06 39	strb	w20, [x0, #417]
100009ea4:	e0 03 13 aa	mov	x0, x19
100009ea8:	56 17 00 94	bl	0x10000fc00
100009eac:	d6 06 00 11	add	w22, w22, #1
100009eb0:	e8 0e 40 b9	ldr	w8, [x23, #12]
100009eb4:	df 02 08 6b	cmp	w22, w8
100009eb8:	c3 fe ff 54	b.lo	0x100009e90
100009ebc:	1f 20 03 d5	nop
100009ec0:	28 69 09 18	ldr	w8, 0x10001cbe4
100009ec4:	e8 02 00 34	cbz	w8, 0x100009f20
100009ec8:	13 00 80 52	mov	w19, #0
100009ecc:	74 68 09 10	adr	x20, #77068
100009ed0:	1f 20 03 d5	nop
100009ed4:	e0 03 14 aa	mov	x0, x20
100009ed8:	e1 03 13 aa	mov	x1, x19
100009edc:	4d 17 00 94	bl	0x10000fc10
100009ee0:	e1 03 00 aa	mov	x1, x0
100009ee4:	e0 03 15 aa	mov	x0, x21
100009ee8:	e2 03 15 aa	mov	x2, x21
100009eec:	05 20 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
100009ef0:	e8 03 15 aa	mov	x8, x21
100009ef4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100009ef8:	00 8d 8b 3c	str	q0, [x8, #184]!
100009efc:	1f 49 00 f9	str	xzr, [x8, #144]
100009f00:	00 81 03 ad	stp	q0, q0, [x8, #112]
100009f04:	00 81 02 ad	stp	q0, q0, [x8, #80]
100009f08:	00 81 01 ad	stp	q0, q0, [x8, #48]
100009f0c:	00 81 00 ad	stp	q0, q0, [x8, #16]
100009f10:	73 06 00 11	add	w19, w19, #1
100009f14:	88 0e 40 b9	ldr	w8, [x20, #12]
100009f18:	7f 02 08 6b	cmp	w19, w8
100009f1c:	c3 fd ff 54	b.lo	0x100009ed4
100009f20:	40 64 09 10	adr	x0, #76936
100009f24:	1f 20 03 d5	nop
100009f28:	81 65 09 10	adr	x1, #76976
100009f2c:	1f 20 03 d5	nop
100009f30:	7c 17 00 94	bl	0x10000fd20
100009f34:	e8 0c 09 10	adr	x8, #74140
100009f38:	1f 20 03 d5	nop
100009f3c:	08 01 41 39	ldrb	w8, [x8, #64]
100009f40:	88 15 00 34	cbz	w8, 0x10000a1f0
100009f44:	a0 65 09 10	adr	x0, #76980
100009f48:	1f 20 03 d5	nop
100009f4c:	92 17 00 94	bl	0x10000fd94
100009f50:	08 03 40 39	ldrb	w8, [x24]
100009f54:	88 03 00 34	cbz	w8, 0x100009fc4
100009f58:	1f 20 03 d5	nop
100009f5c:	48 66 09 18	ldr	w8, 0x10001cc24
100009f60:	c8 01 00 34	cbz	w8, 0x100009f98
100009f64:	13 00 80 52	mov	w19, #0
100009f68:	94 65 09 10	adr	x20, #76976
100009f6c:	1f 20 03 d5	nop
100009f70:	e0 03 14 aa	mov	x0, x20
100009f74:	e1 03 13 aa	mov	x1, x19
100009f78:	89 17 00 94	bl	0x10000fd9c
100009f7c:	e1 03 00 aa	mov	x1, x0
100009f80:	20 84 40 f8	ldr	x0, [x1], #8
100009f84:	bf 04 00 94	bl	0x10000b280
100009f88:	73 06 00 11	add	w19, w19, #1
100009f8c:	88 0e 40 b9	ldr	w8, [x20, #12]
100009f90:	7f 02 08 6b	cmp	w19, w8
100009f94:	e3 fe ff 54	b.lo	0x100009f70
100009f98:	00 63 09 10	adr	x0, #76896
100009f9c:	1f 20 03 d5	nop
100009fa0:	d3 63 09 10	adr	x19, #76920
100009fa4:	1f 20 03 d5	nop
100009fa8:	e1 03 13 aa	mov	x1, x19
100009fac:	88 17 00 94	bl	0x10000fdcc
100009fb0:	c0 63 09 10	adr	x0, #76920
100009fb4:	1f 20 03 d5	nop
100009fb8:	e1 03 13 aa	mov	x1, x19
100009fbc:	84 17 00 94	bl	0x10000fdcc
100009fc0:	8c 00 00 14	b	0x10000a1f0
100009fc4:	08 0b 40 39	ldrb	w8, [x24, #2]
100009fc8:	c8 00 00 34	cbz	w8, 0x100009fe0
100009fcc:	e0 61 09 10	adr	x0, #76860
100009fd0:	1f 20 03 d5	nop
100009fd4:	a1 62 09 10	adr	x1, #76884
100009fd8:	1f 20 03 d5	nop
100009fdc:	7c 17 00 94	bl	0x10000fdcc
100009fe0:	14 00 80 52	mov	w20, #0
100009fe4:	9c 00 00 f0	adrp	x28, 19 ; 0x10001c000
100009fe8:	8a 17 4c b9	ldr	w10, [x28, #3092]
100009fec:	96 00 00 f0	adrp	x22, 19 ; 0x10001c000
100009ff0:	c8 26 4c b9	ldr	w8, [x22, #3108]
100009ff4:	1f 01 00 71	cmp	w8, #0
100009ff8:	e9 07 9f 1a	cset	w9, ne
100009ffc:	8a 0d 00 34	cbz	w10, 0x10000a1ac
10000a000:	68 0d 00 34	cbz	w8, 0x10000a1ac
10000a004:	14 00 80 52	mov	w20, #0
10000a008:	15 00 80 52	mov	w21, #0
10000a00c:	e8 03 2c 91	add	x8, sp, #2816
10000a010:	09 21 00 91	add	x9, x8, #8
10000a014:	e9 0f 00 f9	str	x9, [sp, #24]
10000a018:	17 60 09 10	adr	x23, #76800
10000a01c:	1f 20 03 d5	nop
10000a020:	18 21 02 91	add	x24, x8, #136
10000a024:	39 5f 09 10	adr	x25, #76772
10000a028:	1f 20 03 d5	nop
10000a02c:	7a 5e 09 10	adr	x26, #76748
10000a030:	1f 20 03 d5	nop
10000a034:	e0 03 17 aa	mov	x0, x23
10000a038:	e1 03 14 aa	mov	x1, x20
10000a03c:	58 17 00 94	bl	0x10000fd9c
10000a040:	f3 03 00 aa	mov	x19, x0
10000a044:	e0 03 19 aa	mov	x0, x25
10000a048:	e1 03 15 aa	mov	x1, x21
10000a04c:	54 17 00 94	bl	0x10000fd9c
10000a050:	fb 03 00 aa	mov	x27, x0
10000a054:	08 00 40 f9	ldr	x8, [x0]
10000a058:	60 02 40 f9	ldr	x0, [x19]
10000a05c:	1f 01 00 eb	cmp	x8, x0
10000a060:	62 00 00 54	b.hs	0x10000a06c
10000a064:	b5 06 00 11	add	w21, w21, #1
10000a068:	48 00 00 14	b	0x10000a188
10000a06c:	21 08 00 54	b.ne	0x10000a170
10000a070:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000a074:	e0 3f 83 3d	str	q0, [sp, #3312]
10000a078:	e0 3b 83 3d	str	q0, [sp, #3296]
10000a07c:	e0 37 83 3d	str	q0, [sp, #3280]
10000a080:	e0 33 83 3d	str	q0, [sp, #3264]
10000a084:	e0 2f 83 3d	str	q0, [sp, #3248]
10000a088:	e0 2b 83 3d	str	q0, [sp, #3232]
10000a08c:	e0 27 83 3d	str	q0, [sp, #3216]
10000a090:	e0 23 83 3d	str	q0, [sp, #3200]
10000a094:	e0 1f 83 3d	str	q0, [sp, #3184]
10000a098:	e0 1b 83 3d	str	q0, [sp, #3168]
10000a09c:	e0 17 83 3d	str	q0, [sp, #3152]
10000a0a0:	e0 13 83 3d	str	q0, [sp, #3136]
10000a0a4:	e0 0f 83 3d	str	q0, [sp, #3120]
10000a0a8:	e0 0b 83 3d	str	q0, [sp, #3104]
10000a0ac:	e0 07 83 3d	str	q0, [sp, #3088]
10000a0b0:	e0 03 83 3d	str	q0, [sp, #3072]
10000a0b4:	e0 ff 82 3d	str	q0, [sp, #3056]
10000a0b8:	e0 fb 82 3d	str	q0, [sp, #3040]
10000a0bc:	e0 f7 82 3d	str	q0, [sp, #3024]
10000a0c0:	e0 f3 82 3d	str	q0, [sp, #3008]
10000a0c4:	e0 ef 82 3d	str	q0, [sp, #2992]
10000a0c8:	e0 eb 82 3d	str	q0, [sp, #2976]
10000a0cc:	e0 e7 82 3d	str	q0, [sp, #2960]
10000a0d0:	e0 e3 82 3d	str	q0, [sp, #2944]
10000a0d4:	e0 df 82 3d	str	q0, [sp, #2928]
10000a0d8:	e0 db 82 3d	str	q0, [sp, #2912]
10000a0dc:	e0 d7 82 3d	str	q0, [sp, #2896]
10000a0e0:	e0 d3 82 3d	str	q0, [sp, #2880]
10000a0e4:	e0 cf 82 3d	str	q0, [sp, #2864]
10000a0e8:	e0 cb 82 3d	str	q0, [sp, #2848]
10000a0ec:	e0 c7 82 3d	str	q0, [sp, #2832]
10000a0f0:	e0 c3 82 3d	str	q0, [sp, #2816]
10000a0f4:	e0 03 2c 91	add	x0, sp, #2816
10000a0f8:	e1 03 13 aa	mov	x1, x19
10000a0fc:	02 46 80 52	mov	w2, #560
10000a100:	4c 1f 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000a104:	60 22 00 91	add	x0, x19, #8
10000a108:	73 23 00 91	add	x19, x27, #8
10000a10c:	e1 03 13 aa	mov	x1, x19
10000a110:	02 10 80 52	mov	w2, #128
10000a114:	bf 1e 00 94	bl	0x100011c10 ; symbol stub for: ___strcpy_chk
10000a118:	e0 0f 40 f9	ldr	x0, [sp, #24]
10000a11c:	e1 03 13 aa	mov	x1, x19
10000a120:	02 10 80 52	mov	w2, #128
10000a124:	bb 1e 00 94	bl	0x100011c10 ; symbol stub for: ___strcpy_chk
10000a128:	ff 83 00 39	strb	wzr, [sp, #32]
10000a12c:	61 23 02 91	add	x1, x27, #136
10000a130:	e3 83 00 91	add	x3, sp, #32
10000a134:	e0 03 18 aa	mov	x0, x24
10000a138:	e2 03 18 aa	mov	x2, x24
10000a13c:	75 1f 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000a140:	e8 83 40 39	ldrb	w8, [sp, #32]
10000a144:	c8 00 00 34	cbz	w8, 0x10000a15c
10000a148:	e0 03 18 aa	mov	x0, x24
10000a14c:	e1 03 18 aa	mov	x1, x24
10000a150:	e2 03 18 aa	mov	x2, x24
10000a154:	03 00 80 d2	mov	x3, #0
10000a158:	6e 1f 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000a15c:	e1 03 2c 91	add	x1, sp, #2816
10000a160:	e0 03 1a aa	mov	x0, x26
10000a164:	0a 17 00 94	bl	0x10000fd8c
10000a168:	b5 06 00 11	add	w21, w21, #1
10000a16c:	06 00 00 14	b	0x10000a184
10000a170:	61 22 00 91	add	x1, x19, #8
10000a174:	43 04 00 94	bl	0x10000b280
10000a178:	e0 03 1a aa	mov	x0, x26
10000a17c:	e1 03 13 aa	mov	x1, x19
10000a180:	03 17 00 94	bl	0x10000fd8c
10000a184:	94 06 00 11	add	w20, w20, #1
10000a188:	8a 17 4c b9	ldr	w10, [x28, #3092]
10000a18c:	c8 26 4c b9	ldr	w8, [x22, #3108]
10000a190:	9f 02 08 6b	cmp	w20, w8
10000a194:	e9 27 9f 1a	cset	w9, lo
10000a198:	bf 02 0a 6b	cmp	w21, w10
10000a19c:	82 32 48 7a	ccmp	w20, w8, #2, lo
10000a1a0:	a3 f4 ff 54	b.lo	0x10000a034
10000a1a4:	38 f7 08 10	adr	x24, #73444
10000a1a8:	1f 20 03 d5	nop
10000a1ac:	3f 01 00 71	cmp	w9, #0
10000a1b0:	82 12 48 7a	ccmp	w20, w8, #2, ne
10000a1b4:	e2 01 00 54	b.hs	0x10000a1f0
10000a1b8:	13 53 09 10	adr	x19, #76384
10000a1bc:	1f 20 03 d5	nop
10000a1c0:	d5 51 09 10	adr	x21, #76344
10000a1c4:	1f 20 03 d5	nop
10000a1c8:	e0 03 13 aa	mov	x0, x19
10000a1cc:	e1 03 14 aa	mov	x1, x20
10000a1d0:	f3 16 00 94	bl	0x10000fd9c
10000a1d4:	e1 03 00 aa	mov	x1, x0
10000a1d8:	e0 03 15 aa	mov	x0, x21
10000a1dc:	ec 16 00 94	bl	0x10000fd8c
10000a1e0:	94 06 00 11	add	w20, w20, #1
10000a1e4:	68 0e 40 b9	ldr	w8, [x19, #12]
10000a1e8:	9f 02 08 6b	cmp	w20, w8
10000a1ec:	e3 fe ff 54	b.lo	0x10000a1c8
10000a1f0:	c0 4d 09 10	adr	x0, #76216
10000a1f4:	1f 20 03 d5	nop
10000a1f8:	01 00 80 52	mov	w1, #0
10000a1fc:	85 16 00 94	bl	0x10000fc10
10000a200:	f4 03 00 aa	mov	x20, x0
10000a204:	f3 53 09 10	adr	x19, #76412
10000a208:	1f 20 03 d5	nop
10000a20c:	68 c6 40 f9	ldr	x8, [x19, #392]
10000a210:	08 c4 00 f9	str	x8, [x0, #392]
10000a214:	e0 83 12 91	add	x0, sp, #1184
10000a218:	e1 03 14 aa	mov	x1, x20
10000a21c:	02 44 80 52	mov	w2, #544
10000a220:	04 1f 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000a224:	ff 03 2c 39	strb	wzr, [sp, #2816]
10000a228:	e3 03 2c 91	add	x3, sp, #2816
10000a22c:	e0 03 14 aa	mov	x0, x20
10000a230:	e1 03 13 aa	mov	x1, x19
10000a234:	e2 03 14 aa	mov	x2, x20
10000a238:	36 1f 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000a23c:	e8 03 6c 39	ldrb	w8, [sp, #2816]
10000a240:	88 8a 06 39	strb	w8, [x20, #418]
10000a244:	48 06 00 34	cbz	w8, 0x10000a30c
10000a248:	e1 83 12 91	add	x1, sp, #1184
10000a24c:	e0 03 14 aa	mov	x0, x20
10000a250:	02 44 80 52	mov	w2, #544
10000a254:	f7 1e 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000a258:	e0 83 23 91	add	x0, sp, #2272
10000a25c:	11 03 00 94	bl	0x10000aea0
10000a260:	e0 83 12 91	add	x0, sp, #1184
10000a264:	e1 83 23 91	add	x1, sp, #2272
10000a268:	02 44 80 52	mov	w2, #544
10000a26c:	f1 1e 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000a270:	ff 03 2c 39	strb	wzr, [sp, #2816]
10000a274:	e0 83 12 91	add	x0, sp, #1184
10000a278:	e1 03 1b 91	add	x1, sp, #1728
10000a27c:	e2 83 12 91	add	x2, sp, #1184
10000a280:	e3 03 2c 91	add	x3, sp, #2816
10000a284:	23 1f 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000a288:	e8 03 6c 39	ldrb	w8, [sp, #2816]
10000a28c:	e8 0b 19 39	strb	w8, [sp, #1602]
10000a290:	e1 83 12 91	add	x1, sp, #1184
10000a294:	e0 03 14 aa	mov	x0, x20
10000a298:	e2 03 14 aa	mov	x2, x20
10000a29c:	19 1f 00 94	bl	0x100011f00 ; symbol stub for: _pm_task_add
10000a2a0:	68 c6 40 f9	ldr	x8, [x19, #392]
10000a2a4:	88 c6 00 f9	str	x8, [x20, #392]
10000a2a8:	e0 83 12 91	add	x0, sp, #1184
10000a2ac:	e1 03 14 aa	mov	x1, x20
10000a2b0:	02 44 80 52	mov	w2, #544
10000a2b4:	df 1e 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000a2b8:	ff 03 2c 39	strb	wzr, [sp, #2816]
10000a2bc:	e3 03 2c 91	add	x3, sp, #2816
10000a2c0:	e0 03 14 aa	mov	x0, x20
10000a2c4:	e1 03 13 aa	mov	x1, x19
10000a2c8:	e2 03 14 aa	mov	x2, x20
10000a2cc:	11 1f 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000a2d0:	e8 03 6c 39	ldrb	w8, [sp, #2816]
10000a2d4:	88 8a 06 39	strb	w8, [x20, #418]
10000a2d8:	a8 01 00 34	cbz	w8, 0x10000a30c
10000a2dc:	1f 20 03 d5	nop
10000a2e0:	08 0c 07 58	ldr	x8, #57728 ; literal pool symbol address: ___stderrp
10000a2e4:	03 01 40 f9	ldr	x3, [x8]
10000a2e8:	60 f5 05 10	adr	x0, #48812 ; literal pool for: "Second underflow occured.\n"
10000a2ec:	1f 20 03 d5	nop
10000a2f0:	41 03 80 52	mov	w1, #26
10000a2f4:	22 00 80 52	mov	w2, #1
10000a2f8:	8a 1e 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000a2fc:	e1 83 12 91	add	x1, sp, #1184
10000a300:	e0 03 14 aa	mov	x0, x20
10000a304:	02 44 80 52	mov	w2, #544
10000a308:	ca 1e 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000a30c:	08 0b 40 39	ldrb	w8, [x24, #2]
10000a310:	09 83 00 91	add	x9, x24, #32
10000a314:	0a a3 00 91	add	x10, x24, #40
10000a318:	1f 01 00 71	cmp	w8, #0
10000a31c:	28 01 8a 9a	csel	x8, x9, x10, eq
10000a320:	08 01 40 f9	ldr	x8, [x8]
10000a324:	88 c6 00 f9	str	x8, [x20, #392]
10000a328:	48 ed 08 10	adr	x8, #73128
10000a32c:	1f 20 03 d5	nop
10000a330:	08 01 41 39	ldrb	w8, [x8, #64]
10000a334:	48 02 00 34	cbz	w8, 0x10000a37c
10000a338:	e0 43 01 91	add	x0, sp, #80
10000a33c:	01 46 80 52	mov	w1, #560
10000a340:	44 1e 00 94	bl	0x100011c50 ; symbol stub for: _bzero
10000a344:	48 f3 05 70	adr	x8, #48747 ; literal pool for: "DEAD_TASKS_COALITION"
10000a348:	1f 20 03 d5	nop
10000a34c:	00 01 c0 3d	ldr	q0, [x8]
10000a350:	e0 83 85 3c	stur	q0, [sp, #88]
10000a354:	08 d1 40 f8	ldur	x8, [x8, #13]
10000a358:	e8 53 06 f8	stur	x8, [sp, #101]
10000a35c:	82 c6 40 f9	ldr	x2, [x20, #392]
10000a360:	e0 43 01 91	add	x0, sp, #80
10000a364:	e1 03 14 aa	mov	x1, x20
10000a368:	13 03 00 94	bl	0x10000afb4
10000a36c:	60 44 09 10	adr	x0, #75916
10000a370:	1f 20 03 d5	nop
10000a374:	e1 43 01 91	add	x1, sp, #80
10000a378:	85 16 00 94	bl	0x10000fd8c
10000a37c:	60 41 09 10	adr	x0, #75820
10000a380:	1f 20 03 d5	nop
10000a384:	21 5e 07 10	adr	x1, #60356
10000a388:	1f 20 03 d5	nop
10000a38c:	3b 16 00 94	bl	0x10000fc78
10000a390:	08 ea 08 10	adr	x8, #73024
10000a394:	1f 20 03 d5	nop
10000a398:	08 01 41 39	ldrb	w8, [x8, #64]
10000a39c:	a8 01 00 34	cbz	w8, 0x10000a3d0
10000a3a0:	40 40 09 10	adr	x0, #75784
10000a3a4:	1f 20 03 d5	nop
10000a3a8:	f0 09 00 10	adr	x16, #316
10000a3ac:	1f 20 03 d5	nop
10000a3b0:	f0 23 c1 da	paciza	x16
10000a3b4:	e1 03 10 aa	mov	x1, x16
10000a3b8:	2a 16 00 94	bl	0x10000fc60
10000a3bc:	e0 41 09 10	adr	x0, #75836
10000a3c0:	1f 20 03 d5	nop
10000a3c4:	21 5e 07 10	adr	x1, #60356
10000a3c8:	1f 20 03 d5	nop
10000a3cc:	8e 16 00 94	bl	0x10000fe04
10000a3d0:	a8 03 5a f8	ldur	x8, [x29, #-96]
10000a3d4:	1f 20 03 d5	nop
10000a3d8:	09 04 07 58	ldr	x9, #57472 ; literal pool symbol address: ___stack_chk_guard
10000a3dc:	29 01 40 f9	ldr	x9, [x9]
10000a3e0:	3f 01 08 eb	cmp	x9, x8
10000a3e4:	61 01 00 54	b.ne	0x10000a410
10000a3e8:	ff 03 35 91	add	sp, sp, #3392
10000a3ec:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
10000a3f0:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
10000a3f4:	f6 57 43 a9	ldp	x22, x21, [sp, #48]
10000a3f8:	f8 5f 42 a9	ldp	x24, x23, [sp, #32]
10000a3fc:	fa 67 41 a9	ldp	x26, x25, [sp, #16]
10000a400:	fc 6f c6 a8	ldp	x28, x27, [sp], #96
10000a404:	ff 0f 5f d6	retab
10000a408:	33 1c 00 94	bl	0x1000114d4
10000a40c:	27 1c 00 94	bl	0x1000114a8
10000a410:	fc 1d 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000a414:	08 40 48 f8	ldur	x8, [x0, #132]
10000a418:	09 c0 48 f8	ldur	x9, [x0, #140]
10000a41c:	28 01 08 8b	add	x8, x9, x8
10000a420:	29 40 48 f8	ldur	x9, [x1, #132]
10000a424:	2a c0 48 f8	ldur	x10, [x1, #140]
10000a428:	49 01 09 8b	add	x9, x10, x9
10000a42c:	1f 01 09 eb	cmp	x8, x9
10000a430:	e8 27 9f 1a	cset	w8, lo
10000a434:	00 91 9f 5a	csinv	w0, w8, wzr, ls
10000a438:	c0 03 5f d6	ret
10000a43c:	08 c0 49 f8	ldur	x8, [x0, #156]
10000a440:	29 c0 49 f8	ldur	x9, [x1, #156]
10000a444:	1f 01 09 eb	cmp	x8, x9
10000a448:	e8 27 9f 1a	cset	w8, lo
10000a44c:	00 91 9f 5a	csinv	w0, w8, wzr, ls
10000a450:	c0 03 5f d6	ret
10000a454:	7f 23 03 d5	pacibsp
10000a458:	e9 23 bd 6d	stp	d9, d8, [sp, #-48]!
10000a45c:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000a460:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000a464:	fd 83 00 91	add	x29, sp, #32
10000a468:	f3 03 01 aa	mov	x19, x1
10000a46c:	34 e3 08 10	adr	x20, #72804
10000a470:	1f 20 03 d5	nop
10000a474:	80 1a 40 fd	ldr	d0, [x20, #48]
10000a478:	00 d8 61 7e	ucvtf	d0, d0
10000a47c:	1f 20 03 d5	nop
10000a480:	89 e8 03 5c	ldr	d9, 0x100012190
10000a484:	00 18 69 1e	fdiv	d0, d0, d9
10000a488:	8e 1e 00 94	bl	0x100011ec0 ; symbol stub for: _pm_energy_impact_internal
10000a48c:	08 40 60 1e	fmov	d8, d0
10000a490:	80 1a 40 fd	ldr	d0, [x20, #48]
10000a494:	00 d8 61 7e	ucvtf	d0, d0
10000a498:	00 18 69 1e	fdiv	d0, d0, d9
10000a49c:	e0 03 13 aa	mov	x0, x19
10000a4a0:	88 1e 00 94	bl	0x100011ec0 ; symbol stub for: _pm_energy_impact_internal
10000a4a4:	00 21 60 1e	fcmp	d8, d0
10000a4a8:	6d 00 00 54	b.le	0x10000a4b4
10000a4ac:	00 00 80 12	mov	w0, #-1
10000a4b0:	05 00 00 14	b	0x10000a4c4
10000a4b4:	65 00 00 54	b.pl	0x10000a4c0
10000a4b8:	20 00 80 52	mov	w0, #1
10000a4bc:	02 00 00 14	b	0x10000a4c4
10000a4c0:	00 00 80 52	mov	w0, #0
10000a4c4:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000a4c8:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000a4cc:	e9 23 c3 6c	ldp	d9, d8, [sp], #48
10000a4d0:	ff 0f 5f d6	retab
10000a4d4:	08 00 40 b9	ldr	w8, [x0]
10000a4d8:	29 00 40 b9	ldr	w9, [x1]
10000a4dc:	00 01 09 4b	sub	w0, w8, w9
10000a4e0:	c0 03 5f d6	ret
10000a4e4:	08 d4 40 f9	ldr	x8, [x0, #424]
10000a4e8:	29 d4 40 f9	ldr	x9, [x1, #424]
10000a4ec:	1f 01 09 eb	cmp	x8, x9
10000a4f0:	e8 07 9f 1a	cset	w8, ne
10000a4f4:	00 21 9f 5a	csinv	w0, w8, wzr, hs
10000a4f8:	c0 03 5f d6	ret
10000a4fc:	7f 23 03 d5	pacibsp
10000a500:	ef 3b b6 6d	stp	d15, d14, [sp, #-160]!
10000a504:	ed 33 01 6d	stp	d13, d12, [sp, #16]
10000a508:	eb 2b 02 6d	stp	d11, d10, [sp, #32]
10000a50c:	e9 23 03 6d	stp	d9, d8, [sp, #48]
10000a510:	fc 6f 04 a9	stp	x28, x27, [sp, #64]
10000a514:	fa 67 05 a9	stp	x26, x25, [sp, #80]
10000a518:	f8 5f 06 a9	stp	x24, x23, [sp, #96]
10000a51c:	f6 57 07 a9	stp	x22, x21, [sp, #112]
10000a520:	f4 4f 08 a9	stp	x20, x19, [sp, #128]
10000a524:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
10000a528:	fd 43 02 91	add	x29, sp, #144
10000a52c:	ff 03 06 d1	sub	sp, sp, #384
10000a530:	f4 03 01 aa	mov	x20, x1
10000a534:	f3 03 00 aa	mov	x19, x0
10000a538:	1f 20 03 d5	nop
10000a53c:	e8 f8 06 58	ldr	x8, #57116 ; literal pool symbol address: ___stack_chk_guard
10000a540:	08 01 40 f9	ldr	x8, [x8]
10000a544:	a8 03 16 f8	stur	x8, [x29, #-160]
10000a548:	15 da 08 10	adr	x21, #72512
10000a54c:	1f 20 03 d5	nop
10000a550:	08 88 46 39	ldrb	w8, [x0, #418]
10000a554:	a8 02 00 34	cbz	w8, 0x10000a5a8
10000a558:	c9 db 08 10	adr	x9, #72568
10000a55c:	1f 20 03 d5	nop
10000a560:	28 29 40 b9	ldr	w8, [x9, #40]
10000a564:	1f 05 00 71	cmp	w8, #1
10000a568:	e0 17 00 54	b.eq	0x10000a864
10000a56c:	e8 44 00 35	cbnz	w8, 0x10000ae08
10000a570:	68 e5 04 50	adr	x8, #40110 ; literal pool for: ""
10000a574:	1f 20 03 d5	nop
10000a578:	29 3d 05 50	adr	x9, #42918 ; literal pool for: "  "
10000a57c:	1f 20 03 d5	nop
10000a580:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a584:	9f 02 00 71	cmp	w20, #0
10000a588:	2a 11 88 9a	csel	x10, x9, x8, ne
10000a58c:	08 11 89 9a	csel	x8, x8, x9, ne
10000a590:	69 46 40 b8	ldr	w9, [x19], #4
10000a594:	e8 27 01 a9	stp	x8, x9, [sp, #16]
10000a598:	ea 4f 00 a9	stp	x10, x19, [sp]
10000a59c:	01 70 05 10	adr	x1, #44544 ; literal pool for: "%s%-32s%s %-5d  INVALID\n"
10000a5a0:	1f 20 03 d5	nop
10000a5a4:	b7 00 00 14	b	0x10000a880
10000a5a8:	69 42 48 f8	ldur	x9, [x19, #132]
10000a5ac:	68 c2 48 f8	ldur	x8, [x19, #140]
10000a5b0:	ab 0a 40 39	ldrb	w11, [x21, #2]
10000a5b4:	aa 82 00 91	add	x10, x21, #32
10000a5b8:	ac a2 00 91	add	x12, x21, #40
10000a5bc:	7f 01 00 71	cmp	w11, #0
10000a5c0:	4c 01 8c 9a	csel	x12, x10, x12, eq
10000a5c4:	0a 01 09 8b	add	x10, x8, x9
10000a5c8:	0a 42 00 b4	cbz	x10, 0x10000ae08
10000a5cc:	60 c6 40 fd	ldr	d0, [x19, #392]
10000a5d0:	00 d8 61 7e	ucvtf	d0, d0
10000a5d4:	a1 06 40 fd	ldr	d1, [x21, #8]
10000a5d8:	20 08 60 1e	fmul	d0, d1, d0
10000a5dc:	1f 20 03 d5	nop
10000a5e0:	82 dd 03 5c	ldr	d2, 0x100012190
10000a5e4:	09 18 62 1e	fdiv	d9, d0, d2
10000a5e8:	28 21 60 1e	fcmp	d9, #0.0
10000a5ec:	e0 40 00 54	b.eq	0x10000ae08
10000a5f0:	79 42 49 f8	ldur	x25, [x19, #148]
10000a5f4:	7b c2 49 f8	ldur	x27, [x19, #156]
10000a5f8:	7a 42 4a f8	ldur	x26, [x19, #164]
10000a5fc:	7c c2 4a f8	ldur	x28, [x19, #172]
10000a600:	62 0e 54 6d	ldp	d2, d3, [x19, #320]
10000a604:	64 16 4c 6d	ldp	d4, d5, [x19, #192]
10000a608:	66 1e 4d 6d	ldp	d6, d7, [x19, #208]
10000a60c:	7d 76 40 fd	ldr	d29, [x19, #232]
10000a610:	68 f2 40 f9	ldr	x8, [x19, #480]
10000a614:	7c aa 40 fd	ldr	d28, [x19, #336]
10000a618:	7b 6a 50 6d	ldp	d27, d26, [x19, #256]
10000a61c:	79 62 51 6d	ldp	d25, d24, [x19, #272]
10000a620:	76 56 52 6d	ldp	d22, d21, [x19, #288]
10000a624:	74 46 53 6d	ldp	d20, d17, [x19, #304]
10000a628:	73 c2 57 6d	ldp	d19, d16, [x19, #376]
10000a62c:	92 01 40 fd	ldr	d18, [x12]
10000a630:	6b 00 00 35	cbnz	w11, 0x10000a63c
10000a634:	6b 82 46 39	ldrb	w11, [x19, #416]
10000a638:	cb 40 00 35	cbnz	w11, 0x10000ae50
10000a63c:	1f 20 03 d5	nop
10000a640:	17 dc 03 5c	ldr	d23, 0x1000121c0
10000a644:	1e 18 77 1e	fdiv	d30, d0, d23
10000a648:	3f 01 63 9e	ucvtf	d31, x9
10000a64c:	4b 01 63 9e	ucvtf	d11, x10
10000a650:	ff 1b 6b 1e	fdiv	d31, d31, d11
10000a654:	bf 03 13 fc	stur	d31, [x29, #-208]
10000a658:	2a 08 6b 1e	fmul	d10, d1, d11
10000a65c:	1f 20 03 d5	nop
10000a660:	88 72 04 5c	ldr	d8, 0x1000134b0
10000a664:	3f 09 68 1e	fmul	d31, d9, d8
10000a668:	4e 19 7f 1e	fdiv	d14, d10, d31
10000a66c:	bd db 61 7e	ucvtf	d29, d29
10000a670:	3d 08 7d 1e	fmul	d29, d1, d29
10000a674:	bd 1b 7f 1e	fdiv	d29, d29, d31
10000a678:	bd 03 12 fc	stur	d29, [x29, #-224]
10000a67c:	9c db 61 7e	ucvtf	d28, d28
10000a680:	9c 1b 7f 1e	fdiv	d28, d28, d31
10000a684:	7b db 61 7e	ucvtf	d27, d27
10000a688:	3b 08 7b 1e	fmul	d27, d1, d27
10000a68c:	7b 1b 7e 1e	fdiv	d27, d27, d30
10000a690:	5a db 61 7e	ucvtf	d26, d26
10000a694:	3a 08 7a 1e	fmul	d26, d1, d26
10000a698:	5a 1b 7e 1e	fdiv	d26, d26, d30
10000a69c:	39 db 61 7e	ucvtf	d25, d25
10000a6a0:	39 08 79 1e	fmul	d25, d1, d25
10000a6a4:	39 1b 7e 1e	fdiv	d25, d25, d30
10000a6a8:	18 db 61 7e	ucvtf	d24, d24
10000a6ac:	38 08 78 1e	fmul	d24, d1, d24
10000a6b0:	18 1b 7e 1e	fdiv	d24, d24, d30
10000a6b4:	d6 da 61 7e	ucvtf	d22, d22
10000a6b8:	36 08 76 1e	fmul	d22, d1, d22
10000a6bc:	dd 1a 7e 1e	fdiv	d29, d22, d30
10000a6c0:	b5 da 61 7e	ucvtf	d21, d21
10000a6c4:	35 08 75 1e	fmul	d21, d1, d21
10000a6c8:	bf 1a 7e 1e	fdiv	d31, d21, d30
10000a6cc:	94 da 61 7e	ucvtf	d20, d20
10000a6d0:	34 08 74 1e	fmul	d20, d1, d20
10000a6d4:	94 1a 7e 1e	fdiv	d20, d20, d30
10000a6d8:	b4 83 12 fc	stur	d20, [x29, #-216]
10000a6dc:	73 da 61 7e	ucvtf	d19, d19
10000a6e0:	34 08 73 1e	fmul	d20, d1, d19
10000a6e4:	95 1a 7e 1e	fdiv	d21, d20, d30
10000a6e8:	34 03 63 9e	ucvtf	d20, x25
10000a6ec:	76 1a 6b 1e	fdiv	d22, d19, d11
10000a6f0:	73 03 63 9e	ucvtf	d19, x27
10000a6f4:	94 1a 69 1e	fdiv	d20, d20, d9
10000a6f8:	6d 1a 69 1e	fdiv	d13, d19, d9
10000a6fc:	52 da 61 7e	ucvtf	d18, d18
10000a700:	21 08 72 1e	fmul	d1, d1, d18
10000a704:	52 03 63 9e	ucvtf	d18, x26
10000a708:	4c 1a 69 1e	fdiv	d12, d18, d9
10000a70c:	41 19 61 1e	fdiv	d1, d10, d1
10000a710:	2f 08 77 1e	fmul	d15, d1, d23
10000a714:	81 03 63 9e	ucvtf	d1, x28
10000a718:	2b 18 69 1e	fdiv	d11, d1, d9
10000a71c:	21 da 61 7e	ucvtf	d1, d17
10000a720:	31 18 69 1e	fdiv	d17, d1, d9
10000a724:	41 d8 61 7e	ucvtf	d1, d2
10000a728:	32 18 69 1e	fdiv	d18, d1, d9
10000a72c:	61 d8 61 7e	ucvtf	d1, d3
10000a730:	33 18 69 1e	fdiv	d19, d1, d9
10000a734:	81 d8 61 7e	ucvtf	d1, d4
10000a738:	22 18 69 1e	fdiv	d2, d1, d9
10000a73c:	a1 d8 61 7e	ucvtf	d1, d5
10000a740:	23 18 69 1e	fdiv	d3, d1, d9
10000a744:	c1 d8 61 7e	ucvtf	d1, d6
10000a748:	24 18 69 1e	fdiv	d4, d1, d9
10000a74c:	e1 d8 61 7e	ucvtf	d1, d7
10000a750:	25 18 69 1e	fdiv	d5, d1, d9
10000a754:	09 49 50 d3	ubfx	x9, x8, #16, #3
10000a758:	37 05 00 d1	sub	x23, x9, #1
10000a75c:	08 69 58 d3	ubfx	x8, x8, #24, #3
10000a760:	18 05 00 d1	sub	x24, x8, #1
10000a764:	01 da 61 7e	ucvtf	d1, d16
10000a768:	56 cb 08 10	adr	x22, #72040
10000a76c:	1f 20 03 d5	nop
10000a770:	c8 2a 40 b9	ldr	w8, [x22, #40]
10000a774:	21 18 69 1e	fdiv	d1, d1, d9
10000a778:	1f 05 00 71	cmp	w8, #1
10000a77c:	60 08 00 54	b.eq	0x10000a888
10000a780:	48 34 00 35	cbnz	w8, 0x10000ae08
10000a784:	f4 17 0a 6d	stp	d20, d5, [sp, #160]
10000a788:	f3 cb 0c 6d	stp	d19, d18, [sp, #200]
10000a78c:	f1 ff 0d 6d	stp	d17, d31, [sp, #216]
10000a790:	fd e3 0e 6d	stp	d29, d24, [sp, #232]
10000a794:	f9 eb 0f 6d	stp	d25, d26, [sp, #248]
10000a798:	fb 87 00 fd	str	d27, [sp, #264]
10000a79c:	e4 0f 0b 6d	stp	d4, d3, [sp, #176]
10000a7a0:	e2 63 00 fd	str	d2, [sp, #192]
10000a7a4:	a1 5b 30 6d	stp	d1, d22, [x29, #-256]
10000a7a8:	b5 73 31 6d	stp	d21, d28, [x29, #-240]
10000a7ac:	61 12 00 91	add	x1, x19, #4
10000a7b0:	a0 07 03 d1	sub	x0, x29, #193
10000a7b4:	22 04 80 52	mov	w2, #33
10000a7b8:	23 04 80 52	mov	w3, #33
10000a7bc:	19 1d 00 94	bl	0x100011c20 ; symbol stub for: ___strlcpy_chk
10000a7c0:	ab 0a 40 39	ldrb	w11, [x21, #2]
10000a7c4:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a7c8:	a8 d2 04 50	adr	x8, #39510 ; literal pool for: ""
10000a7cc:	1f 20 03 d5	nop
10000a7d0:	69 2a 05 50	adr	x9, #42318 ; literal pool for: "  "
10000a7d4:	1f 20 03 d5	nop
10000a7d8:	9f 02 00 71	cmp	w20, #0
10000a7dc:	f4 03 08 aa	mov	x20, x8
10000a7e0:	28 11 88 9a	csel	x8, x9, x8, ne
10000a7e4:	89 12 89 9a	csel	x9, x20, x9, ne
10000a7e8:	6a 02 40 b9	ldr	w10, [x19]
10000a7ec:	0b 1f 00 34	cbz	w11, 0x10000abcc
10000a7f0:	2b 0b e8 d2	mov	x11, #4636737291354636288
10000a7f4:	60 01 67 9e	fmov	d0, x11
10000a7f8:	a1 03 53 fc	ldur	d1, [x29, #-208]
10000a7fc:	20 08 60 1e	fmul	d0, d1, d0
10000a800:	eb 69 05 50	adr	x11, #44350 ; literal pool for: "Y"
10000a804:	1f 20 03 d5	nop
10000a808:	6c 82 46 39	ldrb	w12, [x19, #416]
10000a80c:	ad 69 05 10	adr	x13, #44340 ; literal pool for: "N"
10000a810:	1f 20 03 d5	nop
10000a814:	9f 01 00 71	cmp	w12, #0
10000a818:	ab 01 8b 9a	csel	x11, x13, x11, eq
10000a81c:	41 19 68 1e	fdiv	d1, d10, d8
10000a820:	fb af 07 a9	stp	x27, x11, [sp, #120]
10000a824:	ed 3b 00 fd	str	d13, [sp, #112]
10000a828:	f9 37 00 f9	str	x25, [sp, #104]
10000a82c:	e2 53 40 fd	ldr	d2, [sp, #160]
10000a830:	e2 33 00 fd	str	d2, [sp, #96]
10000a834:	fc 2f 00 f9	str	x28, [sp, #88]
10000a838:	eb 2b 00 fd	str	d11, [sp, #80]
10000a83c:	fa 27 00 f9	str	x26, [sp, #72]
10000a840:	e0 b3 03 6d	stp	d0, d12, [sp, #56]
10000a844:	ef 87 02 6d	stp	d15, d1, [sp, #40]
10000a848:	ee 13 00 fd	str	d14, [sp, #32]
10000a84c:	e9 2b 01 a9	stp	x9, x10, [sp, #16]
10000a850:	81 63 05 70	adr	x1, #44147 ; literal pool for: "%s%-32s%s %-5d  %-7.2f   %-7.2f   [%-9.2f] %-6.2f %-7.2f [%-7llu] %-7.2f [%-7llu]  %-7.2f [%-7llu] %-7.2f [%-7llu] %s     "
10000a854:	1f 20 03 d5	nop
10000a858:	a9 07 03 d1	sub	x9, x29, #193
10000a85c:	e8 27 00 a9	stp	x8, x9, [sp]
10000a860:	f6 00 00 14	b	0x10000ac38
10000a864:	28 1d 41 39	ldrb	w8, [x9, #71]
10000a868:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a86c:	68 2f 00 34	cbz	w8, 0x10000ae58
10000a870:	68 46 40 b8	ldr	w8, [x19], #4
10000a874:	e8 4f 00 a9	stp	x8, x19, [sp]
10000a878:	81 5a 05 30	adr	x1, #43857 ; literal pool for: "<dict>\n<key>pid</key><integer>%d</integer>\n<key>name</key><string>%s</string>\n<key>invalid</key><true/>\n</dict>\n"
10000a87c:	1f 20 03 d5	nop
10000a880:	18 1d 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000a884:	61 01 00 14	b	0x10000ae08
10000a888:	88 42 60 1e	fmov	d8, d20
10000a88c:	f3 cb 0c 6d	stp	d19, d18, [sp, #200]
10000a890:	f1 ff 0d 6d	stp	d17, d31, [sp, #216]
10000a894:	fd e3 0e 6d	stp	d29, d24, [sp, #232]
10000a898:	f9 eb 0f 6d	stp	d25, d26, [sp, #248]
10000a89c:	fb 87 00 fd	str	d27, [sp, #264]
10000a8a0:	e5 93 0a 6d	stp	d5, d4, [sp, #168]
10000a8a4:	e3 8b 0b 6d	stp	d3, d2, [sp, #184]
10000a8a8:	a1 5b 30 6d	stp	d1, d22, [x29, #-256]
10000a8ac:	b5 73 31 6d	stp	d21, d28, [x29, #-240]
10000a8b0:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a8b4:	68 02 80 b9	ldrsw	x8, [x19]
10000a8b8:	69 12 00 91	add	x9, x19, #4
10000a8bc:	6a ce 40 f9	ldr	x10, [x19, #408]
10000a8c0:	0b 00 79 9e	fcvtzu	x11, d0
10000a8c4:	4c 01 79 9e	fcvtzu	x12, d10
10000a8c8:	ee 17 00 fd	str	d14, [sp, #40]
10000a8cc:	eb b3 01 a9	stp	x11, x12, [sp, #24]
10000a8d0:	e9 ab 00 a9	stp	x9, x10, [sp, #8]
10000a8d4:	e8 03 00 f9	str	x8, [sp]
10000a8d8:	e1 68 05 10	adr	x1, #44316 ; literal pool for: "<dict>\n<key>pid</key><integer>%lld</integer>\n<key>name</key><string>%s</string>\n<key>started_abstime_ns</key><integer>%llu</integer>\n<key>interval_ns</key><integer>%llu</integer>\n<key>cputime_ns</key><integer>%llu</integer>\n<key>cputime_ms_per_s</key><real>%g</real>\n"
10000a8dc:	1f 20 03 d5	nop
10000a8e0:	00 1d 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000a8e4:	a8 02 40 39	ldrb	w8, [x21]
10000a8e8:	c8 00 00 35	cbnz	w8, 0x10000a900
10000a8ec:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a8f0:	ef 03 00 fd	str	d15, [sp]
10000a8f4:	61 40 05 30	adr	x1, #43021 ; literal pool for: "<key>cputime_sample_ms_per_s</key><real>%g</real>\n"
10000a8f8:	1f 20 03 d5	nop
10000a8fc:	f9 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000a900:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a904:	68 82 46 39	ldrb	w8, [x19, #416]
10000a908:	e9 81 05 50	adr	x9, #45118 ; literal pool for: "<key>is_dead</key><true/>"
10000a90c:	1f 20 03 d5	nop
10000a910:	6a c8 04 50	adr	x10, #39182 ; literal pool for: ""
10000a914:	1f 20 03 d5	nop
10000a918:	1f 01 00 71	cmp	w8, #0
10000a91c:	48 01 89 9a	csel	x8, x10, x9, eq
10000a920:	eb 27 00 fd	str	d11, [sp, #72]
10000a924:	fc 23 00 f9	str	x28, [sp, #64]
10000a928:	ec 1f 00 fd	str	d12, [sp, #56]
10000a92c:	e8 eb 02 a9	stp	x8, x26, [sp, #40]
10000a930:	ed 13 00 fd	str	d13, [sp, #32]
10000a934:	fb 0f 00 f9	str	x27, [sp, #24]
10000a938:	e8 0b 00 fd	str	d8, [sp, #16]
10000a93c:	21 6e 05 10	adr	x1, #44484 ; literal pool for: "<key>cputime_userland_ratio</key><real>%g</real>\n<key>intr_wakeups</key><integer>%llu</integer>\n<key>intr_wakeups_per_s</key><real>%g</real>\n<key>idle_wakeups</key><integer>%llu</integer>\n<key>idle_wakeups_per_s</key><real>%g</real>\n%s<key>timer_wakeups</key>\n<array>\n<dict>\n  <key>interval_ns</key><integer>2000000</integer>\n  <key>wakeups</key><integer>%llu</integer>\n  <key>wakeups_per_s</key><real>%g</real>\n</dict>\n<dict>\n  <key>interval_ns</key><integer>5000000</integer>\n  <key>wakeups</key><integer>%llu</integer>\n  <key>wakeups_per_s</key><real>%g</real>\n</dict>\n</array>\n"
10000a940:	1f 20 03 d5	nop
10000a944:	f9 07 00 f9	str	x25, [sp, #8]
10000a948:	a0 03 53 fc	ldur	d0, [x29, #-208]
10000a94c:	e0 03 00 fd	str	d0, [sp]
10000a950:	e4 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000a954:	68 02 40 b9	ldr	w8, [x19]
10000a958:	1f 05 00 31	cmn	w8, #1
10000a95c:	e0 07 00 54	b.eq	0x10000aa58
10000a960:	60 06 50 6d	ldp	d0, d1, [x19, #256]
10000a964:	00 d8 61 7e	ucvtf	d0, d0
10000a968:	a2 06 40 fd	ldr	d2, [x21, #8]
10000a96c:	40 08 60 1e	fmul	d0, d2, d0
10000a970:	08 00 79 9e	fcvtzu	x8, d0
10000a974:	20 d8 61 7e	ucvtf	d0, d1
10000a978:	40 08 60 1e	fmul	d0, d2, d0
10000a97c:	09 00 79 9e	fcvtzu	x9, d0
10000a980:	60 06 51 6d	ldp	d0, d1, [x19, #272]
10000a984:	00 d8 61 7e	ucvtf	d0, d0
10000a988:	40 08 60 1e	fmul	d0, d2, d0
10000a98c:	0a 00 79 9e	fcvtzu	x10, d0
10000a990:	20 d8 61 7e	ucvtf	d0, d1
10000a994:	40 08 60 1e	fmul	d0, d2, d0
10000a998:	0b 00 79 9e	fcvtzu	x11, d0
10000a99c:	60 06 52 6d	ldp	d0, d1, [x19, #288]
10000a9a0:	00 d8 61 7e	ucvtf	d0, d0
10000a9a4:	40 08 60 1e	fmul	d0, d2, d0
10000a9a8:	0c 00 79 9e	fcvtzu	x12, d0
10000a9ac:	a0 22 40 f9	ldr	x0, [x21, #64]
10000a9b0:	6d ba 53 a9	ldp	x13, x14, [x19, #312]
10000a9b4:	20 d8 61 7e	ucvtf	d0, d1
10000a9b8:	40 08 60 1e	fmul	d0, d2, d0
10000a9bc:	0f 00 79 9e	fcvtzu	x15, d0
10000a9c0:	70 a6 40 f9	ldr	x16, [x19, #328]
10000a9c4:	60 9a 40 fd	ldr	d0, [x19, #304]
10000a9c8:	00 d8 61 7e	ucvtf	d0, d0
10000a9cc:	40 08 60 1e	fmul	d0, d2, d0
10000a9d0:	11 00 79 9e	fcvtzu	x17, d0
10000a9d4:	a0 83 52 fc	ldur	d0, [x29, #-216]
10000a9d8:	e0 4f 00 fd	str	d0, [sp, #152]
10000a9dc:	e0 73 40 fd	ldr	d0, [sp, #224]
10000a9e0:	e0 47 00 fd	str	d0, [sp, #136]
10000a9e4:	e0 77 40 fd	ldr	d0, [sp, #232]
10000a9e8:	e0 3f 00 fd	str	d0, [sp, #120]
10000a9ec:	e0 7b 40 fd	ldr	d0, [sp, #240]
10000a9f0:	e0 37 00 fd	str	d0, [sp, #104]
10000a9f4:	e0 7f 40 fd	ldr	d0, [sp, #248]
10000a9f8:	e0 2f 00 fd	str	d0, [sp, #88]
10000a9fc:	e0 83 40 fd	ldr	d0, [sp, #256]
10000aa00:	e0 27 00 fd	str	d0, [sp, #72]
10000aa04:	e0 87 40 fd	ldr	d0, [sp, #264]
10000aa08:	e0 1f 00 fd	str	d0, [sp, #56]
10000aa0c:	e0 67 40 fd	ldr	d0, [sp, #200]
10000aa10:	e0 17 00 fd	str	d0, [sp, #40]
10000aa14:	f0 13 00 f9	str	x16, [sp, #32]
10000aa18:	e0 6b 40 fd	ldr	d0, [sp, #208]
10000aa1c:	e0 0f 00 fd	str	d0, [sp, #24]
10000aa20:	ee 0b 00 f9	str	x14, [sp, #16]
10000aa24:	e0 6f 40 fd	ldr	d0, [sp, #216]
10000aa28:	e0 07 00 fd	str	d0, [sp, #8]
10000aa2c:	ed 03 00 f9	str	x13, [sp]
10000aa30:	f1 4b 00 f9	str	x17, [sp, #144]
10000aa34:	ef 43 00 f9	str	x15, [sp, #128]
10000aa38:	ec 3b 00 f9	str	x12, [sp, #112]
10000aa3c:	eb 33 00 f9	str	x11, [sp, #96]
10000aa40:	ea 2b 00 f9	str	x10, [sp, #80]
10000aa44:	e1 78 05 10	adr	x1, #44828 ; literal pool for: "<key>diskio_bytesread</key><integer>%llu</integer>\n<key>diskio_bytesread_per_s</key><real>%g</real>\n<key>diskio_byteswritten</key><integer>%llu</integer>\n<key>diskio_byteswritten_per_s</key><real>%g</real>\n<key>pageins</key><integer>%llu</integer>\n<key>pageins_per_s</key><real>%g</real>\n<key>qos_disabled_ns</key><integer>%llu</integer>\n<key>qos_disabled_ms_per_s</key><real>%g</real>\n<key>qos_maintenance_ns</key><integer>%llu</integer>\n<key>qos_maintenance_ms_per_s</key><real>%g</real>\n<key>qos_background_ns</key><integer>%llu</integer>\n<key>qos_background_ms_per_s</key><real>%g</real>\n<key>qos_utility_ns</key><integer>%llu</integer>\n<key>qos_utility_ms_per_s</key><real>%g</real>\n<key>qos_default_ns</key><integer>%llu</integer>\n<key>qos_default_ms_per_s</key><real>%g</real>\n<key>qos_user_initiated_ns</key><integer>%llu</integer>\n<key>qos_user_initiated_ms_per_s</key><real>%g</real>\n<key>qos_user_interactive_ns</key><integer>%llu</integer>\n<key>qos_user_interactive_ms_per_s</key><real>%g</real>\n"
10000aa48:	1f 20 03 d5	nop
10000aa4c:	e9 23 00 f9	str	x9, [sp, #64]
10000aa50:	e8 1b 00 f9	str	x8, [sp, #48]
10000aa54:	a3 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000aa58:	c8 ee 40 39	ldrb	w8, [x22, #59]
10000aa5c:	28 01 00 34	cbz	w8, 0x10000aa80
10000aa60:	a0 22 40 f9	ldr	x0, [x21, #64]
10000aa64:	68 76 40 f9	ldr	x8, [x19, #232]
10000aa68:	a0 03 52 fc	ldur	d0, [x29, #-224]
10000aa6c:	e0 07 00 fd	str	d0, [sp, #8]
10000aa70:	e8 03 00 f9	str	x8, [sp]
10000aa74:	e1 96 05 30	adr	x1, #45789 ; literal pool for: "<key>sfi_ns</key><integer>%llu</integer>\n<key>sfi_ms_per_s</key><real>%g</real>\n"
10000aa78:	1f 20 03 d5	nop
10000aa7c:	99 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000aa80:	c8 e6 40 39	ldrb	w8, [x22, #57]
10000aa84:	c8 00 00 34	cbz	w8, 0x10000aa9c
10000aa88:	a0 22 40 f9	ldr	x0, [x21, #64]
10000aa8c:	f8 5f 00 a9	stp	x24, x23, [sp]
10000aa90:	81 98 05 50	adr	x1, #45842 ; literal pool for: "<key>qos</key>\n<dict>\n<key>throughput_tier</key><integer>%lld</integer>\n<key>latency_tier</key><integer>%lld</integer>\n</dict>\n"
10000aa94:	1f 20 03 d5	nop
10000aa98:	92 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000aa9c:	c8 f6 40 39	ldrb	w8, [x22, #61]
10000aaa0:	08 01 00 34	cbz	w8, 0x10000aac0
10000aaa4:	a0 22 40 f9	ldr	x0, [x21, #64]
10000aaa8:	68 1a 42 b9	ldr	w8, [x19, #536]
10000aaac:	69 1e 42 b9	ldr	w9, [x19, #540]
10000aab0:	e8 27 00 a9	stp	x8, x9, [sp]
10000aab4:	61 9b 05 50	adr	x1, #45934 ; literal pool for: "<key>responsible_pid</key><integer>%d</integer>\n<key>parent_pid</key><integer>%d</integer>\n"
10000aab8:	1f 20 03 d5	nop
10000aabc:	89 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000aac0:	c8 2e 41 39	ldrb	w8, [x22, #75]
10000aac4:	68 02 00 34	cbz	w8, 0x10000ab10
10000aac8:	a0 22 40 f9	ldr	x0, [x21, #64]
10000aacc:	60 be 40 fd	ldr	d0, [x19, #376]
10000aad0:	00 d8 61 7e	ucvtf	d0, d0
10000aad4:	a1 06 40 fd	ldr	d1, [x21, #8]
10000aad8:	20 08 60 1e	fmul	d0, d1, d0
10000aadc:	08 00 79 9e	fcvtzu	x8, d0
10000aae0:	69 c2 40 f9	ldr	x9, [x19, #384]
10000aae4:	a0 03 50 fc	ldur	d0, [x29, #-256]
10000aae8:	e0 13 00 fd	str	d0, [sp, #32]
10000aaec:	e9 0f 00 f9	str	x9, [sp, #24]
10000aaf0:	a0 83 50 fc	ldur	d0, [x29, #-248]
10000aaf4:	e0 0b 00 fd	str	d0, [sp, #16]
10000aaf8:	a0 03 51 fc	ldur	d0, [x29, #-240]
10000aafc:	e0 07 00 fd	str	d0, [sp, #8]
10000ab00:	e8 03 00 f9	str	x8, [sp]
10000ab04:	c1 9b 05 50	adr	x1, #45946 ; literal pool for: "<key>ptime_ns</key><integer>%llu</integer>\n<key>ptime_ms_per_s</key><real>%g</real>\n<key>ptime_ratio</key><real>%g</real>\n<key>epswitches</key><integer>%llu</integer>\n<key>epswitches_per_s</key><real>%g</real>\n"
10000ab08:	1f 20 03 d5	nop
10000ab0c:	75 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ab10:	c8 0a 41 39	ldrb	w8, [x22, #66]
10000ab14:	c9 16 41 39	ldrb	w9, [x22, #69]
10000ab18:	08 01 09 2a	orr	w8, w8, w9
10000ab1c:	68 02 00 34	cbz	w8, 0x10000ab68
10000ab20:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ab24:	68 26 4c a9	ldp	x8, x9, [x19, #192]
10000ab28:	6a 2e 4d a9	ldp	x10, x11, [x19, #208]
10000ab2c:	e0 57 40 fd	ldr	d0, [sp, #168]
10000ab30:	e0 1f 00 fd	str	d0, [sp, #56]
10000ab34:	eb 1b 00 f9	str	x11, [sp, #48]
10000ab38:	e0 5b 40 fd	ldr	d0, [sp, #176]
10000ab3c:	e0 17 00 fd	str	d0, [sp, #40]
10000ab40:	ea 13 00 f9	str	x10, [sp, #32]
10000ab44:	e0 5f 40 fd	ldr	d0, [sp, #184]
10000ab48:	e0 0f 00 fd	str	d0, [sp, #24]
10000ab4c:	e9 0b 00 f9	str	x9, [sp, #16]
10000ab50:	01 a0 05 30	adr	x1, #46081 ; literal pool for: "<key>packets_received</key><integer>%llu</integer>\n<key>packets_received_per_s</key><real>%g</real>\n<key>packets_sent</key><integer>%llu</integer>\n<key>packets_sent_per_s</key><real>%g</real>\n<key>bytes_received</key><integer>%llu</integer>\n<key>bytes_received_per_s</key><real>%g</real>\n<key>bytes_sent</key><integer>%llu</integer>\n<key>bytes_sent_per_s</key><real>%g</real>\n"
10000ab54:	1f 20 03 d5	nop
10000ab58:	e0 63 40 fd	ldr	d0, [sp, #192]
10000ab5c:	e0 07 00 fd	str	d0, [sp, #8]
10000ab60:	e8 03 00 f9	str	x8, [sp]
10000ab64:	5f 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ab68:	68 aa 40 f9	ldr	x8, [x19, #336]
10000ab6c:	08 01 00 b4	cbz	x8, 0x10000ab8c
10000ab70:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ab74:	a0 83 51 fc	ldur	d0, [x29, #-232]
10000ab78:	e0 07 00 fd	str	d0, [sp, #8]
10000ab7c:	e8 03 00 f9	str	x8, [sp]
10000ab80:	c1 39 05 70	adr	x1, #42811 ; literal pool for: "<key>gputime_ns</key><integer>%llu</integer>\n<key>gputime_ms_per_s</key><real>%g</real>\n"
10000ab84:	1f 20 03 d5	nop
10000ab88:	56 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ab8c:	b4 22 40 f9	ldr	x20, [x21, #64]
10000ab90:	e0 03 13 aa	mov	x0, x19
10000ab94:	c7 1c 00 94	bl	0x100011eb0 ; symbol stub for: _pm_energy_impact
10000ab98:	08 40 60 1e	fmov	d8, d0
10000ab9c:	e0 03 13 aa	mov	x0, x19
10000aba0:	c4 1c 00 94	bl	0x100011eb0 ; symbol stub for: _pm_energy_impact
10000aba4:	00 18 69 1e	fdiv	d0, d0, d9
10000aba8:	e8 03 00 6d	stp	d8, d0, [sp]
10000abac:	41 3b 05 10	adr	x1, #42856 ; literal pool for: "<key>energy_impact</key><real>%g</real>\n<key>energy_impact_per_s</key><real>%g</real>\n"
10000abb0:	1f 20 03 d5	nop
10000abb4:	e0 03 14 aa	mov	x0, x20
10000abb8:	4a 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000abbc:	a1 22 40 f9	ldr	x1, [x21, #64]
10000abc0:	00 6c 04 50	adr	x0, #36226 ; literal pool for: "</dict>\n"
10000abc4:	1f 20 03 d5	nop
10000abc8:	8f 00 00 14	b	0x10000ae04
10000abcc:	ee 13 00 fd	str	d14, [sp, #32]
10000abd0:	e9 2b 01 a9	stp	x9, x10, [sp, #16]
10000abd4:	a9 07 03 d1	sub	x9, x29, #193
10000abd8:	e8 27 00 a9	stp	x8, x9, [sp]
10000abdc:	a1 44 05 10	adr	x1, #43156 ; literal pool for: "%s%-32s%s %-5d  %-7.2f"
10000abe0:	1f 20 03 d5	nop
10000abe4:	3f 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000abe8:	c8 1a 41 39	ldrb	w8, [x22, #70]
10000abec:	08 01 00 34	cbz	w8, 0x10000ac0c
10000abf0:	a8 02 40 39	ldrb	w8, [x21]
10000abf4:	c8 00 00 35	cbnz	w8, 0x10000ac0c
10000abf8:	a0 22 40 f9	ldr	x0, [x21, #64]
10000abfc:	ef 03 00 fd	str	d15, [sp]
10000ac00:	c1 1a 05 30	adr	x1, #41817 ; literal pool for: "   %-7.2f "
10000ac04:	1f 20 03 d5	nop
10000ac08:	36 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ac0c:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ac10:	28 0b e8 d2	mov	x8, #4636737291354636288
10000ac14:	00 01 67 9e	fmov	d0, x8
10000ac18:	a1 03 53 fc	ldur	d1, [x29, #-208]
10000ac1c:	20 08 60 1e	fmul	d0, d1, d0
10000ac20:	e1 53 40 fd	ldr	d1, [sp, #160]
10000ac24:	e1 b7 01 6d	stp	d1, d13, [sp, #24]
10000ac28:	ec af 00 6d	stp	d12, d11, [sp, #8]
10000ac2c:	e0 03 00 fd	str	d0, [sp]
10000ac30:	a1 42 05 70	adr	x1, #43095 ; literal pool for: "   %-6.2f %-7.2f %-7.2f            %-7.2f %-7.2f           "
10000ac34:	1f 20 03 d5	nop
10000ac38:	2a 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ac3c:	c8 ee 40 39	ldrb	w8, [x22, #59]
10000ac40:	e8 00 00 34	cbz	w8, 0x10000ac5c
10000ac44:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ac48:	a0 03 52 fc	ldur	d0, [x29, #-224]
10000ac4c:	e0 03 00 fd	str	d0, [sp]
10000ac50:	81 47 05 50	adr	x1, #43250 ; literal pool for: " %-7.2f   "
10000ac54:	1f 20 03 d5	nop
10000ac58:	22 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ac5c:	c8 e6 40 39	ldrb	w8, [x22, #57]
10000ac60:	c8 00 00 34	cbz	w8, 0x10000ac78
10000ac64:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ac68:	f7 63 00 a9	stp	x23, x24, [sp]
10000ac6c:	01 47 05 30	adr	x1, #43233 ; literal pool for: "% lld/% lld      "
10000ac70:	1f 20 03 d5	nop
10000ac74:	1b 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ac78:	c8 f6 40 39	ldrb	w8, [x22, #61]
10000ac7c:	08 01 00 34	cbz	w8, 0x10000ac9c
10000ac80:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ac84:	68 1a 42 b9	ldr	w8, [x19, #536]
10000ac88:	69 1e 42 b9	ldr	w9, [x19, #540]
10000ac8c:	e8 27 00 a9	stp	x8, x9, [sp]
10000ac90:	61 46 05 70	adr	x1, #43215 ; literal pool for: "%-5d %-5d"
10000ac94:	1f 20 03 d5	nop
10000ac98:	12 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ac9c:	c8 06 41 39	ldrb	w8, [x22, #65]
10000aca0:	28 02 00 34	cbz	w8, 0x10000ace4
10000aca4:	68 02 40 b9	ldr	w8, [x19]
10000aca8:	a0 22 40 f9	ldr	x0, [x21, #64]
10000acac:	1f 05 00 31	cmn	w8, #1
10000acb0:	20 01 00 54	b.eq	0x10000acd4
10000acb4:	e1 67 40 fd	ldr	d1, [sp, #200]
10000acb8:	e0 6b 40 fd	ldr	d0, [sp, #208]
10000acbc:	e0 87 00 6d	stp	d0, d1, [sp, #8]
10000acc0:	e0 6f 40 fd	ldr	d0, [sp, #216]
10000acc4:	e0 03 00 fd	str	d0, [sp]
10000acc8:	01 45 05 30	adr	x1, #43169 ; literal pool for: "%10.1f %14.1f %8.1f  "
10000accc:	1f 20 03 d5	nop
10000acd0:	04 00 00 14	b	0x10000ace0
10000acd4:	f4 03 00 f9	str	x20, [sp]
10000acd8:	c1 1a 05 10	adr	x1, #41816 ; literal pool for: "%36s"
10000acdc:	1f 20 03 d5	nop
10000ace0:	00 1c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ace4:	c8 0a 41 39	ldrb	w8, [x22, #66]
10000ace8:	48 02 00 34	cbz	w8, 0x10000ad30
10000acec:	68 02 40 b9	ldr	w8, [x19]
10000acf0:	a0 22 40 f9	ldr	x0, [x21, #64]
10000acf4:	1f 05 00 31	cmn	w8, #1
10000acf8:	40 01 00 54	b.eq	0x10000ad20
10000acfc:	e1 57 40 fd	ldr	d1, [sp, #168]
10000ad00:	e0 5b 40 fd	ldr	d0, [sp, #176]
10000ad04:	e0 07 01 6d	stp	d0, d1, [sp, #16]
10000ad08:	e1 5f 40 fd	ldr	d1, [sp, #184]
10000ad0c:	e0 63 40 fd	ldr	d0, [sp, #192]
10000ad10:	e0 07 00 6d	stp	d0, d1, [sp]
10000ad14:	41 43 05 70	adr	x1, #43115 ; literal pool for: "%10.1f %10.1f %10.1f %10.1f  "
10000ad18:	1f 20 03 d5	nop
10000ad1c:	04 00 00 14	b	0x10000ad2c
10000ad20:	f4 03 00 f9	str	x20, [sp]
10000ad24:	81 18 05 30	adr	x1, #41745 ; literal pool for: "%45s"
10000ad28:	1f 20 03 d5	nop
10000ad2c:	ed 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ad30:	c8 0e 41 39	ldrb	w8, [x22, #67]
10000ad34:	e8 00 00 34	cbz	w8, 0x10000ad50
10000ad38:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ad3c:	a0 83 51 fc	ldur	d0, [x29, #-232]
10000ad40:	e0 03 00 fd	str	d0, [sp]
10000ad44:	a1 17 05 50	adr	x1, #41718 ; literal pool for: "%-7.2f   "
10000ad48:	1f 20 03 d5	nop
10000ad4c:	e5 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ad50:	c8 12 41 39	ldrb	w8, [x22, #68]
10000ad54:	08 02 00 34	cbz	w8, 0x10000ad94
10000ad58:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ad5c:	a1 83 52 fc	ldur	d1, [x29, #-216]
10000ad60:	e0 73 40 fd	ldr	d0, [sp, #224]
10000ad64:	e0 87 02 6d	stp	d0, d1, [sp, #40]
10000ad68:	e1 77 40 fd	ldr	d1, [sp, #232]
10000ad6c:	e0 7b 40 fd	ldr	d0, [sp, #240]
10000ad70:	e0 87 01 6d	stp	d0, d1, [sp, #24]
10000ad74:	e1 7f 40 fd	ldr	d1, [sp, #248]
10000ad78:	21 41 05 30	adr	x1, #43045 ; literal pool for: "           %-7.2f %-7.2f %-7.2f %-7.2f %-7.2f %-7.2f %-7.2f "
10000ad7c:	1f 20 03 d5	nop
10000ad80:	e0 83 40 fd	ldr	d0, [sp, #256]
10000ad84:	e0 87 00 6d	stp	d0, d1, [sp, #8]
10000ad88:	e0 87 40 fd	ldr	d0, [sp, #264]
10000ad8c:	e0 03 00 fd	str	d0, [sp]
10000ad90:	d4 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ad94:	c8 2e 41 39	ldrb	w8, [x22, #75]
10000ad98:	a8 01 00 34	cbz	w8, 0x10000adcc
10000ad9c:	a0 22 40 f9	ldr	x0, [x21, #64]
10000ada0:	28 0b e8 d2	mov	x8, #4636737291354636288
10000ada4:	00 01 67 9e	fmov	d0, x8
10000ada8:	a1 83 50 fc	ldur	d1, [x29, #-248]
10000adac:	20 08 60 1e	fmul	d0, d1, d0
10000adb0:	a1 03 50 fc	ldur	d1, [x29, #-256]
10000adb4:	e0 87 00 6d	stp	d0, d1, [sp, #8]
10000adb8:	a0 03 51 fc	ldur	d0, [x29, #-240]
10000adbc:	e0 03 00 fd	str	d0, [sp]
10000adc0:	c1 40 05 50	adr	x1, #43034 ; literal pool for: "%-7.2f   %-6.2f %-7.2f   "
10000adc4:	1f 20 03 d5	nop
10000adc8:	c6 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000adcc:	c8 16 41 39	ldrb	w8, [x22, #69]
10000add0:	48 01 00 34	cbz	w8, 0x10000adf8
10000add4:	b4 22 40 f9	ldr	x20, [x21, #64]
10000add8:	e0 03 13 aa	mov	x0, x19
10000addc:	35 1c 00 94	bl	0x100011eb0 ; symbol stub for: _pm_energy_impact
10000ade0:	00 18 69 1e	fdiv	d0, d0, d9
10000ade4:	e0 03 00 fd	str	d0, [sp]
10000ade8:	41 13 05 70	adr	x1, #41579 ; literal pool for: "%-7.2f     "
10000adec:	1f 20 03 d5	nop
10000adf0:	e0 03 14 aa	mov	x0, x20
10000adf4:	bb 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000adf8:	a1 22 40 f9	ldr	x1, [x21, #64]
10000adfc:	80 df 04 10	adr	x0, #39920 ; literal pool for: "\n"
10000ae00:	1f 20 03 d5	nop
10000ae04:	bf 1b 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000ae08:	a8 03 56 f8	ldur	x8, [x29, #-160]
10000ae0c:	1f 20 03 d5	nop
10000ae10:	49 b2 06 58	ldr	x9, #54856 ; literal pool symbol address: ___stack_chk_guard
10000ae14:	29 01 40 f9	ldr	x9, [x9]
10000ae18:	3f 01 08 eb	cmp	x9, x8
10000ae1c:	c1 01 00 54	b.ne	0x10000ae54
10000ae20:	ff 03 06 91	add	sp, sp, #384
10000ae24:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
10000ae28:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
10000ae2c:	f6 57 47 a9	ldp	x22, x21, [sp, #112]
10000ae30:	f8 5f 46 a9	ldp	x24, x23, [sp, #96]
10000ae34:	fa 67 45 a9	ldp	x26, x25, [sp, #80]
10000ae38:	fc 6f 44 a9	ldp	x28, x27, [sp, #64]
10000ae3c:	e9 23 43 6d	ldp	d9, d8, [sp, #48]
10000ae40:	eb 2b 42 6d	ldp	d11, d10, [sp, #32]
10000ae44:	ed 33 41 6d	ldp	d13, d12, [sp, #16]
10000ae48:	ef 3b ca 6c	ldp	d15, d14, [sp], #160
10000ae4c:	ff 0f 5f d6	retab
10000ae50:	ac 19 00 94	bl	0x100011500
10000ae54:	6b 1b 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000ae58:	68 12 00 91	add	x8, x19, #4
10000ae5c:	e8 03 00 f9	str	x8, [sp]
10000ae60:	a1 2a 05 30	adr	x1, #42325 ; literal pool for: "task %s is invalid\n"
10000ae64:	1f 20 03 d5	nop
10000ae68:	9e 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ae6c:	71 1b 00 94	bl	0x100011c30 ; symbol stub for: _abort
10000ae70:	08 10 40 f9	ldr	x8, [x0, #32]
10000ae74:	49 d4 40 f9	ldr	x9, [x2, #424]
10000ae78:	1f 01 09 eb	cmp	x8, x9
10000ae7c:	e8 07 9f 1a	cset	w8, ne
10000ae80:	00 21 9f 5a	csinv	w0, w8, wzr, hs
10000ae84:	c0 03 5f d6	ret
10000ae88:	00 d8 40 fd	ldr	d0, [x0, #432]
10000ae8c:	21 d8 40 fd	ldr	d1, [x1, #432]
10000ae90:	00 20 61 1e	fcmp	d0, d1
10000ae94:	e8 d3 9f 5a	csetm	w8, gt
10000ae98:	00 55 9f 1a	csinc	w0, w8, wzr, pl
10000ae9c:	c0 03 5f d6	ret
10000aea0:	7f 23 03 d5	pacibsp
10000aea4:	ff 83 02 d1	sub	sp, sp, #160
10000aea8:	f4 4f 08 a9	stp	x20, x19, [sp, #128]
10000aeac:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
10000aeb0:	fd 43 02 91	add	x29, sp, #144
10000aeb4:	f3 03 00 aa	mov	x19, x0
10000aeb8:	ff 3b 00 f9	str	xzr, [sp, #112]
10000aebc:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000aec0:	e0 83 02 ad	stp	q0, q0, [sp, #80]
10000aec4:	e0 83 01 ad	stp	q0, q0, [sp, #48]
10000aec8:	e0 83 00 ad	stp	q0, q0, [sp, #16]
10000aecc:	48 03 80 52	mov	w8, #26
10000aed0:	e8 0f 00 b9	str	w8, [sp, #12]
10000aed4:	01 44 80 52	mov	w1, #544
10000aed8:	5e 1b 00 94	bl	0x100011c50 ; symbol stub for: _bzero
10000aedc:	1f 20 03 d5	nop
10000aee0:	80 eb 08 18	ldr	w0, 0x10001cc50
10000aee4:	e2 43 00 91	add	x2, sp, #16
10000aee8:	e3 33 00 91	add	x3, sp, #12
10000aeec:	c1 00 80 52	mov	w1, #6
10000aef0:	a8 1b 00 94	bl	0x100011d90 ; symbol stub for: _host_statistics
10000aef4:	40 01 00 34	cbz	w0, 0x10000af1c
10000aef8:	1f 20 03 d5	nop
10000aefc:	28 ab 06 58	ldr	x8, #54628 ; literal pool symbol address: ___stderrp
10000af00:	08 01 40 f9	ldr	x8, [x8]
10000af04:	e0 03 00 f9	str	x0, [sp]
10000af08:	e1 95 05 10	adr	x1, #45756 ; literal pool for: "host_statistics(HOST_EXPIRED_TASK_INFO) failed %u\n"
10000af0c:	1f 20 03 d5	nop
10000af10:	e0 03 08 aa	mov	x0, x8
10000af14:	73 1b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000af18:	1d 00 00 14	b	0x10000af8c
10000af1c:	e0 87 40 ad	ldp	q0, q1, [sp, #16]
10000af20:	60 42 88 3c	stur	q0, [x19, #132]
10000af24:	61 42 89 3c	stur	q1, [x19, #148]
10000af28:	e0 0f c0 3d	ldr	q0, [sp, #48]
10000af2c:	60 42 8a 3c	stur	q0, [x19, #164]
10000af30:	e8 0f 40 b9	ldr	w8, [sp, #12]
10000af34:	1f 69 00 71	cmp	w8, #26
10000af38:	e3 00 00 54	b.lo	0x10000af54
10000af3c:	e8 23 40 f9	ldr	x8, [sp, #64]
10000af40:	68 aa 00 f9	str	x8, [x19, #336]
10000af44:	e0 1b c0 3d	ldr	q0, [sp, #96]
10000af48:	60 5e 80 3d	str	q0, [x19, #368]
10000af4c:	e8 3b 40 f9	ldr	x8, [sp, #112]
10000af50:	68 c2 00 f9	str	x8, [x19, #384]
10000af54:	08 00 80 12	mov	w8, #-1
10000af58:	e0 03 13 aa	mov	x0, x19
10000af5c:	08 44 00 b8	str	w8, [x0], #4
10000af60:	a1 94 05 70	adr	x1, #45719 ; literal pool for: "DEAD_TASKS"
10000af64:	1f 20 03 d5	nop
10000af68:	62 01 80 52	mov	w2, #11
10000af6c:	03 10 80 52	mov	w3, #128
10000af70:	2c 1b 00 94	bl	0x100011c20 ; symbol stub for: ___strlcpy_chk
10000af74:	e8 8a 08 10	adr	x8, #69980
10000af78:	1f 20 03 d5	nop
10000af7c:	08 01 41 39	ldrb	w8, [x8, #64]
10000af80:	68 00 00 34	cbz	w8, 0x10000af8c
10000af84:	08 00 80 92	mov	x8, #-1
10000af88:	68 d6 00 f9	str	x8, [x19, #424]
10000af8c:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
10000af90:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
10000af94:	ff 83 02 91	add	sp, sp, #160
10000af98:	ff 0f 5f d6	retab
10000af9c:	28 00 40 f9	ldr	x8, [x1]
10000afa0:	49 00 40 f9	ldr	x9, [x2]
10000afa4:	1f 01 09 eb	cmp	x8, x9
10000afa8:	e8 07 9f 1a	cset	w8, ne
10000afac:	00 21 9f 5a	csinv	w0, w8, wzr, hs
10000afb0:	c0 03 5f d6	ret
10000afb4:	7f 23 03 d5	pacibsp
10000afb8:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000afbc:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000afc0:	fd 43 00 91	add	x29, sp, #16
10000afc4:	f3 03 00 aa	mov	x19, x0
10000afc8:	09 00 40 f9	ldr	x9, [x0]
10000afcc:	28 d4 40 f9	ldr	x8, [x1, #424]
10000afd0:	89 00 00 b4	cbz	x9, 0x10000afe0
10000afd4:	3f 01 08 eb	cmp	x9, x8
10000afd8:	60 00 00 54	b.eq	0x10000afe4
10000afdc:	54 19 00 94	bl	0x10001152c
10000afe0:	68 02 00 f9	str	x8, [x19]
10000afe4:	68 32 04 91	add	x8, x19, #268
10000afe8:	69 12 41 f9	ldr	x9, [x19, #544]
10000afec:	29 05 00 91	add	x9, x9, #1
10000aff0:	69 12 01 f9	str	x9, [x19, #544]
10000aff4:	29 40 48 f8	ldur	x9, [x1, #132]
10000aff8:	2a c0 48 f8	ldur	x10, [x1, #140]
10000affc:	0b 01 40 f9	ldr	x11, [x8]
10000b000:	49 01 09 8b	add	x9, x10, x9
10000b004:	29 01 0b 8b	add	x9, x9, x11
10000b008:	09 01 00 f9	str	x9, [x8]
10000b00c:	20 40 c9 3c	ldur	q0, [x1, #148]
10000b010:	01 05 c0 3d	ldr	q1, [x8, #16]
10000b014:	20 84 e0 4e	add.2d	v0, v1, v0
10000b018:	00 05 80 3d	str	q0, [x8, #16]
10000b01c:	28 e0 04 91	add	x8, x1, #312
10000b020:	00 01 c0 3d	ldr	q0, [x8]
10000b024:	61 72 c0 3d	ldr	q1, [x19, #448]
10000b028:	20 84 e0 4e	add.2d	v0, v1, v0
10000b02c:	60 72 80 3d	str	q0, [x19, #448]
10000b030:	28 a8 40 f9	ldr	x8, [x1, #336]
10000b034:	69 ee 40 f9	ldr	x9, [x19, #472]
10000b038:	28 01 08 8b	add	x8, x9, x8
10000b03c:	68 ee 00 f9	str	x8, [x19, #472]
10000b040:	62 00 00 b5	cbnz	x2, 0x10000b04c
10000b044:	5b 1b 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
10000b048:	e2 03 00 aa	mov	x2, x0
10000b04c:	62 0a 01 f9	str	x2, [x19, #528]
10000b050:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000b054:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000b058:	ff 0f 5f d6	retab
10000b05c:	e0 03 01 aa	mov	x0, x1
10000b060:	1f 20 03 d5	nop
10000b064:	23 a3 09 58	ldr	x3, #78948
10000b068:	e1 03 02 aa	mov	x1, x2
10000b06c:	7f 08 1f d6	braaz	x3
10000b070:	1f 20 03 d5	nop
10000b074:	a3 a2 09 58	ldr	x3, #78932
10000b078:	20 20 02 91	add	x0, x1, #136
10000b07c:	41 20 02 91	add	x1, x2, #136
10000b080:	7f 08 1f d6	braaz	x3
10000b084:	08 00 40 b9	ldr	w8, [x0]
10000b088:	29 00 40 b9	ldr	w9, [x1]
10000b08c:	00 01 09 4b	sub	w0, w8, w9
10000b090:	c0 03 5f d6	ret
10000b094:	7f 23 03 d5	pacibsp
10000b098:	fc 6f be a9	stp	x28, x27, [sp, #-32]!
10000b09c:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000b0a0:	fd 43 00 91	add	x29, sp, #16
10000b0a4:	ff c3 08 d1	sub	sp, sp, #560
10000b0a8:	e1 03 00 aa	mov	x1, x0
10000b0ac:	1f 20 03 d5	nop
10000b0b0:	48 9d 06 58	ldr	x8, #54184 ; literal pool symbol address: ___stack_chk_guard
10000b0b4:	08 01 40 f9	ldr	x8, [x8]
10000b0b8:	a8 83 1e f8	stur	x8, [x29, #-24]
10000b0bc:	e0 23 00 91	add	x0, sp, #8
10000b0c0:	02 44 80 52	mov	w2, #544
10000b0c4:	5b 1b 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000b0c8:	00 d9 08 10	adr	x0, #72480
10000b0cc:	1f 20 03 d5	nop
10000b0d0:	b0 fd ff 10	adr	x16, #-76
10000b0d4:	1f 20 03 d5	nop
10000b0d8:	f0 23 c1 da	paciza	x16
10000b0dc:	e2 03 10 aa	mov	x2, x16
10000b0e0:	e1 23 00 91	add	x1, sp, #8
10000b0e4:	f1 12 00 94	bl	0x10000fca8
10000b0e8:	20 01 00 b4	cbz	x0, 0x10000b10c
10000b0ec:	e1 03 00 aa	mov	x1, x0
10000b0f0:	ff 1f 00 39	strb	wzr, [sp, #7]
10000b0f4:	e0 23 00 91	add	x0, sp, #8
10000b0f8:	e2 23 00 91	add	x2, sp, #8
10000b0fc:	e3 1f 00 91	add	x3, sp, #7
10000b100:	84 1b 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000b104:	e8 1f 40 39	ldrb	w8, [sp, #7]
10000b108:	e8 ab 06 39	strb	w8, [sp, #426]
10000b10c:	28 00 80 52	mov	w8, #1
10000b110:	e8 a3 06 39	strb	w8, [sp, #424]
10000b114:	20 d6 08 10	adr	x0, #72388
10000b118:	1f 20 03 d5	nop
10000b11c:	e1 23 00 91	add	x1, sp, #8
10000b120:	b8 12 00 94	bl	0x10000fc00
10000b124:	a8 83 5e f8	ldur	x8, [x29, #-24]
10000b128:	1f 20 03 d5	nop
10000b12c:	69 99 06 58	ldr	x9, #54060 ; literal pool symbol address: ___stack_chk_guard
10000b130:	29 01 40 f9	ldr	x9, [x9]
10000b134:	3f 01 08 eb	cmp	x9, x8
10000b138:	a1 00 00 54	b.ne	0x10000b14c
10000b13c:	ff c3 08 91	add	sp, sp, #560
10000b140:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000b144:	fc 6f c2 a8	ldp	x28, x27, [sp], #32
10000b148:	ff 0f 5f d6	retab
10000b14c:	ad 1a 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000b150:	7f 23 03 d5	pacibsp
10000b154:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000b158:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000b15c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000b160:	fd 83 00 91	add	x29, sp, #32
10000b164:	ff c3 08 d1	sub	sp, sp, #560
10000b168:	f3 03 01 aa	mov	x19, x1
10000b16c:	f4 03 00 aa	mov	x20, x0
10000b170:	f5 23 00 91	add	x21, sp, #8
10000b174:	1f 20 03 d5	nop
10000b178:	08 97 06 58	ldr	x8, #53984 ; literal pool symbol address: ___stack_chk_guard
10000b17c:	08 01 40 f9	ldr	x8, [x8]
10000b180:	a8 83 1d f8	stur	x8, [x29, #-40]
10000b184:	e0 23 00 91	add	x0, sp, #8
10000b188:	e1 03 14 aa	mov	x1, x20
10000b18c:	02 44 80 52	mov	w2, #544
10000b190:	28 1b 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000b194:	a9 42 48 f8	ldur	x9, [x21, #132]
10000b198:	68 42 48 f8	ldur	x8, [x19, #132]
10000b19c:	3f 01 08 eb	cmp	x9, x8
10000b1a0:	42 00 00 54	b.hs	0x10000b1a8
10000b1a4:	a8 42 08 f8	stur	x8, [x21, #132]
10000b1a8:	ff 1f 00 39	strb	wzr, [sp, #7]
10000b1ac:	f5 23 00 91	add	x21, sp, #8
10000b1b0:	e0 23 00 91	add	x0, sp, #8
10000b1b4:	e2 23 00 91	add	x2, sp, #8
10000b1b8:	e3 1f 00 91	add	x3, sp, #7
10000b1bc:	e1 03 13 aa	mov	x1, x19
10000b1c0:	54 1b 00 94	bl	0x100011f10 ; symbol stub for: _pm_task_subtract
10000b1c4:	e8 1f 40 39	ldrb	w8, [sp, #7]
10000b1c8:	e8 ab 06 39	strb	w8, [sp, #426]
10000b1cc:	28 78 08 10	adr	x8, #69380
10000b1d0:	1f 20 03 d5	nop
10000b1d4:	09 11 40 f9	ldr	x9, [x8, #32]
10000b1d8:	49 03 00 b4	cbz	x9, 0x10000b240
10000b1dc:	00 19 40 fd	ldr	d0, [x8, #48]
10000b1e0:	00 d8 61 7e	ucvtf	d0, d0
10000b1e4:	1f 20 03 d5	nop
10000b1e8:	41 7d 03 5c	ldr	d1, 0x100012190
10000b1ec:	00 18 61 1e	fdiv	d0, d0, d1
10000b1f0:	e0 23 00 91	add	x0, sp, #8
10000b1f4:	33 1b 00 94	bl	0x100011ec0 ; symbol stub for: _pm_energy_impact_internal
10000b1f8:	08 00 80 d2	mov	x8, #0
10000b1fc:	89 c2 06 91	add	x9, x20, #432
10000b200:	6a c2 06 91	add	x10, x19, #432
10000b204:	ab c2 06 91	add	x11, x21, #432
10000b208:	01 10 6e 1e	fmov	d1, #1.00000000
10000b20c:	6c d2 08 10	adr	x12, #72268
10000b210:	1f 20 03 d5	nop
10000b214:	82 69 68 fc	ldr	d2, [x12, x8]
10000b218:	43 69 68 fc	ldr	d3, [x10, x8]
10000b21c:	43 08 63 1e	fmul	d3, d2, d3
10000b220:	22 38 62 1e	fsub	d2, d1, d2
10000b224:	02 08 62 1e	fmul	d2, d0, d2
10000b228:	62 28 62 1e	fadd	d2, d3, d2
10000b22c:	62 69 28 fc	str	d2, [x11, x8]
10000b230:	22 69 28 fc	str	d2, [x9, x8]
10000b234:	08 21 00 91	add	x8, x8, #8
10000b238:	1f a1 00 f1	cmp	x8, #40
10000b23c:	c1 fe ff 54	b.ne	0x10000b214
10000b240:	40 cb 08 10	adr	x0, #72040
10000b244:	1f 20 03 d5	nop
10000b248:	e1 23 00 91	add	x1, sp, #8
10000b24c:	6d 12 00 94	bl	0x10000fc00
10000b250:	a8 83 5d f8	ldur	x8, [x29, #-40]
10000b254:	1f 20 03 d5	nop
10000b258:	09 90 06 58	ldr	x9, #53760 ; literal pool symbol address: ___stack_chk_guard
10000b25c:	29 01 40 f9	ldr	x9, [x9]
10000b260:	3f 01 08 eb	cmp	x9, x8
10000b264:	c1 00 00 54	b.ne	0x10000b27c
10000b268:	ff c3 08 91	add	sp, sp, #560
10000b26c:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000b270:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000b274:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000b278:	ff 0f 5f d6	retab
10000b27c:	61 1a 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000b280:	7f 23 03 d5	pacibsp
10000b284:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000b288:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000b28c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000b290:	fd 83 00 91	add	x29, sp, #32
10000b294:	f3 03 01 aa	mov	x19, x1
10000b298:	1f 04 00 f1	cmp	x0, #1
10000b29c:	81 00 00 54	b.ne	0x10000b2ac
10000b2a0:	41 80 05 10	adr	x1, #45064 ; literal pool for: "kernel_coalition"
10000b2a4:	1f 20 03 d5	nop
10000b2a8:	22 00 00 14	b	0x10000b330
10000b2ac:	a9 1b 00 94	bl	0x100012150 ; symbol stub for: _xpc_coalition_copy_info
10000b2b0:	c0 03 00 b4	cbz	x0, 0x10000b328
10000b2b4:	f4 03 00 aa	mov	x20, x0
10000b2b8:	ae 1b 00 94	bl	0x100012170 ; symbol stub for: _xpc_get_type
10000b2bc:	d5 7e 05 50	adr	x21, #45018 ; literal pool for: "UNNAMED_COALITION"
10000b2c0:	1f 20 03 d5	nop
10000b2c4:	1f 20 03 d5	nop
10000b2c8:	48 8d 06 58	ldr	x8, #53672 ; literal pool symbol address: __xpc_type_dictionary
10000b2cc:	e1 03 15 aa	mov	x1, x21
10000b2d0:	1f 00 08 eb	cmp	x0, x8
10000b2d4:	e1 01 00 54	b.ne	0x10000b310
10000b2d8:	1f 20 03 d5	nop
10000b2dc:	28 8b 06 58	ldr	x8, #53604 ; literal pool symbol address: _XPC_COALITION_INFO_KEY_BUNDLE_IDENTIFIER
10000b2e0:	01 01 40 f9	ldr	x1, [x8]
10000b2e4:	e0 03 14 aa	mov	x0, x20
10000b2e8:	9e 1b 00 94	bl	0x100012160 ; symbol stub for: _xpc_dictionary_get_string
10000b2ec:	e1 03 00 aa	mov	x1, x0
10000b2f0:	00 01 00 b5	cbnz	x0, 0x10000b310
10000b2f4:	1f 20 03 d5	nop
10000b2f8:	88 8a 06 58	ldr	x8, #53584 ; literal pool symbol address: _XPC_COALITION_INFO_KEY_NAME
10000b2fc:	01 01 40 f9	ldr	x1, [x8]
10000b300:	e0 03 14 aa	mov	x0, x20
10000b304:	97 1b 00 94	bl	0x100012160 ; symbol stub for: _xpc_dictionary_get_string
10000b308:	1f 00 00 f1	cmp	x0, #0
10000b30c:	a1 02 80 9a	csel	x1, x21, x0, eq
10000b310:	e0 03 13 aa	mov	x0, x19
10000b314:	e2 0f 80 52	mov	w2, #127
10000b318:	62 1b 00 94	bl	0x1000120a0 ; symbol stub for: _strncpy
10000b31c:	e0 03 14 aa	mov	x0, x20
10000b320:	98 1b 00 94	bl	0x100012180 ; symbol stub for: _xpc_release
10000b324:	06 00 00 14	b	0x10000b33c
10000b328:	61 7b 05 50	adr	x1, #44910 ; literal pool for: "UNNAMED_COALITION"
10000b32c:	1f 20 03 d5	nop
10000b330:	e0 03 13 aa	mov	x0, x19
10000b334:	e2 0f 80 52	mov	w2, #127
10000b338:	5a 1b 00 94	bl	0x1000120a0 ; symbol stub for: _strncpy
10000b33c:	7f fe 01 39	strb	wzr, [x19, #127]
10000b340:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000b344:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000b348:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000b34c:	ff 0f 5f d6	retab
10000b350:	7f 23 03 d5	pacibsp
10000b354:	fc 6f ba a9	stp	x28, x27, [sp, #-96]!
10000b358:	fa 67 01 a9	stp	x26, x25, [sp, #16]
10000b35c:	f8 5f 02 a9	stp	x24, x23, [sp, #32]
10000b360:	f6 57 03 a9	stp	x22, x21, [sp, #48]
10000b364:	f4 4f 04 a9	stp	x20, x19, [sp, #64]
10000b368:	fd 7b 05 a9	stp	x29, x30, [sp, #80]
10000b36c:	fd 43 01 91	add	x29, sp, #80
10000b370:	ff 43 07 d1	sub	sp, sp, #464
10000b374:	1f 20 03 d5	nop
10000b378:	08 87 06 58	ldr	x8, #53472 ; literal pool symbol address: ___stack_chk_guard
10000b37c:	08 01 40 f9	ldr	x8, [x8]
10000b380:	a8 83 19 f8	stur	x8, [x29, #-104]
10000b384:	e9 03 03 91	add	x9, sp, #192
10000b388:	ff 4f 00 f9	str	xzr, [sp, #152]
10000b38c:	ff 97 00 b9	str	wzr, [sp, #148]
10000b390:	88 0b 04 10	adr	x8, #33136
10000b394:	1f 20 03 d5	nop
10000b398:	00 05 40 ad	ldp	q0, q1, [x8]
10000b39c:	20 85 01 ad	stp	q0, q1, [x9, #48]
10000b3a0:	00 05 41 ad	ldp	q0, q1, [x8, #32]
10000b3a4:	48 00 00 90	adrp	x8, 8 ; 0x100013000
10000b3a8:	08 c1 13 91	add	x8, x8, #1264
10000b3ac:	20 85 02 ad	stp	q0, q1, [x9, #80]
10000b3b0:	00 01 c0 3d	ldr	q0, [x8]
10000b3b4:	20 01 80 3d	str	q0, [x9]
10000b3b8:	ff 87 00 b9	str	wzr, [sp, #132]
10000b3bc:	88 00 80 52	mov	w8, #4
10000b3c0:	e8 3f 00 f9	str	x8, [sp, #120]
10000b3c4:	e0 78 05 10	adr	x0, #44828 ; literal pool for: "hw.ncpu"
10000b3c8:	1f 20 03 d5	nop
10000b3cc:	e1 13 02 91	add	x1, sp, #132
10000b3d0:	e2 e3 01 91	add	x2, sp, #120
10000b3d4:	03 00 80 d2	mov	x3, #0
10000b3d8:	04 00 80 d2	mov	x4, #0
10000b3dc:	41 1b 00 94	bl	0x1000120e0 ; symbol stub for: _sysctlbyname
10000b3e0:	ff 7f 0e a9	stp	xzr, xzr, [sp, #224]
10000b3e4:	ff 6f 00 f9	str	xzr, [sp, #216]
10000b3e8:	ff 47 00 f9	str	xzr, [sp, #136]
10000b3ec:	a8 d5 08 10	adr	x8, #72372
10000b3f0:	1f 20 03 d5	nop
10000b3f4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000b3f8:	00 01 00 ad	stp	q0, q0, [x8]
10000b3fc:	00 01 01 ad	stp	q0, q0, [x8, #32]
10000b400:	00 01 02 ad	stp	q0, q0, [x8, #64]
10000b404:	00 01 03 ad	stp	q0, q0, [x8, #96]
10000b408:	00 01 04 ad	stp	q0, q0, [x8, #128]
10000b40c:	e8 87 40 b9	ldr	w8, [sp, #132]
10000b410:	e8 10 00 34	cbz	w8, 0x10000b62c
10000b414:	1a 00 80 52	mov	w26, #0
10000b418:	1c 00 80 52	mov	w28, #0
10000b41c:	1b 00 80 52	mov	w27, #0
10000b420:	1f 20 03 d5	nop
10000b424:	68 83 06 58	ldr	x8, #53356 ; literal pool symbol address: _kIOMainPortDefault
10000b428:	b3 80 05 10	adr	x19, #45076 ; literal pool for: "IODeviceTree:/cpus/cpu%u"
10000b42c:	1f 20 03 d5	nop
10000b430:	14 01 40 b9	ldr	w20, [x8]
10000b434:	15 02 80 52	mov	w21, #16
10000b438:	97 09 07 10	adr	x23, #57648 ; Objc cfstring ref: @"die-id"
10000b43c:	1f 20 03 d5	nop
10000b440:	58 15 07 10	adr	x24, #58024 ; Objc cfstring ref: @"die-cluster-id"
10000b444:	1f 20 03 d5	nop
10000b448:	fb 03 00 f9	str	x27, [sp]
10000b44c:	a0 a3 03 d1	sub	x0, x29, #232
10000b450:	01 10 80 52	mov	w1, #128
10000b454:	e2 03 13 aa	mov	x2, x19
10000b458:	ea 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b45c:	a1 a3 03 d1	sub	x1, x29, #232
10000b460:	e0 03 14 aa	mov	x0, x20
10000b464:	6b 19 00 94	bl	0x100011a10 ; symbol stub for: _IORegistryEntryFromPath
10000b468:	80 01 00 34	cbz	w0, 0x10000b498
10000b46c:	f9 03 00 aa	mov	x25, x0
10000b470:	e2 83 02 91	add	x2, sp, #160
10000b474:	a1 11 07 10	adr	x1, #57908 ; Objc cfstring ref: @"cluster-type"
10000b478:	1f 20 03 d5	nop
10000b47c:	43 00 80 52	mov	w3, #2
10000b480:	34 10 00 94	bl	0x10000f550
10000b484:	00 01 00 34	cbz	w0, 0x10000b4a4
10000b488:	e8 43 41 79	ldrh	w8, [sp, #160]
10000b48c:	1f 41 01 71	cmp	w8, #80
10000b490:	f6 17 9f 1a	cset	w22, eq
10000b494:	05 00 00 14	b	0x10000b4a8
10000b498:	f5 57 13 29	stp	w21, w21, [sp, #152]
10000b49c:	5a 07 00 11	add	w26, w26, #1
10000b4a0:	5e 00 00 14	b	0x10000b618
10000b4a4:	16 00 80 52	mov	w22, #0
10000b4a8:	e2 73 02 91	add	x2, sp, #156
10000b4ac:	e0 03 19 aa	mov	x0, x25
10000b4b0:	c1 10 07 10	adr	x1, #57880 ; Objc cfstring ref: @"cluster-id"
10000b4b4:	1f 20 03 d5	nop
10000b4b8:	83 00 80 52	mov	w3, #4
10000b4bc:	25 10 00 94	bl	0x10000f550
10000b4c0:	40 00 00 37	tbnz	w0, #0, 0x10000b4c8
10000b4c4:	ff 9f 00 b9	str	wzr, [sp, #156]
10000b4c8:	e2 53 02 91	add	x2, sp, #148
10000b4cc:	e0 03 19 aa	mov	x0, x25
10000b4d0:	e1 03 17 aa	mov	x1, x23
10000b4d4:	83 00 80 52	mov	w3, #4
10000b4d8:	1e 10 00 94	bl	0x10000f550
10000b4dc:	40 00 00 37	tbnz	w0, #0, 0x10000b4e4
10000b4e0:	ff 97 00 b9	str	wzr, [sp, #148]
10000b4e4:	e2 63 02 91	add	x2, sp, #152
10000b4e8:	e0 03 19 aa	mov	x0, x25
10000b4ec:	e1 03 18 aa	mov	x1, x24
10000b4f0:	83 00 80 52	mov	w3, #4
10000b4f4:	17 10 00 94	bl	0x10000f550
10000b4f8:	60 00 00 37	tbnz	w0, #0, 0x10000b504
10000b4fc:	e8 9f 40 b9	ldr	w8, [sp, #156]
10000b500:	e8 9b 00 b9	str	w8, [sp, #152]
10000b504:	89 00 00 d0	adrp	x9, 18 ; 0x10001d000
10000b508:	28 cd 4d b9	ldr	w8, [x9, #3532]
10000b50c:	08 05 00 11	add	w8, w8, #1
10000b510:	28 cd 0d b9	str	w8, [x9, #3532]
10000b514:	e0 03 19 aa	mov	x0, x25
10000b518:	2e 19 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
10000b51c:	e9 9f 40 b9	ldr	w9, [sp, #156]
10000b520:	3f 3d 00 71	cmp	w9, #15
10000b524:	a8 07 00 54	b.hi	0x10000b618
10000b528:	ea c3 03 91	add	x10, sp, #240
10000b52c:	48 79 69 b8	ldr	w8, [x10, x9, lsl #2]
10000b530:	1f 41 00 71	cmp	w8, #16
10000b534:	41 06 00 54	b.ne	0x10000b5fc
10000b538:	5c 79 29 b8	str	w28, [x10, x9, lsl #2]
10000b53c:	28 d0 08 10	adr	x8, #72196
10000b540:	1f 20 03 d5	nop
10000b544:	0a 1d 80 52	mov	w10, #232
10000b548:	8a 23 aa 9b	umaddl	x10, w28, w10, x8
10000b54c:	eb 03 16 2a	mov	w11, w22
10000b550:	88 5e 08 10	adr	x8, #68560
10000b554:	1f 20 03 d5	nop
10000b558:	08 51 36 8b	add	x8, x8, w22, uxtw #4
10000b55c:	48 31 00 f9	str	x8, [x10, #96]
10000b560:	48 d1 40 b9	ldr	w8, [x10, #208]
10000b564:	08 05 00 11	add	w8, w8, #1
10000b568:	48 d1 00 b9	str	w8, [x10, #208]
10000b56c:	e8 97 40 b9	ldr	w8, [sp, #148]
10000b570:	49 21 00 29	stp	w9, w8, [x10]
10000b574:	e9 9b 40 b9	ldr	w9, [sp, #152]
10000b578:	ec 63 03 91	add	x12, sp, #216
10000b57c:	8c 4d 28 8b	add	x12, x12, w8, uxtw #3
10000b580:	6c 01 7e b3	bfi	x12, x11, #2, #1
10000b584:	8d 01 40 b9	ldr	w13, [x12]
10000b588:	49 35 01 29	stp	w9, w13, [x10, #8]
10000b58c:	a9 05 00 11	add	w9, w13, #1
10000b590:	89 01 00 b9	str	w9, [x12]
10000b594:	9c 07 00 11	add	w28, w28, #1
10000b598:	8a 00 00 d0	adrp	x10, 18 ; 0x10001d000
10000b59c:	49 c1 4d b9	ldr	w9, [x10, #3520]
10000b5a0:	29 05 00 11	add	w9, w9, #1
10000b5a4:	49 c1 0d b9	str	w9, [x10, #3520]
10000b5a8:	8c 00 00 d0	adrp	x12, 18 ; 0x10001d000
10000b5ac:	89 c5 4d b9	ldr	w9, [x12, #3524]
10000b5b0:	ca 06 00 11	add	w10, w22, #1
10000b5b4:	3f 01 0a 6b	cmp	w9, w10
10000b5b8:	29 85 96 1a	csinc	w9, w9, w22, hi
10000b5bc:	89 c5 0d b9	str	w9, [x12, #3524]
10000b5c0:	e9 23 02 91	add	x9, sp, #136
10000b5c4:	69 01 7e b3	bfi	x9, x11, #2, #1
10000b5c8:	2a 01 40 b9	ldr	w10, [x9]
10000b5cc:	4a 05 00 11	add	w10, w10, #1
10000b5d0:	2a 01 00 b9	str	w10, [x9]
10000b5d4:	ea 03 03 91	add	x10, sp, #192
10000b5d8:	49 59 68 b8	ldr	w9, [x10, w8, uxtw #2]
10000b5dc:	3f 11 00 71	cmp	w9, #4
10000b5e0:	c1 01 00 54	b.ne	0x10000b618
10000b5e4:	48 79 28 b8	str	w8, [x10, x8, lsl #2]
10000b5e8:	89 00 00 d0	adrp	x9, 18 ; 0x10001d000
10000b5ec:	28 c9 4d b9	ldr	w8, [x9, #3528]
10000b5f0:	08 05 00 11	add	w8, w8, #1
10000b5f4:	28 c9 0d b9	str	w8, [x9, #3528]
10000b5f8:	08 00 00 14	b	0x10000b618
10000b5fc:	29 ca 08 10	adr	x9, #72004
10000b600:	1f 20 03 d5	nop
10000b604:	0a 1d 80 52	mov	w10, #232
10000b608:	08 25 0a 9b	madd	x8, x8, x10, x9
10000b60c:	09 d1 40 b9	ldr	w9, [x8, #208]
10000b610:	29 05 00 11	add	w9, w9, #1
10000b614:	09 d1 00 b9	str	w9, [x8, #208]
10000b618:	7b 07 00 11	add	w27, w27, #1
10000b61c:	e8 87 40 b9	ldr	w8, [sp, #132]
10000b620:	08 01 1a 0b	add	w8, w8, w26
10000b624:	7f 03 08 6b	cmp	w27, w8
10000b628:	03 f1 ff 54	b.lo	0x10000b448
10000b62c:	1f 20 03 d5	nop
10000b630:	88 3c 09 18	ldr	w8, 0x10001ddc0
10000b634:	1f 05 00 71	cmp	w8, #1
10000b638:	e1 01 00 54	b.ne	0x10000b674
10000b63c:	1f 20 03 d5	nop
10000b640:	1f 20 03 d5	nop
10000b644:	e0 f7 03 9c	ldr	q0, 0x100013540
10000b648:	48 c8 08 10	adr	x8, #71944
10000b64c:	1f 20 03 d5	nop
10000b650:	00 01 80 3d	str	q0, [x8]
10000b654:	e9 f7 03 30	adr	x9, #32509
10000b658:	1f 20 03 d5	nop
10000b65c:	20 01 c0 3d	ldr	q0, [x9]
10000b660:	09 f8 03 50	adr	x9, #32514
10000b664:	1f 20 03 d5	nop
10000b668:	21 01 c0 3d	ldr	q1, [x9]
10000b66c:	00 85 01 ad	stp	q0, q1, [x8, #48]
10000b670:	9d 00 00 14	b	0x10000b8e4
10000b674:	bf 83 11 f8	stur	xzr, [x29, #-232]
10000b678:	68 13 00 34	cbz	w8, 0x10000b8e4
10000b67c:	16 00 80 d2	mov	x22, #0
10000b680:	14 c9 08 10	adr	x20, #71968
10000b684:	1f 20 03 d5	nop
10000b688:	17 63 05 10	adr	x23, #44128 ; literal pool for: "E"
10000b68c:	1f 20 03 d5	nop
10000b690:	d8 62 05 50	adr	x24, #44122 ; literal pool for: "P"
10000b694:	1f 20 03 d5	nop
10000b698:	f3 23 02 91	add	x19, sp, #136
10000b69c:	b9 a3 03 d1	sub	x25, x29, #232
10000b6a0:	95 00 00 d0	adrp	x21, 18 ; 0x10001d000
10000b6a4:	e0 03 14 aa	mov	x0, x20
10000b6a8:	08 04 5b f8	ldr	x8, [x0], #-80
10000b6ac:	1c 01 40 b9	ldr	w28, [x8]
10000b6b0:	9f 07 00 f1	cmp	x28, #1
10000b6b4:	1a 03 97 9a	csel	x26, x24, x23, eq
10000b6b8:	68 7a 7c b8	ldr	w8, [x19, x28, lsl #2]
10000b6bc:	1f 09 00 71	cmp	w8, #2
10000b6c0:	23 04 00 54	b.lo	0x10000b744
10000b6c4:	3b 7b 7c b8	ldr	w27, [x25, x28, lsl #2]
10000b6c8:	fa 6f 00 a9	stp	x26, x27, [sp]
10000b6cc:	01 02 80 52	mov	w1, #16
10000b6d0:	e2 60 05 10	adr	x2, #44060 ; literal pool for: "%s%u-Cluster"
10000b6d4:	1f 20 03 d5	nop
10000b6d8:	4a 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b6dc:	a8 ca 4d b9	ldr	w8, [x21, #3528]
10000b6e0:	1f 09 00 71	cmp	w8, #2
10000b6e4:	83 04 00 54	b.lo	0x10000b774
10000b6e8:	88 42 5a b8	ldur	w8, [x20, #-92]
10000b6ec:	e9 63 03 91	add	x9, sp, #216
10000b6f0:	29 0d 08 8b	add	x9, x9, x8, lsl #3
10000b6f4:	29 79 7c b8	ldr	w9, [x9, x28, lsl #2]
10000b6f8:	80 02 01 d1	sub	x0, x20, #64
10000b6fc:	3f 09 00 71	cmp	w9, #2
10000b700:	23 05 00 54	b.lo	0x10000b7a4
10000b704:	89 c2 5a b8	ldur	w9, [x20, #-84]
10000b708:	fa a7 00 a9	stp	x26, x9, [sp, #8]
10000b70c:	e8 03 00 f9	str	x8, [sp]
10000b710:	01 02 80 52	mov	w1, #16
10000b714:	22 5f 05 30	adr	x2, #44005 ; literal pool for: "DIE_%u_%sACC%u_CPU"
10000b718:	1f 20 03 d5	nop
10000b71c:	39 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b720:	80 c2 00 d1	sub	x0, x20, #48
10000b724:	88 42 5a b8	ldur	w8, [x20, #-92]
10000b728:	89 c2 5a b8	ldur	w9, [x20, #-84]
10000b72c:	fa a7 00 a9	stp	x26, x9, [sp, #8]
10000b730:	e8 03 00 f9	str	x8, [sp]
10000b734:	01 02 80 52	mov	w1, #16
10000b738:	a2 5e 05 10	adr	x2, #43988 ; literal pool for: "DIE_%u_%sACC%u"
10000b73c:	1f 20 03 d5	nop
10000b740:	24 00 00 14	b	0x10000b7d0
10000b744:	fa 03 00 f9	str	x26, [sp]
10000b748:	01 02 80 52	mov	w1, #16
10000b74c:	02 60 05 30	adr	x2, #44033 ; literal pool for: "%s-Cluster"
10000b750:	1f 20 03 d5	nop
10000b754:	2b 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b758:	9f 02 1c 38	sturb	wzr, [x20, #-64]
10000b75c:	80 c2 00 d1	sub	x0, x20, #48
10000b760:	fa 03 00 f9	str	x26, [sp]
10000b764:	01 02 80 52	mov	w1, #16
10000b768:	82 5f 05 10	adr	x2, #44016 ; literal pool for: "%sACC"
10000b76c:	1f 20 03 d5	nop
10000b770:	18 00 00 14	b	0x10000b7d0
10000b774:	80 02 01 d1	sub	x0, x20, #64
10000b778:	fa 6f 00 a9	stp	x26, x27, [sp]
10000b77c:	01 02 80 52	mov	w1, #16
10000b780:	c2 5d 05 30	adr	x2, #43961 ; literal pool for: "%sACC%u_CPU"
10000b784:	1f 20 03 d5	nop
10000b788:	1e 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b78c:	80 c2 00 d1	sub	x0, x20, #48
10000b790:	fa 6f 00 a9	stp	x26, x27, [sp]
10000b794:	01 02 80 52	mov	w1, #16
10000b798:	62 5d 05 30	adr	x2, #43949 ; literal pool for: "%sACC%u"
10000b79c:	1f 20 03 d5	nop
10000b7a0:	0c 00 00 14	b	0x10000b7d0
10000b7a4:	e8 6b 00 a9	stp	x8, x26, [sp]
10000b7a8:	01 02 80 52	mov	w1, #16
10000b7ac:	62 5b 05 70	adr	x2, #43887 ; literal pool for: "DIE_%u_%sACC_CPU"
10000b7b0:	1f 20 03 d5	nop
10000b7b4:	13 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b7b8:	80 c2 00 d1	sub	x0, x20, #48
10000b7bc:	88 42 5a b8	ldur	w8, [x20, #-92]
10000b7c0:	e8 6b 00 a9	stp	x8, x26, [sp]
10000b7c4:	01 02 80 52	mov	w1, #16
10000b7c8:	22 5b 05 10	adr	x2, #43876 ; literal pool for: "DIE_%u_%sACC"
10000b7cc:	1f 20 03 d5	nop
10000b7d0:	0c 1a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b7d4:	a8 ca 4d b9	ldr	w8, [x21, #3528]
10000b7d8:	1f 09 00 71	cmp	w8, #2
10000b7dc:	83 02 00 54	b.lo	0x10000b82c
10000b7e0:	89 c2 5a b8	ldur	w9, [x20, #-84]
10000b7e4:	80 82 00 d1	sub	x0, x20, #32
10000b7e8:	88 42 5a b8	ldur	w8, [x20, #-92]
10000b7ec:	c9 03 00 34	cbz	w9, 0x10000b864
10000b7f0:	fa a7 00 a9	stp	x26, x9, [sp, #8]
10000b7f4:	e8 03 00 f9	str	x8, [sp]
10000b7f8:	01 02 80 52	mov	w1, #16
10000b7fc:	e2 5b 05 10	adr	x2, #43900 ; literal pool for: "DIE_%u_%sCPU%u"
10000b800:	1f 20 03 d5	nop
10000b804:	ff 19 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b808:	80 42 00 d1	sub	x0, x20, #16
10000b80c:	88 42 5a b8	ldur	w8, [x20, #-92]
10000b810:	89 c2 5a b8	ldur	w9, [x20, #-84]
10000b814:	fa a7 00 a9	stp	x26, x9, [sp, #8]
10000b818:	e8 03 00 f9	str	x8, [sp]
10000b81c:	01 02 80 52	mov	w1, #16
10000b820:	22 5b 05 70	adr	x2, #43879 ; literal pool for: "DIE_%u_%sCPM%u"
10000b824:	1f 20 03 d5	nop
10000b828:	25 00 00 14	b	0x10000b8bc
10000b82c:	3b 7b 7c b8	ldr	w27, [x25, x28, lsl #2]
10000b830:	80 82 00 d1	sub	x0, x20, #32
10000b834:	1b 03 00 34	cbz	w27, 0x10000b894
10000b838:	fa 6f 00 a9	stp	x26, x27, [sp]
10000b83c:	01 02 80 52	mov	w1, #16
10000b840:	02 5b 05 50	adr	x2, #43874 ; literal pool for: "%sCPU%u"
10000b844:	1f 20 03 d5	nop
10000b848:	ee 19 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b84c:	80 42 00 d1	sub	x0, x20, #16
10000b850:	fa 6f 00 a9	stp	x26, x27, [sp]
10000b854:	01 02 80 52	mov	w1, #16
10000b858:	82 5a 05 50	adr	x2, #43858 ; literal pool for: "%sCPM%u"
10000b85c:	1f 20 03 d5	nop
10000b860:	17 00 00 14	b	0x10000b8bc
10000b864:	e8 6b 00 a9	stp	x8, x26, [sp]
10000b868:	01 02 80 52	mov	w1, #16
10000b86c:	82 57 05 50	adr	x2, #43762 ; literal pool for: "DIE_%u_%sCPU"
10000b870:	1f 20 03 d5	nop
10000b874:	e3 19 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b878:	80 42 00 d1	sub	x0, x20, #16
10000b87c:	88 42 5a b8	ldur	w8, [x20, #-92]
10000b880:	e8 6b 00 a9	stp	x8, x26, [sp]
10000b884:	01 02 80 52	mov	w1, #16
10000b888:	02 57 05 70	adr	x2, #43747 ; literal pool for: "DIE_%u_%sCPM"
10000b88c:	1f 20 03 d5	nop
10000b890:	0b 00 00 14	b	0x10000b8bc
10000b894:	fa 03 00 f9	str	x26, [sp]
10000b898:	01 02 80 52	mov	w1, #16
10000b89c:	c2 57 05 50	adr	x2, #43770 ; literal pool for: "%sCPU"
10000b8a0:	1f 20 03 d5	nop
10000b8a4:	d7 19 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b8a8:	80 42 00 d1	sub	x0, x20, #16
10000b8ac:	fa 03 00 f9	str	x26, [sp]
10000b8b0:	01 02 80 52	mov	w1, #16
10000b8b4:	42 57 05 10	adr	x2, #43752 ; literal pool for: "%sCPM"
10000b8b8:	1f 20 03 d5	nop
10000b8bc:	d1 19 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000b8c0:	28 7b 7c b8	ldr	w8, [x25, x28, lsl #2]
10000b8c4:	08 05 00 11	add	w8, w8, #1
10000b8c8:	28 7b 3c b8	str	w8, [x25, x28, lsl #2]
10000b8cc:	d6 06 00 91	add	x22, x22, #1
10000b8d0:	1f 20 03 d5	nop
10000b8d4:	68 27 09 18	ldr	w8, 0x10001ddc0
10000b8d8:	94 a2 03 91	add	x20, x20, #232
10000b8dc:	df 02 08 eb	cmp	x22, x8
10000b8e0:	23 ee ff 54	b.lo	0x10000b6a4
10000b8e4:	1f 20 03 d5	nop
10000b8e8:	33 27 09 18	ldr	w19, 0x10001ddcc
10000b8ec:	60 ea 7b d3	lsl	x0, x19, #5
10000b8f0:	48 19 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000b8f4:	95 00 00 d0	adrp	x21, 18 ; 0x10001d000
10000b8f8:	a0 ea 06 f9	str	x0, [x21, #3536]
10000b8fc:	98 00 00 d0	adrp	x24, 18 ; 0x10001d000
10000b900:	d3 00 00 34	cbz	w19, 0x10000b918
10000b904:	08 00 80 d2	mov	x8, #0
10000b908:	08 04 02 b8	str	w8, [x0], #32
10000b90c:	08 05 00 91	add	x8, x8, #1
10000b910:	7f 02 08 eb	cmp	x19, x8
10000b914:	a1 ff ff 54	b.ne	0x10000b908
10000b918:	30 0f 00 94	bl	0x10000f5d8
10000b91c:	00 03 00 34	cbz	w0, 0x10000b97c
10000b920:	08 c7 4d b9	ldr	w8, [x24, #3524]
10000b924:	1f 09 00 71	cmp	w8, #2
10000b928:	48 2c 00 54	b.hi	0x10000beb0
10000b92c:	f3 03 00 aa	mov	x19, x0
10000b930:	28 02 00 34	cbz	w8, 0x10000b974
10000b934:	16 00 80 d2	mov	x22, #0
10000b938:	94 3f 08 10	adr	x20, #67568
10000b93c:	1f 20 03 d5	nop
10000b940:	57 bf 06 10	adr	x23, #55272
10000b944:	1f 20 03 d5	nop
10000b948:	e1 7a 76 f8	ldr	x1, [x23, x22, lsl #3]
10000b94c:	e0 03 14 aa	mov	x0, x20
10000b950:	e2 03 13 aa	mov	x2, x19
10000b954:	23 00 80 52	mov	w3, #1
10000b958:	4e 0f 00 94	bl	0x10000f690
10000b95c:	80 c2 1f b8	stur	w0, [x20, #-4]
10000b960:	d6 06 00 91	add	x22, x22, #1
10000b964:	08 c7 4d b9	ldr	w8, [x24, #3524]
10000b968:	94 42 00 91	add	x20, x20, #16
10000b96c:	df 02 08 eb	cmp	x22, x8
10000b970:	c3 fe ff 54	b.lo	0x10000b948
10000b974:	e0 03 13 aa	mov	x0, x19
10000b978:	16 18 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
10000b97c:	1f 20 03 d5	nop
10000b980:	08 b1 08 58	ldr	x8, #71200
10000b984:	08 05 40 b9	ldr	w8, [x8, #4]
10000b988:	1f 20 03 d5	nop
10000b98c:	b4 21 09 18	ldr	w20, 0x10001ddc0
10000b990:	1f 09 00 71	cmp	w8, #2
10000b994:	02 06 00 54	b.hs	0x10000ba54
10000b998:	d4 03 00 34	cbz	w20, 0x10000ba10
10000b99c:	13 00 80 d2	mov	x19, #0
10000b9a0:	16 1d 80 52	mov	w22, #232
10000b9a4:	f7 ac 08 10	adr	x23, #71068
10000b9a8:	1f 20 03 d5	nop
10000b9ac:	78 5e 16 9b	madd	x24, x19, x22, x23
10000b9b0:	08 0f 4d b8	ldr	w8, [x24, #208]!
10000b9b4:	e8 01 00 34	cbz	w8, 0x10000b9f0
10000b9b8:	19 00 80 d2	mov	x25, #0
10000b9bc:	1a 43 00 91	add	x26, x24, #16
10000b9c0:	1b 03 80 52	mov	w27, #24
10000b9c4:	5c 03 40 f9	ldr	x28, [x26]
10000b9c8:	dc 00 00 b4	cbz	x28, 0x10000b9e0
10000b9cc:	80 6b 7b f8	ldr	x0, [x28, x27]
10000b9d0:	80 00 00 b4	cbz	x0, 0x10000b9e0
10000b9d4:	cf 18 00 94	bl	0x100011d10 ; symbol stub for: _free
10000b9d8:	9f 6b 3b f8	str	xzr, [x28, x27]
10000b9dc:	08 03 40 b9	ldr	w8, [x24]
10000b9e0:	39 07 00 91	add	x25, x25, #1
10000b9e4:	7b 83 00 91	add	x27, x27, #32
10000b9e8:	3f 43 28 eb	cmp	x25, w8, uxtw
10000b9ec:	c3 fe ff 54	b.lo	0x10000b9c4
10000b9f0:	78 5e 16 9b	madd	x24, x19, x22, x23
10000b9f4:	00 8f 4b f8	ldr	x0, [x24, #184]!
10000b9f8:	60 00 00 b4	cbz	x0, 0x10000ba04
10000b9fc:	c5 18 00 94	bl	0x100011d10 ; symbol stub for: _free
10000ba00:	1f 03 00 f9	str	xzr, [x24]
10000ba04:	73 06 00 91	add	x19, x19, #1
10000ba08:	7f 02 14 eb	cmp	x19, x20
10000ba0c:	01 fd ff 54	b.ne	0x10000b9ac
10000ba10:	a0 ea 46 f9	ldr	x0, [x21, #3536]
10000ba14:	60 00 00 b4	cbz	x0, 0x10000ba20
10000ba18:	be 18 00 94	bl	0x100011d10 ; symbol stub for: _free
10000ba1c:	bf ea 06 f9	str	xzr, [x21, #3536]
10000ba20:	1f 20 03 d5	nop
10000ba24:	13 1d 09 18	ldr	w19, 0x10001ddc4
10000ba28:	93 22 00 34	cbz	w19, 0x10000be78
10000ba2c:	f4 37 08 10	adr	x20, #67324
10000ba30:	1f 20 03 d5	nop
10000ba34:	80 02 40 f9	ldr	x0, [x20]
10000ba38:	60 00 00 b4	cbz	x0, 0x10000ba44
10000ba3c:	b5 18 00 94	bl	0x100011d10 ; symbol stub for: _free
10000ba40:	9f 02 00 f9	str	xzr, [x20]
10000ba44:	94 42 00 91	add	x20, x20, #16
10000ba48:	73 06 00 f1	subs	x19, x19, #1
10000ba4c:	41 ff ff 54	b.ne	0x10000ba34
10000ba50:	0a 01 00 14	b	0x10000be78
10000ba54:	94 04 00 34	cbz	w20, 0x10000bae4
10000ba58:	16 00 80 d2	mov	x22, #0
10000ba5c:	17 00 80 52	mov	w23, #0
10000ba60:	b5 ea 46 f9	ldr	x21, [x21, #3536]
10000ba64:	a9 62 00 91	add	x9, x21, #24
10000ba68:	e9 13 00 f9	str	x9, [sp, #32]
10000ba6c:	19 1d 80 52	mov	w25, #232
10000ba70:	9a a6 08 10	adr	x26, #70864
10000ba74:	1f 20 03 d5	nop
10000ba78:	08 05 00 11	add	w8, w8, #1
10000ba7c:	13 f1 7d d3	lsl	x19, x8, #3
10000ba80:	e0 03 13 aa	mov	x0, x19
10000ba84:	e3 18 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000ba88:	c9 6a 19 9b	madd	x9, x22, x25, x26
10000ba8c:	20 5d 00 f9	str	x0, [x9, #184]
10000ba90:	e8 03 17 2a	mov	w8, w23
10000ba94:	aa 16 08 8b	add	x10, x21, x8, lsl #5
10000ba98:	2a 71 00 f9	str	x10, [x9, #224]
10000ba9c:	38 d1 40 b9	ldr	w24, [x9, #208]
10000baa0:	38 01 00 34	cbz	w24, 0x10000bac4
10000baa4:	e9 13 40 f9	ldr	x9, [sp, #32]
10000baa8:	3c 15 08 8b	add	x28, x9, x8, lsl #5
10000baac:	fb 03 18 aa	mov	x27, x24
10000bab0:	e0 03 13 aa	mov	x0, x19
10000bab4:	d7 18 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000bab8:	80 07 02 f8	str	x0, [x28], #32
10000babc:	7b 07 00 f1	subs	x27, x27, #1
10000bac0:	81 ff ff 54	b.ne	0x10000bab0
10000bac4:	d6 06 00 91	add	x22, x22, #1
10000bac8:	df 02 14 eb	cmp	x22, x20
10000bacc:	c0 00 00 54	b.eq	0x10000bae4
10000bad0:	17 03 17 0b	add	w23, w24, w23
10000bad4:	c8 6a 19 9b	madd	x8, x22, x25, x26
10000bad8:	08 31 40 f9	ldr	x8, [x8, #96]
10000badc:	08 05 40 b9	ldr	w8, [x8, #4]
10000bae0:	e6 ff ff 17	b	0x10000ba78
10000bae4:	33 d8 06 10	adr	x19, #56068 ; Objc cfstring ref: @"CPU Stats"
10000bae8:	1f 20 03 d5	nop
10000baec:	e1 d8 06 10	adr	x1, #56092 ; Objc cfstring ref: @"CPU Complex Performance States"
10000baf0:	1f 20 03 d5	nop
10000baf4:	22 17 09 10	adr	x2, #74468
10000baf8:	1f 20 03 d5	nop
10000bafc:	23 17 09 10	adr	x3, #74468
10000bb00:	1f 20 03 d5	nop
10000bb04:	e0 03 13 aa	mov	x0, x19
10000bb08:	31 0e 00 94	bl	0x10000f3cc
10000bb0c:	96 00 00 d0	adrp	x22, 18 ; 0x10001d000
10000bb10:	c0 ea 0d b9	str	w0, [x22, #3560]
10000bb14:	a1 d8 06 10	adr	x1, #56084 ; Objc cfstring ref: @"CPU Core Performance States"
10000bb18:	1f 20 03 d5	nop
10000bb1c:	a2 16 09 10	adr	x2, #74452
10000bb20:	1f 20 03 d5	nop
10000bb24:	a3 16 09 10	adr	x3, #74452
10000bb28:	1f 20 03 d5	nop
10000bb2c:	e0 03 13 aa	mov	x0, x19
10000bb30:	27 0e 00 94	bl	0x10000f3cc
10000bb34:	a0 c9 06 10	adr	x0, #55604 ; Objc cfstring ref: @"Energy Model"
10000bb38:	1f 20 03 d5	nop
10000bb3c:	22 16 09 10	adr	x2, #74436
10000bb40:	1f 20 03 d5	nop
10000bb44:	23 16 09 10	adr	x3, #74436
10000bb48:	1f 20 03 d5	nop
10000bb4c:	01 00 80 d2	mov	x1, #0
10000bb50:	1f 0e 00 94	bl	0x10000f3cc
10000bb54:	98 00 00 d0	adrp	x24, 18 ; 0x10001d000
10000bb58:	00 13 0e b9	str	w0, [x24, #3600]
10000bb5c:	60 d7 06 10	adr	x0, #56044 ; Objc cfstring ref: @"PMP"
10000bb60:	1f 20 03 d5	nop
10000bb64:	21 d8 06 10	adr	x1, #56068 ; Objc cfstring ref: @"Energy Counters"
10000bb68:	1f 20 03 d5	nop
10000bb6c:	62 15 09 10	adr	x2, #74412
10000bb70:	1f 20 03 d5	nop
10000bb74:	63 15 09 10	adr	x3, #74412
10000bb78:	1f 20 03 d5	nop
10000bb7c:	14 0e 00 94	bl	0x10000f3cc
10000bb80:	95 00 00 d0	adrp	x21, 18 ; 0x10001d000
10000bb84:	a0 2a 0e b9	str	w0, [x21, #3624]
10000bb88:	00 d8 06 10	adr	x0, #56064 ; Objc cfstring ref: @"CLPC Stats"
10000bb8c:	1f 20 03 d5	nop
10000bb90:	02 15 09 10	adr	x2, #74400
10000bb94:	1f 20 03 d5	nop
10000bb98:	03 15 09 10	adr	x3, #74400
10000bb9c:	1f 20 03 d5	nop
10000bba0:	01 00 80 d2	mov	x1, #0
10000bba4:	0a 0e 00 94	bl	0x10000f3cc
10000bba8:	88 00 00 d0	adrp	x8, 18 ; 0x10001d000
10000bbac:	00 41 0e b9	str	w0, [x8, #3648]
10000bbb0:	c0 c8 06 10	adr	x0, #55576 ; Objc cfstring ref: @"SoC Stats"
10000bbb4:	1f 20 03 d5	nop
10000bbb8:	81 ca 06 10	adr	x1, #55632 ; Objc cfstring ref: @"Cluster Power States"
10000bbbc:	1f 20 03 d5	nop
10000bbc0:	42 14 09 10	adr	x2, #74376
10000bbc4:	1f 20 03 d5	nop
10000bbc8:	43 14 09 10	adr	x3, #74376
10000bbcc:	1f 20 03 d5	nop
10000bbd0:	ff 0d 00 94	bl	0x10000f3cc
10000bbd4:	94 00 00 d0	adrp	x20, 18 ; 0x10001d000
10000bbd8:	80 5a 0e b9	str	w0, [x20, #3672]
10000bbdc:	c8 ea 4d b9	ldr	w8, [x22, #3560]
10000bbe0:	37 00 00 f0	adrp	x23, 7 ; 0x100012000
10000bbe4:	36 00 00 f0	adrp	x22, 7 ; 0x100012000
10000bbe8:	a8 08 00 34	cbz	w8, 0x10000bcfc
10000bbec:	93 00 00 d0	adrp	x19, 18 ; 0x10001d000
10000bbf0:	60 f2 46 f9	ldr	x0, [x19, #3552]
10000bbf4:	a1 a1 06 10	adr	x1, #54324
10000bbf8:	1f 20 03 d5	nop
10000bbfc:	c5 17 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
10000bc00:	1f 20 03 d5	nop
10000bc04:	a0 0e 09 58	ldr	x0, #74196
10000bc08:	61 f2 46 f9	ldr	x1, [x19, #3552]
10000bc0c:	02 00 80 d2	mov	x2, #0
10000bc10:	a8 17 00 94	bl	0x100011ab0 ; symbol stub for: _IOReportCreateSamples
10000bc14:	00 15 00 b4	cbz	x0, 0x10000beb4
10000bc18:	f3 03 00 aa	mov	x19, x0
10000bc1c:	e8 83 02 91	add	x8, sp, #160
10000bc20:	ff 23 0a a9	stp	xzr, x8, [sp, #160]
10000bc24:	e0 d2 40 fd	ldr	d0, [x23, #416]
10000bc28:	e0 5b 00 fd	str	d0, [sp, #176]
10000bc2c:	ff e3 02 39	strb	wzr, [sp, #184]
10000bc30:	a9 a3 03 d1	sub	x9, x29, #232
10000bc34:	1f 20 03 d5	nop
10000bc38:	d0 40 06 58	ldr	x16, #51224 ; literal pool symbol address: __NSConcreteStackBlock
10000bc3c:	f1 03 09 aa	mov	x17, x9
10000bc40:	31 5c ed f2	movk	x17, #27361, lsl #48
10000bc44:	30 0a c1 da	pacda	x16, x17
10000bc48:	b0 83 11 f8	stur	x16, [x29, #-232]
10000bc4c:	c0 d6 40 fd	ldr	d0, [x22, #424]
10000bc50:	a0 03 12 fc	stur	d0, [x29, #-224]
10000bc54:	29 41 00 91	add	x9, x9, #16
10000bc58:	10 e4 00 10	adr	x16, #7296
10000bc5c:	1f 20 03 d5	nop
10000bc60:	30 01 c1 da	pacia	x16, x9
10000bc64:	a9 a6 06 10	adr	x9, #54484
10000bc68:	1f 20 03 d5	nop
10000bc6c:	b0 a7 32 a9	stp	x16, x9, [x29, #-216]
10000bc70:	a8 83 13 f8	stur	x8, [x29, #-200]
10000bc74:	a1 a3 03 d1	sub	x1, x29, #232
10000bc78:	9e 17 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000bc7c:	e0 03 13 aa	mov	x0, x19
10000bc80:	3c 17 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000bc84:	e8 57 40 f9	ldr	x8, [sp, #168]
10000bc88:	13 61 40 39	ldrb	w19, [x8, #24]
10000bc8c:	e0 83 02 91	add	x0, sp, #160
10000bc90:	01 01 80 52	mov	w1, #8
10000bc94:	cb 17 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000bc98:	1f 20 03 d5	nop
10000bc9c:	29 09 09 18	ldr	w9, 0x10001ddc0
10000bca0:	e9 02 00 34	cbz	w9, 0x10000bcfc
10000bca4:	28 05 00 91	add	x8, x9, #1
10000bca8:	08 7d 7f 92	and	x8, x8, #0x1fffffffe
10000bcac:	29 05 00 d1	sub	x9, x9, #1
10000bcb0:	20 0d 08 4e	dup.2d	v0, x9
10000bcb4:	1f 20 03 d5	nop
10000bcb8:	41 c1 03 9c	ldr	q1, 0x1000134e0
10000bcbc:	a9 9e 08 70	adr	x9, #70615
10000bcc0:	1f 20 03 d5	nop
10000bcc4:	4a 00 80 52	mov	w10, #2
10000bcc8:	42 0d 08 4e	dup.2d	v2, x10
10000bccc:	03 3c e1 6e	cmhs.2d	v3, v0, v1
10000bcd0:	63 28 a1 0e	xtn.2s	v3, v3
10000bcd4:	6a 00 26 1e	fmov	w10, s3
10000bcd8:	4a 00 00 36	tbz	w10, #0, 0x10000bce0
10000bcdc:	33 81 11 38	sturb	w19, [x9, #-232]
10000bce0:	6a 3c 0c 0e	mov.s	w10, v3[1]
10000bce4:	4a 00 00 36	tbz	w10, #0, 0x10000bcec
10000bce8:	33 01 00 39	strb	w19, [x9]
10000bcec:	21 84 e2 4e	add.2d	v1, v1, v2
10000bcf0:	29 41 07 91	add	x9, x9, #464
10000bcf4:	08 09 00 f1	subs	x8, x8, #2
10000bcf8:	a1 fe ff 54	b.ne	0x10000bccc
10000bcfc:	08 13 4e b9	ldr	w8, [x24, #3600]
10000bd00:	c8 00 00 34	cbz	w8, 0x10000bd18
10000bd04:	1f 20 03 d5	nop
10000bd08:	00 08 09 58	ldr	x0, #73984
10000bd0c:	e1 9a 06 10	adr	x1, #54108
10000bd10:	1f 20 03 d5	nop
10000bd14:	7f 17 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
10000bd18:	a8 2a 4e b9	ldr	w8, [x21, #3624]
10000bd1c:	48 05 00 34	cbz	w8, 0x10000bdc4
10000bd20:	a8 a3 03 d1	sub	x8, x29, #232
10000bd24:	bf a3 31 a9	stp	xzr, x8, [x29, #-232]
10000bd28:	e0 d2 40 fd	ldr	d0, [x23, #416]
10000bd2c:	a0 83 12 fc	stur	d0, [x29, #-216]
10000bd30:	bf 03 13 38	sturb	wzr, [x29, #-208]
10000bd34:	93 00 00 d0	adrp	x19, 18 ; 0x10001d000
10000bd38:	60 12 47 f9	ldr	x0, [x19, #3616]
10000bd3c:	e9 43 01 91	add	x9, sp, #80
10000bd40:	1f 20 03 d5	nop
10000bd44:	70 38 06 58	ldr	x16, #50956 ; literal pool symbol address: __NSConcreteStackBlock
10000bd48:	f1 03 09 aa	mov	x17, x9
10000bd4c:	31 5c ed f2	movk	x17, #27361, lsl #48
10000bd50:	30 0a c1 da	pacda	x16, x17
10000bd54:	f0 2b 00 f9	str	x16, [sp, #80]
10000bd58:	c0 d6 40 fd	ldr	d0, [x22, #424]
10000bd5c:	e0 2f 00 fd	str	d0, [sp, #88]
10000bd60:	29 41 00 91	add	x9, x9, #16
10000bd64:	30 c9 00 10	adr	x16, #6436
10000bd68:	1f 20 03 d5	nop
10000bd6c:	30 01 c1 da	pacia	x16, x9
10000bd70:	c9 9a 06 10	adr	x9, #54104
10000bd74:	1f 20 03 d5	nop
10000bd78:	f0 27 06 a9	stp	x16, x9, [sp, #96]
10000bd7c:	e8 3b 00 f9	str	x8, [sp, #112]
10000bd80:	e1 43 01 91	add	x1, sp, #80
10000bd84:	63 17 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
10000bd88:	a8 03 52 f8	ldur	x8, [x29, #-224]
10000bd8c:	08 61 40 39	ldrb	w8, [x8, #24]
10000bd90:	48 01 00 35	cbnz	w8, 0x10000bdb8
10000bd94:	98 00 00 d0	adrp	x24, 18 ; 0x10001d000
10000bd98:	00 0f 47 f9	ldr	x0, [x24, #3608]
10000bd9c:	40 00 00 b4	cbz	x0, 0x10000bda4
10000bda0:	f4 16 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000bda4:	1f 0f 07 f9	str	xzr, [x24, #3608]
10000bda8:	60 12 47 f9	ldr	x0, [x19, #3616]
10000bdac:	f1 16 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000bdb0:	7f 12 07 f9	str	xzr, [x19, #3616]
10000bdb4:	bf 2a 0e b9	str	wzr, [x21, #3624]
10000bdb8:	a0 a3 03 d1	sub	x0, x29, #232
10000bdbc:	01 01 80 52	mov	w1, #8
10000bdc0:	80 17 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000bdc4:	88 5a 4e b9	ldr	w8, [x20, #3672]
10000bdc8:	28 05 00 34	cbz	w8, 0x10000be6c
10000bdcc:	a8 a3 03 d1	sub	x8, x29, #232
10000bdd0:	bf a3 31 a9	stp	xzr, x8, [x29, #-232]
10000bdd4:	e0 d2 40 fd	ldr	d0, [x23, #416]
10000bdd8:	a0 83 12 fc	stur	d0, [x29, #-216]
10000bddc:	bf 03 13 38	sturb	wzr, [x29, #-208]
10000bde0:	93 00 00 d0	adrp	x19, 18 ; 0x10001d000
10000bde4:	60 2a 47 f9	ldr	x0, [x19, #3664]
10000bde8:	e9 a3 00 91	add	x9, sp, #40
10000bdec:	1f 20 03 d5	nop
10000bdf0:	10 33 06 58	ldr	x16, #50784 ; literal pool symbol address: __NSConcreteStackBlock
10000bdf4:	f1 03 09 aa	mov	x17, x9
10000bdf8:	31 5c ed f2	movk	x17, #27361, lsl #48
10000bdfc:	30 0a c1 da	pacda	x16, x17
10000be00:	f0 17 00 f9	str	x16, [sp, #40]
10000be04:	c0 d6 40 fd	ldr	d0, [x22, #424]
10000be08:	e0 1b 00 fd	str	d0, [sp, #48]
10000be0c:	29 41 00 91	add	x9, x9, #16
10000be10:	90 cd 00 10	adr	x16, #6576
10000be14:	1f 20 03 d5	nop
10000be18:	30 01 c1 da	pacia	x16, x9
10000be1c:	e9 96 06 10	adr	x9, #53980
10000be20:	1f 20 03 d5	nop
10000be24:	f0 a7 03 a9	stp	x16, x9, [sp, #56]
10000be28:	e8 27 00 f9	str	x8, [sp, #72]
10000be2c:	e1 a3 00 91	add	x1, sp, #40
10000be30:	38 17 00 94	bl	0x100011b10 ; symbol stub for: _IOReportPrune
10000be34:	a8 03 52 f8	ldur	x8, [x29, #-224]
10000be38:	08 61 40 39	ldrb	w8, [x8, #24]
10000be3c:	28 01 00 35	cbnz	w8, 0x10000be60
10000be40:	95 00 00 d0	adrp	x21, 18 ; 0x10001d000
10000be44:	a0 26 47 f9	ldr	x0, [x21, #3656]
10000be48:	ca 16 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000be4c:	bf 26 07 f9	str	xzr, [x21, #3656]
10000be50:	60 2a 47 f9	ldr	x0, [x19, #3664]
10000be54:	c7 16 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000be58:	7f 2a 07 f9	str	xzr, [x19, #3664]
10000be5c:	9f 5a 0e b9	str	wzr, [x20, #3672]
10000be60:	a0 a3 03 d1	sub	x0, x29, #232
10000be64:	01 01 80 52	mov	w1, #8
10000be68:	56 17 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000be6c:	28 00 80 52	mov	w8, #1
10000be70:	89 00 00 d0	adrp	x9, 18 ; 0x10001d000
10000be74:	28 71 39 39	strb	w8, [x9, #3676]
10000be78:	a8 83 59 f8	ldur	x8, [x29, #-104]
10000be7c:	1f 20 03 d5	nop
10000be80:	c9 2e 06 58	ldr	x9, #50648 ; literal pool symbol address: ___stack_chk_guard
10000be84:	29 01 40 f9	ldr	x9, [x9]
10000be88:	3f 01 08 eb	cmp	x9, x8
10000be8c:	61 01 00 54	b.ne	0x10000beb8
10000be90:	ff 43 07 91	add	sp, sp, #464
10000be94:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
10000be98:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
10000be9c:	f6 57 43 a9	ldp	x22, x21, [sp, #48]
10000bea0:	f8 5f 42 a9	ldp	x24, x23, [sp, #32]
10000bea4:	fa 67 41 a9	ldp	x26, x25, [sp, #16]
10000bea8:	fc 6f c6 a8	ldp	x28, x27, [sp], #96
10000beac:	ff 0f 5f d6	retab
10000beb0:	b5 15 00 94	bl	0x100011584
10000beb4:	a9 15 00 94	bl	0x100011558
10000beb8:	52 17 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000bebc:	7f 23 03 d5	pacibsp
10000bec0:	ff c3 03 d1	sub	sp, sp, #240
10000bec4:	ed 33 06 6d	stp	d13, d12, [sp, #96]
10000bec8:	eb 2b 07 6d	stp	d11, d10, [sp, #112]
10000becc:	e9 23 08 6d	stp	d9, d8, [sp, #128]
10000bed0:	fc 6f 09 a9	stp	x28, x27, [sp, #144]
10000bed4:	fa 67 0a a9	stp	x26, x25, [sp, #160]
10000bed8:	f8 5f 0b a9	stp	x24, x23, [sp, #176]
10000bedc:	f6 57 0c a9	stp	x22, x21, [sp, #192]
10000bee0:	f4 4f 0d a9	stp	x20, x19, [sp, #208]
10000bee4:	fd 7b 0e a9	stp	x29, x30, [sp, #224]
10000bee8:	fd 83 03 91	add	x29, sp, #224
10000beec:	88 00 00 d0	adrp	x8, 18 ; 0x10001d000
10000bef0:	08 71 79 39	ldrb	w8, [x8, #3676]
10000bef4:	1f 05 00 71	cmp	w8, #1
10000bef8:	61 6b 00 54	b.ne	0x10000cc64
10000befc:	1f 20 03 d5	nop
10000bf00:	1f 20 03 d5	nop
10000bf04:	a8 0f 08 18	ldr	w8, 0x10001c0f8
10000bf08:	1c 0c 08 10	adr	x28, #65920
10000bf0c:	1f 20 03 d5	nop
10000bf10:	c8 00 00 34	cbz	w8, 0x10000bf28
10000bf14:	1f 05 00 71	cmp	w8, #1
10000bf18:	01 01 00 54	b.ne	0x10000bf38
10000bf1c:	c0 32 05 70	adr	x0, #42587 ; literal pool for: "<key>processor</key>\n<dict>\n<key>clusters</key>\n<array>\n"
10000bf20:	1f 20 03 d5	nop
10000bf24:	03 00 00 14	b	0x10000bf30
10000bf28:	80 31 05 50	adr	x0, #42546 ; literal pool for: "\n**** Processor usage ****\n\n"
10000bf2c:	1f 20 03 d5	nop
10000bf30:	81 23 40 f9	ldr	x1, [x28, #64]
10000bf34:	73 17 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000bf38:	1f 20 03 d5	nop
10000bf3c:	28 f4 08 18	ldr	w8, 0x10001ddc0
10000bf40:	08 4b 00 34	cbz	w8, 0x10000c8a0
10000bf44:	18 00 80 d2	mov	x24, #0
10000bf48:	09 00 80 d2	mov	x9, #0
10000bf4c:	16 1d 80 52	mov	w22, #232
10000bf50:	97 7f 08 10	adr	x23, #69616
10000bf54:	1f 20 03 d5	nop
10000bf58:	08 10 6e 1e	fmov	d8, #1.00000000
10000bf5c:	1f 20 03 d5	nop
10000bf60:	89 aa 03 5c	ldr	d9, 0x1000134b0
10000bf64:	0a e4 00 2f	movi	d10, #0000000000000000
10000bf68:	33 0b e8 d2	mov	x19, #4636737291354636288
10000bf6c:	e9 1f 00 f9	str	x9, [sp, #56]
10000bf70:	09 5f 16 9b	madd	x9, x24, x22, x23
10000bf74:	f5 03 09 aa	mov	x21, x9
10000bf78:	ac 0e 4b f8	ldr	x12, [x21, #176]!
10000bf7c:	f9 03 15 aa	mov	x25, x21
10000bf80:	2a 8f 40 f8	ldr	x10, [x25, #8]!
10000bf84:	f4 03 15 aa	mov	x20, x21
10000bf88:	8b 8e 42 b8	ldr	w11, [x20, #40]!
10000bf8c:	48 79 6b f8	ldr	x8, [x10, x11, lsl #3]
10000bf90:	0e 01 0c aa	orr	x14, x8, x12
10000bf94:	8d 01 08 eb	subs	x13, x12, x8
10000bf98:	c4 89 40 fa	ccmp	x14, #0, #4, hi
10000bf9c:	80 01 63 9e	ucvtf	d0, x12
10000bfa0:	0d e4 00 2f	movi	d13, #0000000000000000
10000bfa4:	20 01 00 54	b.eq	0x10000bfc8
10000bfa8:	a1 01 63 9e	ucvtf	d1, x13
10000bfac:	8b 00 00 34	cbz	w11, 0x10000bfbc
10000bfb0:	42 01 40 fd	ldr	d2, [x10]
10000bfb4:	42 d8 61 7e	ucvtf	d2, d2
10000bfb8:	21 38 62 1e	fsub	d1, d1, d2
10000bfbc:	21 18 60 1e	fdiv	d1, d1, d0
10000bfc0:	62 02 67 9e	fmov	d2, x19
10000bfc4:	2d 08 62 1e	fmul	d13, d1, d2
10000bfc8:	28 01 00 b4	cbz	x8, 0x10000bfec
10000bfcc:	01 01 63 9e	ucvtf	d1, x8
10000bfd0:	21 18 60 1e	fdiv	d1, d1, d0
10000bfd4:	2c 78 68 1e	fminnm	d12, d1, d8
10000bfd8:	0b e4 00 2f	movi	d11, #0000000000000000
10000bfdc:	7f 01 00 71	cmp	w11, #0
10000bfe0:	84 19 40 fa	ccmp	x12, #0, #4, ne
10000bfe4:	01 01 00 54	b.ne	0x10000c004
10000bfe8:	0e 00 00 14	b	0x10000c020
10000bfec:	6c 01 00 b4	cbz	x12, 0x10000c018
10000bff0:	80 01 63 9e	ucvtf	d0, x12
10000bff4:	0b e4 00 2f	movi	d11, #0000000000000000
10000bff8:	61 19 60 1e	fdiv	d1, d11, d0
10000bffc:	2c 78 68 1e	fminnm	d12, d1, d8
10000c000:	0b 01 00 34	cbz	w11, 0x10000c020
10000c004:	41 01 40 fd	ldr	d1, [x10]
10000c008:	21 d8 61 7e	ucvtf	d1, d1
10000c00c:	20 18 60 1e	fdiv	d0, d1, d0
10000c010:	0b 78 68 1e	fminnm	d11, d0, d8
10000c014:	03 00 00 14	b	0x10000c020
10000c018:	0c e4 00 2f	movi	d12, #0000000000000000
10000c01c:	0b e4 00 2f	movi	d11, #0000000000000000
10000c020:	29 49 40 f9	ldr	x9, [x9, #144]
10000c024:	e9 1b 00 f9	str	x9, [sp, #48]
10000c028:	c9 f1 08 10	adr	x9, #73272
10000c02c:	1f 20 03 d5	nop
10000c030:	3b 19 18 8b	add	x27, x9, x24, lsl #6
10000c034:	1f 20 03 d5	nop
10000c038:	1f 20 03 d5	nop
10000c03c:	e9 05 08 18	ldr	w9, 0x10001c0f8
10000c040:	3f 05 00 71	cmp	w9, #1
10000c044:	f8 23 00 f9	str	x24, [sp, #64]
10000c048:	40 15 00 54	b.eq	0x10000c2f0
10000c04c:	69 2c 00 35	cbnz	w9, 0x10000c5d8
10000c050:	fb 2b 00 f9	str	x27, [sp, #80]
10000c054:	08 5f 16 9b	madd	x8, x24, x22, x23
10000c058:	08 b1 41 39	ldrb	w8, [x8, #108]
10000c05c:	08 02 00 34	cbz	w8, 0x10000c09c
10000c060:	80 23 40 f9	ldr	x0, [x28, #64]
10000c064:	08 5f 16 9b	madd	x8, x24, x22, x23
10000c068:	09 41 00 91	add	x9, x8, #16
10000c06c:	0a a1 49 a9	ldp	x10, x8, [x8, #152]
10000c070:	40 01 63 9e	ucvtf	d0, x10
10000c074:	08 01 0a 8b	add	x8, x8, x10
10000c078:	01 01 63 9e	ucvtf	d1, x8
10000c07c:	00 18 61 1e	fdiv	d0, d0, d1
10000c080:	61 02 67 9e	fmov	d1, x19
10000c084:	00 08 61 1e	fmul	d0, d0, d1
10000c088:	e9 03 00 f9	str	x9, [sp]
10000c08c:	e0 07 00 fd	str	d0, [sp, #8]
10000c090:	41 3c 05 70	adr	x1, #42891 ; literal pool for: "%s Online: %0.0f%%\n"
10000c094:	1f 20 03 d5	nop
10000c098:	12 17 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c09c:	80 23 40 f9	ldr	x0, [x28, #64]
10000c0a0:	08 1d 80 52	mov	w8, #232
10000c0a4:	16 5f 08 9b	madd	x22, x24, x8, x23
10000c0a8:	ca 42 00 91	add	x10, x22, #16
10000c0ac:	1f 20 03 d5	nop
10000c0b0:	88 04 08 18	ldr	w8, 0x10001c140
10000c0b4:	1f 05 00 71	cmp	w8, #1
10000c0b8:	e8 3d 05 50	adr	x8, #42942 ; literal pool for: "SW"
10000c0bc:	1f 20 03 d5	nop
10000c0c0:	89 3d 05 70	adr	x9, #42931 ; literal pool for: "HW"
10000c0c4:	1f 20 03 d5	nop
10000c0c8:	28 01 88 9a	csel	x8, x9, x8, eq
10000c0cc:	c0 56 40 fd	ldr	d0, [x22, #168]
10000c0d0:	ed 17 00 fd	str	d13, [sp, #40]
10000c0d4:	ea a3 01 a9	stp	x10, x8, [sp, #24]
10000c0d8:	e0 0b 00 fd	str	d0, [sp, #16]
10000c0dc:	ea 23 00 a9	stp	x10, x8, [sp]
10000c0e0:	ea 27 00 f9	str	x10, [sp, #72]
10000c0e4:	41 3a 05 70	adr	x1, #42827 ; literal pool for: "%s %s active frequency: %0.0f MHz\n%s %s active residency: %6.2f%% ("
10000c0e8:	1f 20 03 d5	nop
10000c0ec:	fd 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c0f0:	c8 0e 46 f8	ldr	x8, [x22, #96]!
10000c0f4:	09 05 40 b9	ldr	w9, [x8, #4]
10000c0f8:	8a 0c 80 52	mov	w10, #100
10000c0fc:	33 b6 03 10	adr	x19, #30404 ; literal pool for: ")\n"
10000c100:	1f 20 03 d5	nop
10000c104:	5b b5 03 10	adr	x27, #30376 ; literal pool for: "%0.0f MHz: %s%%%s"
10000c108:	1f 20 03 d5	nop
10000c10c:	29 04 00 34	cbz	w9, 0x10000c190
10000c110:	18 00 80 d2	mov	x24, #0
10000c114:	97 23 40 f9	ldr	x23, [x28, #64]
10000c118:	08 05 40 f9	ldr	x8, [x8, #8]
10000c11c:	0d 79 78 fc	ldr	d13, [x8, x24, lsl #3]
10000c120:	28 03 40 f9	ldr	x8, [x25]
10000c124:	89 02 40 b9	ldr	w9, [x20]
10000c128:	1a 07 00 91	add	x26, x24, #1
10000c12c:	09 03 09 0b	add	w9, w24, w9
10000c130:	29 05 00 11	add	w9, w9, #1
10000c134:	08 59 69 f8	ldr	x8, [x8, w9, uxtw #3]
10000c138:	01 7d 0a 9b	mul	x1, x8, x10
10000c13c:	a2 02 40 f9	ldr	x2, [x21]
10000c140:	e0 73 01 91	add	x0, sp, #92
10000c144:	73 0c 00 94	bl	0x10000f310
10000c148:	c8 02 40 f9	ldr	x8, [x22]
10000c14c:	08 05 40 b9	ldr	w8, [x8, #4]
10000c150:	08 05 00 51	sub	w8, w8, #1
10000c154:	1f 03 08 eb	cmp	x24, x8
10000c158:	28 b3 03 50	adr	x8, #30310 ; literal pool for: " "
10000c15c:	1f 20 03 d5	nop
10000c160:	68 02 88 9a	csel	x8, x19, x8, eq
10000c164:	ed 03 00 fd	str	d13, [sp]
10000c168:	e0 a3 00 a9	stp	x0, x8, [sp, #8]
10000c16c:	e0 03 17 aa	mov	x0, x23
10000c170:	e1 03 1b aa	mov	x1, x27
10000c174:	db 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c178:	8a 0c 80 52	mov	w10, #100
10000c17c:	c8 02 40 f9	ldr	x8, [x22]
10000c180:	09 05 40 b9	ldr	w9, [x8, #4]
10000c184:	f8 03 1a aa	mov	x24, x26
10000c188:	5f 03 09 eb	cmp	x26, x9
10000c18c:	43 fc ff 54	b.lo	0x10000c114
10000c190:	80 23 40 f9	ldr	x0, [x28, #64]
10000c194:	33 0b e8 d2	mov	x19, #4636737291354636288
10000c198:	60 02 67 9e	fmov	d0, x19
10000c19c:	80 09 60 1e	fmul	d0, d12, d0
10000c1a0:	e0 07 00 fd	str	d0, [sp, #8]
10000c1a4:	fa 27 40 f9	ldr	x26, [sp, #72]
10000c1a8:	fa 03 00 f9	str	x26, [sp]
10000c1ac:	61 36 05 30	adr	x1, #42701 ; literal pool for: "%s idle residency: %6.2f%%\n"
10000c1b0:	1f 20 03 d5	nop
10000c1b4:	cb 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c1b8:	88 02 40 b9	ldr	w8, [x20]
10000c1bc:	28 01 00 34	cbz	w8, 0x10000c1e0
10000c1c0:	80 23 40 f9	ldr	x0, [x28, #64]
10000c1c4:	60 02 67 9e	fmov	d0, x19
10000c1c8:	60 09 60 1e	fmul	d0, d11, d0
10000c1cc:	e0 07 00 fd	str	d0, [sp, #8]
10000c1d0:	fa 03 00 f9	str	x26, [sp]
10000c1d4:	01 36 05 30	adr	x1, #42689 ; literal pool for: "%s down residency: %6.2f%%\n"
10000c1d8:	1f 20 03 d5	nop
10000c1dc:	c1 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c1e0:	88 f7 07 10	adr	x8, #65264
10000c1e4:	1f 20 03 d5	nop
10000c1e8:	08 fd 40 39	ldrb	w8, [x8, #63]
10000c1ec:	f8 23 40 f9	ldr	x24, [sp, #64]
10000c1f0:	99 00 00 d0	adrp	x25, 18 ; 0x10001e000
10000c1f4:	e9 2b 40 f9	ldr	x9, [sp, #80]
10000c1f8:	e8 05 00 34	cbz	w8, 0x10000c2b4
10000c1fc:	80 23 40 f9	ldr	x0, [x28, #64]
10000c200:	28 01 40 f9	ldr	x8, [x9]
10000c204:	1f 20 03 d5	nop
10000c208:	c9 02 09 58	ldr	x9, #73816
10000c20c:	08 05 49 8b	add	x8, x8, x9, lsr #1
10000c210:	08 09 c9 9a	udiv	x8, x8, x9
10000c214:	6a e2 08 10	adr	x10, #72780
10000c218:	1f 20 03 d5	nop
10000c21c:	57 19 18 8b	add	x23, x10, x24, lsl #6
10000c220:	ea 0e 40 f9	ldr	x10, [x23, #24]
10000c224:	40 01 23 9e	ucvtf	s0, x10
10000c228:	21 01 23 9e	ucvtf	s1, x9
10000c22c:	00 18 21 1e	fdiv	s0, s0, s1
10000c230:	00 c0 22 1e	fcvt	d0, s0
10000c234:	e8 eb 00 a9	stp	x8, x26, [sp, #8]
10000c238:	fa 03 00 f9	str	x26, [sp]
10000c23c:	e0 0f 00 fd	str	d0, [sp, #24]
10000c240:	81 33 05 30	adr	x1, #42609 ; literal pool for: "%s SW requested overall frequency: %llu MHz\n%s average core count: %0.1f\n"
10000c244:	1f 20 03 d5	nop
10000c248:	a6 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c24c:	28 37 41 f9	ldr	x8, [x25, #616]
10000c250:	28 03 00 b4	cbz	x8, 0x10000c2b4
10000c254:	14 00 80 d2	mov	x20, #0
10000c258:	f5 82 00 91	add	x21, x23, #32
10000c25c:	f6 c2 00 91	add	x22, x23, #48
10000c260:	f7 a2 00 91	add	x23, x23, #40
10000c264:	a9 02 40 f9	ldr	x9, [x21]
10000c268:	29 79 74 f8	ldr	x9, [x9, x20, lsl #3]
10000c26c:	e9 01 00 b4	cbz	x9, 0x10000c2a8
10000c270:	80 23 40 f9	ldr	x0, [x28, #64]
10000c274:	20 01 63 9e	ucvtf	d0, x9
10000c278:	e1 02 40 fd	ldr	d1, [x23]
10000c27c:	21 d8 61 7e	ucvtf	d1, d1
10000c280:	00 18 61 1e	fdiv	d0, d0, d1
10000c284:	61 02 67 9e	fmov	d1, x19
10000c288:	00 08 61 1e	fmul	d0, d0, d1
10000c28c:	c8 02 40 b9	ldr	w8, [x22]
10000c290:	e0 0b 00 fd	str	d0, [sp, #16]
10000c294:	fa 23 00 a9	stp	x26, x8, [sp]
10000c298:	01 33 05 70	adr	x1, #42595 ; literal pool for: "%s frequency limited by %d (time duration): %6.2f%%\n"
10000c29c:	1f 20 03 d5	nop
10000c2a0:	90 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c2a4:	28 37 41 f9	ldr	x8, [x25, #616]
10000c2a8:	94 06 00 91	add	x20, x20, #1
10000c2ac:	9f 02 08 eb	cmp	x20, x8
10000c2b0:	a3 fd ff 54	b.lo	0x10000c264
10000c2b4:	88 00 00 d0	adrp	x8, 18 ; 0x10001e000
10000c2b8:	08 c1 4c 39	ldrb	w8, [x8, #816]
10000c2bc:	1f 05 00 71	cmp	w8, #1
10000c2c0:	16 1d 80 52	mov	w22, #232
10000c2c4:	f7 63 08 10	adr	x23, #68732
10000c2c8:	1f 20 03 d5	nop
10000c2cc:	61 18 00 54	b.ne	0x10000c5d8
10000c2d0:	08 5f 16 9b	madd	x8, x24, x22, x23
10000c2d4:	00 65 40 fd	ldr	d0, [x8, #200]
10000c2d8:	00 d8 61 7e	ucvtf	d0, d0
10000c2dc:	08 61 40 f9	ldr	x8, [x8, #192]
10000c2e0:	48 15 00 b4	cbz	x8, 0x10000c588
10000c2e4:	01 01 63 9e	ucvtf	d1, x8
10000c2e8:	01 18 61 1e	fdiv	d1, d0, d1
10000c2ec:	a8 00 00 14	b	0x10000c58c
10000c2f0:	80 23 40 f9	ldr	x0, [x28, #64]
10000c2f4:	09 5f 16 9b	madd	x9, x24, x22, x23
10000c2f8:	2a 41 00 91	add	x10, x9, #16
10000c2fc:	1f 20 03 d5	nop
10000c300:	0b f2 07 18	ldr	w11, 0x10001c140
10000c304:	7f 05 00 71	cmp	w11, #1
10000c308:	6b 48 04 10	adr	x11, #35084 ; literal pool for: "false"
10000c30c:	1f 20 03 d5	nop
10000c310:	4c 48 04 50	adr	x12, #35082 ; literal pool for: "true"
10000c314:	1f 20 03 d5	nop
10000c318:	8b 01 8b 9a	csel	x11, x12, x11, eq
10000c31c:	20 55 40 fd	ldr	d0, [x9, #168]
10000c320:	00 08 69 1e	fmul	d0, d0, d9
10000c324:	01 01 63 9e	ucvtf	d1, x8
10000c328:	82 07 40 fd	ldr	d2, [x28, #8]
10000c32c:	41 08 61 1e	fmul	d1, d2, d1
10000c330:	28 00 79 9e	fcvtzu	x8, d1
10000c334:	ec 13 00 fd	str	d12, [sp, #32]
10000c338:	e8 0f 00 f9	str	x8, [sp, #24]
10000c33c:	e0 0b 00 fd	str	d0, [sp, #16]
10000c340:	ea 2f 00 a9	stp	x10, x11, [sp]
10000c344:	21 31 05 70	adr	x1, #42535 ; literal pool for: "<dict>\n<key>name</key><string>%s</string>\n<key>hw_resid_counters</key><%s/>\n<key>freq_hz</key><real>%g</real>\n<key>idle_ns</key><integer>%llu</integer>\n<key>idle_ratio</key><real>%g</real>\n"
10000c348:	1f 20 03 d5	nop
10000c34c:	65 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c350:	88 02 40 b9	ldr	w8, [x20]
10000c354:	a8 01 00 34	cbz	w8, 0x10000c388
10000c358:	80 23 40 f9	ldr	x0, [x28, #64]
10000c35c:	28 03 40 f9	ldr	x8, [x25]
10000c360:	00 01 40 fd	ldr	d0, [x8]
10000c364:	00 d8 61 7e	ucvtf	d0, d0
10000c368:	81 07 40 fd	ldr	d1, [x28, #8]
10000c36c:	20 08 60 1e	fmul	d0, d1, d0
10000c370:	08 00 79 9e	fcvtzu	x8, d0
10000c374:	eb 07 00 fd	str	d11, [sp, #8]
10000c378:	e8 03 00 f9	str	x8, [sp]
10000c37c:	61 35 05 30	adr	x1, #42669 ; literal pool for: "<key>down_ns</key><integer>%llu</integer>\n<key>down_ratio</key><real>%g</real>\n"
10000c380:	1f 20 03 d5	nop
10000c384:	57 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c388:	83 23 40 f9	ldr	x3, [x28, #64]
10000c38c:	00 a0 03 10	adr	x0, #29696 ; literal pool for: "<key>dvfm_states</key>\n<array>\n"
10000c390:	1f 20 03 d5	nop
10000c394:	e1 03 80 52	mov	w1, #31
10000c398:	22 00 80 52	mov	w2, #1
10000c39c:	61 16 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000c3a0:	08 1d 80 52	mov	w8, #232
10000c3a4:	16 5f 08 9b	madd	x22, x24, x8, x23
10000c3a8:	c8 0e 46 f8	ldr	x8, [x22, #96]!
10000c3ac:	09 05 40 b9	ldr	w9, [x8, #4]
10000c3b0:	9a a0 03 70	adr	x26, #29715 ; literal pool for: "<dict>\n<key>freq</key><integer>%0.0f</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
10000c3b4:	1f 20 03 d5	nop
10000c3b8:	e9 03 00 34	cbz	w9, 0x10000c434
10000c3bc:	09 00 80 d2	mov	x9, #0
10000c3c0:	80 23 40 f9	ldr	x0, [x28, #64]
10000c3c4:	08 05 40 f9	ldr	x8, [x8, #8]
10000c3c8:	00 79 69 fc	ldr	d0, [x8, x9, lsl #3]
10000c3cc:	28 03 40 f9	ldr	x8, [x25]
10000c3d0:	8a 02 40 b9	ldr	w10, [x20]
10000c3d4:	2a 01 0a 0b	add	w10, w9, w10
10000c3d8:	4a 05 00 11	add	w10, w10, #1
10000c3dc:	08 59 6a f8	ldr	x8, [x8, w10, uxtw #3]
10000c3e0:	01 01 63 9e	ucvtf	d1, x8
10000c3e4:	37 05 00 91	add	x23, x9, #1
10000c3e8:	82 07 40 fd	ldr	d2, [x28, #8]
10000c3ec:	42 08 61 1e	fmul	d2, d2, d1
10000c3f0:	49 00 79 9e	fcvtzu	x9, d2
10000c3f4:	aa 02 40 f9	ldr	x10, [x21]
10000c3f8:	48 01 08 aa	orr	x8, x10, x8
10000c3fc:	42 01 63 9e	ucvtf	d2, x10
10000c400:	21 18 62 1e	fdiv	d1, d1, d2
10000c404:	1f 01 00 f1	cmp	x8, #0
10000c408:	41 0d 61 1e	fcsel	d1, d10, d1, eq
10000c40c:	e1 0b 00 fd	str	d1, [sp, #16]
10000c410:	e9 07 00 f9	str	x9, [sp, #8]
10000c414:	e0 03 00 fd	str	d0, [sp]
10000c418:	e1 03 1a aa	mov	x1, x26
10000c41c:	31 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c420:	c8 02 40 f9	ldr	x8, [x22]
10000c424:	0a 05 40 b9	ldr	w10, [x8, #4]
10000c428:	e9 03 17 aa	mov	x9, x23
10000c42c:	ff 02 0a eb	cmp	x23, x10
10000c430:	83 fc ff 54	b.lo	0x10000c3c0
10000c434:	81 23 40 f9	ldr	x1, [x28, #64]
10000c438:	80 a0 03 50	adr	x0, #29714 ; literal pool for: "</array>\n"
10000c43c:	1f 20 03 d5	nop
10000c440:	30 16 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000c444:	09 1d 80 52	mov	w9, #232
10000c448:	ca 57 08 10	adr	x10, #68344
10000c44c:	1f 20 03 d5	nop
10000c450:	08 2b 09 9b	madd	x8, x24, x9, x10
10000c454:	08 b1 41 39	ldrb	w8, [x8, #108]
10000c458:	a8 01 00 34	cbz	w8, 0x10000c48c
10000c45c:	08 2b 09 9b	madd	x8, x24, x9, x10
10000c460:	09 a1 49 a9	ldp	x9, x8, [x8, #152]
10000c464:	20 01 23 9e	ucvtf	s0, x9
10000c468:	80 23 40 f9	ldr	x0, [x28, #64]
10000c46c:	08 01 09 8b	add	x8, x8, x9
10000c470:	01 01 23 9e	ucvtf	s1, x8
10000c474:	00 18 21 1e	fdiv	s0, s0, s1
10000c478:	00 c0 22 1e	fcvt	d0, s0
10000c47c:	e0 03 00 fd	str	d0, [sp]
10000c480:	c1 2f 05 30	adr	x1, #42489 ; literal pool for: "<key>online_ratio</key><real>%g</real>\n"
10000c484:	1f 20 03 d5	nop
10000c488:	16 16 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c48c:	28 e2 07 10	adr	x8, #64580
10000c490:	1f 20 03 d5	nop
10000c494:	08 fd 40 39	ldrb	w8, [x8, #63]
10000c498:	39 33 05 50	adr	x25, #42598 ; literal pool for: "<key>freq_limited_by_%d</key><real>%g</real>\n"
10000c49c:	1f 20 03 d5	nop
10000c4a0:	9a 00 00 d0	adrp	x26, 18 ; 0x10001e000
10000c4a4:	48 05 00 34	cbz	w8, 0x10000c54c
10000c4a8:	80 23 40 f9	ldr	x0, [x28, #64]
10000c4ac:	68 03 40 f9	ldr	x8, [x27]
10000c4b0:	1f 20 03 d5	nop
10000c4b4:	69 ed 08 58	ldr	x9, #73132
10000c4b8:	08 05 49 8b	add	x8, x8, x9, lsr #1
10000c4bc:	08 09 c9 9a	udiv	x8, x8, x9
10000c4c0:	0a cd 08 10	adr	x10, #72096
10000c4c4:	1f 20 03 d5	nop
10000c4c8:	57 19 18 8b	add	x23, x10, x24, lsl #6
10000c4cc:	ea 0e 40 f9	ldr	x10, [x23, #24]
10000c4d0:	40 01 23 9e	ucvtf	s0, x10
10000c4d4:	21 01 23 9e	ucvtf	s1, x9
10000c4d8:	00 18 21 1e	fdiv	s0, s0, s1
10000c4dc:	00 c0 22 1e	fcvt	d0, s0
10000c4e0:	e8 03 00 f9	str	x8, [sp]
10000c4e4:	e0 07 00 fd	str	d0, [sp, #8]
10000c4e8:	c1 2d 05 30	adr	x1, #42425 ; literal pool for: "<key>requested_mhz</key><integer>%llu</integer>\n<key>recommended_cores</key><real>%g</real>\n"
10000c4ec:	1f 20 03 d5	nop
10000c4f0:	fc 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c4f4:	48 37 41 f9	ldr	x8, [x26, #616]
10000c4f8:	a8 02 00 b4	cbz	x8, 0x10000c54c
10000c4fc:	14 00 80 d2	mov	x20, #0
10000c500:	f5 c2 00 91	add	x21, x23, #48
10000c504:	f6 82 00 91	add	x22, x23, #32
10000c508:	f7 a2 00 91	add	x23, x23, #40
10000c50c:	c8 02 40 f9	ldr	x8, [x22]
10000c510:	00 79 74 fc	ldr	d0, [x8, x20, lsl #3]
10000c514:	80 23 40 f9	ldr	x0, [x28, #64]
10000c518:	00 d8 61 7e	ucvtf	d0, d0
10000c51c:	e1 02 40 fd	ldr	d1, [x23]
10000c520:	21 d8 61 7e	ucvtf	d1, d1
10000c524:	00 18 61 1e	fdiv	d0, d0, d1
10000c528:	a8 02 40 b9	ldr	w8, [x21]
10000c52c:	e0 07 00 fd	str	d0, [sp, #8]
10000c530:	e8 03 00 f9	str	x8, [sp]
10000c534:	e1 03 19 aa	mov	x1, x25
10000c538:	ea 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c53c:	94 06 00 91	add	x20, x20, #1
10000c540:	48 37 41 f9	ldr	x8, [x26, #616]
10000c544:	9f 02 08 eb	cmp	x20, x8
10000c548:	23 fe ff 54	b.lo	0x10000c50c
10000c54c:	88 00 00 d0	adrp	x8, 18 ; 0x10001e000
10000c550:	08 c1 4c 39	ldrb	w8, [x8, #816]
10000c554:	1f 05 00 71	cmp	w8, #1
10000c558:	16 1d 80 52	mov	w22, #232
10000c55c:	37 4f 08 10	adr	x23, #68068
10000c560:	1f 20 03 d5	nop
10000c564:	21 03 00 54	b.ne	0x10000c5c8
10000c568:	08 5f 16 9b	madd	x8, x24, x22, x23
10000c56c:	00 65 40 fd	ldr	d0, [x8, #200]
10000c570:	00 d8 61 7e	ucvtf	d0, d0
10000c574:	08 61 40 f9	ldr	x8, [x8, #192]
10000c578:	c8 01 00 b4	cbz	x8, 0x10000c5b0
10000c57c:	01 01 63 9e	ucvtf	d1, x8
10000c580:	01 18 61 1e	fdiv	d1, d0, d1
10000c584:	0c 00 00 14	b	0x10000c5b4
10000c588:	01 e4 00 2f	movi	d1, #0000000000000000
10000c58c:	80 23 40 f9	ldr	x0, [x28, #64]
10000c590:	e1 0f 00 fd	str	d1, [sp, #24]
10000c594:	fa 0b 00 f9	str	x26, [sp, #16]
10000c598:	e0 07 00 fd	str	d0, [sp, #8]
10000c59c:	fa 03 00 f9	str	x26, [sp]
10000c5a0:	81 1c 05 10	adr	x1, #41872 ; literal pool for: "%s instructions retired: %g\n%s instructions per clock: %g\n"
10000c5a4:	1f 20 03 d5	nop
10000c5a8:	ce 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c5ac:	0b 00 00 14	b	0x10000c5d8
10000c5b0:	01 e4 00 2f	movi	d1, #0000000000000000
10000c5b4:	80 23 40 f9	ldr	x0, [x28, #64]
10000c5b8:	e0 07 00 6d	stp	d0, d1, [sp]
10000c5bc:	a1 ff 04 10	adr	x1, #40948 ; literal pool for: "<key>inst_retired</key><real>%g</real>\n<key>inst_per_clk</key><real>%g</real>\n"
10000c5c0:	1f 20 03 d5	nop
10000c5c4:	c7 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c5c8:	81 23 40 f9	ldr	x1, [x28, #64]
10000c5cc:	00 2b 05 10	adr	x0, #42336 ; literal pool for: "<key>cpus</key>\n<array>\n"
10000c5d0:	1f 20 03 d5	nop
10000c5d4:	cb 15 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000c5d8:	09 5f 16 9b	madd	x9, x24, x22, x23
10000c5dc:	28 0d 4d b8	ldr	w8, [x9, #208]!
10000c5e0:	e9 2b 00 f9	str	x9, [sp, #80]
10000c5e4:	08 12 00 34	cbz	w8, 0x10000c824
10000c5e8:	15 00 80 d2	mov	x21, #0
10000c5ec:	e8 2b 40 f9	ldr	x8, [sp, #80]
10000c5f0:	09 41 00 91	add	x9, x8, #16
10000c5f4:	e9 27 00 f9	str	x9, [sp, #72]
10000c5f8:	16 c1 01 d1	sub	x22, x8, #112
10000c5fc:	e8 27 40 f9	ldr	x8, [sp, #72]
10000c600:	09 01 40 f9	ldr	x9, [x8]
10000c604:	28 15 15 8b	add	x8, x9, x21, lsl #5
10000c608:	1f 20 03 d5	nop
10000c60c:	1f 20 03 d5	nop
10000c610:	4a d7 07 18	ldr	w10, 0x10001c0f8
10000c614:	5f 05 00 71	cmp	w10, #1
10000c618:	c0 08 00 54	b.eq	0x10000c730
10000c61c:	33 8d 03 10	adr	x19, #29092 ; literal pool for: ")\n"
10000c620:	1f 20 03 d5	nop
10000c624:	54 8c 03 10	adr	x20, #29064 ; literal pool for: "%0.0f MHz: %s%%%s"
10000c628:	1f 20 03 d5	nop
10000c62c:	2a 0f 00 35	cbnz	w10, 0x10000c810
10000c630:	80 23 40 f9	ldr	x0, [x28, #64]
10000c634:	3b 15 15 8b	add	x27, x9, x21, lsl #5
10000c638:	69 8f 41 f8	ldr	x9, [x27, #24]!
10000c63c:	29 01 40 f9	ldr	x9, [x9]
10000c640:	20 01 63 9e	ucvtf	d0, x9
10000c644:	f8 03 1b aa	mov	x24, x27
10000c648:	0a 8f 5f f8	ldr	x10, [x24, #-8]!
10000c64c:	61 03 5f fc	ldur	d1, [x27, #-16]
10000c650:	42 01 63 9e	ucvtf	d2, x10
10000c654:	00 18 62 1e	fdiv	d0, d0, d2
10000c658:	2b 0b e8 d2	mov	x11, #4636737291354636288
10000c65c:	63 01 67 9e	fmov	d3, x11
10000c660:	00 08 63 1e	fmul	d0, d0, d3
10000c664:	49 01 09 cb	sub	x9, x10, x9
10000c668:	24 01 63 9e	ucvtf	d4, x9
10000c66c:	82 18 62 1e	fdiv	d2, d4, d2
10000c670:	42 08 63 1e	fmul	d2, d2, d3
10000c674:	08 01 40 b9	ldr	w8, [x8]
10000c678:	e8 13 00 f9	str	x8, [sp, #32]
10000c67c:	e8 0b 00 f9	str	x8, [sp, #16]
10000c680:	e1 07 00 fd	str	d1, [sp, #8]
10000c684:	e8 03 00 f9	str	x8, [sp]
10000c688:	e0 0f 00 fd	str	d0, [sp, #24]
10000c68c:	e2 17 00 fd	str	d2, [sp, #40]
10000c690:	a1 25 05 30	adr	x1, #42165 ; literal pool for: "CPU %u frequency: %0.0f MHz\nCPU %u idle residency: %6.2f%%\nCPU %u active residency: %6.2f%% ("
10000c694:	1f 20 03 d5	nop
10000c698:	92 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c69c:	8a 0c 80 52	mov	w10, #100
10000c6a0:	c8 02 40 f9	ldr	x8, [x22]
10000c6a4:	09 05 40 b9	ldr	w9, [x8, #4]
10000c6a8:	49 0b 00 34	cbz	w9, 0x10000c810
10000c6ac:	1a 00 80 d2	mov	x26, #0
10000c6b0:	97 23 40 f9	ldr	x23, [x28, #64]
10000c6b4:	08 05 40 f9	ldr	x8, [x8, #8]
10000c6b8:	0b 79 7a fc	ldr	d11, [x8, x26, lsl #3]
10000c6bc:	68 03 40 f9	ldr	x8, [x27]
10000c6c0:	f9 03 1c aa	mov	x25, x28
10000c6c4:	5c 07 00 91	add	x28, x26, #1
10000c6c8:	08 0d 1a 8b	add	x8, x8, x26, lsl #3
10000c6cc:	08 05 40 f9	ldr	x8, [x8, #8]
10000c6d0:	01 7d 0a 9b	mul	x1, x8, x10
10000c6d4:	02 03 40 f9	ldr	x2, [x24]
10000c6d8:	e0 73 01 91	add	x0, sp, #92
10000c6dc:	0d 0b 00 94	bl	0x10000f310
10000c6e0:	c8 02 40 f9	ldr	x8, [x22]
10000c6e4:	08 05 40 b9	ldr	w8, [x8, #4]
10000c6e8:	08 05 00 51	sub	w8, w8, #1
10000c6ec:	5f 03 08 eb	cmp	x26, x8
10000c6f0:	68 86 03 50	adr	x8, #28878 ; literal pool for: " "
10000c6f4:	1f 20 03 d5	nop
10000c6f8:	68 02 88 9a	csel	x8, x19, x8, eq
10000c6fc:	eb 03 00 fd	str	d11, [sp]
10000c700:	e0 a3 00 a9	stp	x0, x8, [sp, #8]
10000c704:	e0 03 17 aa	mov	x0, x23
10000c708:	e1 03 14 aa	mov	x1, x20
10000c70c:	75 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c710:	8a 0c 80 52	mov	w10, #100
10000c714:	c8 02 40 f9	ldr	x8, [x22]
10000c718:	09 05 40 b9	ldr	w9, [x8, #4]
10000c71c:	fa 03 1c aa	mov	x26, x28
10000c720:	9f 03 09 eb	cmp	x28, x9
10000c724:	fc 03 19 aa	mov	x28, x25
10000c728:	43 fc ff 54	b.lo	0x10000c6b0
10000c72c:	39 00 00 14	b	0x10000c810
10000c730:	80 23 40 f9	ldr	x0, [x28, #64]
10000c734:	f7 03 08 aa	mov	x23, x8
10000c738:	e9 8e 41 f8	ldr	x9, [x23, #24]!
10000c73c:	e0 02 5f fc	ldur	d0, [x23, #-16]
10000c740:	00 08 69 1e	fmul	d0, d0, d9
10000c744:	21 01 40 fd	ldr	d1, [x9]
10000c748:	21 d8 61 7e	ucvtf	d1, d1
10000c74c:	82 07 40 fd	ldr	d2, [x28, #8]
10000c750:	42 08 61 1e	fmul	d2, d2, d1
10000c754:	49 00 79 9e	fcvtzu	x9, d2
10000c758:	f8 03 17 aa	mov	x24, x23
10000c75c:	02 8f 5f fc	ldr	d2, [x24, #-8]!
10000c760:	42 d8 61 7e	ucvtf	d2, d2
10000c764:	21 18 62 1e	fdiv	d1, d1, d2
10000c768:	08 01 40 b9	ldr	w8, [x8]
10000c76c:	e1 0f 00 fd	str	d1, [sp, #24]
10000c770:	e0 07 00 fd	str	d0, [sp, #8]
10000c774:	e8 03 00 f9	str	x8, [sp]
10000c778:	e9 0b 00 f9	str	x9, [sp, #16]
10000c77c:	21 21 05 70	adr	x1, #42023 ; literal pool for: "<dict>\n<key>cpu</key><integer>%u</integer>\n<key>freq_hz</key><real>%g</real>\n<key>idle_ns</key><integer>%llu</integer>\n<key>idle_ratio</key><real>%g</real>\n<key>dvfm_states</key>\n<array>\n"
10000c780:	1f 20 03 d5	nop
10000c784:	57 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c788:	c8 02 40 f9	ldr	x8, [x22]
10000c78c:	09 05 40 b9	ldr	w9, [x8, #4]
10000c790:	9b 81 03 70	adr	x27, #28723 ; literal pool for: "<dict>\n<key>freq</key><integer>%0.0f</integer>\n<key>used_ns</key><integer>%llu</integer>\n<key>used_ratio</key><real>%g</real>\n</dict>\n"
10000c794:	1f 20 03 d5	nop
10000c798:	49 03 00 34	cbz	w9, 0x10000c800
10000c79c:	09 00 80 d2	mov	x9, #0
10000c7a0:	80 23 40 f9	ldr	x0, [x28, #64]
10000c7a4:	08 05 40 f9	ldr	x8, [x8, #8]
10000c7a8:	00 79 69 fc	ldr	d0, [x8, x9, lsl #3]
10000c7ac:	e8 02 40 f9	ldr	x8, [x23]
10000c7b0:	3a 05 00 91	add	x26, x9, #1
10000c7b4:	08 0d 09 8b	add	x8, x8, x9, lsl #3
10000c7b8:	01 05 40 fd	ldr	d1, [x8, #8]
10000c7bc:	21 d8 61 7e	ucvtf	d1, d1
10000c7c0:	82 07 40 fd	ldr	d2, [x28, #8]
10000c7c4:	42 08 61 1e	fmul	d2, d2, d1
10000c7c8:	48 00 79 9e	fcvtzu	x8, d2
10000c7cc:	02 03 40 fd	ldr	d2, [x24]
10000c7d0:	42 d8 61 7e	ucvtf	d2, d2
10000c7d4:	21 18 62 1e	fdiv	d1, d1, d2
10000c7d8:	e1 0b 00 fd	str	d1, [sp, #16]
10000c7dc:	e0 03 00 fd	str	d0, [sp]
10000c7e0:	e8 07 00 f9	str	x8, [sp, #8]
10000c7e4:	e1 03 1b aa	mov	x1, x27
10000c7e8:	3e 15 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c7ec:	c8 02 40 f9	ldr	x8, [x22]
10000c7f0:	0a 05 40 b9	ldr	w10, [x8, #4]
10000c7f4:	e9 03 1a aa	mov	x9, x26
10000c7f8:	5f 03 0a eb	cmp	x26, x10
10000c7fc:	23 fd ff 54	b.lo	0x10000c7a0
10000c800:	81 23 40 f9	ldr	x1, [x28, #64]
10000c804:	e0 dd 03 30	adr	x0, #31677 ; literal pool for: "</array>\n</dict>\n"
10000c808:	1f 20 03 d5	nop
10000c80c:	3d 15 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000c810:	b5 06 00 91	add	x21, x21, #1
10000c814:	e8 2b 40 f9	ldr	x8, [sp, #80]
10000c818:	08 01 40 b9	ldr	w8, [x8]
10000c81c:	bf 02 08 eb	cmp	x21, x8
10000c820:	e3 ee ff 54	b.lo	0x10000c5fc
10000c824:	1f 20 03 d5	nop
10000c828:	1f 20 03 d5	nop
10000c82c:	68 c6 07 18	ldr	w8, 0x10001c0f8
10000c830:	68 01 00 34	cbz	w8, 0x10000c85c
10000c834:	1f 05 00 71	cmp	w8, #1
10000c838:	f8 23 40 f9	ldr	x24, [sp, #64]
10000c83c:	16 1d 80 52	mov	w22, #232
10000c840:	17 38 08 10	adr	x23, #67328
10000c844:	1f 20 03 d5	nop
10000c848:	33 0b e8 d2	mov	x19, #4636737291354636288
10000c84c:	a1 01 00 54	b.ne	0x10000c880
10000c850:	80 db 03 30	adr	x0, #31601 ; literal pool for: "</array>\n</dict>\n"
10000c854:	1f 20 03 d5	nop
10000c858:	08 00 00 14	b	0x10000c878
10000c85c:	80 0c 04 10	adr	x0, #33168 ; literal pool for: "\n"
10000c860:	1f 20 03 d5	nop
10000c864:	f8 23 40 f9	ldr	x24, [sp, #64]
10000c868:	16 1d 80 52	mov	w22, #232
10000c86c:	b7 36 08 10	adr	x23, #67284
10000c870:	1f 20 03 d5	nop
10000c874:	33 0b e8 d2	mov	x19, #4636737291354636288
10000c878:	81 23 40 f9	ldr	x1, [x28, #64]
10000c87c:	21 15 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000c880:	e8 27 43 a9	ldp	x8, x9, [sp, #48]
10000c884:	09 01 09 8b	add	x9, x8, x9
10000c888:	18 07 00 91	add	x24, x24, #1
10000c88c:	1f 20 03 d5	nop
10000c890:	88 a9 08 18	ldr	w8, 0x10001ddc0
10000c894:	1f 03 08 eb	cmp	x24, x8
10000c898:	a3 b6 ff 54	b.lo	0x10000bf6c
10000c89c:	02 00 00 14	b	0x10000c8a4
10000c8a0:	09 00 80 d2	mov	x9, #0
10000c8a4:	95 00 00 90	adrp	x21, 16 ; 0x10001c000
10000c8a8:	a8 8e 47 f9	ldr	x8, [x21, #3864]
10000c8ac:	14 01 09 8b	add	x20, x8, x9
10000c8b0:	1f 20 03 d5	nop
10000c8b4:	1f 20 03 d5	nop
10000c8b8:	08 c2 07 18	ldr	w8, 0x10001c0f8
10000c8bc:	1f 05 00 71	cmp	w8, #1
10000c8c0:	61 0f 00 54	b.ne	0x10000caac
10000c8c4:	81 23 40 f9	ldr	x1, [x28, #64]
10000c8c8:	00 7c 03 50	adr	x0, #28546 ; literal pool for: "</array>\n"
10000c8cc:	1f 20 03 d5	nop
10000c8d0:	0c 15 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000c8d4:	88 00 00 d0	adrp	x8, 18 ; 0x10001e000
10000c8d8:	08 c1 4c 39	ldrb	w8, [x8, #816]
10000c8dc:	1f 05 00 71	cmp	w8, #1
10000c8e0:	a1 01 00 54	b.ne	0x10000c914
10000c8e4:	80 23 40 f9	ldr	x0, [x28, #64]
10000c8e8:	1f 20 03 d5	nop
10000c8ec:	a0 d2 08 5c	ldr	d0, 0x10001e340
10000c8f0:	00 d8 61 7e	ucvtf	d0, d0
10000c8f4:	1f 20 03 d5	nop
10000c8f8:	01 d2 08 5c	ldr	d1, 0x10001e338
10000c8fc:	21 d8 61 7e	ucvtf	d1, d1
10000c900:	01 18 61 1e	fdiv	d1, d0, d1
10000c904:	e0 07 00 6d	stp	d0, d1, [sp]
10000c908:	41 e5 04 10	adr	x1, #40104 ; literal pool for: "<key>inst_retired</key><real>%g</real>\n<key>inst_per_clk</key><real>%g</real>\n"
10000c90c:	1f 20 03 d5	nop
10000c910:	f4 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c914:	e8 bd 07 10	adr	x8, #63420
10000c918:	1f 20 03 d5	nop
10000c91c:	08 fd 40 39	ldrb	w8, [x8, #63]
10000c920:	97 00 00 d0	adrp	x23, 18 ; 0x10001e000
10000c924:	88 01 00 34	cbz	w8, 0x10000c954
10000c928:	80 23 40 f9	ldr	x0, [x28, #64]
10000c92c:	1f 20 03 d5	nop
10000c930:	c0 d0 08 5c	ldr	d0, 0x10001e348
10000c934:	00 d8 61 7e	ucvtf	d0, d0
10000c938:	e1 32 41 fd	ldr	d1, [x23, #608]
10000c93c:	21 d8 61 7e	ucvtf	d1, d1
10000c940:	00 18 61 1e	fdiv	d0, d0, d1
10000c944:	e0 03 00 fd	str	d0, [sp]
10000c948:	a1 e5 04 70	adr	x1, #40119 ; literal pool for: "<key>cpu_power_zones_engaged</key><real>%g</real>\n"
10000c94c:	1f 20 03 d5	nop
10000c950:	e4 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c954:	80 23 40 f9	ldr	x0, [x28, #64]
10000c958:	f4 03 00 f9	str	x20, [sp]
10000c95c:	a1 e6 04 50	adr	x1, #40150 ; literal pool for: "<key>cpu_energy</key>\n<integer>%llu</integer>\n"
10000c960:	1f 20 03 d5	nop
10000c964:	df 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c968:	80 23 40 f9	ldr	x0, [x28, #64]
10000c96c:	80 02 63 9e	ucvtf	d0, x20
10000c970:	e1 32 41 fd	ldr	d1, [x23, #608]
10000c974:	21 d8 61 7e	ucvtf	d1, d1
10000c978:	82 07 40 fd	ldr	d2, [x28, #8]
10000c97c:	41 08 61 1e	fmul	d1, d2, d1
10000c980:	1f 20 03 d5	nop
10000c984:	68 c0 02 5c	ldr	d8, 0x100012190
10000c988:	21 18 68 1e	fdiv	d1, d1, d8
10000c98c:	00 18 61 1e	fdiv	d0, d0, d1
10000c990:	e0 03 00 fd	str	d0, [sp]
10000c994:	61 e6 04 30	adr	x1, #40141 ; literal pool for: "<key>cpu_power</key>\n<real>%g</real>\n"
10000c998:	1f 20 03 d5	nop
10000c99c:	d1 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c9a0:	88 00 00 90	adrp	x8, 16 ; 0x10001c000
10000c9a4:	08 89 7a 39	ldrb	w8, [x8, #3746]
10000c9a8:	a8 02 00 34	cbz	w8, 0x10000c9fc
10000c9ac:	80 23 40 f9	ldr	x0, [x28, #64]
10000c9b0:	96 00 00 90	adrp	x22, 16 ; 0x10001c000
10000c9b4:	c8 92 47 f9	ldr	x8, [x22, #3872]
10000c9b8:	e8 03 00 f9	str	x8, [sp]
10000c9bc:	41 e6 04 70	adr	x1, #40139 ; literal pool for: "<key>gpu_energy</key>\n<integer>%llu</integer>\n"
10000c9c0:	1f 20 03 d5	nop
10000c9c4:	c7 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c9c8:	80 23 40 f9	ldr	x0, [x28, #64]
10000c9cc:	c0 92 47 fd	ldr	d0, [x22, #3872]
10000c9d0:	00 d8 61 7e	ucvtf	d0, d0
10000c9d4:	e1 32 41 fd	ldr	d1, [x23, #608]
10000c9d8:	21 d8 61 7e	ucvtf	d1, d1
10000c9dc:	82 07 40 fd	ldr	d2, [x28, #8]
10000c9e0:	41 08 61 1e	fmul	d1, d2, d1
10000c9e4:	21 18 68 1e	fdiv	d1, d1, d8
10000c9e8:	00 18 61 1e	fdiv	d0, d0, d1
10000c9ec:	e0 03 00 fd	str	d0, [sp]
10000c9f0:	21 e6 04 50	adr	x1, #40134 ; literal pool for: "<key>gpu_power</key>\n<real>%g</real>\n"
10000c9f4:	1f 20 03 d5	nop
10000c9f8:	ba 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000c9fc:	88 00 00 90	adrp	x8, 16 ; 0x10001c000
10000ca00:	08 81 7a 39	ldrb	w8, [x8, #3744]
10000ca04:	88 02 00 34	cbz	w8, 0x10000ca54
10000ca08:	80 23 40 f9	ldr	x0, [x28, #64]
10000ca0c:	a8 8e 47 f9	ldr	x8, [x21, #3864]
10000ca10:	e8 03 00 f9	str	x8, [sp]
10000ca14:	41 e6 04 10	adr	x1, #40136 ; literal pool for: "<key>ane_energy</key>\n<integer>%llu</integer>\n"
10000ca18:	1f 20 03 d5	nop
10000ca1c:	b1 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ca20:	80 23 40 f9	ldr	x0, [x28, #64]
10000ca24:	a0 8e 47 fd	ldr	d0, [x21, #3864]
10000ca28:	00 d8 61 7e	ucvtf	d0, d0
10000ca2c:	e1 32 41 fd	ldr	d1, [x23, #608]
10000ca30:	21 d8 61 7e	ucvtf	d1, d1
10000ca34:	82 07 40 fd	ldr	d2, [x28, #8]
10000ca38:	41 08 61 1e	fmul	d1, d2, d1
10000ca3c:	21 18 68 1e	fdiv	d1, d1, d8
10000ca40:	00 18 61 1e	fdiv	d0, d0, d1
10000ca44:	e0 03 00 fd	str	d0, [sp]
10000ca48:	01 e6 04 70	adr	x1, #40131 ; literal pool for: "<key>ane_power</key>\n<real>%g</real>\n"
10000ca4c:	1f 20 03 d5	nop
10000ca50:	a4 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ca54:	80 23 40 f9	ldr	x0, [x28, #64]
10000ca58:	08 26 08 10	adr	x8, #66752
10000ca5c:	1f 20 03 d5	nop
10000ca60:	08 25 40 a9	ldp	x8, x9, [x8]
10000ca64:	29 01 14 8b	add	x9, x9, x20
10000ca68:	28 01 08 8b	add	x8, x9, x8
10000ca6c:	00 01 63 9e	ucvtf	d0, x8
10000ca70:	e1 32 41 fd	ldr	d1, [x23, #608]
10000ca74:	21 d8 61 7e	ucvtf	d1, d1
10000ca78:	82 07 40 fd	ldr	d2, [x28, #8]
10000ca7c:	41 08 61 1e	fmul	d1, d2, d1
10000ca80:	21 18 68 1e	fdiv	d1, d1, d8
10000ca84:	00 18 61 1e	fdiv	d0, d0, d1
10000ca88:	e0 03 00 fd	str	d0, [sp]
10000ca8c:	21 e5 04 30	adr	x1, #40101 ; literal pool for: "<key>combined_power</key>\n<real>%g</real>\n"
10000ca90:	1f 20 03 d5	nop
10000ca94:	93 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ca98:	81 23 40 f9	ldr	x1, [x28, #64]
10000ca9c:	20 75 03 50	adr	x0, #28326 ; literal pool for: "</dict>\n"
10000caa0:	1f 20 03 d5	nop
10000caa4:	97 14 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000caa8:	6f 00 00 14	b	0x10000cc64
10000caac:	88 00 00 d0	adrp	x8, 18 ; 0x10001e000
10000cab0:	08 c1 4c 39	ldrb	w8, [x8, #816]
10000cab4:	1f 05 00 71	cmp	w8, #1
10000cab8:	a1 01 00 54	b.ne	0x10000caec
10000cabc:	80 23 40 f9	ldr	x0, [x28, #64]
10000cac0:	1f 20 03 d5	nop
10000cac4:	e0 c3 08 5c	ldr	d0, 0x10001e340
10000cac8:	00 d8 61 7e	ucvtf	d0, d0
10000cacc:	1f 20 03 d5	nop
10000cad0:	41 c3 08 5c	ldr	d1, 0x10001e338
10000cad4:	21 d8 61 7e	ucvtf	d1, d1
10000cad8:	01 18 61 1e	fdiv	d1, d0, d1
10000cadc:	e0 07 00 6d	stp	d0, d1, [sp]
10000cae0:	e1 e3 04 10	adr	x1, #40060 ; literal pool for: "System instructions retired: %g\nSystem instructions per clock: %g\n"
10000cae4:	1f 20 03 d5	nop
10000cae8:	7e 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000caec:	28 af 07 10	adr	x8, #62948
10000caf0:	1f 20 03 d5	nop
10000caf4:	08 fd 40 39	ldrb	w8, [x8, #63]
10000caf8:	08 02 00 34	cbz	w8, 0x10000cb38
10000cafc:	80 23 40 f9	ldr	x0, [x28, #64]
10000cb00:	1f 20 03 d5	nop
10000cb04:	20 c2 08 5c	ldr	d0, 0x10001e348
10000cb08:	00 d8 61 7e	ucvtf	d0, d0
10000cb0c:	1f 20 03 d5	nop
10000cb10:	81 ba 08 5c	ldr	d1, 0x10001e260
10000cb14:	21 d8 61 7e	ucvtf	d1, d1
10000cb18:	00 18 61 1e	fdiv	d0, d0, d1
10000cb1c:	28 0b e8 d2	mov	x8, #4636737291354636288
10000cb20:	01 01 67 9e	fmov	d1, x8
10000cb24:	00 08 61 1e	fmul	d0, d0, d1
10000cb28:	e0 03 00 fd	str	d0, [sp]
10000cb2c:	81 e3 04 70	adr	x1, #40051 ; literal pool for: "CPU Power Zones Engaged for: %3.0f%%\n"
10000cb30:	1f 20 03 d5	nop
10000cb34:	6b 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000cb38:	1f 20 03 d5	nop
10000cb3c:	28 94 08 18	ldr	w8, 0x10001ddc0
10000cb40:	36 00 00 d0	adrp	x22, 6 ; 0x100012000
10000cb44:	1f 09 00 71	cmp	w8, #2
10000cb48:	8a 00 00 d0	adrp	x10, 18 ; 0x10001e000
10000cb4c:	e3 01 00 54	b.lo	0x10000cb88
10000cb50:	80 23 40 f9	ldr	x0, [x28, #64]
10000cb54:	80 02 63 9e	ucvtf	d0, x20
10000cb58:	41 31 41 fd	ldr	d1, [x10, #608]
10000cb5c:	21 d8 61 7e	ucvtf	d1, d1
10000cb60:	82 07 40 fd	ldr	d2, [x28, #8]
10000cb64:	41 08 61 1e	fmul	d1, d2, d1
10000cb68:	c2 ca 40 fd	ldr	d2, [x22, #400]
10000cb6c:	21 18 62 1e	fdiv	d1, d1, d2
10000cb70:	00 18 61 1e	fdiv	d0, d0, d1
10000cb74:	e0 03 00 fd	str	d0, [sp]
10000cb78:	61 e2 04 30	adr	x1, #40013 ; literal pool for: "CPU Power: %0.0f mW\n"
10000cb7c:	1f 20 03 d5	nop
10000cb80:	58 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000cb84:	8a 00 00 d0	adrp	x10, 18 ; 0x10001e000
10000cb88:	88 00 00 90	adrp	x8, 16 ; 0x10001c000
10000cb8c:	08 89 7a 39	ldrb	w8, [x8, #3746]
10000cb90:	28 02 00 34	cbz	w8, 0x10000cbd4
10000cb94:	80 23 40 f9	ldr	x0, [x28, #64]
10000cb98:	1f 20 03 d5	nop
10000cb9c:	20 1c 08 5c	ldr	d0, 0x10001cf20
10000cba0:	00 d8 61 7e	ucvtf	d0, d0
10000cba4:	41 31 41 fd	ldr	d1, [x10, #608]
10000cba8:	21 d8 61 7e	ucvtf	d1, d1
10000cbac:	82 07 40 fd	ldr	d2, [x28, #8]
10000cbb0:	41 08 61 1e	fmul	d1, d2, d1
10000cbb4:	c2 ca 40 fd	ldr	d2, [x22, #400]
10000cbb8:	21 18 62 1e	fdiv	d1, d1, d2
10000cbbc:	00 18 61 1e	fdiv	d0, d0, d1
10000cbc0:	e0 03 00 fd	str	d0, [sp]
10000cbc4:	c1 69 03 70	adr	x1, #27963 ; literal pool for: "GPU Power: %0.0f mW\n"
10000cbc8:	1f 20 03 d5	nop
10000cbcc:	45 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000cbd0:	8a 00 00 d0	adrp	x10, 18 ; 0x10001e000
10000cbd4:	88 00 00 90	adrp	x8, 16 ; 0x10001c000
10000cbd8:	08 81 7a 39	ldrb	w8, [x8, #3744]
10000cbdc:	08 02 00 34	cbz	w8, 0x10000cc1c
10000cbe0:	80 23 40 f9	ldr	x0, [x28, #64]
10000cbe4:	a0 8e 47 fd	ldr	d0, [x21, #3864]
10000cbe8:	00 d8 61 7e	ucvtf	d0, d0
10000cbec:	41 31 41 fd	ldr	d1, [x10, #608]
10000cbf0:	21 d8 61 7e	ucvtf	d1, d1
10000cbf4:	82 07 40 fd	ldr	d2, [x28, #8]
10000cbf8:	41 08 61 1e	fmul	d1, d2, d1
10000cbfc:	c2 ca 40 fd	ldr	d2, [x22, #400]
10000cc00:	21 18 62 1e	fdiv	d1, d1, d2
10000cc04:	00 18 61 1e	fdiv	d0, d0, d1
10000cc08:	e0 03 00 fd	str	d0, [sp]
10000cc0c:	61 de 04 50	adr	x1, #39886 ; literal pool for: "ANE Power: %0.0f mW\n"
10000cc10:	1f 20 03 d5	nop
10000cc14:	33 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000cc18:	8a 00 00 d0	adrp	x10, 18 ; 0x10001e000
10000cc1c:	80 23 40 f9	ldr	x0, [x28, #64]
10000cc20:	c8 17 08 10	adr	x8, #66296
10000cc24:	1f 20 03 d5	nop
10000cc28:	08 25 40 a9	ldp	x8, x9, [x8]
10000cc2c:	29 01 14 8b	add	x9, x9, x20
10000cc30:	28 01 08 8b	add	x8, x9, x8
10000cc34:	00 01 63 9e	ucvtf	d0, x8
10000cc38:	41 31 41 fd	ldr	d1, [x10, #608]
10000cc3c:	21 d8 61 7e	ucvtf	d1, d1
10000cc40:	82 07 40 fd	ldr	d2, [x28, #8]
10000cc44:	41 08 61 1e	fmul	d1, d2, d1
10000cc48:	c2 ca 40 fd	ldr	d2, [x22, #400]
10000cc4c:	21 18 62 1e	fdiv	d1, d1, d2
10000cc50:	00 18 61 1e	fdiv	d0, d0, d1
10000cc54:	e0 03 00 fd	str	d0, [sp]
10000cc58:	a1 dc 04 70	adr	x1, #39831 ; literal pool for: "Combined Power (CPU + GPU + ANE): %0.0f mW\n"
10000cc5c:	1f 20 03 d5	nop
10000cc60:	20 14 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000cc64:	fd 7b 4e a9	ldp	x29, x30, [sp, #224]
10000cc68:	f4 4f 4d a9	ldp	x20, x19, [sp, #208]
10000cc6c:	f6 57 4c a9	ldp	x22, x21, [sp, #192]
10000cc70:	f8 5f 4b a9	ldp	x24, x23, [sp, #176]
10000cc74:	fa 67 4a a9	ldp	x26, x25, [sp, #160]
10000cc78:	fc 6f 49 a9	ldp	x28, x27, [sp, #144]
10000cc7c:	e9 23 48 6d	ldp	d9, d8, [sp, #128]
10000cc80:	eb 2b 47 6d	ldp	d11, d10, [sp, #112]
10000cc84:	ed 33 46 6d	ldp	d13, d12, [sp, #96]
10000cc88:	ff c3 03 91	add	sp, sp, #240
10000cc8c:	ff 0f 5f d6	retab
10000cc90:	7f 23 03 d5	pacibsp
10000cc94:	ff c3 03 d1	sub	sp, sp, #240
10000cc98:	fa 67 0a a9	stp	x26, x25, [sp, #160]
10000cc9c:	f8 5f 0b a9	stp	x24, x23, [sp, #176]
10000cca0:	f6 57 0c a9	stp	x22, x21, [sp, #192]
10000cca4:	f4 4f 0d a9	stp	x20, x19, [sp, #208]
10000cca8:	fd 7b 0e a9	stp	x29, x30, [sp, #224]
10000ccac:	fd 83 03 91	add	x29, sp, #224
10000ccb0:	88 00 00 b0	adrp	x8, 17 ; 0x10001d000
10000ccb4:	08 71 79 39	ldrb	w8, [x8, #3676]
10000ccb8:	1f 05 00 71	cmp	w8, #1
10000ccbc:	61 23 00 54	b.ne	0x10000d128
10000ccc0:	53 9e 07 10	adr	x19, #62408
10000ccc4:	1f 20 03 d5	nop
10000ccc8:	68 02 40 39	ldrb	w8, [x19]
10000cccc:	68 00 00 34	cbz	w8, 0x10000ccd8
10000ccd0:	38 14 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
10000ccd4:	06 00 00 14	b	0x10000ccec
10000ccd8:	68 0a 40 39	ldrb	w8, [x19, #2]
10000ccdc:	68 00 00 34	cbz	w8, 0x10000cce8
10000cce0:	60 16 40 f9	ldr	x0, [x19, #40]
10000cce4:	02 00 00 14	b	0x10000ccec
10000cce8:	60 12 40 f9	ldr	x0, [x19, #32]
10000ccec:	88 00 00 d0	adrp	x8, 18 ; 0x10001e000
10000ccf0:	00 31 01 f9	str	x0, [x8, #608]
10000ccf4:	1f 20 03 d5	nop
10000ccf8:	04 87 08 58	ldr	x4, #69856
10000ccfc:	1f 20 03 d5	nop
10000cd00:	05 87 08 58	ldr	x5, #69856
10000cd04:	60 ab 08 10	adr	x0, #71020
10000cd08:	1f 20 03 d5	nop
10000cd0c:	61 ab 08 10	adr	x1, #71020
10000cd10:	1f 20 03 d5	nop
10000cd14:	62 ab 08 10	adr	x2, #71020
10000cd18:	1f 20 03 d5	nop
10000cd1c:	63 ab 08 10	adr	x3, #71020
10000cd20:	1f 20 03 d5	nop
10000cd24:	d2 09 00 94	bl	0x10000f46c
10000cd28:	1f 20 03 d5	nop
10000cd2c:	24 86 08 58	ldr	x4, #69828
10000cd30:	1f 20 03 d5	nop
10000cd34:	25 86 08 58	ldr	x5, #69828
10000cd38:	c0 aa 08 10	adr	x0, #71000
10000cd3c:	1f 20 03 d5	nop
10000cd40:	c1 aa 08 10	adr	x1, #71000
10000cd44:	1f 20 03 d5	nop
10000cd48:	c2 aa 08 10	adr	x2, #71000
10000cd4c:	1f 20 03 d5	nop
10000cd50:	c3 aa 08 10	adr	x3, #71000
10000cd54:	1f 20 03 d5	nop
10000cd58:	c5 09 00 94	bl	0x10000f46c
10000cd5c:	1f 20 03 d5	nop
10000cd60:	04 85 08 58	ldr	x4, #69792
10000cd64:	1f 20 03 d5	nop
10000cd68:	05 85 08 58	ldr	x5, #69792
10000cd6c:	20 aa 08 10	adr	x0, #70980
10000cd70:	1f 20 03 d5	nop
10000cd74:	21 aa 08 10	adr	x1, #70980
10000cd78:	1f 20 03 d5	nop
10000cd7c:	22 aa 08 10	adr	x2, #70980
10000cd80:	1f 20 03 d5	nop
10000cd84:	23 aa 08 10	adr	x3, #70980
10000cd88:	1f 20 03 d5	nop
10000cd8c:	b8 09 00 94	bl	0x10000f46c
10000cd90:	1f 20 03 d5	nop
10000cd94:	a8 84 08 18	ldr	w8, 0x10001de28
10000cd98:	c8 01 00 34	cbz	w8, 0x10000cdd0
10000cd9c:	1f 20 03 d5	nop
10000cda0:	c4 83 08 58	ldr	x4, #69752
10000cda4:	1f 20 03 d5	nop
10000cda8:	c5 83 08 58	ldr	x5, #69752
10000cdac:	20 a9 08 10	adr	x0, #70948
10000cdb0:	1f 20 03 d5	nop
10000cdb4:	21 a9 08 10	adr	x1, #70948
10000cdb8:	1f 20 03 d5	nop
10000cdbc:	22 a9 08 10	adr	x2, #70948
10000cdc0:	1f 20 03 d5	nop
10000cdc4:	23 a9 08 10	adr	x3, #70948
10000cdc8:	1f 20 03 d5	nop
10000cdcc:	a8 09 00 94	bl	0x10000f46c
10000cdd0:	94 00 00 b0	adrp	x20, 17 ; 0x10001d000
10000cdd4:	88 42 4e b9	ldr	w8, [x20, #3648]
10000cdd8:	c8 01 00 34	cbz	w8, 0x10000ce10
10000cddc:	1f 20 03 d5	nop
10000cde0:	84 82 08 58	ldr	x4, #69712
10000cde4:	1f 20 03 d5	nop
10000cde8:	85 82 08 58	ldr	x5, #69712
10000cdec:	20 a8 08 10	adr	x0, #70916
10000cdf0:	1f 20 03 d5	nop
10000cdf4:	21 a8 08 10	adr	x1, #70916
10000cdf8:	1f 20 03 d5	nop
10000cdfc:	22 a8 08 10	adr	x2, #70916
10000ce00:	1f 20 03 d5	nop
10000ce04:	23 a8 08 10	adr	x3, #70916
10000ce08:	1f 20 03 d5	nop
10000ce0c:	98 09 00 94	bl	0x10000f46c
10000ce10:	95 00 00 b0	adrp	x21, 17 ; 0x10001d000
10000ce14:	a8 5a 4e b9	ldr	w8, [x21, #3672]
10000ce18:	c8 01 00 34	cbz	w8, 0x10000ce50
10000ce1c:	1f 20 03 d5	nop
10000ce20:	44 81 08 58	ldr	x4, #69672
10000ce24:	1f 20 03 d5	nop
10000ce28:	45 81 08 58	ldr	x5, #69672
10000ce2c:	20 a7 08 10	adr	x0, #70884
10000ce30:	1f 20 03 d5	nop
10000ce34:	21 a7 08 10	adr	x1, #70884
10000ce38:	1f 20 03 d5	nop
10000ce3c:	22 a7 08 10	adr	x2, #70884
10000ce40:	1f 20 03 d5	nop
10000ce44:	23 a7 08 10	adr	x3, #70884
10000ce48:	1f 20 03 d5	nop
10000ce4c:	88 09 00 94	bl	0x10000f46c
10000ce50:	96 00 00 b0	adrp	x22, 17 ; 0x10001d000
10000ce54:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000ce58:	c8 01 00 34	cbz	w8, 0x10000ce90
10000ce5c:	17 00 80 d2	mov	x23, #0
10000ce60:	d8 c2 4d b9	ldr	w24, [x22, #3520]
10000ce64:	79 0c 08 10	adr	x25, #65932
10000ce68:	1f 20 03 d5	nop
10000ce6c:	3f 03 00 f9	str	xzr, [x25]
10000ce70:	20 07 40 f9	ldr	x0, [x25, #8]
10000ce74:	28 27 40 b9	ldr	w8, [x25, #36]
10000ce78:	01 f1 7d d3	lsl	x1, x8, #3
10000ce7c:	75 13 00 94	bl	0x100011c50 ; symbol stub for: _bzero
10000ce80:	f7 06 00 91	add	x23, x23, #1
10000ce84:	39 a3 03 91	add	x25, x25, #232
10000ce88:	ff 02 18 eb	cmp	x23, x24
10000ce8c:	03 ff ff 54	b.lo	0x10000ce6c
10000ce90:	1f 20 03 d5	nop
10000ce94:	a0 9f 08 58	ldr	x0, #70644
10000ce98:	81 17 06 10	adr	x1, #49904
10000ce9c:	1f 20 03 d5	nop
10000cea0:	14 13 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000cea4:	88 00 00 90	adrp	x8, 16 ; 0x10001c000
10000cea8:	09 41 41 b9	ldr	w9, [x8, #320]
10000ceac:	3f 09 00 71	cmp	w9, #2
10000ceb0:	41 00 00 54	b.ne	0x10000ceb8
10000ceb4:	1f 41 01 b9	str	wzr, [x8, #320]
10000ceb8:	08 03 08 10	adr	x8, #65632
10000cebc:	1f 20 03 d5	nop
10000cec0:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000cec4:	00 01 00 ad	stp	q0, q0, [x8]
10000cec8:	1f 20 03 d5	nop
10000cecc:	e0 9f 08 58	ldr	x0, #70652
10000ced0:	c1 17 06 10	adr	x1, #49912
10000ced4:	1f 20 03 d5	nop
10000ced8:	06 13 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000cedc:	1f 20 03 d5	nop
10000cee0:	40 a0 08 58	ldr	x0, #70664
10000cee4:	80 00 00 b4	cbz	x0, 0x10000cef4
10000cee8:	01 19 06 10	adr	x1, #49952
10000ceec:	1f 20 03 d5	nop
10000cef0:	00 13 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000cef4:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000cef8:	48 02 00 34	cbz	w8, 0x10000cf40
10000cefc:	17 00 80 d2	mov	x23, #0
10000cf00:	d8 08 08 10	adr	x24, #65816
10000cf04:	1f 20 03 d5	nop
10000cf08:	08 03 5e f8	ldur	x8, [x24, #-32]
10000cf0c:	09 03 40 b9	ldr	w9, [x24]
10000cf10:	29 05 00 11	add	w9, w9, #1
10000cf14:	00 4d 29 8b	add	x0, x8, w9, uxtw #3
10000cf18:	08 83 58 f8	ldur	x8, [x24, #-120]
10000cf1c:	01 05 40 f9	ldr	x1, [x8, #8]
10000cf20:	02 05 40 b9	ldr	w2, [x8, #4]
10000cf24:	1d 0a 00 94	bl	0x10000f798
10000cf28:	00 03 1d fc	stur	d0, [x24, #-48]
10000cf2c:	f7 06 00 91	add	x23, x23, #1
10000cf30:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000cf34:	18 a3 03 91	add	x24, x24, #232
10000cf38:	ff 02 08 eb	cmp	x23, x8
10000cf3c:	63 fe ff 54	b.lo	0x10000cf08
10000cf40:	a8 83 01 d1	sub	x8, x29, #96
10000cf44:	bf 23 3a a9	stp	xzr, x8, [x29, #-96]
10000cf48:	1f 20 03 d5	nop
10000cf4c:	a0 92 02 5c	ldr	d0, 0x1000121a0
10000cf50:	a0 03 1b fc	stur	d0, [x29, #-80]
10000cf54:	bf 83 1b b8	stur	wzr, [x29, #-72]
10000cf58:	e9 83 01 91	add	x9, sp, #96
10000cf5c:	ff 27 06 a9	stp	xzr, x9, [sp, #96]
10000cf60:	e0 3b 00 fd	str	d0, [sp, #112]
10000cf64:	ff 7b 00 b9	str	wzr, [sp, #120]
10000cf68:	ea 03 01 91	add	x10, sp, #64
10000cf6c:	ff 2b 04 a9	stp	xzr, x10, [sp, #64]
10000cf70:	e0 2b 00 fd	str	d0, [sp, #80]
10000cf74:	ff 5b 00 b9	str	wzr, [sp, #88]
10000cf78:	1f 20 03 d5	nop
10000cf7c:	60 99 08 58	ldr	x0, #70444
10000cf80:	eb 23 00 91	add	x11, sp, #8
10000cf84:	1f 20 03 d5	nop
10000cf88:	50 a6 05 58	ldr	x16, #46280 ; literal pool symbol address: __NSConcreteStackBlock
10000cf8c:	f1 03 0b aa	mov	x17, x11
10000cf90:	31 5c ed f2	movk	x17, #27361, lsl #48
10000cf94:	30 0a c1 da	pacda	x16, x17
10000cf98:	f0 07 00 f9	str	x16, [sp, #8]
10000cf9c:	1f 20 03 d5	nop
10000cfa0:	40 90 02 5c	ldr	d0, 0x1000121a8
10000cfa4:	e0 0b 00 fd	str	d0, [sp, #16]
10000cfa8:	6b 41 00 91	add	x11, x11, #16
10000cfac:	d0 78 00 10	adr	x16, #3864
10000cfb0:	1f 20 03 d5	nop
10000cfb4:	70 01 c1 da	pacia	x16, x11
10000cfb8:	8b 13 06 10	adr	x11, #49776
10000cfbc:	1f 20 03 d5	nop
10000cfc0:	f0 af 01 a9	stp	x16, x11, [sp, #24]
10000cfc4:	e8 a7 02 a9	stp	x8, x9, [sp, #40]
10000cfc8:	ea 1f 00 f9	str	x10, [sp, #56]
10000cfcc:	e1 23 00 91	add	x1, sp, #8
10000cfd0:	c8 12 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000cfd4:	1f 20 03 d5	nop
10000cfd8:	a8 6f 08 18	ldr	w8, 0x10001ddcc
10000cfdc:	a9 83 5a f8	ldur	x9, [x29, #-88]
10000cfe0:	2a 19 40 b9	ldr	w10, [x9, #24]
10000cfe4:	5f 01 08 6b	cmp	w10, w8
10000cfe8:	62 02 00 54	b.hs	0x10000d034
10000cfec:	1f 20 03 d5	nop
10000cff0:	09 6f 08 58	ldr	x9, #69088
10000cff4:	2b 09 40 f9	ldr	x11, [x9, #16]
10000cff8:	ea 03 0a 2a	mov	w10, w10
10000cffc:	2a 15 0a 8b	add	x10, x9, x10, lsl #5
10000d000:	4a 0d 40 f9	ldr	x10, [x10, #24]
10000d004:	4b 01 00 f9	str	x11, [x10]
10000d008:	2a 09 40 f9	ldr	x10, [x9, #16]
10000d00c:	ab 83 5a f8	ldur	x11, [x29, #-88]
10000d010:	6b 19 40 b9	ldr	w11, [x11, #24]
10000d014:	2b 15 0b 8b	add	x11, x9, x11, lsl #5
10000d018:	6a 09 00 f9	str	x10, [x11, #16]
10000d01c:	ab 83 5a f8	ldur	x11, [x29, #-88]
10000d020:	6a 19 40 b9	ldr	w10, [x11, #24]
10000d024:	4a 05 00 11	add	w10, w10, #1
10000d028:	6a 19 00 b9	str	w10, [x11, #24]
10000d02c:	5f 01 08 6b	cmp	w10, w8
10000d030:	23 fe ff 54	b.lo	0x10000cff4
10000d034:	88 42 4e b9	ldr	w8, [x20, #3648]
10000d038:	88 05 00 34	cbz	w8, 0x10000d0e8
10000d03c:	96 00 00 b0	adrp	x22, 17 ; 0x10001e000
10000d040:	c0 86 41 f9	ldr	x0, [x22, #776]
10000d044:	a1 11 06 10	adr	x1, #49716
10000d048:	1f 20 03 d5	nop
10000d04c:	a9 12 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000d050:	68 02 40 39	ldrb	w8, [x19]
10000d054:	69 00 00 f0	adrp	x9, 15 ; 0x10001c000
10000d058:	29 95 7a 39	ldrb	w9, [x9, #3749]
10000d05c:	1f 01 00 71	cmp	w8, #0
10000d060:	20 19 40 7a	ccmp	w9, #0, #0, ne
10000d064:	21 04 00 54	b.ne	0x10000d0e8
10000d068:	c8 f1 07 10	adr	x8, #65080
10000d06c:	1f 20 03 d5	nop
10000d070:	09 01 40 39	ldrb	w9, [x8]
10000d074:	69 00 00 34	cbz	w9, 0x10000d080
10000d078:	08 05 40 39	ldrb	w8, [x8, #1]
10000d07c:	68 03 00 34	cbz	w8, 0x10000d0e8
10000d080:	88 82 07 10	adr	x8, #61520
10000d084:	1f 20 03 d5	nop
10000d088:	08 fd 40 39	ldrb	w8, [x8, #63]
10000d08c:	e8 02 00 35	cbnz	w8, 0x10000d0e8
10000d090:	93 00 00 90	adrp	x19, 16 ; 0x10001d000
10000d094:	68 1e 47 f9	ldr	x8, [x19, #3640]
10000d098:	88 02 00 b4	cbz	x8, 0x10000d0e8
10000d09c:	97 00 00 90	adrp	x23, 16 ; 0x10001d000
10000d0a0:	e0 1a 47 f9	ldr	x0, [x23, #3632]
10000d0a4:	33 12 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000d0a8:	ff 1a 07 f9	str	xzr, [x23, #3632]
10000d0ac:	60 1e 47 f9	ldr	x0, [x19, #3640]
10000d0b0:	30 12 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000d0b4:	7f 1e 07 f9	str	xzr, [x19, #3640]
10000d0b8:	93 00 00 b0	adrp	x19, 17 ; 0x10001e000
10000d0bc:	60 7a 41 f9	ldr	x0, [x19, #752]
10000d0c0:	2c 12 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000d0c4:	7f 7a 01 f9	str	xzr, [x19, #752]
10000d0c8:	1f 20 03 d5	nop
10000d0cc:	60 7e 41 f9	ldr	x0, [x19, #760]
10000d0d0:	28 12 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000d0d4:	7f 7e 01 f9	str	xzr, [x19, #760]
10000d0d8:	c0 86 41 f9	ldr	x0, [x22, #776]
10000d0dc:	25 12 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000d0e0:	df 86 01 f9	str	xzr, [x22, #776]
10000d0e4:	9f 42 0e b9	str	wzr, [x20, #3648]
10000d0e8:	a8 5a 4e b9	ldr	w8, [x21, #3672]
10000d0ec:	c8 00 00 34	cbz	w8, 0x10000d104
10000d0f0:	1f 20 03 d5	nop
10000d0f4:	a0 91 08 58	ldr	x0, #70196
10000d0f8:	01 0e 06 10	adr	x1, #49600
10000d0fc:	1f 20 03 d5	nop
10000d100:	7c 12 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
10000d104:	e0 03 01 91	add	x0, sp, #64
10000d108:	01 01 80 52	mov	w1, #8
10000d10c:	ad 12 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000d110:	e0 83 01 91	add	x0, sp, #96
10000d114:	01 01 80 52	mov	w1, #8
10000d118:	aa 12 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000d11c:	a0 83 01 d1	sub	x0, x29, #96
10000d120:	01 01 80 52	mov	w1, #8
10000d124:	a7 12 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000d128:	fd 7b 4e a9	ldp	x29, x30, [sp, #224]
10000d12c:	f4 4f 4d a9	ldp	x20, x19, [sp, #208]
10000d130:	f6 57 4c a9	ldp	x22, x21, [sp, #192]
10000d134:	f8 5f 4b a9	ldp	x24, x23, [sp, #176]
10000d138:	fa 67 4a a9	ldp	x26, x25, [sp, #160]
10000d13c:	ff c3 03 91	add	sp, sp, #240
10000d140:	ff 0f 5f d6	retab
10000d144:	7f 23 03 d5	pacibsp
10000d148:	ff 43 02 d1	sub	sp, sp, #144
10000d14c:	f6 57 06 a9	stp	x22, x21, [sp, #96]
10000d150:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
10000d154:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
10000d158:	fd 03 02 91	add	x29, sp, #128
10000d15c:	f3 03 01 aa	mov	x19, x1
10000d160:	1f 20 03 d5	nop
10000d164:	a8 97 05 58	ldr	x8, #45812 ; literal pool symbol address: ___stack_chk_guard
10000d168:	08 01 40 f9	ldr	x8, [x8]
10000d16c:	a8 83 1d f8	stur	x8, [x29, #-40]
10000d170:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000d174:	e0 93 83 3c	stur	q0, [sp, #57]
10000d178:	e0 03 01 ad	stp	q0, q0, [sp, #32]
10000d17c:	e0 03 00 ad	stp	q0, q0, [sp]
10000d180:	e0 03 01 aa	mov	x0, x1
10000d184:	3b 12 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
10000d188:	00 03 00 b4	cbz	x0, 0x10000d1e8
10000d18c:	e1 03 00 91	mov	x1, sp
10000d190:	22 09 80 52	mov	w2, #73
10000d194:	03 20 80 52	mov	w3, #256
10000d198:	03 00 a1 72	movk	w3, #2048, lsl #16
10000d19c:	fd 11 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
10000d1a0:	1f 20 03 d5	nop
10000d1a4:	f5 60 08 18	ldr	w21, 0x10001ddc0
10000d1a8:	15 02 00 34	cbz	w21, 0x10000d1e8
10000d1ac:	b4 ee 07 10	adr	x20, #64980
10000d1b0:	1f 20 03 d5	nop
10000d1b4:	e0 03 00 91	mov	x0, sp
10000d1b8:	e1 03 14 aa	mov	x1, x20
10000d1bc:	02 02 80 52	mov	w2, #16
10000d1c0:	b4 13 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d1c4:	a0 02 00 34	cbz	w0, 0x10000d218
10000d1c8:	81 42 00 91	add	x1, x20, #16
10000d1cc:	e0 03 00 91	mov	x0, sp
10000d1d0:	02 02 80 52	mov	w2, #16
10000d1d4:	af 13 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d1d8:	00 03 00 34	cbz	w0, 0x10000d238
10000d1dc:	94 a2 03 91	add	x20, x20, #232
10000d1e0:	b5 06 00 f1	subs	x21, x21, #1
10000d1e4:	81 fe ff 54	b.ne	0x10000d1b4
10000d1e8:	00 02 80 52	mov	w0, #16
10000d1ec:	a8 83 5d f8	ldur	x8, [x29, #-40]
10000d1f0:	1f 20 03 d5	nop
10000d1f4:	29 93 05 58	ldr	x9, #45668 ; literal pool symbol address: ___stack_chk_guard
10000d1f8:	29 01 40 f9	ldr	x9, [x9]
10000d1fc:	3f 01 08 eb	cmp	x9, x8
10000d200:	c1 02 00 54	b.ne	0x10000d258
10000d204:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
10000d208:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
10000d20c:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
10000d210:	ff 43 02 91	add	sp, sp, #144
10000d214:	ff 0f 5f d6	retab
10000d218:	28 00 80 52	mov	w8, #1
10000d21c:	88 a2 00 39	strb	w8, [x20, #40]
10000d220:	e0 03 13 aa	mov	x0, x19
10000d224:	0f 12 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d228:	e8 03 00 aa	mov	x8, x0
10000d22c:	00 00 80 52	mov	w0, #0
10000d230:	88 1a 00 f9	str	x8, [x20, #48]
10000d234:	ee ff ff 17	b	0x10000d1ec
10000d238:	28 00 80 52	mov	w8, #1
10000d23c:	88 a6 00 39	strb	w8, [x20, #41]
10000d240:	e0 03 13 aa	mov	x0, x19
10000d244:	07 12 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d248:	e8 03 00 aa	mov	x8, x0
10000d24c:	00 00 80 52	mov	w0, #0
10000d250:	88 1e 00 f9	str	x8, [x20, #56]
10000d254:	e6 ff ff 17	b	0x10000d1ec
10000d258:	6a 12 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000d25c:	7f 23 03 d5	pacibsp
10000d260:	ff 83 04 d1	sub	sp, sp, #288
10000d264:	fc 6f 0c a9	stp	x28, x27, [sp, #192]
10000d268:	fa 67 0d a9	stp	x26, x25, [sp, #208]
10000d26c:	f8 5f 0e a9	stp	x24, x23, [sp, #224]
10000d270:	f6 57 0f a9	stp	x22, x21, [sp, #240]
10000d274:	f4 4f 10 a9	stp	x20, x19, [sp, #256]
10000d278:	fd 7b 11 a9	stp	x29, x30, [sp, #272]
10000d27c:	fd 43 04 91	add	x29, sp, #272
10000d280:	f3 03 01 aa	mov	x19, x1
10000d284:	1f 20 03 d5	nop
10000d288:	88 8e 05 58	ldr	x8, #45520 ; literal pool symbol address: ___stack_chk_guard
10000d28c:	08 01 40 f9	ldr	x8, [x8]
10000d290:	a8 83 1a f8	stur	x8, [x29, #-88]
10000d294:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000d298:	e0 93 89 3c	stur	q0, [sp, #153]
10000d29c:	e0 03 04 ad	stp	q0, q0, [sp, #128]
10000d2a0:	e0 03 03 ad	stp	q0, q0, [sp, #96]
10000d2a4:	e0 03 01 aa	mov	x0, x1
10000d2a8:	f2 11 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
10000d2ac:	60 0f 00 b4	cbz	x0, 0x10000d498
10000d2b0:	78 08 8a d2	mov	x24, #20547
10000d2b4:	b8 0a a4 f2	movk	x24, #8277, lsl #16
10000d2b8:	b8 c8 cd f2	movk	x24, #28229, lsl #32
10000d2bc:	b8 4c ee f2	movk	x24, #29285, lsl #48
10000d2c0:	17 a4 88 d2	mov	x23, #17696
10000d2c4:	d7 ad ac f2	movk	x23, #25966, lsl #16
10000d2c8:	57 ee cc f2	movk	x23, #26482, lsl #32
10000d2cc:	37 0f e0 f2	movk	x23, #121, lsl #48
10000d2d0:	e1 83 01 91	add	x1, sp, #96
10000d2d4:	22 09 80 52	mov	w2, #73
10000d2d8:	03 20 80 52	mov	w3, #256
10000d2dc:	03 00 a1 72	movk	w3, #2048, lsl #16
10000d2e0:	ac 11 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
10000d2e4:	e8 33 40 f9	ldr	x8, [sp, #96]
10000d2e8:	09 03 7e b2	orr	x9, x24, #0x4
10000d2ec:	08 01 09 ca	eor	x8, x8, x9
10000d2f0:	e9 33 46 f8	ldur	x9, [sp, #99]
10000d2f4:	29 01 17 ca	eor	x9, x9, x23
10000d2f8:	08 01 09 aa	orr	x8, x8, x9
10000d2fc:	88 04 00 b4	cbz	x8, 0x10000d38c
10000d300:	9a 00 00 90	adrp	x26, 16 ; 0x10001d000
10000d304:	48 cb 4d b9	ldr	w8, [x26, #3528]
10000d308:	1f 05 00 71	cmp	w8, #1
10000d30c:	41 05 00 54	b.ne	0x10000d3b4
10000d310:	e8 c3 40 79	ldrh	w8, [sp, #96]
10000d314:	29 c8 89 52	mov	w9, #20033
10000d318:	08 01 09 4a	eor	w8, w8, w9
10000d31c:	e9 8b 41 39	ldrb	w9, [sp, #98]
10000d320:	aa 08 80 52	mov	w10, #69
10000d324:	29 01 0a 4a	eor	w9, w9, w10
10000d328:	08 01 09 2a	orr	w8, w8, w9
10000d32c:	48 0d 00 34	cbz	w8, 0x10000d4d4
10000d330:	e8 63 40 b9	ldr	w8, [sp, #96]
10000d334:	89 48 8a 52	mov	w9, #21060
10000d338:	29 a8 a9 72	movk	w9, #19777, lsl #16
10000d33c:	1f 01 09 6b	cmp	w8, w9
10000d340:	a0 11 00 54	b.eq	0x10000d574
10000d344:	e8 c3 40 79	ldrh	w8, [sp, #96]
10000d348:	89 68 88 52	mov	w9, #17220
10000d34c:	08 01 09 4a	eor	w8, w8, w9
10000d350:	e9 8b 41 39	ldrb	w9, [sp, #98]
10000d354:	6a 0a 80 52	mov	w10, #83
10000d358:	29 01 0a 4a	eor	w9, w9, w10
10000d35c:	08 01 09 2a	orr	w8, w8, w9
10000d360:	68 08 00 35	cbnz	w8, 0x10000d46c
10000d364:	14 da 07 10	adr	x20, #64320
10000d368:	1f 20 03 d5	nop
10000d36c:	28 00 80 52	mov	w8, #1
10000d370:	88 02 00 39	strb	w8, [x20]
10000d374:	e0 03 13 aa	mov	x0, x19
10000d378:	ba 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d37c:	e8 03 00 aa	mov	x8, x0
10000d380:	00 00 80 52	mov	w0, #0
10000d384:	88 c2 04 f8	stur	x8, [x20, #76]
10000d388:	45 00 00 14	b	0x10000d49c
10000d38c:	b4 d8 07 50	adr	x20, #64278
10000d390:	1f 20 03 d5	nop
10000d394:	28 00 80 52	mov	w8, #1
10000d398:	88 02 00 39	strb	w8, [x20]
10000d39c:	e0 03 13 aa	mov	x0, x19
10000d3a0:	b0 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d3a4:	e8 03 00 aa	mov	x8, x0
10000d3a8:	00 00 80 52	mov	w0, #0
10000d3ac:	88 62 02 f8	stur	x8, [x20, #38]
10000d3b0:	3b 00 00 14	b	0x10000d49c
10000d3b4:	c8 05 00 34	cbz	w8, 0x10000d46c
10000d3b8:	19 00 80 d2	mov	x25, #0
10000d3bc:	34 83 04 70	adr	x20, #36967 ; literal pool for: "ANE0_%u"
10000d3c0:	1f 20 03 d5	nop
10000d3c4:	35 83 04 70	adr	x21, #36967 ; literal pool for: "DRAM0_%u"
10000d3c8:	1f 20 03 d5	nop
10000d3cc:	56 83 04 10	adr	x22, #36968 ; literal pool for: "DCS0_%u"
10000d3d0:	1f 20 03 d5	nop
10000d3d4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000d3d8:	e0 93 84 3c	stur	q0, [sp, #73]
10000d3dc:	e0 83 01 ad	stp	q0, q0, [sp, #48]
10000d3e0:	e0 83 00 ad	stp	q0, q0, [sp, #16]
10000d3e4:	f9 03 00 f9	str	x25, [sp]
10000d3e8:	e0 43 00 91	add	x0, sp, #16
10000d3ec:	21 09 80 52	mov	w1, #73
10000d3f0:	e2 03 14 aa	mov	x2, x20
10000d3f4:	03 13 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000d3f8:	e0 83 01 91	add	x0, sp, #96
10000d3fc:	e1 43 00 91	add	x1, sp, #16
10000d400:	22 09 80 52	mov	w2, #73
10000d404:	23 13 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d408:	80 0e 00 34	cbz	w0, 0x10000d5d8
10000d40c:	f9 03 00 f9	str	x25, [sp]
10000d410:	e0 43 00 91	add	x0, sp, #16
10000d414:	21 09 80 52	mov	w1, #73
10000d418:	e2 03 15 aa	mov	x2, x21
10000d41c:	f9 12 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000d420:	e0 83 01 91	add	x0, sp, #96
10000d424:	e1 43 00 91	add	x1, sp, #16
10000d428:	22 09 80 52	mov	w2, #73
10000d42c:	19 13 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d430:	a0 0e 00 34	cbz	w0, 0x10000d604
10000d434:	f9 03 00 f9	str	x25, [sp]
10000d438:	e0 43 00 91	add	x0, sp, #16
10000d43c:	21 09 80 52	mov	w1, #73
10000d440:	e2 03 16 aa	mov	x2, x22
10000d444:	ef 12 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000d448:	e0 83 01 91	add	x0, sp, #96
10000d44c:	e1 43 00 91	add	x1, sp, #16
10000d450:	22 09 80 52	mov	w2, #73
10000d454:	0f 13 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d458:	c0 0e 00 34	cbz	w0, 0x10000d630
10000d45c:	48 cb 4d b9	ldr	w8, [x26, #3528]
10000d460:	39 07 00 91	add	x25, x25, #1
10000d464:	3f 03 08 6b	cmp	w25, w8
10000d468:	63 fb ff 54	b.lo	0x10000d3d4
10000d46c:	1f 20 03 d5	nop
10000d470:	99 4a 08 18	ldr	w25, 0x10001ddc0
10000d474:	39 01 00 34	cbz	w25, 0x10000d498
10000d478:	3f 07 00 71	cmp	w25, #1
10000d47c:	01 04 00 54	b.ne	0x10000d4fc
10000d480:	e8 33 40 f9	ldr	x8, [sp, #96]
10000d484:	08 01 18 ca	eor	x8, x8, x24
10000d488:	e9 33 46 f8	ldur	x9, [sp, #99]
10000d48c:	29 01 17 ca	eor	x9, x9, x23
10000d490:	08 01 09 aa	orr	x8, x8, x9
10000d494:	48 0e 00 b4	cbz	x8, 0x10000d65c
10000d498:	00 02 80 52	mov	w0, #16
10000d49c:	a8 83 5a f8	ldur	x8, [x29, #-88]
10000d4a0:	1f 20 03 d5	nop
10000d4a4:	a9 7d 05 58	ldr	x9, #44980 ; literal pool symbol address: ___stack_chk_guard
10000d4a8:	29 01 40 f9	ldr	x9, [x9]
10000d4ac:	3f 01 08 eb	cmp	x9, x8
10000d4b0:	a1 0e 00 54	b.ne	0x10000d684
10000d4b4:	fd 7b 51 a9	ldp	x29, x30, [sp, #272]
10000d4b8:	f4 4f 50 a9	ldp	x20, x19, [sp, #256]
10000d4bc:	f6 57 4f a9	ldp	x22, x21, [sp, #240]
10000d4c0:	f8 5f 4e a9	ldp	x24, x23, [sp, #224]
10000d4c4:	fa 67 4d a9	ldp	x26, x25, [sp, #208]
10000d4c8:	fc 6f 4c a9	ldp	x28, x27, [sp, #192]
10000d4cc:	ff 83 04 91	add	sp, sp, #288
10000d4d0:	ff 0f 5f d6	retab
10000d4d4:	74 ce 07 10	adr	x20, #63948
10000d4d8:	1f 20 03 d5	nop
10000d4dc:	28 20 80 52	mov	w8, #257
10000d4e0:	88 02 00 79	strh	w8, [x20]
10000d4e4:	e0 03 13 aa	mov	x0, x19
10000d4e8:	5e 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d4ec:	e8 03 00 aa	mov	x8, x0
10000d4f0:	00 00 80 52	mov	w0, #0
10000d4f4:	88 06 00 f9	str	x8, [x20, #8]
10000d4f8:	e9 ff ff 17	b	0x10000d49c
10000d4fc:	15 00 80 d2	mov	x21, #0
10000d500:	57 dc 05 10	adr	x23, #48008
10000d504:	1f 20 03 d5	nop
10000d508:	18 1d 80 52	mov	w24, #232
10000d50c:	b6 d1 07 10	adr	x22, #64052
10000d510:	1f 20 03 d5	nop
10000d514:	b4 5a 18 9b	madd	x20, x21, x24, x22
10000d518:	88 0e 42 38	ldrb	w8, [x20, #32]!
10000d51c:	e8 00 00 34	cbz	w8, 0x10000d538
10000d520:	e0 83 01 91	add	x0, sp, #96
10000d524:	e1 03 14 aa	mov	x1, x20
10000d528:	02 02 80 52	mov	w2, #16
10000d52c:	d9 12 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d530:	60 01 00 35	cbnz	w0, 0x10000d55c
10000d534:	1e 00 00 14	b	0x10000d5ac
10000d538:	1a 00 80 d2	mov	x26, #0
10000d53c:	e1 6a 7a f8	ldr	x1, [x23, x26]
10000d540:	e0 83 01 91	add	x0, sp, #96
10000d544:	22 09 80 52	mov	w2, #73
10000d548:	d2 12 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d54c:	80 02 00 34	cbz	w0, 0x10000d59c
10000d550:	5a 43 00 91	add	x26, x26, #16
10000d554:	5f 03 01 f1	cmp	x26, #64
10000d558:	21 ff ff 54	b.ne	0x10000d53c
10000d55c:	b5 06 00 91	add	x21, x21, #1
10000d560:	f7 22 00 91	add	x23, x23, #8
10000d564:	00 02 80 52	mov	w0, #16
10000d568:	bf 02 19 eb	cmp	x21, x25
10000d56c:	41 fd ff 54	b.ne	0x10000d514
10000d570:	cb ff ff 17	b	0x10000d49c
10000d574:	74 c9 07 70	adr	x20, #63791
10000d578:	1f 20 03 d5	nop
10000d57c:	28 00 80 52	mov	w8, #1
10000d580:	88 02 00 39	strb	w8, [x20]
10000d584:	e0 03 13 aa	mov	x0, x19
10000d588:	36 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d58c:	e8 03 00 aa	mov	x8, x0
10000d590:	00 00 80 52	mov	w0, #0
10000d594:	88 d2 02 f8	stur	x8, [x20, #45]
10000d598:	c1 ff ff 17	b	0x10000d49c
10000d59c:	e1 83 01 91	add	x1, sp, #96
10000d5a0:	e0 03 14 aa	mov	x0, x20
10000d5a4:	02 02 80 52	mov	w2, #16
10000d5a8:	be 12 00 94	bl	0x1000120a0 ; symbol stub for: _strncpy
10000d5ac:	a8 7e 40 92	and	x8, x21, #0xffffffff
10000d5b0:	09 1d 80 52	mov	w9, #232
10000d5b4:	14 59 09 9b	madd	x20, x8, x9, x22
10000d5b8:	28 00 80 52	mov	w8, #1
10000d5bc:	88 aa 01 39	strb	w8, [x20, #106]
10000d5c0:	e0 03 13 aa	mov	x0, x19
10000d5c4:	27 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d5c8:	e8 03 00 aa	mov	x8, x0
10000d5cc:	00 00 80 52	mov	w0, #0
10000d5d0:	88 42 00 f9	str	x8, [x20, #128]
10000d5d4:	b2 ff ff 17	b	0x10000d49c
10000d5d8:	54 c6 07 10	adr	x20, #63688
10000d5dc:	1f 20 03 d5	nop
10000d5e0:	28 20 80 52	mov	w8, #257
10000d5e4:	88 02 00 79	strh	w8, [x20]
10000d5e8:	e0 03 13 aa	mov	x0, x19
10000d5ec:	1d 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d5f0:	e8 03 00 aa	mov	x8, x0
10000d5f4:	00 00 80 52	mov	w0, #0
10000d5f8:	89 0e 19 8b	add	x9, x20, x25, lsl #3
10000d5fc:	28 05 00 f9	str	x8, [x9, #8]
10000d600:	a7 ff ff 17	b	0x10000d49c
10000d604:	f4 c4 07 10	adr	x20, #63644
10000d608:	1f 20 03 d5	nop
10000d60c:	28 00 80 52	mov	w8, #1
10000d610:	88 0e 00 39	strb	w8, [x20, #3]
10000d614:	e0 03 13 aa	mov	x0, x19
10000d618:	12 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d61c:	e8 03 00 aa	mov	x8, x0
10000d620:	00 00 80 52	mov	w0, #0
10000d624:	89 0e 19 8b	add	x9, x20, x25, lsl #3
10000d628:	28 19 00 f9	str	x8, [x9, #48]
10000d62c:	9c ff ff 17	b	0x10000d49c
10000d630:	94 c3 07 10	adr	x20, #63600
10000d634:	1f 20 03 d5	nop
10000d638:	28 00 80 52	mov	w8, #1
10000d63c:	88 12 00 39	strb	w8, [x20, #4]
10000d640:	e0 03 13 aa	mov	x0, x19
10000d644:	07 11 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d648:	e8 03 00 aa	mov	x8, x0
10000d64c:	00 00 80 52	mov	w0, #0
10000d650:	89 0e 19 8b	add	x9, x20, x25, lsl #3
10000d654:	28 29 00 f9	str	x8, [x9, #80]
10000d658:	91 ff ff 17	b	0x10000d49c
10000d65c:	74 ca 07 50	adr	x20, #63822
10000d660:	1f 20 03 d5	nop
10000d664:	28 00 80 52	mov	w8, #1
10000d668:	88 02 00 39	strb	w8, [x20]
10000d66c:	e0 03 13 aa	mov	x0, x19
10000d670:	fc 10 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d674:	e8 03 00 aa	mov	x8, x0
10000d678:	00 00 80 52	mov	w0, #0
10000d67c:	88 62 01 f8	stur	x8, [x20, #22]
10000d680:	87 ff ff 17	b	0x10000d49c
10000d684:	5f 11 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000d688:	7f 23 03 d5	pacibsp
10000d68c:	ff 43 02 d1	sub	sp, sp, #144
10000d690:	f6 57 06 a9	stp	x22, x21, [sp, #96]
10000d694:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
10000d698:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
10000d69c:	fd 03 02 91	add	x29, sp, #128
10000d6a0:	f4 03 01 aa	mov	x20, x1
10000d6a4:	f3 03 00 aa	mov	x19, x0
10000d6a8:	1f 20 03 d5	nop
10000d6ac:	68 6d 05 58	ldr	x8, #44460 ; literal pool symbol address: ___stack_chk_guard
10000d6b0:	08 01 40 f9	ldr	x8, [x8]
10000d6b4:	a8 83 1d f8	stur	x8, [x29, #-40]
10000d6b8:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000d6bc:	e0 93 83 3c	stur	q0, [sp, #57]
10000d6c0:	e0 03 01 ad	stp	q0, q0, [sp, #32]
10000d6c4:	e0 03 00 ad	stp	q0, q0, [sp]
10000d6c8:	e0 03 01 aa	mov	x0, x1
10000d6cc:	e9 10 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
10000d6d0:	e0 02 00 b4	cbz	x0, 0x10000d72c
10000d6d4:	e1 03 00 91	mov	x1, sp
10000d6d8:	22 09 80 52	mov	w2, #73
10000d6dc:	03 20 80 52	mov	w3, #256
10000d6e0:	03 00 a1 72	movk	w3, #2048, lsl #16
10000d6e4:	ab 10 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
10000d6e8:	e8 03 40 b9	ldr	w8, [sp]
10000d6ec:	29 c8 89 52	mov	w9, #20033
10000d6f0:	a9 08 a0 72	movk	w9, #69, lsl #16
10000d6f4:	1f 01 09 6b	cmp	w8, w9
10000d6f8:	e0 01 00 54	b.eq	0x10000d734
10000d6fc:	e8 03 40 b9	ldr	w8, [sp]
10000d700:	89 48 8a 52	mov	w9, #21060
10000d704:	29 a8 a9 72	movk	w9, #19777, lsl #16
10000d708:	08 01 09 4a	eor	w8, w8, w9
10000d70c:	e9 13 40 39	ldrb	w9, [sp, #4]
10000d710:	08 01 09 2a	orr	w8, w8, w9
10000d714:	a8 01 00 34	cbz	w8, 0x10000d748
10000d718:	e8 03 40 b9	ldr	w8, [sp]
10000d71c:	89 68 88 52	mov	w9, #17220
10000d720:	69 0a a0 72	movk	w9, #83, lsl #16
10000d724:	1f 01 09 6b	cmp	w8, w9
10000d728:	a0 01 00 54	b.eq	0x10000d75c
10000d72c:	00 02 80 52	mov	w0, #16
10000d730:	18 00 00 14	b	0x10000d790
10000d734:	75 bb 07 10	adr	x21, #63340
10000d738:	1f 20 03 d5	nop
10000d73c:	28 20 80 52	mov	w8, #257
10000d740:	a8 86 00 78	strh	w8, [x21], #8
10000d744:	0a 00 00 14	b	0x10000d76c
10000d748:	d5 ba 07 70	adr	x21, #63323
10000d74c:	1f 20 03 d5	nop
10000d750:	28 00 80 52	mov	w8, #1
10000d754:	a8 d6 02 38	strb	w8, [x21], #45
10000d758:	05 00 00 14	b	0x10000d76c
10000d75c:	55 ba 07 10	adr	x21, #63304
10000d760:	1f 20 03 d5	nop
10000d764:	28 00 80 52	mov	w8, #1
10000d768:	a8 c6 04 38	strb	w8, [x21], #76
10000d76c:	e0 03 14 aa	mov	x0, x20
10000d770:	bc 10 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d774:	e8 03 00 aa	mov	x8, x0
10000d778:	00 00 80 52	mov	w0, #0
10000d77c:	a8 02 00 f9	str	x8, [x21]
10000d780:	68 12 40 f9	ldr	x8, [x19, #32]
10000d784:	08 05 40 f9	ldr	x8, [x8, #8]
10000d788:	29 00 80 52	mov	w9, #1
10000d78c:	09 61 00 39	strb	w9, [x8, #24]
10000d790:	a8 83 5d f8	ldur	x8, [x29, #-40]
10000d794:	1f 20 03 d5	nop
10000d798:	09 66 05 58	ldr	x9, #44224 ; literal pool symbol address: ___stack_chk_guard
10000d79c:	29 01 40 f9	ldr	x9, [x9]
10000d7a0:	3f 01 08 eb	cmp	x9, x8
10000d7a4:	c1 00 00 54	b.ne	0x10000d7bc
10000d7a8:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
10000d7ac:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
10000d7b0:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
10000d7b4:	ff 43 02 91	add	sp, sp, #144
10000d7b8:	ff 0f 5f d6	retab
10000d7bc:	11 11 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000d7c0:	7f 23 03 d5	pacibsp
10000d7c4:	ff 83 02 d1	sub	sp, sp, #160
10000d7c8:	f8 5f 06 a9	stp	x24, x23, [sp, #96]
10000d7cc:	f6 57 07 a9	stp	x22, x21, [sp, #112]
10000d7d0:	f4 4f 08 a9	stp	x20, x19, [sp, #128]
10000d7d4:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
10000d7d8:	fd 43 02 91	add	x29, sp, #144
10000d7dc:	f4 03 01 aa	mov	x20, x1
10000d7e0:	f3 03 00 aa	mov	x19, x0
10000d7e4:	1f 20 03 d5	nop
10000d7e8:	88 63 05 58	ldr	x8, #44144 ; literal pool symbol address: ___stack_chk_guard
10000d7ec:	08 01 40 f9	ldr	x8, [x8]
10000d7f0:	a8 83 1c f8	stur	x8, [x29, #-56]
10000d7f4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000d7f8:	e0 93 83 3c	stur	q0, [sp, #57]
10000d7fc:	e0 03 01 ad	stp	q0, q0, [sp, #32]
10000d800:	e0 03 00 ad	stp	q0, q0, [sp]
10000d804:	e0 03 01 aa	mov	x0, x1
10000d808:	9a 10 00 94	bl	0x100011a70 ; symbol stub for: _IOReportChannelGetChannelName
10000d80c:	40 03 00 b4	cbz	x0, 0x10000d874
10000d810:	e1 03 00 91	mov	x1, sp
10000d814:	22 09 80 52	mov	w2, #73
10000d818:	03 20 80 52	mov	w3, #256
10000d81c:	03 00 a1 72	movk	w3, #2048, lsl #16
10000d820:	5c 10 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
10000d824:	96 00 00 90	adrp	x22, 16 ; 0x10001d000
10000d828:	d8 c2 4d b9	ldr	w24, [x22, #3520]
10000d82c:	58 02 00 34	cbz	w24, 0x10000d874
10000d830:	17 00 80 d2	mov	x23, #0
10000d834:	d5 bb 07 10	adr	x21, #63352
10000d838:	1f 20 03 d5	nop
10000d83c:	a1 f2 00 d1	sub	x1, x21, #60
10000d840:	e0 03 00 91	mov	x0, sp
10000d844:	02 02 80 52	mov	w2, #16
10000d848:	12 12 00 94	bl	0x100012090 ; symbol stub for: _strncmp
10000d84c:	c0 00 00 35	cbnz	w0, 0x10000d864
10000d850:	e0 03 14 aa	mov	x0, x20
10000d854:	bb 10 00 94	bl	0x100011b40 ; symbol stub for: _IOReportStateGetCount
10000d858:	1f 08 00 71	cmp	w0, #2
10000d85c:	60 02 00 54	b.eq	0x10000d8a8
10000d860:	d8 c2 4d b9	ldr	w24, [x22, #3520]
10000d864:	f7 06 00 91	add	x23, x23, #1
10000d868:	b5 a2 03 91	add	x21, x21, #232
10000d86c:	ff 42 38 eb	cmp	x23, w24, uxtw
10000d870:	63 fe ff 54	b.lo	0x10000d83c
10000d874:	00 02 80 52	mov	w0, #16
10000d878:	a8 83 5c f8	ldur	x8, [x29, #-56]
10000d87c:	1f 20 03 d5	nop
10000d880:	c9 5e 05 58	ldr	x9, #43992 ; literal pool symbol address: ___stack_chk_guard
10000d884:	29 01 40 f9	ldr	x9, [x9]
10000d888:	3f 01 08 eb	cmp	x9, x8
10000d88c:	41 02 00 54	b.ne	0x10000d8d4
10000d890:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
10000d894:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
10000d898:	f6 57 47 a9	ldp	x22, x21, [sp, #112]
10000d89c:	f8 5f 46 a9	ldp	x24, x23, [sp, #96]
10000d8a0:	ff 83 02 91	add	sp, sp, #160
10000d8a4:	ff 0f 5f d6	retab
10000d8a8:	36 00 80 52	mov	w22, #1
10000d8ac:	b6 02 00 39	strb	w22, [x21]
10000d8b0:	e0 03 14 aa	mov	x0, x20
10000d8b4:	6b 10 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d8b8:	e8 03 00 aa	mov	x8, x0
10000d8bc:	00 00 80 52	mov	w0, #0
10000d8c0:	a8 c2 01 f8	stur	x8, [x21, #28]
10000d8c4:	68 12 40 f9	ldr	x8, [x19, #32]
10000d8c8:	08 05 40 f9	ldr	x8, [x8, #8]
10000d8cc:	16 61 00 39	strb	w22, [x8, #24]
10000d8d0:	ea ff ff 17	b	0x10000d878
10000d8d4:	cb 10 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000d8d8:	7f 23 03 d5	pacibsp
10000d8dc:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
10000d8e0:	f6 57 01 a9	stp	x22, x21, [sp, #16]
10000d8e4:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
10000d8e8:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000d8ec:	fd c3 00 91	add	x29, sp, #48
10000d8f0:	f4 03 01 aa	mov	x20, x1
10000d8f4:	f3 03 00 aa	mov	x19, x0
10000d8f8:	e0 03 01 aa	mov	x0, x1
10000d8fc:	59 10 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d900:	96 00 00 90	adrp	x22, 16 ; 0x10001d000
10000d904:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000d908:	68 02 00 34	cbz	w8, 0x10000d954
10000d90c:	f5 03 00 aa	mov	x21, x0
10000d910:	17 00 80 d2	mov	x23, #0
10000d914:	38 b5 07 10	adr	x24, #63140
10000d918:	1f 20 03 d5	nop
10000d91c:	09 13 5f 38	ldurb	w9, [x24, #-15]
10000d920:	29 01 00 34	cbz	w9, 0x10000d944
10000d924:	09 03 40 f9	ldr	x9, [x24]
10000d928:	bf 02 09 eb	cmp	x21, x9
10000d92c:	c1 00 00 54	b.ne	0x10000d944
10000d930:	01 63 40 b9	ldr	w1, [x24, #96]
10000d934:	e0 03 14 aa	mov	x0, x20
10000d938:	8e 10 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
10000d93c:	80 01 00 b5	cbnz	x0, 0x10000d96c
10000d940:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000d944:	f7 06 00 91	add	x23, x23, #1
10000d948:	18 a3 03 91	add	x24, x24, #232
10000d94c:	ff 42 28 eb	cmp	x23, w8, uxtw
10000d950:	63 fe ff 54	b.lo	0x10000d91c
10000d954:	00 00 80 52	mov	w0, #0
10000d958:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000d95c:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
10000d960:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
10000d964:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
10000d968:	ff 0f 5f d6	retab
10000d96c:	68 12 40 f9	ldr	x8, [x19, #32]
10000d970:	08 05 40 f9	ldr	x8, [x8, #8]
10000d974:	29 00 80 52	mov	w9, #1
10000d978:	09 61 00 39	strb	w9, [x8, #24]
10000d97c:	20 22 80 52	mov	w0, #273
10000d980:	f6 ff ff 17	b	0x10000d958
10000d984:	7f 23 03 d5	pacibsp
10000d988:	ff c3 02 d1	sub	sp, sp, #176
10000d98c:	fa 67 06 a9	stp	x26, x25, [sp, #96]
10000d990:	f8 5f 07 a9	stp	x24, x23, [sp, #112]
10000d994:	f6 57 08 a9	stp	x22, x21, [sp, #128]
10000d998:	f4 4f 09 a9	stp	x20, x19, [sp, #144]
10000d99c:	fd 7b 0a a9	stp	x29, x30, [sp, #160]
10000d9a0:	fd 83 02 91	add	x29, sp, #160
10000d9a4:	f3 03 01 aa	mov	x19, x1
10000d9a8:	1f 20 03 d5	nop
10000d9ac:	68 55 05 58	ldr	x8, #43692 ; literal pool symbol address: ___stack_chk_guard
10000d9b0:	08 01 40 f9	ldr	x8, [x8]
10000d9b4:	a8 83 1b f8	stur	x8, [x29, #-72]
10000d9b8:	e0 03 01 aa	mov	x0, x1
10000d9bc:	29 10 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000d9c0:	97 00 00 90	adrp	x23, 16 ; 0x10001d000
10000d9c4:	e8 c2 4d b9	ldr	w8, [x23, #3520]
10000d9c8:	88 0e 00 34	cbz	w8, 0x10000db98
10000d9cc:	f4 03 00 aa	mov	x20, x0
10000d9d0:	15 00 80 d2	mov	x21, #0
10000d9d4:	38 89 88 52	mov	w24, #17481
10000d9d8:	98 a9 a8 72	movk	w24, #17740, lsl #16
10000d9dc:	99 e8 89 52	mov	w25, #20292
10000d9e0:	f9 ca a9 72	movk	w25, #20055, lsl #16
10000d9e4:	3a 00 80 52	mov	w26, #1
10000d9e8:	96 b1 07 10	adr	x22, #63024
10000d9ec:	1f 20 03 d5	nop
10000d9f0:	c8 c2 5f b8	ldur	w8, [x22, #-4]
10000d9f4:	c8 04 00 35	cbnz	w8, 0x10000da8c
10000d9f8:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10000d9fc:	e0 93 83 3c	stur	q0, [sp, #57]
10000da00:	e0 03 01 ad	stp	q0, q0, [sp, #32]
10000da04:	e0 03 00 ad	stp	q0, q0, [sp]
10000da08:	e0 03 13 aa	mov	x0, x19
10000da0c:	01 00 80 52	mov	w1, #0
10000da10:	54 10 00 94	bl	0x100011b60 ; symbol stub for: _IOReportStateGetNameForIndex
10000da14:	e1 03 00 91	mov	x1, sp
10000da18:	22 09 80 52	mov	w2, #73
10000da1c:	03 20 80 52	mov	w3, #256
10000da20:	03 00 a1 72	movk	w3, #2048, lsl #16
10000da24:	db 0f 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
10000da28:	e8 03 40 b9	ldr	w8, [sp]
10000da2c:	08 01 18 4a	eor	w8, w8, w24
10000da30:	e9 13 40 39	ldrb	w9, [sp, #4]
10000da34:	08 01 09 2a	orr	w8, w8, w9
10000da38:	08 02 00 34	cbz	w8, 0x10000da78
10000da3c:	e8 03 40 b9	ldr	w8, [sp]
10000da40:	08 01 19 4a	eor	w8, w8, w25
10000da44:	e9 13 40 39	ldrb	w9, [sp, #4]
10000da48:	08 01 09 2a	orr	w8, w8, w9
10000da4c:	28 0c 00 35	cbnz	w8, 0x10000dbd0
10000da50:	da 02 00 b9	str	w26, [x22]
10000da54:	c8 82 58 f8	ldur	x8, [x22, #-120]
10000da58:	08 05 40 b9	ldr	w8, [x8, #4]
10000da5c:	08 09 00 11	add	w8, w8, #2
10000da60:	c8 c2 1f b8	stur	w8, [x22, #-4]
10000da64:	c0 02 5e f8	ldur	x0, [x22, #-32]
10000da68:	01 f1 7d d3	lsl	x1, x8, #3
10000da6c:	51 11 00 94	bl	0x100011fb0 ; symbol stub for: _realloc
10000da70:	c0 02 1e f8	stur	x0, [x22, #-32]
10000da74:	06 00 00 14	b	0x10000da8c
10000da78:	df 02 00 b9	str	wzr, [x22]
10000da7c:	c8 82 58 f8	ldur	x8, [x22, #-120]
10000da80:	08 05 40 b9	ldr	w8, [x8, #4]
10000da84:	08 05 00 11	add	w8, w8, #1
10000da88:	c8 c2 1f b8	stur	w8, [x22, #-4]
10000da8c:	c8 02 59 38	ldurb	w8, [x22, #-112]
10000da90:	88 00 00 34	cbz	w8, 0x10000daa0
10000da94:	c8 82 59 f8	ldur	x8, [x22, #-104]
10000da98:	9f 02 08 eb	cmp	x20, x8
10000da9c:	80 01 00 54	b.eq	0x10000dacc
10000daa0:	c8 12 59 38	ldurb	w8, [x22, #-111]
10000daa4:	88 00 00 34	cbz	w8, 0x10000dab4
10000daa8:	c8 02 5a f8	ldur	x8, [x22, #-96]
10000daac:	9f 02 08 eb	cmp	x20, x8
10000dab0:	80 02 00 54	b.eq	0x10000db00
10000dab4:	b5 06 00 91	add	x21, x21, #1
10000dab8:	e8 c2 4d b9	ldr	w8, [x23, #3520]
10000dabc:	d6 a2 03 91	add	x22, x22, #232
10000dac0:	bf 02 08 eb	cmp	x21, x8
10000dac4:	63 f9 ff 54	b.lo	0x10000d9f0
10000dac8:	34 00 00 14	b	0x10000db98
10000dacc:	1f 20 03 d5	nop
10000dad0:	88 33 07 18	ldr	w8, 0x10001c140
10000dad4:	1f 05 00 71	cmp	w8, #1
10000dad8:	c1 02 00 54	b.ne	0x10000db30
10000dadc:	c8 32 59 38	ldurb	w8, [x22, #-109]
10000dae0:	c8 05 00 35	cbnz	w8, 0x10000db98
10000dae4:	c1 02 40 b9	ldr	w1, [x22]
10000dae8:	e0 03 13 aa	mov	x0, x19
10000daec:	21 10 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
10000daf0:	c8 02 5e f8	ldur	x8, [x22, #-32]
10000daf4:	c9 02 40 b9	ldr	w9, [x22]
10000daf8:	00 79 29 f8	str	x0, [x8, x9, lsl #3]
10000dafc:	27 00 00 14	b	0x10000db98
10000db00:	74 00 00 f0	adrp	x20, 15 ; 0x10001c000
10000db04:	88 42 41 b9	ldr	w8, [x20, #320]
10000db08:	1f 09 00 71	cmp	w8, #2
10000db0c:	01 02 00 54	b.ne	0x10000db4c
10000db10:	c2 c2 5f b8	ldur	w2, [x22, #-4]
10000db14:	e0 03 13 aa	mov	x0, x19
10000db18:	01 00 80 d2	mov	x1, #0
10000db1c:	2f 00 00 94	bl	0x10000dbd8
10000db20:	40 01 00 b4	cbz	x0, 0x10000db48
10000db24:	28 00 80 52	mov	w8, #1
10000db28:	88 42 01 b9	str	w8, [x20, #320]
10000db2c:	0a 00 00 14	b	0x10000db54
10000db30:	c1 02 5e f8	ldur	x1, [x22, #-32]
10000db34:	c2 c2 5f b8	ldur	w2, [x22, #-4]
10000db38:	e0 03 13 aa	mov	x0, x19
10000db3c:	27 00 00 94	bl	0x10000dbd8
10000db40:	c0 82 1d f8	stur	x0, [x22, #-40]
10000db44:	15 00 00 14	b	0x10000db98
10000db48:	88 42 41 b9	ldr	w8, [x20, #320]
10000db4c:	1f 05 00 71	cmp	w8, #1
10000db50:	41 02 00 54	b.ne	0x10000db98
10000db54:	08 1d 80 52	mov	w8, #232
10000db58:	49 9f 07 10	adr	x9, #62440
10000db5c:	1f 20 03 d5	nop
10000db60:	b4 26 08 9b	madd	x20, x21, x8, x9
10000db64:	81 8e 4b f8	ldr	x1, [x20, #184]!
10000db68:	f5 03 14 aa	mov	x21, x20
10000db6c:	a8 0e 42 b8	ldr	w8, [x21, #32]!
10000db70:	36 78 68 f8	ldr	x22, [x1, x8, lsl #3]
10000db74:	82 1e 40 b9	ldr	w2, [x20, #28]
10000db78:	e0 03 13 aa	mov	x0, x19
10000db7c:	17 00 00 94	bl	0x10000dbd8
10000db80:	80 82 1f f8	stur	x0, [x20, #-8]
10000db84:	88 32 5b 38	ldurb	w8, [x20, #-77]
10000db88:	88 00 00 35	cbnz	w8, 0x10000db98
10000db8c:	88 02 40 f9	ldr	x8, [x20]
10000db90:	a9 02 40 b9	ldr	w9, [x21]
10000db94:	16 79 29 f8	str	x22, [x8, x9, lsl #3]
10000db98:	a8 83 5b f8	ldur	x8, [x29, #-72]
10000db9c:	1f 20 03 d5	nop
10000dba0:	c9 45 05 58	ldr	x9, #43192 ; literal pool symbol address: ___stack_chk_guard
10000dba4:	29 01 40 f9	ldr	x9, [x9]
10000dba8:	3f 01 08 eb	cmp	x9, x8
10000dbac:	41 01 00 54	b.ne	0x10000dbd4
10000dbb0:	00 00 80 52	mov	w0, #0
10000dbb4:	fd 7b 4a a9	ldp	x29, x30, [sp, #160]
10000dbb8:	f4 4f 49 a9	ldp	x20, x19, [sp, #144]
10000dbbc:	f6 57 48 a9	ldp	x22, x21, [sp, #128]
10000dbc0:	f8 5f 47 a9	ldp	x24, x23, [sp, #112]
10000dbc4:	fa 67 46 a9	ldp	x26, x25, [sp, #96]
10000dbc8:	ff c3 02 91	add	sp, sp, #176
10000dbcc:	ff 0f 5f d6	retab
10000dbd0:	78 0e 00 94	bl	0x1000115b0
10000dbd4:	0b 10 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000dbd8:	7f 23 03 d5	pacibsp
10000dbdc:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
10000dbe0:	f6 57 01 a9	stp	x22, x21, [sp, #16]
10000dbe4:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
10000dbe8:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000dbec:	fd c3 00 91	add	x29, sp, #48
10000dbf0:	f7 03 02 aa	mov	x23, x2
10000dbf4:	f3 03 01 aa	mov	x19, x1
10000dbf8:	f4 03 00 aa	mov	x20, x0
10000dbfc:	d1 0f 00 94	bl	0x100011b40 ; symbol stub for: _IOReportStateGetCount
10000dc00:	1f 00 17 6b	cmp	w0, w23
10000dc04:	c1 02 00 54	b.ne	0x10000dc5c
10000dc08:	d7 01 00 34	cbz	w23, 0x10000dc40
10000dc0c:	16 00 80 d2	mov	x22, #0
10000dc10:	15 00 80 d2	mov	x21, #0
10000dc14:	f7 03 17 2a	mov	w23, w23
10000dc18:	e0 03 14 aa	mov	x0, x20
10000dc1c:	e1 03 16 aa	mov	x1, x22
10000dc20:	d4 0f 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
10000dc24:	53 00 00 b4	cbz	x19, 0x10000dc2c
10000dc28:	60 7a 36 f8	str	x0, [x19, x22, lsl #3]
10000dc2c:	15 00 15 8b	add	x21, x0, x21
10000dc30:	d6 06 00 91	add	x22, x22, #1
10000dc34:	ff 02 16 eb	cmp	x23, x22
10000dc38:	01 ff ff 54	b.ne	0x10000dc18
10000dc3c:	02 00 00 14	b	0x10000dc44
10000dc40:	15 00 80 d2	mov	x21, #0
10000dc44:	e0 03 15 aa	mov	x0, x21
10000dc48:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000dc4c:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
10000dc50:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
10000dc54:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
10000dc58:	ff 0f 5f d6	retab
10000dc5c:	60 0e 00 94	bl	0x1000115dc
10000dc60:	7f 23 03 d5	pacibsp
10000dc64:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000dc68:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000dc6c:	fd 43 00 91	add	x29, sp, #16
10000dc70:	f3 03 01 aa	mov	x19, x1
10000dc74:	e0 03 01 aa	mov	x0, x1
10000dc78:	7a 0f 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000dc7c:	28 91 07 50	adr	x8, #61990
10000dc80:	1f 20 03 d5	nop
10000dc84:	09 01 40 39	ldrb	w9, [x8]
10000dc88:	08 61 42 f8	ldur	x8, [x8, #38]
10000dc8c:	3f 01 00 71	cmp	w9, #0
10000dc90:	00 10 48 fa	ccmp	x0, x8, #0, ne
10000dc94:	e0 06 00 54	b.eq	0x10000dd70
10000dc98:	68 00 00 f0	adrp	x8, 15 ; 0x10001c000
10000dc9c:	09 85 7a 39	ldrb	w9, [x8, #3745]
10000dca0:	88 00 00 90	adrp	x8, 16 ; 0x10001d000
10000dca4:	69 01 00 34	cbz	w9, 0x10000dcd0
10000dca8:	09 c9 4d b9	ldr	w9, [x8, #3528]
10000dcac:	29 01 00 34	cbz	w9, 0x10000dcd0
10000dcb0:	ca 8f 07 10	adr	x10, #61944
10000dcb4:	1f 20 03 d5	nop
10000dcb8:	4b 01 40 f9	ldr	x11, [x10]
10000dcbc:	1f 00 0b eb	cmp	x0, x11
10000dcc0:	60 07 00 54	b.eq	0x10000ddac
10000dcc4:	4a 21 00 91	add	x10, x10, #8
10000dcc8:	29 05 00 f1	subs	x9, x9, #1
10000dccc:	61 ff ff 54	b.ne	0x10000dcb8
10000dcd0:	69 00 00 f0	adrp	x9, 15 ; 0x10001c000
10000dcd4:	29 8d 7a 39	ldrb	w9, [x9, #3747]
10000dcd8:	69 01 00 34	cbz	w9, 0x10000dd04
10000dcdc:	09 c9 4d b9	ldr	w9, [x8, #3528]
10000dce0:	29 01 00 34	cbz	w9, 0x10000dd04
10000dce4:	6a 8f 07 10	adr	x10, #61932
10000dce8:	1f 20 03 d5	nop
10000dcec:	4b 01 40 f9	ldr	x11, [x10]
10000dcf0:	1f 00 0b eb	cmp	x0, x11
10000dcf4:	c0 06 00 54	b.eq	0x10000ddcc
10000dcf8:	4a 21 00 91	add	x10, x10, #8
10000dcfc:	29 05 00 f1	subs	x9, x9, #1
10000dd00:	61 ff ff 54	b.ne	0x10000dcec
10000dd04:	69 00 00 f0	adrp	x9, 15 ; 0x10001c000
10000dd08:	29 91 7a 39	ldrb	w9, [x9, #3748]
10000dd0c:	69 01 00 34	cbz	w9, 0x10000dd38
10000dd10:	08 c9 4d b9	ldr	w8, [x8, #3528]
10000dd14:	28 01 00 34	cbz	w8, 0x10000dd38
10000dd18:	c9 8e 07 10	adr	x9, #61912
10000dd1c:	1f 20 03 d5	nop
10000dd20:	2a 01 40 f9	ldr	x10, [x9]
10000dd24:	1f 00 0a eb	cmp	x0, x10
10000dd28:	20 06 00 54	b.eq	0x10000ddec
10000dd2c:	29 21 00 91	add	x9, x9, #8
10000dd30:	08 05 00 f1	subs	x8, x8, #1
10000dd34:	61 ff ff 54	b.ne	0x10000dd20
10000dd38:	1f 20 03 d5	nop
10000dd3c:	28 04 08 18	ldr	w8, 0x10001ddc0
10000dd40:	e8 02 00 34	cbz	w8, 0x10000dd9c
10000dd44:	74 94 07 10	adr	x20, #62092
10000dd48:	1f 20 03 d5	nop
10000dd4c:	89 a2 5d 38	ldurb	w9, [x20, #-38]
10000dd50:	89 00 00 34	cbz	w9, 0x10000dd60
10000dd54:	89 02 5f f8	ldur	x9, [x20, #-16]
10000dd58:	1f 00 09 eb	cmp	x0, x9
10000dd5c:	80 05 00 54	b.eq	0x10000de0c
10000dd60:	94 a2 03 91	add	x20, x20, #232
10000dd64:	08 05 00 f1	subs	x8, x8, #1
10000dd68:	21 ff ff 54	b.ne	0x10000dd4c
10000dd6c:	0c 00 00 14	b	0x10000dd9c
10000dd70:	e0 03 13 aa	mov	x0, x19
10000dd74:	01 00 80 d2	mov	x1, #0
10000dd78:	6e 0f 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000dd7c:	68 9b 86 d2	mov	x8, #13531
10000dd80:	c8 f6 ba f2	movk	x8, #55222, lsl #16
10000dd84:	48 d0 db f2	movk	x8, #56962, lsl #32
10000dd88:	68 63 e8 f2	movk	x8, #17179, lsl #48
10000dd8c:	08 7c c8 9b	umulh	x8, x0, x8
10000dd90:	08 fd 52 d3	lsr	x8, x8, #18
10000dd94:	69 00 00 f0	adrp	x9, 15 ; 0x10001c000
10000dd98:	28 91 07 f9	str	x8, [x9, #3872]
10000dd9c:	00 00 80 52	mov	w0, #0
10000dda0:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000dda4:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000dda8:	ff 0f 5f d6	retab
10000ddac:	e0 03 13 aa	mov	x0, x19
10000ddb0:	01 00 80 d2	mov	x1, #0
10000ddb4:	5f 0f 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000ddb8:	68 00 00 f0	adrp	x8, 15 ; 0x10001c000
10000ddbc:	09 8d 47 f9	ldr	x9, [x8, #3864]
10000ddc0:	29 01 00 8b	add	x9, x9, x0
10000ddc4:	09 8d 07 f9	str	x9, [x8, #3864]
10000ddc8:	f5 ff ff 17	b	0x10000dd9c
10000ddcc:	e0 03 13 aa	mov	x0, x19
10000ddd0:	01 00 80 d2	mov	x1, #0
10000ddd4:	57 0f 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000ddd8:	68 00 00 f0	adrp	x8, 15 ; 0x10001c000
10000dddc:	09 95 47 f9	ldr	x9, [x8, #3880]
10000dde0:	29 01 00 8b	add	x9, x9, x0
10000dde4:	09 95 07 f9	str	x9, [x8, #3880]
10000dde8:	ed ff ff 17	b	0x10000dd9c
10000ddec:	e0 03 13 aa	mov	x0, x19
10000ddf0:	01 00 80 d2	mov	x1, #0
10000ddf4:	4f 0f 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000ddf8:	68 00 00 f0	adrp	x8, 15 ; 0x10001c000
10000ddfc:	09 99 47 f9	ldr	x9, [x8, #3888]
10000de00:	29 01 00 8b	add	x9, x9, x0
10000de04:	09 99 07 f9	str	x9, [x8, #3888]
10000de08:	e5 ff ff 17	b	0x10000dd9c
10000de0c:	e0 03 13 aa	mov	x0, x19
10000de10:	01 00 80 d2	mov	x1, #0
10000de14:	47 0f 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000de18:	80 02 00 f9	str	x0, [x20]
10000de1c:	e0 ff ff 17	b	0x10000dd9c
10000de20:	7f 23 03 d5	pacibsp
10000de24:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000de28:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000de2c:	fd 43 00 91	add	x29, sp, #16
10000de30:	f3 03 01 aa	mov	x19, x1
10000de34:	e0 03 01 aa	mov	x0, x1
10000de38:	0a 0f 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000de3c:	28 83 07 30	adr	x8, #61541
10000de40:	1f 20 03 d5	nop
10000de44:	09 01 40 39	ldrb	w9, [x8]
10000de48:	0a 71 40 f8	ldur	x10, [x8, #7]
10000de4c:	3f 01 00 71	cmp	w9, #0
10000de50:	00 10 4a fa	ccmp	x0, x10, #0, ne
10000de54:	20 02 00 54	b.eq	0x10000de98
10000de58:	48 82 07 70	adr	x8, #61515
10000de5c:	1f 20 03 d5	nop
10000de60:	09 01 40 39	ldrb	w9, [x8]
10000de64:	0a d1 42 f8	ldur	x10, [x8, #45]
10000de68:	3f 01 00 71	cmp	w9, #0
10000de6c:	00 10 4a fa	ccmp	x0, x10, #0, ne
10000de70:	80 01 00 54	b.eq	0x10000dea0
10000de74:	88 81 07 10	adr	x8, #61488
10000de78:	1f 20 03 d5	nop
10000de7c:	09 01 40 39	ldrb	w9, [x8]
10000de80:	0a c1 44 f8	ldur	x10, [x8, #76]
10000de84:	3f 01 00 71	cmp	w9, #0
10000de88:	00 10 4a fa	ccmp	x0, x10, #0, ne
10000de8c:	41 01 00 54	b.ne	0x10000deb4
10000de90:	14 31 02 91	add	x20, x8, #140
10000de94:	04 00 00 14	b	0x10000dea4
10000de98:	14 dd 01 91	add	x20, x8, #119
10000de9c:	02 00 00 14	b	0x10000dea4
10000dea0:	14 15 02 91	add	x20, x8, #133
10000dea4:	e0 03 13 aa	mov	x0, x19
10000dea8:	01 00 80 d2	mov	x1, #0
10000deac:	21 0f 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000deb0:	80 02 00 f9	str	x0, [x20]
10000deb4:	00 00 80 52	mov	w0, #0
10000deb8:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000debc:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000dec0:	ff 0f 5f d6	retab
10000dec4:	7f 23 03 d5	pacibsp
10000dec8:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000decc:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000ded0:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000ded4:	fd 83 00 91	add	x29, sp, #32
10000ded8:	e8 03 01 aa	mov	x8, x1
10000dedc:	f3 03 00 aa	mov	x19, x0
10000dee0:	96 00 00 90	adrp	x22, 16 ; 0x10001d000
10000dee4:	c9 ea 46 f9	ldr	x9, [x22, #3536]
10000dee8:	0a 2c 42 a9	ldp	x10, x11, [x0, #32]
10000deec:	4a 05 40 f9	ldr	x10, [x10, #8]
10000def0:	4a 19 40 b9	ldr	w10, [x10, #24]
10000def4:	29 15 0a 8b	add	x9, x9, x10, lsl #5
10000def8:	21 0d 40 f9	ldr	x1, [x9, #24]
10000defc:	69 05 40 f9	ldr	x9, [x11, #8]
10000df00:	29 19 40 b9	ldr	w9, [x9, #24]
10000df04:	14 1d 80 52	mov	w20, #232
10000df08:	d5 81 07 10	adr	x21, #61496
10000df0c:	1f 20 03 d5	nop
10000df10:	29 55 14 9b	madd	x9, x9, x20, x21
10000df14:	29 31 40 f9	ldr	x9, [x9, #96]
10000df18:	29 05 40 b9	ldr	w9, [x9, #4]
10000df1c:	22 05 00 11	add	w2, w9, #1
10000df20:	e0 03 08 aa	mov	x0, x8
10000df24:	2d ff ff 97	bl	0x10000dbd8
10000df28:	c8 ea 46 f9	ldr	x8, [x22, #3536]
10000df2c:	69 12 40 f9	ldr	x9, [x19, #32]
10000df30:	29 05 40 f9	ldr	x9, [x9, #8]
10000df34:	29 19 40 b9	ldr	w9, [x9, #24]
10000df38:	09 15 09 8b	add	x9, x8, x9, lsl #5
10000df3c:	20 09 00 f9	str	x0, [x9, #16]
10000df40:	69 2a 42 a9	ldp	x9, x10, [x19, #32]
10000df44:	29 05 40 f9	ldr	x9, [x9, #8]
10000df48:	29 19 40 b9	ldr	w9, [x9, #24]
10000df4c:	08 15 09 8b	add	x8, x8, x9, lsl #5
10000df50:	08 0d 40 f9	ldr	x8, [x8, #24]
10000df54:	00 21 00 91	add	x0, x8, #8
10000df58:	48 05 40 f9	ldr	x8, [x10, #8]
10000df5c:	08 19 40 b9	ldr	w8, [x8, #24]
10000df60:	08 55 14 9b	madd	x8, x8, x20, x21
10000df64:	08 31 40 f9	ldr	x8, [x8, #96]
10000df68:	01 05 40 f9	ldr	x1, [x8, #8]
10000df6c:	02 05 40 b9	ldr	w2, [x8, #4]
10000df70:	0a 06 00 94	bl	0x10000f798
10000df74:	c8 ea 46 f9	ldr	x8, [x22, #3536]
10000df78:	69 12 40 f9	ldr	x9, [x19, #32]
10000df7c:	29 05 40 f9	ldr	x9, [x9, #8]
10000df80:	29 19 40 b9	ldr	w9, [x9, #24]
10000df84:	08 15 09 8b	add	x8, x8, x9, lsl #5
10000df88:	00 05 00 fd	str	d0, [x8, #8]
10000df8c:	68 12 40 f9	ldr	x8, [x19, #32]
10000df90:	08 05 40 f9	ldr	x8, [x8, #8]
10000df94:	09 19 40 b9	ldr	w9, [x8, #24]
10000df98:	29 05 00 11	add	w9, w9, #1
10000df9c:	09 19 00 b9	str	w9, [x8, #24]
10000dfa0:	68 1a 40 f9	ldr	x8, [x19, #48]
10000dfa4:	08 05 40 f9	ldr	x8, [x8, #8]
10000dfa8:	09 19 40 b9	ldr	w9, [x8, #24]
10000dfac:	29 05 00 11	add	w9, w9, #1
10000dfb0:	09 19 00 b9	str	w9, [x8, #24]
10000dfb4:	69 a2 42 a9	ldp	x9, x8, [x19, #40]
10000dfb8:	08 05 40 f9	ldr	x8, [x8, #8]
10000dfbc:	0a 19 40 b9	ldr	w10, [x8, #24]
10000dfc0:	29 05 40 f9	ldr	x9, [x9, #8]
10000dfc4:	29 19 40 b9	ldr	w9, [x9, #24]
10000dfc8:	29 55 14 9b	madd	x9, x9, x20, x21
10000dfcc:	29 d1 40 b9	ldr	w9, [x9, #208]
10000dfd0:	5f 01 09 6b	cmp	w10, w9
10000dfd4:	e3 00 00 54	b.lo	0x10000dff0
10000dfd8:	1f 19 00 b9	str	wzr, [x8, #24]
10000dfdc:	68 16 40 f9	ldr	x8, [x19, #40]
10000dfe0:	08 05 40 f9	ldr	x8, [x8, #8]
10000dfe4:	09 19 40 b9	ldr	w9, [x8, #24]
10000dfe8:	29 05 00 11	add	w9, w9, #1
10000dfec:	09 19 00 b9	str	w9, [x8, #24]
10000dff0:	00 00 80 52	mov	w0, #0
10000dff4:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000dff8:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000dffc:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000e000:	ff 0f 5f d6	retab
10000e004:	7f 23 03 d5	pacibsp
10000e008:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000e00c:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000e010:	fd 43 00 91	add	x29, sp, #16
10000e014:	f3 03 01 aa	mov	x19, x1
10000e018:	f4 03 00 aa	mov	x20, x0
10000e01c:	00 80 00 91	add	x0, x0, #32
10000e020:	21 10 40 f9	ldr	x1, [x1, #32]
10000e024:	02 01 80 52	mov	w2, #8
10000e028:	e2 0e 00 94	bl	0x100011bb0 ; symbol stub for: __Block_object_assign
10000e02c:	80 a2 00 91	add	x0, x20, #40
10000e030:	61 16 40 f9	ldr	x1, [x19, #40]
10000e034:	02 01 80 52	mov	w2, #8
10000e038:	de 0e 00 94	bl	0x100011bb0 ; symbol stub for: __Block_object_assign
10000e03c:	80 c2 00 91	add	x0, x20, #48
10000e040:	61 1a 40 f9	ldr	x1, [x19, #48]
10000e044:	02 01 80 52	mov	w2, #8
10000e048:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000e04c:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000e050:	ff 23 03 d5	autibsp
10000e054:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
10000e058:	50 00 f0 b6	tbz	x16, #62, 0x10000e060
10000e05c:	20 8e 38 d4	brk	#0xc471
10000e060:	d4 0e 00 14	b	0x100011bb0 ; symbol stub for: __Block_object_assign
10000e064:	7f 23 03 d5	pacibsp
10000e068:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000e06c:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000e070:	fd 43 00 91	add	x29, sp, #16
10000e074:	f3 03 00 aa	mov	x19, x0
10000e078:	00 18 40 f9	ldr	x0, [x0, #48]
10000e07c:	01 01 80 52	mov	w1, #8
10000e080:	d0 0e 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000e084:	60 16 40 f9	ldr	x0, [x19, #40]
10000e088:	01 01 80 52	mov	w1, #8
10000e08c:	cd 0e 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000e090:	60 12 40 f9	ldr	x0, [x19, #32]
10000e094:	01 01 80 52	mov	w1, #8
10000e098:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000e09c:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000e0a0:	ff 23 03 d5	autibsp
10000e0a4:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
10000e0a8:	50 00 f0 b6	tbz	x16, #62, 0x10000e0b0
10000e0ac:	20 8e 38 d4	brk	#0xc471
10000e0b0:	c4 0e 00 14	b	0x100011bc0 ; symbol stub for: __Block_object_dispose
10000e0b4:	7f 23 03 d5	pacibsp
10000e0b8:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
10000e0bc:	f6 57 01 a9	stp	x22, x21, [sp, #16]
10000e0c0:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
10000e0c4:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000e0c8:	fd c3 00 91	add	x29, sp, #48
10000e0cc:	f3 03 01 aa	mov	x19, x1
10000e0d0:	e0 03 01 aa	mov	x0, x1
10000e0d4:	63 0e 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000e0d8:	f4 03 00 aa	mov	x20, x0
10000e0dc:	76 00 00 f0	adrp	x22, 15 ; 0x10001d000
10000e0e0:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e0e4:	48 02 00 34	cbz	w8, 0x10000e12c
10000e0e8:	09 00 80 d2	mov	x9, #0
10000e0ec:	0a 06 80 52	mov	w10, #48
10000e0f0:	eb 0a 80 52	mov	w11, #87
10000e0f4:	0c 60 8c 52	mov	w12, #25344
10000e0f8:	0c 8a a9 72	movk	w12, #19536, lsl #16
10000e0fc:	f7 ec 07 10	adr	x23, #64924
10000e100:	1f 20 03 d5	nop
10000e104:	3f 25 00 f1	cmp	x9, #9
10000e108:	6d 81 8a 9a	csel	x13, x11, x10, hi
10000e10c:	2d 01 0d 0b	add	w13, w9, w13
10000e110:	ad 01 0c 2a	orr	w13, w13, w12
10000e114:	bf 01 14 6b	cmp	w13, w20
10000e118:	40 04 00 54	b.eq	0x10000e1a0
10000e11c:	29 05 00 91	add	x9, x9, #1
10000e120:	f7 02 01 91	add	x23, x23, #64
10000e124:	3f 01 08 eb	cmp	x9, x8
10000e128:	e3 fe ff 54	b.lo	0x10000e104
10000e12c:	89 2d 8d 52	mov	w9, #26988
10000e130:	89 6d a8 72	movk	w9, #17260, lsl #16
10000e134:	9f 02 09 6b	cmp	w20, w9
10000e138:	2d 0a 00 54	b.le	0x10000e27c
10000e13c:	09 ae 8c 52	mov	w9, #25968
10000e140:	49 6e a8 72	movk	w9, #17266, lsl #16
10000e144:	9f 02 09 6b	cmp	w20, w9
10000e148:	cc 0d 00 54	b.gt	0x10000e300
10000e14c:	a9 2d 8d 52	mov	w9, #26989
10000e150:	89 6d a8 72	movk	w9, #17260, lsl #16
10000e154:	9f 02 09 6b	cmp	w20, w9
10000e158:	20 10 00 54	b.eq	0x10000e35c
10000e15c:	69 ac 8d 52	mov	w9, #28003
10000e160:	c9 6d a8 72	movk	w9, #17262, lsl #16
10000e164:	9f 02 09 6b	cmp	w20, w9
10000e168:	01 17 00 54	b.ne	0x10000e448
10000e16c:	e8 16 00 34	cbz	w8, 0x10000e448
10000e170:	15 00 80 d2	mov	x21, #0
10000e174:	37 e8 07 10	adr	x23, #64772
10000e178:	1f 20 03 d5	nop
10000e17c:	e0 03 13 aa	mov	x0, x19
10000e180:	e1 03 15 aa	mov	x1, x21
10000e184:	33 0e 00 94	bl	0x100011a50 ; symbol stub for: _IOReportArrayGetValueAtIndex
10000e188:	e0 06 04 f8	str	x0, [x23], #64
10000e18c:	b5 06 00 91	add	x21, x21, #1
10000e190:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e194:	bf 02 08 eb	cmp	x21, x8
10000e198:	23 ff ff 54	b.lo	0x10000e17c
10000e19c:	ab 00 00 14	b	0x10000e448
10000e1a0:	e0 03 13 aa	mov	x0, x19
10000e1a4:	67 0e 00 94	bl	0x100011b40 ; symbol stub for: _IOReportStateGetCount
10000e1a8:	15 7c 40 93	sxtw	x21, w0
10000e1ac:	96 00 00 90	adrp	x22, 16 ; 0x10001e000
10000e1b0:	d5 36 01 f9	str	x21, [x22, #616]
10000e1b4:	e8 82 5e f8	ldur	x8, [x23, #-24]
10000e1b8:	a8 00 00 b5	cbnz	x8, 0x10000e1cc
10000e1bc:	a0 f2 7d d3	lsl	x0, x21, #3
10000e1c0:	14 0f 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000e1c4:	e0 82 1e f8	stur	x0, [x23, #-24]
10000e1c8:	80 19 00 b4	cbz	x0, 0x10000e4f8
10000e1cc:	e8 02 40 f9	ldr	x8, [x23]
10000e1d0:	68 03 00 b5	cbnz	x8, 0x10000e23c
10000e1d4:	a0 f2 7d d3	lsl	x0, x21, #3
10000e1d8:	0e 0f 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000e1dc:	e0 02 00 f9	str	x0, [x23]
10000e1e0:	e0 18 00 b4	cbz	x0, 0x10000e4fc
10000e1e4:	b5 17 00 34	cbz	w21, 0x10000e4d8
10000e1e8:	14 00 80 d2	mov	x20, #0
10000e1ec:	e0 03 13 aa	mov	x0, x19
10000e1f0:	e1 03 14 aa	mov	x1, x20
10000e1f4:	5b 0e 00 94	bl	0x100011b60 ; symbol stub for: _IOReportStateGetNameForIndex
10000e1f8:	f5 03 00 aa	mov	x21, x0
10000e1fc:	f4 82 1f b8	stur	w20, [x23, #-8]
10000e200:	20 01 80 52	mov	w0, #9
10000e204:	03 0f 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000e208:	e8 02 40 f9	ldr	x8, [x23]
10000e20c:	00 79 34 f8	str	x0, [x8, x20, lsl #3]
10000e210:	20 17 00 b4	cbz	x0, 0x10000e4f4
10000e214:	e1 03 00 aa	mov	x1, x0
10000e218:	e0 03 15 aa	mov	x0, x21
10000e21c:	22 01 80 52	mov	w2, #9
10000e220:	03 20 80 52	mov	w3, #256
10000e224:	03 00 a1 72	movk	w3, #2048, lsl #16
10000e228:	da 0d 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
10000e22c:	94 06 00 91	add	x20, x20, #1
10000e230:	d5 36 41 f9	ldr	x21, [x22, #616]
10000e234:	bf 02 14 eb	cmp	x21, x20
10000e238:	a8 fd ff 54	b.hi	0x10000e1ec
10000e23c:	ff 02 1f f8	stur	xzr, [x23, #-16]
10000e240:	f5 14 00 b4	cbz	x21, 0x10000e4dc
10000e244:	14 00 80 d2	mov	x20, #0
10000e248:	e0 03 13 aa	mov	x0, x19
10000e24c:	e1 03 14 aa	mov	x1, x20
10000e250:	48 0e 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
10000e254:	e8 82 5e f8	ldur	x8, [x23, #-24]
10000e258:	00 79 34 f8	str	x0, [x8, x20, lsl #3]
10000e25c:	e8 02 5f f8	ldur	x8, [x23, #-16]
10000e260:	08 01 00 8b	add	x8, x8, x0
10000e264:	e8 02 1f f8	stur	x8, [x23, #-16]
10000e268:	94 06 00 91	add	x20, x20, #1
10000e26c:	c8 36 41 f9	ldr	x8, [x22, #616]
10000e270:	1f 01 14 eb	cmp	x8, x20
10000e274:	a8 fe ff 54	b.hi	0x10000e248
10000e278:	99 00 00 14	b	0x10000e4dc
10000e27c:	69 28 8f 52	mov	w9, #31043
10000e280:	69 6c a8 72	movk	w9, #17251, lsl #16
10000e284:	9f 02 09 6b	cmp	w20, w9
10000e288:	40 08 00 54	b.eq	0x10000e390
10000e28c:	29 cf 8d 52	mov	w9, #28281
10000e290:	89 6c a8 72	movk	w9, #17252, lsl #16
10000e294:	9f 02 09 6b	cmp	w20, w9
10000e298:	60 0a 00 54	b.eq	0x10000e3e4
10000e29c:	69 c8 8d 52	mov	w9, #28227
10000e2a0:	29 6d a8 72	movk	w9, #17257, lsl #16
10000e2a4:	9f 02 09 6b	cmp	w20, w9
10000e2a8:	01 0d 00 54	b.ne	0x10000e448
10000e2ac:	29 00 80 52	mov	w9, #1
10000e2b0:	8a 00 00 90	adrp	x10, 16 ; 0x10001e000
10000e2b4:	49 c1 0c 39	strb	w9, [x10, #816]
10000e2b8:	97 00 00 90	adrp	x23, 16 ; 0x10001e000
10000e2bc:	ff a2 01 f9	str	xzr, [x23, #832]
10000e2c0:	48 0c 00 34	cbz	w8, 0x10000e448
10000e2c4:	15 00 80 d2	mov	x21, #0
10000e2c8:	18 6a 07 10	adr	x24, #60736
10000e2cc:	1f 20 03 d5	nop
10000e2d0:	e0 03 13 aa	mov	x0, x19
10000e2d4:	e1 03 15 aa	mov	x1, x21
10000e2d8:	de 0d 00 94	bl	0x100011a50 ; symbol stub for: _IOReportArrayGetValueAtIndex
10000e2dc:	00 87 0e f8	str	x0, [x24], #232
10000e2e0:	e8 a2 41 f9	ldr	x8, [x23, #832]
10000e2e4:	08 01 00 8b	add	x8, x8, x0
10000e2e8:	e8 a2 01 f9	str	x8, [x23, #832]
10000e2ec:	b5 06 00 91	add	x21, x21, #1
10000e2f0:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e2f4:	bf 02 08 eb	cmp	x21, x8
10000e2f8:	c3 fe ff 54	b.lo	0x10000e2d0
10000e2fc:	53 00 00 14	b	0x10000e448
10000e300:	29 ae 8c 52	mov	w9, #25969
10000e304:	49 6e a8 72	movk	w9, #17266, lsl #16
10000e308:	9f 02 09 6b	cmp	w20, w9
10000e30c:	60 08 00 54	b.eq	0x10000e418
10000e310:	88 ea 8c 52	mov	w8, #26452
10000e314:	c8 6d a9 72	movk	w8, #19310, lsl #16
10000e318:	9f 02 08 6b	cmp	w20, w8
10000e31c:	61 09 00 54	b.ne	0x10000e448
10000e320:	35 5c 07 30	adr	x21, #60293
10000e324:	1f 20 03 d5	nop
10000e328:	28 00 80 52	mov	w8, #1
10000e32c:	a8 02 00 39	strb	w8, [x21]
10000e330:	e0 03 13 aa	mov	x0, x19
10000e334:	01 00 80 d2	mov	x1, #0
10000e338:	fe 0d 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000e33c:	68 9b 86 d2	mov	x8, #13531
10000e340:	c8 f6 ba f2	movk	x8, #55222, lsl #16
10000e344:	48 d0 db f2	movk	x8, #56962, lsl #32
10000e348:	68 63 e8 f2	movk	x8, #17179, lsl #48
10000e34c:	08 7c c8 9b	umulh	x8, x0, x8
10000e350:	08 fd 52 d3	lsr	x8, x8, #18
10000e354:	a8 32 09 f8	stur	x8, [x21, #147]
10000e358:	3c 00 00 14	b	0x10000e448
10000e35c:	68 07 00 34	cbz	w8, 0x10000e448
10000e360:	15 00 80 d2	mov	x21, #0
10000e364:	37 d8 07 10	adr	x23, #64260
10000e368:	1f 20 03 d5	nop
10000e36c:	e0 03 13 aa	mov	x0, x19
10000e370:	e1 03 15 aa	mov	x1, x21
10000e374:	b7 0d 00 94	bl	0x100011a50 ; symbol stub for: _IOReportArrayGetValueAtIndex
10000e378:	e0 06 04 f8	str	x0, [x23], #64
10000e37c:	b5 06 00 91	add	x21, x21, #1
10000e380:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e384:	bf 02 08 eb	cmp	x21, x8
10000e388:	23 ff ff 54	b.lo	0x10000e36c
10000e38c:	2f 00 00 14	b	0x10000e448
10000e390:	29 00 80 52	mov	w9, #1
10000e394:	8a 00 00 90	adrp	x10, 16 ; 0x10001e000
10000e398:	49 c1 0c 39	strb	w9, [x10, #816]
10000e39c:	97 00 00 90	adrp	x23, 16 ; 0x10001e000
10000e3a0:	ff 9e 01 f9	str	xzr, [x23, #824]
10000e3a4:	28 05 00 34	cbz	w8, 0x10000e448
10000e3a8:	15 00 80 d2	mov	x21, #0
10000e3ac:	b8 62 07 10	adr	x24, #60500
10000e3b0:	1f 20 03 d5	nop
10000e3b4:	e0 03 13 aa	mov	x0, x19
10000e3b8:	e1 03 15 aa	mov	x1, x21
10000e3bc:	a5 0d 00 94	bl	0x100011a50 ; symbol stub for: _IOReportArrayGetValueAtIndex
10000e3c0:	00 87 0e f8	str	x0, [x24], #232
10000e3c4:	e8 9e 41 f9	ldr	x8, [x23, #824]
10000e3c8:	08 01 00 8b	add	x8, x8, x0
10000e3cc:	e8 9e 01 f9	str	x8, [x23, #824]
10000e3d0:	b5 06 00 91	add	x21, x21, #1
10000e3d4:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e3d8:	bf 02 08 eb	cmp	x21, x8
10000e3dc:	c3 fe ff 54	b.lo	0x10000e3b4
10000e3e0:	1a 00 00 14	b	0x10000e448
10000e3e4:	28 03 00 34	cbz	w8, 0x10000e448
10000e3e8:	15 00 80 d2	mov	x21, #0
10000e3ec:	37 d4 07 10	adr	x23, #64132
10000e3f0:	1f 20 03 d5	nop
10000e3f4:	e0 03 13 aa	mov	x0, x19
10000e3f8:	e1 03 15 aa	mov	x1, x21
10000e3fc:	95 0d 00 94	bl	0x100011a50 ; symbol stub for: _IOReportArrayGetValueAtIndex
10000e400:	e0 06 04 f8	str	x0, [x23], #64
10000e404:	b5 06 00 91	add	x21, x21, #1
10000e408:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e40c:	bf 02 08 eb	cmp	x21, x8
10000e410:	23 ff ff 54	b.lo	0x10000e3f4
10000e414:	0d 00 00 14	b	0x10000e448
10000e418:	88 01 00 34	cbz	w8, 0x10000e448
10000e41c:	15 00 80 d2	mov	x21, #0
10000e420:	17 d2 07 10	adr	x23, #64064
10000e424:	1f 20 03 d5	nop
10000e428:	e0 03 13 aa	mov	x0, x19
10000e42c:	e1 03 15 aa	mov	x1, x21
10000e430:	88 0d 00 94	bl	0x100011a50 ; symbol stub for: _IOReportArrayGetValueAtIndex
10000e434:	e0 06 04 f8	str	x0, [x23], #64
10000e438:	b5 06 00 91	add	x21, x21, #1
10000e43c:	c8 c2 4d b9	ldr	w8, [x22, #3520]
10000e440:	bf 02 08 eb	cmp	x21, x8
10000e444:	23 ff ff 54	b.lo	0x10000e428
10000e448:	28 ef 8c d2	mov	x8, #26489
10000e44c:	48 ce ad f2	movk	x8, #28274, lsl #16
10000e450:	a8 ac cc f2	movk	x8, #25957, lsl #32
10000e454:	c8 2d ec f2	movk	x8, #24942, lsl #48
10000e458:	9f 02 08 eb	cmp	x20, x8
10000e45c:	a0 01 00 54	b.eq	0x10000e490
10000e460:	c8 ed 8d d2	mov	x8, #28526
10000e464:	48 4f ae f2	movk	x8, #29306, lsl #16
10000e468:	a8 ec ce f2	movk	x8, #30565, lsl #32
10000e46c:	e8 0d ee f2	movk	x8, #28783, lsl #48
10000e470:	9f 02 08 eb	cmp	x20, x8
10000e474:	41 03 00 54	b.ne	0x10000e4dc
10000e478:	e0 03 13 aa	mov	x0, x19
10000e47c:	01 00 80 d2	mov	x1, #0
10000e480:	ac 0d 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000e484:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000e488:	00 a5 01 f9	str	x0, [x8, #840]
10000e48c:	14 00 00 14	b	0x10000e4dc
10000e490:	68 00 00 d0	adrp	x8, 14 ; 0x10001c000
10000e494:	08 85 7a 39	ldrb	w8, [x8, #3745]
10000e498:	28 02 00 35	cbnz	w8, 0x10000e4dc
10000e49c:	e0 03 13 aa	mov	x0, x19
10000e4a0:	01 00 80 d2	mov	x1, #0
10000e4a4:	a3 0d 00 94	bl	0x100011b30 ; symbol stub for: _IOReportSimpleGetIntegerValue
10000e4a8:	68 9b 86 d2	mov	x8, #13531
10000e4ac:	c8 f6 ba f2	movk	x8, #55222, lsl #16
10000e4b0:	48 d0 db f2	movk	x8, #56962, lsl #32
10000e4b4:	68 63 e8 f2	movk	x8, #17179, lsl #48
10000e4b8:	08 7c c8 9b	umulh	x8, x0, x8
10000e4bc:	08 fd 52 d3	lsr	x8, x8, #18
10000e4c0:	09 4f 07 10	adr	x9, #59872
10000e4c4:	1f 20 03 d5	nop
10000e4c8:	28 3d 00 f9	str	x8, [x9, #120]
10000e4cc:	28 00 80 52	mov	w8, #1
10000e4d0:	28 01 00 39	strb	w8, [x9]
10000e4d4:	02 00 00 14	b	0x10000e4dc
10000e4d8:	ff 02 1f f8	stur	xzr, [x23, #-16]
10000e4dc:	00 00 80 52	mov	w0, #0
10000e4e0:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000e4e4:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
10000e4e8:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
10000e4ec:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
10000e4f0:	ff 0f 5f d6	retab
10000e4f4:	5b 0c 00 94	bl	0x100011660
10000e4f8:	44 0c 00 94	bl	0x100011608
10000e4fc:	4e 0c 00 94	bl	0x100011634
10000e500:	7f 23 03 d5	pacibsp
10000e504:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000e508:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000e50c:	fd 43 00 91	add	x29, sp, #16
10000e510:	f3 03 01 aa	mov	x19, x1
10000e514:	e0 03 01 aa	mov	x0, x1
10000e518:	52 0d 00 94	bl	0x100011a60 ; symbol stub for: _IOReportChannelGetChannelID
10000e51c:	1f 20 03 d5	nop
10000e520:	08 c5 07 18	ldr	w8, 0x10001ddc0
10000e524:	88 02 00 34	cbz	w8, 0x10000e574
10000e528:	d4 55 07 10	adr	x20, #60088
10000e52c:	1f 20 03 d5	nop
10000e530:	89 c2 5c 38	ldurb	w9, [x20, #-52]
10000e534:	89 00 00 34	cbz	w9, 0x10000e544
10000e538:	89 82 5e f8	ldur	x9, [x20, #-24]
10000e53c:	1f 00 09 eb	cmp	x0, x9
10000e540:	a0 00 00 54	b.eq	0x10000e554
10000e544:	94 a2 03 91	add	x20, x20, #232
10000e548:	08 05 00 f1	subs	x8, x8, #1
10000e54c:	21 ff ff 54	b.ne	0x10000e530
10000e550:	09 00 00 14	b	0x10000e574
10000e554:	e0 03 13 aa	mov	x0, x19
10000e558:	01 00 80 52	mov	w1, #0
10000e55c:	85 0d 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
10000e560:	80 02 00 f9	str	x0, [x20]
10000e564:	e0 03 13 aa	mov	x0, x19
10000e568:	21 00 80 52	mov	w1, #1
10000e56c:	81 0d 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
10000e570:	80 82 1f f8	stur	x0, [x20, #-8]
10000e574:	00 00 80 52	mov	w0, #0
10000e578:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000e57c:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000e580:	ff 0f 5f d6	retab
10000e584:	7f 23 03 d5	pacibsp
10000e588:	ff 03 01 d1	sub	sp, sp, #64
10000e58c:	f6 57 01 a9	stp	x22, x21, [sp, #16]
10000e590:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
10000e594:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000e598:	fd c3 00 91	add	x29, sp, #48
10000e59c:	1f 20 03 d5	nop
10000e5a0:	c8 f6 04 58	ldr	x8, #40664 ; literal pool symbol address: _bootstrap_port
10000e5a4:	00 01 40 b9	ldr	w0, [x8]
10000e5a8:	41 ed 07 10	adr	x1, #64936
10000e5ac:	1f 20 03 d5	nop
10000e5b0:	04 0d 00 94	bl	0x1000119c0 ; symbol stub for: _IOMainPort
10000e5b4:	ff 0f 00 b9	str	wzr, [sp, #12]
10000e5b8:	40 07 00 35	cbnz	w0, 0x10000e6a0
10000e5bc:	94 00 00 90	adrp	x20, 16 ; 0x10001e000
10000e5c0:	93 52 43 b9	ldr	w19, [x20, #848]
10000e5c4:	00 3f 04 70	adr	x0, #34787 ; literal pool for: "AppleSmartBattery"
10000e5c8:	1f 20 03 d5	nop
10000e5cc:	75 0d 00 94	bl	0x100011ba0 ; symbol stub for: _IOServiceMatching
10000e5d0:	e1 03 00 aa	mov	x1, x0
10000e5d4:	e0 03 13 aa	mov	x0, x19
10000e5d8:	6a 0d 00 94	bl	0x100011b80 ; symbol stub for: _IOServiceGetMatchingService
10000e5dc:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000e5e0:	00 55 03 b9	str	w0, [x8, #852]
10000e5e4:	1f 00 00 71	cmp	w0, #0
10000e5e8:	e8 07 9f 1a	cset	w8, ne
10000e5ec:	89 00 00 90	adrp	x9, 16 ; 0x10001e000
10000e5f0:	28 61 0d 39	strb	w8, [x9, #856]
10000e5f4:	93 52 43 b9	ldr	w19, [x20, #848]
10000e5f8:	00 3e 04 30	adr	x0, #34753 ; literal pool for: "AppleBacklightDisplay"
10000e5fc:	1f 20 03 d5	nop
10000e600:	68 0d 00 94	bl	0x100011ba0 ; symbol stub for: _IOServiceMatching
10000e604:	e1 03 00 aa	mov	x1, x0
10000e608:	e0 03 13 aa	mov	x0, x19
10000e60c:	5d 0d 00 94	bl	0x100011b80 ; symbol stub for: _IOServiceGetMatchingService
10000e610:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000e614:	00 5d 03 b9	str	w0, [x8, #860]
10000e618:	95 00 00 90	adrp	x21, 16 ; 0x10001e000
10000e61c:	bf 82 0d 39	strb	wzr, [x21, #864]
10000e620:	93 52 43 b9	ldr	w19, [x20, #848]
10000e624:	40 3d 04 70	adr	x0, #34731 ; literal pool for: "AppleHIDKeyboardEventDriverV2"
10000e628:	1f 20 03 d5	nop
10000e62c:	5d 0d 00 94	bl	0x100011ba0 ; symbol stub for: _IOServiceMatching
10000e630:	e1 03 00 aa	mov	x1, x0
10000e634:	e0 03 13 aa	mov	x0, x19
10000e638:	52 0d 00 94	bl	0x100011b80 ; symbol stub for: _IOServiceGetMatchingService
10000e63c:	96 00 00 90	adrp	x22, 16 ; 0x10001e000
10000e640:	c0 66 03 b9	str	w0, [x22, #868]
10000e644:	40 01 00 34	cbz	w0, 0x10000e66c
10000e648:	e1 33 00 91	add	x1, sp, #12
10000e64c:	e2 33 00 91	add	x2, sp, #12
10000e650:	e3 33 00 91	add	x3, sp, #12
10000e654:	e4 33 00 91	add	x4, sp, #12
10000e658:	b0 01 00 94	bl	0x10000ed18
10000e65c:	80 00 00 34	cbz	w0, 0x10000e66c
10000e660:	28 00 80 52	mov	w8, #1
10000e664:	a8 82 0d 39	strb	w8, [x21, #864]
10000e668:	09 00 00 14	b	0x10000e68c
10000e66c:	93 52 43 b9	ldr	w19, [x20, #848]
10000e670:	e0 3b 04 30	adr	x0, #34685 ; literal pool for: "AppleLMUController"
10000e674:	1f 20 03 d5	nop
10000e678:	4a 0d 00 94	bl	0x100011ba0 ; symbol stub for: _IOServiceMatching
10000e67c:	e1 03 00 aa	mov	x1, x0
10000e680:	e0 03 13 aa	mov	x0, x19
10000e684:	3f 0d 00 94	bl	0x100011b80 ; symbol stub for: _IOServiceGetMatchingService
10000e688:	c0 66 03 b9	str	w0, [x22, #868]
10000e68c:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000e690:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
10000e694:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
10000e698:	ff 03 01 91	add	sp, sp, #64
10000e69c:	ff 0f 5f d6	retab
10000e6a0:	fb 0b 00 94	bl	0x10001168c
10000e6a4:	7f 23 03 d5	pacibsp
10000e6a8:	ff 83 02 d1	sub	sp, sp, #160
10000e6ac:	f6 57 07 a9	stp	x22, x21, [sp, #112]
10000e6b0:	f4 4f 08 a9	stp	x20, x19, [sp, #128]
10000e6b4:	fd 7b 09 a9	stp	x29, x30, [sp, #144]
10000e6b8:	fd 43 02 91	add	x29, sp, #144
10000e6bc:	bf ff 3c a9	stp	xzr, xzr, [x29, #-56]
10000e6c0:	bf 03 1c f8	stur	xzr, [x29, #-64]
10000e6c4:	bf c3 1b b8	stur	wzr, [x29, #-68]
10000e6c8:	56 d0 06 10	adr	x22, #55816
10000e6cc:	1f 20 03 d5	nop
10000e6d0:	c8 2a 40 b9	ldr	w8, [x22, #40]
10000e6d4:	e8 00 00 35	cbnz	w8, 0x10000e6f0
10000e6d8:	1f 20 03 d5	nop
10000e6dc:	1f 20 03 d5	nop
10000e6e0:	41 cf 06 58	ldr	x1, #55784
10000e6e4:	40 42 04 70	adr	x0, #34891 ; literal pool for: "\n\n**** Battery and backlight usage ****\n\n"
10000e6e8:	1f 20 03 d5	nop
10000e6ec:	85 0d 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000e6f0:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000e6f4:	08 61 4d 39	ldrb	w8, [x8, #856]
10000e6f8:	89 00 00 90	adrp	x9, 16 ; 0x10001e000
10000e6fc:	29 a1 4d 39	ldrb	w9, [x9, #872]
10000e700:	1f 05 00 71	cmp	w8, #1
10000e704:	24 09 40 7a	ccmp	w9, #0, #4, eq
10000e708:	c0 08 00 54	b.eq	0x10000e820
10000e70c:	49 e3 07 10	adr	x9, #64616
10000e710:	1f 20 03 d5	nop
10000e714:	28 01 40 b9	ldr	w8, [x9]
10000e718:	00 01 63 1e	ucvtf	d0, w8
10000e71c:	21 05 40 bd	ldr	s1, [x9, #4]
10000e720:	21 d8 61 7e	ucvtf	d1, d1
10000e724:	00 18 61 1e	fdiv	d0, d0, d1
10000e728:	c9 2a 40 b9	ldr	w9, [x22, #40]
10000e72c:	3f 05 00 71	cmp	w9, #1
10000e730:	60 04 00 54	b.eq	0x10000e7bc
10000e734:	69 07 00 35	cbnz	w9, 0x10000e820
10000e738:	1f 20 03 d5	nop
10000e73c:	1f 20 03 d5	nop
10000e740:	40 cc 06 58	ldr	x0, #55688
10000e744:	69 e1 07 10	adr	x9, #64556
10000e748:	1f 20 03 d5	nop
10000e74c:	21 0d 40 fd	ldr	d1, [x9, #24]
10000e750:	ea 44 04 30	adr	x10, #34973 ; literal pool for: "discharge"
10000e754:	1f 20 03 d5	nop
10000e758:	6b 44 04 50	adr	x11, #34958 ; literal pool for: "charge"
10000e75c:	1f 20 03 d5	nop
10000e760:	28 20 60 1e	fcmp	d1, #0.0
10000e764:	6a c1 8a 9a	csel	x10, x11, x10, gt
10000e768:	21 c0 60 1e	fabs	d1, d1
10000e76c:	2b 0b e8 d2	mov	x11, #4636737291354636288
10000e770:	62 01 67 9e	fmov	d2, x11
10000e774:	00 08 62 1e	fmul	d0, d0, d2
10000e778:	eb 43 04 70	adr	x11, #34943 ; literal pool for: "yes"
10000e77c:	1f 20 03 d5	nop
10000e780:	cc 43 04 70	adr	x12, #34939 ; literal pool for: "no"
10000e784:	1f 20 03 d5	nop
10000e788:	2d 51 40 39	ldrb	w13, [x9, #20]
10000e78c:	bf 01 00 71	cmp	w13, #0
10000e790:	8b 01 8b 9a	csel	x11, x12, x11, eq
10000e794:	2d b1 41 29	ldp	w13, w12, [x9, #12]
10000e798:	29 01 40 b9	ldr	w9, [x9]
10000e79c:	e9 2f 03 a9	stp	x9, x11, [sp, #48]
10000e7a0:	e0 17 00 fd	str	d0, [sp, #40]
10000e7a4:	ed a3 01 a9	stp	x13, x8, [sp, #24]
10000e7a8:	e1 0b 00 fd	str	d1, [sp, #16]
10000e7ac:	61 3d 04 30	adr	x1, #34733 ; literal pool for: "Battery: delta: %d mAh, %s rate: %g mAh/minute, cycle count %u, capacity: %u mAh (%g%% of design), charge remaining: %u mAh, plugged in: %s\n"
10000e7b0:	1f 20 03 d5	nop
10000e7b4:	ec 2b 00 a9	stp	x12, x10, [sp]
10000e7b8:	19 00 00 14	b	0x10000e81c
10000e7bc:	1f 20 03 d5	nop
10000e7c0:	1f 20 03 d5	nop
10000e7c4:	20 c8 06 58	ldr	x0, #55556
10000e7c8:	49 dd 07 10	adr	x9, #64424
10000e7cc:	1f 20 03 d5	nop
10000e7d0:	2a 51 40 39	ldrb	w10, [x9, #20]
10000e7d4:	2b 22 03 50	adr	x11, #25670 ; literal pool for: "true"
10000e7d8:	1f 20 03 d5	nop
10000e7dc:	cc 21 03 10	adr	x12, #25656 ; literal pool for: "false"
10000e7e0:	1f 20 03 d5	nop
10000e7e4:	5f 01 00 71	cmp	w10, #0
10000e7e8:	8a 01 8b 9a	csel	x10, x12, x11, eq
10000e7ec:	21 0d 40 fd	ldr	d1, [x9, #24]
10000e7f0:	21 40 61 1e	fneg	d1, d1
10000e7f4:	2c ad 41 29	ldp	w12, w11, [x9, #12]
10000e7f8:	29 01 40 b9	ldr	w9, [x9]
10000e7fc:	e9 1b 00 f9	str	x9, [sp, #48]
10000e800:	e0 17 00 fd	str	d0, [sp, #40]
10000e804:	ec a3 01 a9	stp	x12, x8, [sp, #24]
10000e808:	eb 0b 00 f9	str	x11, [sp, #16]
10000e80c:	e1 07 00 fd	str	d1, [sp, #8]
10000e810:	61 3f 04 50	adr	x1, #34798 ; literal pool for: "<key>battery</key>\n<dict>\n<key>plugged_in</key><%s/>\n<key>discharge_rate</key><real>%g</real>\n<key>charge_delta</key><integer>%d</integer>\n<key>cycle_count</key><integer>%u</integer>\n<key>capacity</key><integer>%u</integer>\n<key>capacity_ratio</key><real>%g</real>\n<key>charge_remaining</key><integer>%u</integer>\n</dict>\n"
10000e814:	1f 20 03 d5	nop
10000e818:	ea 03 00 f9	str	x10, [sp]
10000e81c:	31 0d 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000e820:	1f 20 03 d5	nop
10000e824:	c0 d9 07 18	ldr	w0, 0x10001e35c
10000e828:	c0 11 00 34	cbz	w0, 0x10000ea60
10000e82c:	bf 83 1d f8	stur	xzr, [x29, #-40]
10000e830:	a1 a3 00 d1	sub	x1, x29, #40
10000e834:	02 00 80 d2	mov	x2, #0
10000e838:	03 00 80 52	mov	w3, #0
10000e83c:	6d 0c 00 94	bl	0x1000119f0 ; symbol stub for: _IORegistryEntryCreateCFProperties
10000e840:	e0 07 00 35	cbnz	w0, 0x10000e93c
10000e844:	a0 83 5d f8	ldur	x0, [x29, #-40]
10000e848:	a0 07 00 b4	cbz	x0, 0x10000e93c
10000e84c:	e1 7c 05 10	adr	x1, #44956 ; Objc cfstring ref: @"IODisplayParameters"
10000e850:	1f 20 03 d5	nop
10000e854:	3f 0c 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000e858:	00 08 00 b4	cbz	x0, 0x10000e958
10000e85c:	61 7d 05 10	adr	x1, #44972 ; Objc cfstring ref: @"brightness"
10000e860:	1f 20 03 d5	nop
10000e864:	3b 0c 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000e868:	a0 08 00 b4	cbz	x0, 0x10000e97c
10000e86c:	f3 03 00 aa	mov	x19, x0
10000e870:	c1 7d 05 10	adr	x1, #44984 ; Objc cfstring ref: @"value"
10000e874:	1f 20 03 d5	nop
10000e878:	36 0c 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000e87c:	f5 03 00 aa	mov	x21, x0
10000e880:	41 7e 05 10	adr	x1, #45000 ; Objc cfstring ref: @"min"
10000e884:	1f 20 03 d5	nop
10000e888:	e0 03 13 aa	mov	x0, x19
10000e88c:	31 0c 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000e890:	f4 03 00 aa	mov	x20, x0
10000e894:	a1 7e 05 10	adr	x1, #45012 ; Objc cfstring ref: @"max"
10000e898:	1f 20 03 d5	nop
10000e89c:	e0 03 13 aa	mov	x0, x19
10000e8a0:	2c 0c 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000e8a4:	b5 09 00 b4	cbz	x21, 0x10000e9d8
10000e8a8:	f3 03 00 aa	mov	x19, x0
10000e8ac:	a2 b3 00 d1	sub	x2, x29, #44
10000e8b0:	e0 03 15 aa	mov	x0, x21
10000e8b4:	21 01 80 52	mov	w1, #9
10000e8b8:	2a 0c 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000e8bc:	40 00 00 35	cbnz	w0, 0x10000e8c4
10000e8c0:	bf 43 1d b8	stur	wzr, [x29, #-44]
10000e8c4:	94 09 00 b4	cbz	x20, 0x10000e9f4
10000e8c8:	a2 c3 00 d1	sub	x2, x29, #48
10000e8cc:	e0 03 14 aa	mov	x0, x20
10000e8d0:	21 01 80 52	mov	w1, #9
10000e8d4:	23 0c 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000e8d8:	40 00 00 35	cbnz	w0, 0x10000e8e0
10000e8dc:	bf 03 1d b8	stur	wzr, [x29, #-48]
10000e8e0:	73 09 00 b4	cbz	x19, 0x10000ea0c
10000e8e4:	a2 d3 00 d1	sub	x2, x29, #52
10000e8e8:	e0 03 13 aa	mov	x0, x19
10000e8ec:	21 01 80 52	mov	w1, #9
10000e8f0:	1c 0c 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000e8f4:	40 00 00 35	cbnz	w0, 0x10000e8fc
10000e8f8:	bf c3 1c b8	stur	wzr, [x29, #-52]
10000e8fc:	a0 83 5d f8	ldur	x0, [x29, #-40]
10000e900:	1c 0c 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000e904:	c8 2a 40 b9	ldr	w8, [x22, #40]
10000e908:	1f 05 00 71	cmp	w8, #1
10000e90c:	60 09 00 54	b.eq	0x10000ea38
10000e910:	88 0a 00 35	cbnz	w8, 0x10000ea60
10000e914:	1f 20 03 d5	nop
10000e918:	1f 20 03 d5	nop
10000e91c:	60 bd 06 58	ldr	x0, #55212
10000e920:	a9 23 7a 29	ldp	w9, w8, [x29, #-48]
10000e924:	aa c3 5c b8	ldur	w10, [x29, #-52]
10000e928:	e9 ab 00 a9	stp	x9, x10, [sp, #8]
10000e92c:	e8 03 00 f9	str	x8, [sp]
10000e930:	81 41 04 10	adr	x1, #34864 ; literal pool for: "Backlight level: %u (range %u-%u)\n"
10000e934:	1f 20 03 d5	nop
10000e938:	49 00 00 14	b	0x10000ea5c
10000e93c:	1f 20 03 d5	nop
10000e940:	08 d9 04 58	ldr	x8, #39712 ; literal pool symbol address: ___stderrp
10000e944:	03 01 40 f9	ldr	x3, [x8]
10000e948:	40 4f 04 30	adr	x0, #35305 ; literal pool for: "IORegistryEntryCreateCFProperties failed\n"
10000e94c:	1f 20 03 d5	nop
10000e950:	21 05 80 52	mov	w1, #41
10000e954:	12 00 00 14	b	0x10000e99c
10000e958:	a0 83 5d f8	ldur	x0, [x29, #-40]
10000e95c:	05 0c 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000e960:	1f 20 03 d5	nop
10000e964:	e8 d7 04 58	ldr	x8, #39676 ; literal pool symbol address: ___stderrp
10000e968:	03 01 40 f9	ldr	x3, [x8]
10000e96c:	00 50 04 70	adr	x0, #35331 ; literal pool for: "Couldn't get value IODisplayParameters\n"
10000e970:	1f 20 03 d5	nop
10000e974:	e1 04 80 52	mov	w1, #39
10000e978:	09 00 00 14	b	0x10000e99c
10000e97c:	a0 83 5d f8	ldur	x0, [x29, #-40]
10000e980:	fc 0b 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000e984:	1f 20 03 d5	nop
10000e988:	c8 d6 04 58	ldr	x8, #39640 ; literal pool symbol address: ___stderrp
10000e98c:	03 01 40 f9	ldr	x3, [x8]
10000e990:	80 50 04 50	adr	x0, #35346 ; literal pool for: "Couldn't get value bklt\n"
10000e994:	1f 20 03 d5	nop
10000e998:	01 03 80 52	mov	w1, #24
10000e99c:	22 00 80 52	mov	w2, #1
10000e9a0:	e0 0c 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000e9a4:	1f 20 03 d5	nop
10000e9a8:	c8 d5 04 58	ldr	x8, #39608 ; literal pool symbol address: ___stderrp
10000e9ac:	03 01 40 f9	ldr	x3, [x8]
10000e9b0:	80 3c 04 30	adr	x0, #34705 ; literal pool for: "failed to get backlight level\n"
10000e9b4:	1f 20 03 d5	nop
10000e9b8:	c1 03 80 52	mov	w1, #30
10000e9bc:	22 00 80 52	mov	w2, #1
10000e9c0:	d8 0c 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000e9c4:	fd 7b 49 a9	ldp	x29, x30, [sp, #144]
10000e9c8:	f4 4f 48 a9	ldp	x20, x19, [sp, #128]
10000e9cc:	f6 57 47 a9	ldp	x22, x21, [sp, #112]
10000e9d0:	ff 83 02 91	add	sp, sp, #160
10000e9d4:	ff 0f 5f d6	retab
10000e9d8:	1f 20 03 d5	nop
10000e9dc:	28 d4 04 58	ldr	x8, #39556 ; literal pool symbol address: ___stderrp
10000e9e0:	03 01 40 f9	ldr	x3, [x8]
10000e9e4:	20 4f 04 30	adr	x0, #35301 ; literal pool for: "Couldn't get value from CFDictionary\n"
10000e9e8:	1f 20 03 d5	nop
10000e9ec:	a1 04 80 52	mov	w1, #37
10000e9f0:	0d 00 00 14	b	0x10000ea24
10000e9f4:	1f 20 03 d5	nop
10000e9f8:	48 d3 04 58	ldr	x8, #39528 ; literal pool symbol address: ___stderrp
10000e9fc:	03 01 40 f9	ldr	x3, [x8]
10000ea00:	60 4f 04 70	adr	x0, #35311 ; literal pool for: "Couldn't get min from CFDictionary\n"
10000ea04:	1f 20 03 d5	nop
10000ea08:	06 00 00 14	b	0x10000ea20
10000ea0c:	1f 20 03 d5	nop
10000ea10:	88 d2 04 58	ldr	x8, #39504 ; literal pool symbol address: ___stderrp
10000ea14:	03 01 40 f9	ldr	x3, [x8]
10000ea18:	c0 4f 04 70	adr	x0, #35323 ; literal pool for: "Couldn't get max from CFDictionary\n"
10000ea1c:	1f 20 03 d5	nop
10000ea20:	61 04 80 52	mov	w1, #35
10000ea24:	22 00 80 52	mov	w2, #1
10000ea28:	be 0c 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000ea2c:	a0 83 5d f8	ldur	x0, [x29, #-40]
10000ea30:	d0 0b 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000ea34:	dc ff ff 17	b	0x10000e9a4
10000ea38:	1f 20 03 d5	nop
10000ea3c:	1f 20 03 d5	nop
10000ea40:	40 b4 06 58	ldr	x0, #54920
10000ea44:	a9 23 7a 29	ldp	w9, w8, [x29, #-48]
10000ea48:	aa c3 5c b8	ldur	w10, [x29, #-52]
10000ea4c:	e9 ab 00 a9	stp	x9, x10, [sp, #8]
10000ea50:	e8 03 00 f9	str	x8, [sp]
10000ea54:	61 39 04 70	adr	x1, #34607 ; literal pool for: "<key>backlight</key>\n<dict>\n<key>value</key><integer>%u</integer>\n<key>min</key><integer>%u</integer>\n<key>max</key><integer>%u</integer>\n</dict>\n"
10000ea58:	1f 20 03 d5	nop
10000ea5c:	a1 0c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000ea60:	1f 20 03 d5	nop
10000ea64:	00 c8 07 18	ldr	w0, 0x10001e364
10000ea68:	e0 fa ff 34	cbz	w0, 0x10000e9c4
10000ea6c:	a1 e3 00 d1	sub	x1, x29, #56
10000ea70:	a2 f3 00 d1	sub	x2, x29, #60
10000ea74:	a3 03 01 d1	sub	x3, x29, #64
10000ea78:	a4 13 01 d1	sub	x4, x29, #68
10000ea7c:	a7 00 00 94	bl	0x10000ed18
10000ea80:	60 03 00 36	tbz	w0, #0, 0x10000eaec
10000ea84:	c8 2a 40 b9	ldr	w8, [x22, #40]
10000ea88:	1f 05 00 71	cmp	w8, #1
10000ea8c:	e0 03 00 54	b.eq	0x10000eb08
10000ea90:	a8 f9 ff 35	cbnz	w8, 0x10000e9c4
10000ea94:	b3 af 06 10	adr	x19, #54772
10000ea98:	1f 20 03 d5	nop
10000ea9c:	60 22 40 f9	ldr	x0, [x19, #64]
10000eaa0:	a8 83 5c b8	ldur	w8, [x29, #-56]
10000eaa4:	e8 03 00 f9	str	x8, [sp]
10000eaa8:	a1 3c 04 50	adr	x1, #34710 ; literal pool for: "Keyboard Backlight level: %u"
10000eaac:	1f 20 03 d5	nop
10000eab0:	8c 0c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000eab4:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000eab8:	09 81 4d 39	ldrb	w9, [x8, #864]
10000eabc:	68 22 40 f9	ldr	x8, [x19, #64]
10000eac0:	3f 05 00 71	cmp	w9, #1
10000eac4:	21 05 00 54	b.ne	0x10000eb68
10000eac8:	aa 27 78 29	ldp	w10, w9, [x29, #-64]
10000eacc:	ab c3 5b b8	ldur	w11, [x29, #-68]
10000ead0:	ea af 00 a9	stp	x10, x11, [sp, #8]
10000ead4:	e9 03 00 f9	str	x9, [sp]
10000ead8:	01 3c 04 70	adr	x1, #34691 ; literal pool for: " (off %u on range %u-%u)\n"
10000eadc:	1f 20 03 d5	nop
10000eae0:	e0 03 08 aa	mov	x0, x8
10000eae4:	7f 0c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000eae8:	b7 ff ff 17	b	0x10000e9c4
10000eaec:	1f 20 03 d5	nop
10000eaf0:	88 cb 04 58	ldr	x8, #39280 ; literal pool symbol address: ___stderrp
10000eaf4:	03 01 40 f9	ldr	x3, [x8]
10000eaf8:	e0 38 04 50	adr	x0, #34590 ; literal pool for: "failed to get keyboard backlight level\n"
10000eafc:	1f 20 03 d5	nop
10000eb00:	e1 04 80 52	mov	w1, #39
10000eb04:	ae ff ff 17	b	0x10000e9bc
10000eb08:	13 ac 06 10	adr	x19, #54656
10000eb0c:	1f 20 03 d5	nop
10000eb10:	60 22 40 f9	ldr	x0, [x19, #64]
10000eb14:	a8 83 5c b8	ldur	w8, [x29, #-56]
10000eb18:	e8 03 00 f9	str	x8, [sp]
10000eb1c:	c1 3a 04 30	adr	x1, #34649 ; literal pool for: "<key>keyboard_backlight</key>\n<dict>\n<key>value</key><integer>%u</integer>\n"
10000eb20:	1f 20 03 d5	nop
10000eb24:	6f 0c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000eb28:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000eb2c:	08 81 4d 39	ldrb	w8, [x8, #864]
10000eb30:	1f 05 00 71	cmp	w8, #1
10000eb34:	21 01 00 54	b.ne	0x10000eb58
10000eb38:	60 22 40 f9	ldr	x0, [x19, #64]
10000eb3c:	a9 23 78 29	ldp	w9, w8, [x29, #-64]
10000eb40:	aa c3 5b b8	ldur	w10, [x29, #-68]
10000eb44:	e9 ab 00 a9	stp	x9, x10, [sp, #8]
10000eb48:	e8 03 00 f9	str	x8, [sp]
10000eb4c:	a1 3b 04 30	adr	x1, #34677 ; literal pool for: "<key>off</key>\n<integer>%u</integer>\n<key>min</key>\n<integer>%u</integer>\n<key>max</key>\n<integer>%u</integer>\n"
10000eb50:	1f 20 03 d5	nop
10000eb54:	63 0c 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000eb58:	61 22 40 f9	ldr	x1, [x19, #64]
10000eb5c:	20 6f 02 50	adr	x0, #19942 ; literal pool for: "</dict>\n"
10000eb60:	1f 20 03 d5	nop
10000eb64:	04 00 00 14	b	0x10000eb74
10000eb68:	20 f4 02 10	adr	x0, #24196 ; literal pool for: "\n"
10000eb6c:	1f 20 03 d5	nop
10000eb70:	e1 03 08 aa	mov	x1, x8
10000eb74:	63 0c 00 94	bl	0x100011d00 ; symbol stub for: _fputs
10000eb78:	93 ff ff 17	b	0x10000e9c4
10000eb7c:	7f 23 03 d5	pacibsp
10000eb80:	f8 5f bc a9	stp	x24, x23, [sp, #-64]!
10000eb84:	f6 57 01 a9	stp	x22, x21, [sp, #16]
10000eb88:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
10000eb8c:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000eb90:	fd c3 00 91	add	x29, sp, #48
10000eb94:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000eb98:	08 61 4d 39	ldrb	w8, [x8, #856]
10000eb9c:	1f 05 00 71	cmp	w8, #1
10000eba0:	61 0a 00 54	b.ne	0x10000ecec
10000eba4:	34 a7 06 10	adr	x20, #54500
10000eba8:	1f 20 03 d5	nop
10000ebac:	80 0a 40 fd	ldr	d0, [x20, #16]
10000ebb0:	93 00 00 90	adrp	x19, 16 ; 0x10001e000
10000ebb4:	61 ca 41 fd	ldr	d1, [x19, #912]
10000ebb8:	00 28 61 1e	fadd	d0, d0, d1
10000ebbc:	60 ca 01 fd	str	d0, [x19, #912]
10000ebc0:	95 00 00 90	adrp	x21, 16 ; 0x10001e000
10000ebc4:	bf a2 0d 39	strb	wzr, [x21, #872]
10000ebc8:	88 02 40 39	ldrb	w8, [x20]
10000ebcc:	89 0a 40 39	ldrb	w9, [x20, #2]
10000ebd0:	01 d0 67 1e	fmov	d1, #30.00000000
10000ebd4:	00 20 61 1e	fcmp	d0, d1
10000ebd8:	00 b9 40 7a	ccmp	w8, #0, #0, lt
10000ebdc:	20 09 40 7a	ccmp	w9, #0, #0, eq
10000ebe0:	60 08 00 54	b.eq	0x10000ecec
10000ebe4:	76 bc 07 10	adr	x22, #63372
10000ebe8:	1f 20 03 d5	nop
10000ebec:	d7 02 40 b9	ldr	w23, [x22]
10000ebf0:	98 00 00 90	adrp	x24, 16 ; 0x10001e000
10000ebf4:	01 57 43 b9	ldr	w1, [x24, #852]
10000ebf8:	80 64 05 10	adr	x0, #44176 ; Objc cfstring ref: @"CurrentCapacity"
10000ebfc:	1f 20 03 d5	nop
10000ec00:	c2 00 00 94	bl	0x10000ef08
10000ec04:	c0 02 00 b9	str	w0, [x22]
10000ec08:	01 57 43 b9	ldr	w1, [x24, #852]
10000ec0c:	e0 64 05 10	adr	x0, #44188 ; Objc cfstring ref: @"MaxCapacity"
10000ec10:	1f 20 03 d5	nop
10000ec14:	bd 00 00 94	bl	0x10000ef08
10000ec18:	c0 06 00 b9	str	w0, [x22, #4]
10000ec1c:	01 57 43 b9	ldr	w1, [x24, #852]
10000ec20:	40 65 05 10	adr	x0, #44200 ; Objc cfstring ref: @"DesignCapacity"
10000ec24:	1f 20 03 d5	nop
10000ec28:	b8 00 00 94	bl	0x10000ef08
10000ec2c:	c0 0a 00 b9	str	w0, [x22, #8]
10000ec30:	01 57 43 b9	ldr	w1, [x24, #852]
10000ec34:	a0 65 05 10	adr	x0, #44212 ; Objc cfstring ref: @"CycleCount"
10000ec38:	1f 20 03 d5	nop
10000ec3c:	b3 00 00 94	bl	0x10000ef08
10000ec40:	c0 0e 00 b9	str	w0, [x22, #12]
10000ec44:	01 57 43 b9	ldr	w1, [x24, #852]
10000ec48:	00 66 05 10	adr	x0, #44224 ; Objc cfstring ref: @"ExternalConnected"
10000ec4c:	1f 20 03 d5	nop
10000ec50:	ae 00 00 94	bl	0x10000ef08
10000ec54:	1f 00 00 71	cmp	w0, #0
10000ec58:	e8 07 9f 1a	cset	w8, ne
10000ec5c:	c8 52 00 39	strb	w8, [x22, #20]
10000ec60:	c9 02 40 b9	ldr	w9, [x22]
10000ec64:	8a 02 40 39	ldrb	w10, [x20]
10000ec68:	28 01 17 6b	subs	w8, w9, w23
10000ec6c:	80 00 00 54	b.eq	0x10000ec7c
10000ec70:	6a 00 00 35	cbnz	w10, 0x10000ec7c
10000ec74:	2b 00 80 52	mov	w11, #1
10000ec78:	06 00 00 14	b	0x10000ec90
10000ec7c:	ab a2 06 10	adr	x11, #54356
10000ec80:	1f 20 03 d5	nop
10000ec84:	6b 65 40 39	ldrb	w11, [x11, #25]
10000ec88:	7f 01 00 71	cmp	w11, #0
10000ec8c:	eb 07 9f 1a	cset	w11, ne
10000ec90:	ab a2 0d 39	strb	w11, [x21, #872]
10000ec94:	8b 0a 40 39	ldrb	w11, [x20, #2]
10000ec98:	eb 01 00 34	cbz	w11, 0x10000ecd4
10000ec9c:	1f 20 03 d5	nop
10000eca0:	c8 b7 07 18	ldr	w8, 0x10001e398
10000eca4:	28 01 08 4b	sub	w8, w9, w8
10000eca8:	c9 b6 07 10	adr	x9, #63192
10000ecac:	1f 20 03 d5	nop
10000ecb0:	28 01 00 b9	str	w8, [x9]
10000ecb4:	00 01 62 1e	scvtf	d0, w8
10000ecb8:	81 0e 40 fd	ldr	d1, [x20, #24]
10000ecbc:	00 18 61 1e	fdiv	d0, d0, d1
10000ecc0:	c8 09 e8 d2	mov	x8, #4633641066610819072
10000ecc4:	01 01 67 9e	fmov	d1, x8
10000ecc8:	00 08 61 1e	fmul	d0, d0, d1
10000eccc:	20 05 00 fd	str	d0, [x9, #8]
10000ecd0:	06 00 00 14	b	0x10000ece8
10000ecd4:	6a 01 00 34	cbz	w10, 0x10000ed00
10000ecd8:	08 b6 07 10	adr	x8, #63168
10000ecdc:	1f 20 03 d5	nop
10000ece0:	c0 06 40 ad	ldp	q0, q1, [x22]
10000ece4:	00 05 00 ad	stp	q0, q1, [x8]
10000ece8:	7f ca 01 f9	str	xzr, [x19, #912]
10000ecec:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000ecf0:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
10000ecf4:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
10000ecf8:	f8 5f c4 a8	ldp	x24, x23, [sp], #64
10000ecfc:	ff 0f 5f d6	retab
10000ed00:	09 b4 07 10	adr	x9, #63104
10000ed04:	1f 20 03 d5	nop
10000ed08:	28 01 00 b9	str	w8, [x9]
10000ed0c:	00 01 62 1e	scvtf	d0, w8
10000ed10:	61 ca 41 fd	ldr	d1, [x19, #912]
10000ed14:	ea ff ff 17	b	0x10000ecbc
10000ed18:	7f 23 03 d5	pacibsp
10000ed1c:	fa 67 bb a9	stp	x26, x25, [sp, #-80]!
10000ed20:	f8 5f 01 a9	stp	x24, x23, [sp, #16]
10000ed24:	f6 57 02 a9	stp	x22, x21, [sp, #32]
10000ed28:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
10000ed2c:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
10000ed30:	fd 03 01 91	add	x29, sp, #64
10000ed34:	f5 03 04 aa	mov	x21, x4
10000ed38:	f6 03 03 aa	mov	x22, x3
10000ed3c:	f7 03 02 aa	mov	x23, x2
10000ed40:	f8 03 01 aa	mov	x24, x1
10000ed44:	f4 03 00 aa	mov	x20, x0
10000ed48:	3f 00 00 b9	str	wzr, [x1]
10000ed4c:	5f 00 00 b9	str	wzr, [x2]
10000ed50:	7f 00 00 b9	str	wzr, [x3]
10000ed54:	9f 00 00 b9	str	wzr, [x4]
10000ed58:	81 4f 05 10	adr	x1, #43504 ; Objc cfstring ref: @"KeyboardBacklightBrightness"
10000ed5c:	1f 20 03 d5	nop
10000ed60:	02 00 80 d2	mov	x2, #0
10000ed64:	03 00 80 52	mov	w3, #0
10000ed68:	26 0b 00 94	bl	0x100011a00 ; symbol stub for: _IORegistryEntryCreateCFProperty
10000ed6c:	e0 06 00 b4	cbz	x0, 0x10000ee48
10000ed70:	f3 03 00 aa	mov	x19, x0
10000ed74:	21 01 80 52	mov	w1, #9
10000ed78:	e2 03 18 aa	mov	x2, x24
10000ed7c:	f9 0a 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000ed80:	40 00 00 35	cbnz	w0, 0x10000ed88
10000ed84:	1f 03 00 b9	str	wzr, [x24]
10000ed88:	88 00 00 90	adrp	x8, 16 ; 0x10001e000
10000ed8c:	18 81 4d 39	ldrb	w24, [x8, #864]
10000ed90:	1f 07 00 71	cmp	w24, #1
10000ed94:	e1 06 00 54	b.ne	0x10000ee70
10000ed98:	81 4e 05 10	adr	x1, #43472 ; Objc cfstring ref: @"KeyboardBacklightParameters"
10000ed9c:	1f 20 03 d5	nop
10000eda0:	e0 03 14 aa	mov	x0, x20
10000eda4:	02 00 80 d2	mov	x2, #0
10000eda8:	03 00 80 52	mov	w3, #0
10000edac:	15 0b 00 94	bl	0x100011a00 ; symbol stub for: _IORegistryEntryCreateCFProperty
10000edb0:	00 05 00 b4	cbz	x0, 0x10000ee50
10000edb4:	f4 03 00 aa	mov	x20, x0
10000edb8:	81 4e 05 10	adr	x1, #43472 ; Objc cfstring ref: @"KeyboardBacklightOff"
10000edbc:	1f 20 03 d5	nop
10000edc0:	e4 0a 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000edc4:	fa 03 00 aa	mov	x26, x0
10000edc8:	01 4f 05 10	adr	x1, #43488 ; Objc cfstring ref: @"KeyboardBacklightMinOn"
10000edcc:	1f 20 03 d5	nop
10000edd0:	e0 03 14 aa	mov	x0, x20
10000edd4:	df 0a 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000edd8:	f9 03 00 aa	mov	x25, x0
10000eddc:	61 4f 05 10	adr	x1, #43500 ; Objc cfstring ref: @"KeyboardBacklightMaxOn"
10000ede0:	1f 20 03 d5	nop
10000ede4:	e0 03 14 aa	mov	x0, x20
10000ede8:	da 0a 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000edec:	9a 04 00 b4	cbz	x26, 0x10000ee7c
10000edf0:	f8 03 00 aa	mov	x24, x0
10000edf4:	e0 03 1a aa	mov	x0, x26
10000edf8:	21 01 80 52	mov	w1, #9
10000edfc:	e2 03 17 aa	mov	x2, x23
10000ee00:	d8 0a 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000ee04:	a0 04 00 34	cbz	w0, 0x10000ee98
10000ee08:	d9 04 00 b4	cbz	x25, 0x10000eea0
10000ee0c:	e0 03 19 aa	mov	x0, x25
10000ee10:	21 01 80 52	mov	w1, #9
10000ee14:	e2 03 16 aa	mov	x2, x22
10000ee18:	d2 0a 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000ee1c:	40 00 00 35	cbnz	w0, 0x10000ee24
10000ee20:	df 02 00 b9	str	wzr, [x22]
10000ee24:	b8 04 00 b4	cbz	x24, 0x10000eeb8
10000ee28:	e0 03 18 aa	mov	x0, x24
10000ee2c:	21 01 80 52	mov	w1, #9
10000ee30:	e2 03 15 aa	mov	x2, x21
10000ee34:	cb 0a 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000ee38:	40 00 00 35	cbnz	w0, 0x10000ee40
10000ee3c:	bf 02 00 b9	str	wzr, [x21]
10000ee40:	35 00 80 52	mov	w21, #1
10000ee44:	26 00 00 14	b	0x10000eedc
10000ee48:	15 00 80 52	mov	w21, #0
10000ee4c:	28 00 00 14	b	0x10000eeec
10000ee50:	1f 20 03 d5	nop
10000ee54:	68 b0 04 58	ldr	x8, #38412 ; literal pool symbol address: ___stderrp
10000ee58:	03 01 40 f9	ldr	x3, [x8]
10000ee5c:	e0 fe 03 10	adr	x0, #32732 ; literal pool for: "Couldn't get value KeyboardBacklightParameters\n"
10000ee60:	1f 20 03 d5	nop
10000ee64:	e1 05 80 52	mov	w1, #47
10000ee68:	22 00 80 52	mov	w2, #1
10000ee6c:	ad 0b 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000ee70:	15 03 00 52	eor	w21, w24, #0x1
10000ee74:	f4 03 13 aa	mov	x20, x19
10000ee78:	1b 00 00 14	b	0x10000eee4
10000ee7c:	1f 20 03 d5	nop
10000ee80:	08 af 04 58	ldr	x8, #38368 ; literal pool symbol address: ___stderrp
10000ee84:	03 01 40 f9	ldr	x3, [x8]
10000ee88:	00 01 04 70	adr	x0, #32803 ; literal pool for: "Couldn't get off value from CFDictionary\n"
10000ee8c:	1f 20 03 d5	nop
10000ee90:	21 05 80 52	mov	w1, #41
10000ee94:	0f 00 00 14	b	0x10000eed0
10000ee98:	ff 02 00 b9	str	wzr, [x23]
10000ee9c:	99 fb ff b5	cbnz	x25, 0x10000ee0c
10000eea0:	1f 20 03 d5	nop
10000eea4:	e8 ad 04 58	ldr	x8, #38332 ; literal pool symbol address: ___stderrp
10000eea8:	03 01 40 f9	ldr	x3, [x8]
10000eeac:	40 01 04 30	adr	x0, #32809 ; literal pool for: "Couldn't get min on value from CFDictionary\n"
10000eeb0:	1f 20 03 d5	nop
10000eeb4:	06 00 00 14	b	0x10000eecc
10000eeb8:	1f 20 03 d5	nop
10000eebc:	28 ad 04 58	ldr	x8, #38308 ; literal pool symbol address: ___stderrp
10000eec0:	03 01 40 f9	ldr	x3, [x8]
10000eec4:	e0 01 04 50	adr	x0, #32830 ; literal pool for: "Couldn't get max on value from CFDictionary\n"
10000eec8:	1f 20 03 d5	nop
10000eecc:	81 05 80 52	mov	w1, #44
10000eed0:	22 00 80 52	mov	w2, #1
10000eed4:	93 0b 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10000eed8:	15 00 80 52	mov	w21, #0
10000eedc:	e0 03 13 aa	mov	x0, x19
10000eee0:	a4 0a 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000eee4:	e0 03 14 aa	mov	x0, x20
10000eee8:	a2 0a 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000eeec:	e0 03 15 aa	mov	x0, x21
10000eef0:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
10000eef4:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
10000eef8:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
10000eefc:	f8 5f 41 a9	ldp	x24, x23, [sp, #16]
10000ef00:	fa 67 c5 a8	ldp	x26, x25, [sp], #80
10000ef04:	ff 0f 5f d6	retab
10000ef08:	7f 23 03 d5	pacibsp
10000ef0c:	ff c3 00 d1	sub	sp, sp, #48
10000ef10:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000ef14:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000ef18:	fd 83 00 91	add	x29, sp, #32
10000ef1c:	e8 03 01 aa	mov	x8, x1
10000ef20:	f3 03 00 aa	mov	x19, x0
10000ef24:	ff 07 00 f9	str	xzr, [sp, #8]
10000ef28:	ff 07 00 b9	str	wzr, [sp, #4]
10000ef2c:	e1 23 00 91	add	x1, sp, #8
10000ef30:	e0 03 08 aa	mov	x0, x8
10000ef34:	02 00 80 d2	mov	x2, #0
10000ef38:	03 00 80 52	mov	w3, #0
10000ef3c:	ad 0a 00 94	bl	0x1000119f0 ; symbol stub for: _IORegistryEntryCreateCFProperties
10000ef40:	e8 03 00 aa	mov	x8, x0
10000ef44:	00 00 80 52	mov	w0, #0
10000ef48:	e8 01 00 35	cbnz	w8, 0x10000ef84
10000ef4c:	e8 07 40 f9	ldr	x8, [sp, #8]
10000ef50:	a8 01 00 b4	cbz	x8, 0x10000ef84
10000ef54:	e0 03 08 aa	mov	x0, x8
10000ef58:	e1 03 13 aa	mov	x1, x19
10000ef5c:	7d 0a 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10000ef60:	c0 00 00 b4	cbz	x0, 0x10000ef78
10000ef64:	e2 13 00 91	add	x2, sp, #4
10000ef68:	21 01 80 52	mov	w1, #9
10000ef6c:	7d 0a 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10000ef70:	40 00 00 35	cbnz	w0, 0x10000ef78
10000ef74:	ff 07 00 b9	str	wzr, [sp, #4]
10000ef78:	e0 07 40 f9	ldr	x0, [sp, #8]
10000ef7c:	7d 0a 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000ef80:	e0 07 40 b9	ldr	w0, [sp, #4]
10000ef84:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000ef88:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000ef8c:	ff c3 00 91	add	sp, sp, #48
10000ef90:	ff 0f 5f d6	retab
10000ef94:	7f 23 03 d5	pacibsp
10000ef98:	ff 43 01 d1	sub	sp, sp, #80
10000ef9c:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
10000efa0:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
10000efa4:	fd 03 01 91	add	x29, sp, #64
10000efa8:	e2 03 00 aa	mov	x2, x0
10000efac:	f4 03 00 91	mov	x20, sp
10000efb0:	1f 20 03 d5	nop
10000efb4:	28 a5 04 58	ldr	x8, #38052 ; literal pool symbol address: ___stack_chk_guard
10000efb8:	08 01 40 f9	ldr	x8, [x8]
10000efbc:	a8 83 1e f8	stur	x8, [x29, #-24]
10000efc0:	1f 20 03 d5	nop
10000efc4:	a0 2d 02 5c	ldr	d0, 0x100013578
10000efc8:	e0 0f 00 fd	str	d0, [sp, #24]
10000efcc:	28 00 80 52	mov	w8, #1
10000efd0:	e8 07 04 29	stp	w8, w1, [sp, #32]
10000efd4:	08 51 80 52	mov	w8, #648
10000efd8:	e8 0b 00 f9	str	x8, [sp, #16]
10000efdc:	e0 63 00 91	add	x0, sp, #24
10000efe0:	e3 43 00 91	add	x3, sp, #16
10000efe4:	81 00 80 52	mov	w1, #4
10000efe8:	04 00 80 d2	mov	x4, #0
10000efec:	05 00 80 d2	mov	x5, #0
10000eff0:	38 0c 00 94	bl	0x1000120d0 ; symbol stub for: _sysctl
10000eff4:	f3 03 00 aa	mov	x19, x0
10000eff8:	40 01 00 34	cbz	w0, 0x10000f020
10000effc:	fd 0a 00 94	bl	0x100011bf0 ; symbol stub for: ___error
10000f000:	00 00 40 b9	ldr	w0, [x0]
10000f004:	17 0c 00 94	bl	0x100012060 ; symbol stub for: _strerror
10000f008:	a8 24 04 10	adr	x8, #33940 ; literal pool for: "kinfo_for_pid"
10000f00c:	1f 20 03 d5	nop
10000f010:	e8 03 00 a9	stp	x8, x0, [sp]
10000f014:	40 23 04 70	adr	x0, #33899 ; literal pool for: "%s(): Error in sysctl(): %s\n"
10000f018:	1f 20 03 d5	nop
10000f01c:	d1 0b 00 94	bl	0x100011f60 ; symbol stub for: _printf
10000f020:	9f 02 00 91	mov	sp, x20
10000f024:	a8 83 5e f8	ldur	x8, [x29, #-24]
10000f028:	1f 20 03 d5	nop
10000f02c:	69 a1 04 58	ldr	x9, #37932 ; literal pool symbol address: ___stack_chk_guard
10000f030:	29 01 40 f9	ldr	x9, [x9]
10000f034:	3f 01 08 eb	cmp	x9, x8
10000f038:	c1 00 00 54	b.ne	0x10000f050
10000f03c:	e0 03 13 aa	mov	x0, x19
10000f040:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
10000f044:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
10000f048:	ff 43 01 91	add	sp, sp, #80
10000f04c:	ff 0f 5f d6	retab
10000f050:	ec 0a 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000f054:	7f 23 03 d5	pacibsp
10000f058:	ff 83 00 d1	sub	sp, sp, #32
10000f05c:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000f060:	fd 43 00 91	add	x29, sp, #16
10000f064:	08 00 40 f9	ldr	x8, [x0]
10000f068:	29 00 40 f9	ldr	x9, [x1]
10000f06c:	08 01 09 cb	sub	x8, x8, x9
10000f070:	09 40 99 52	mov	w9, #51712
10000f074:	49 73 a7 72	movk	w9, #15258, lsl #16
10000f078:	0a 08 80 b9	ldrsw	x10, [x0, #8]
10000f07c:	2b 08 80 b9	ldrsw	x11, [x1, #8]
10000f080:	4a 01 0b cb	sub	x10, x10, x11
10000f084:	0b 7d 80 52	mov	w11, #1000
10000f088:	4a 7d 0b 9b	mul	x10, x10, x11
10000f08c:	00 29 09 9b	madd	x0, x8, x9, x10
10000f090:	60 01 f8 b6	tbz	x0, #63, 0x10000f0bc
10000f094:	1f 20 03 d5	nop
10000f098:	48 9e 04 58	ldr	x8, #37832 ; literal pool symbol address: ___stderrp
10000f09c:	08 01 40 f9	ldr	x8, [x8]
10000f0a0:	e9 03 00 cb	neg	x9, x0
10000f0a4:	e9 03 00 f9	str	x9, [sp]
10000f0a8:	01 20 04 50	adr	x1, #33794 ; literal pool for: "warning: time went backwards by %lld ns\n"
10000f0ac:	1f 20 03 d5	nop
10000f0b0:	e0 03 08 aa	mov	x0, x8
10000f0b4:	0b 0b 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000f0b8:	00 00 80 d2	mov	x0, #0
10000f0bc:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000f0c0:	ff 83 00 91	add	sp, sp, #32
10000f0c4:	ff 0f 5f d6	retab
10000f0c8:	7f 23 03 d5	pacibsp
10000f0cc:	ff 83 00 d1	sub	sp, sp, #32
10000f0d0:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000f0d4:	fd 43 00 91	add	x29, sp, #16
10000f0d8:	bf c3 1f b8	stur	wzr, [x29, #-4]
10000f0dc:	20 26 02 10	adr	x0, #17604
10000f0e0:	1f 20 03 d5	nop
10000f0e4:	22 83 06 10	adr	x2, #53348
10000f0e8:	1f 20 03 d5	nop
10000f0ec:	a1 13 00 d1	sub	x1, x29, #4
10000f0f0:	03 00 80 d2	mov	x3, #0
10000f0f4:	04 00 80 d2	mov	x4, #0
10000f0f8:	fa 0b 00 94	bl	0x1000120e0 ; symbol stub for: _sysctlbyname
10000f0fc:	1f 00 00 71	cmp	w0, #0
10000f100:	e8 17 9f 1a	cset	w8, eq
10000f104:	a9 c3 5f b8	ldur	w9, [x29, #-4]
10000f108:	3f 01 00 71	cmp	w9, #0
10000f10c:	e9 07 9f 1a	cset	w9, ne
10000f110:	00 01 09 0a	and	w0, w8, w9
10000f114:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000f118:	ff 83 00 91	add	sp, sp, #32
10000f11c:	ff 0f 5f d6	retab
10000f120:	7f 23 03 d5	pacibsp
10000f124:	ff c3 00 d1	sub	sp, sp, #48
10000f128:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000f12c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000f130:	fd 83 00 91	add	x29, sp, #32
10000f134:	f3 03 01 aa	mov	x19, x1
10000f138:	f4 03 00 aa	mov	x20, x0
10000f13c:	ff 07 00 f9	str	xzr, [sp, #8]
10000f140:	e1 23 00 91	add	x1, sp, #8
10000f144:	02 00 80 52	mov	w2, #0
10000f148:	de 0b 00 94	bl	0x1000120c0 ; symbol stub for: _strtoll
10000f14c:	e8 07 40 f9	ldr	x8, [sp, #8]
10000f150:	1f 01 14 eb	cmp	x8, x20
10000f154:	60 00 00 54	b.eq	0x10000f160
10000f158:	08 01 40 39	ldrb	w8, [x8]
10000f15c:	68 00 00 34	cbz	w8, 0x10000f168
10000f160:	00 00 80 52	mov	w0, #0
10000f164:	04 00 00 14	b	0x10000f174
10000f168:	53 00 00 b4	cbz	x19, 0x10000f170
10000f16c:	60 02 00 f9	str	x0, [x19]
10000f170:	20 00 80 52	mov	w0, #1
10000f174:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000f178:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000f17c:	ff c3 00 91	add	sp, sp, #48
10000f180:	ff 0f 5f d6	retab
10000f184:	7f 23 03 d5	pacibsp
10000f188:	ff 43 02 d1	sub	sp, sp, #144
10000f18c:	fc 6f 03 a9	stp	x28, x27, [sp, #48]
10000f190:	fa 67 04 a9	stp	x26, x25, [sp, #64]
10000f194:	f8 5f 05 a9	stp	x24, x23, [sp, #80]
10000f198:	f6 57 06 a9	stp	x22, x21, [sp, #96]
10000f19c:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
10000f1a0:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
10000f1a4:	fd 03 02 91	add	x29, sp, #128
10000f1a8:	f4 03 02 aa	mov	x20, x2
10000f1ac:	f7 03 01 aa	mov	x23, x1
10000f1b0:	f9 03 00 aa	mov	x25, x0
10000f1b4:	f6 1f 02 70	adr	x22, #17407
10000f1b8:	1f 20 03 d5	nop
10000f1bc:	e2 87 01 a9	stp	x2, x1, [sp, #24]
10000f1c0:	e0 17 00 f9	str	x0, [sp, #40]
10000f1c4:	e0 03 19 aa	mov	x0, x25
10000f1c8:	e1 03 16 aa	mov	x1, x22
10000f1cc:	a1 0b 00 94	bl	0x100012050 ; symbol stub for: _strcspn
10000f1d0:	fa 03 00 aa	mov	x26, x0
10000f1d4:	33 03 00 8b	add	x19, x25, x0
10000f1d8:	78 02 c0 39	ldrsb	w24, [x19]
10000f1dc:	1f 9b 00 71	cmp	w24, #38
10000f1e0:	4c 01 00 54	b.gt	0x10000f208
10000f1e4:	58 02 00 34	cbz	w24, 0x10000f22c
10000f1e8:	1f 8b 00 71	cmp	w24, #34
10000f1ec:	c0 02 00 54	b.eq	0x10000f244
10000f1f0:	1f 9b 00 71	cmp	w24, #38
10000f1f4:	01 06 00 54	b.ne	0x10000f2b4
10000f1f8:	db 1e 02 30	adr	x27, #17369
10000f1fc:	1f 20 03 d5	nop
10000f200:	bc 00 80 52	mov	w28, #5
10000f204:	1a 00 00 14	b	0x10000f26c
10000f208:	1f 9f 00 71	cmp	w24, #39
10000f20c:	20 02 00 54	b.eq	0x10000f250
10000f210:	1f f3 00 71	cmp	w24, #60
10000f214:	60 02 00 54	b.eq	0x10000f260
10000f218:	1f fb 00 71	cmp	w24, #62
10000f21c:	c1 04 00 54	b.ne	0x10000f2b4
10000f220:	fb 1c 02 50	adr	x27, #17310
10000f224:	1f 20 03 d5	nop
10000f228:	10 00 00 14	b	0x10000f268
10000f22c:	e8 17 40 f9	ldr	x8, [sp, #40]
10000f230:	3f 03 08 eb	cmp	x25, x8
10000f234:	a0 04 00 54	b.eq	0x10000f2c8
10000f238:	1b 00 80 d2	mov	x27, #0
10000f23c:	1c 00 80 d2	mov	x28, #0
10000f240:	0b 00 00 14	b	0x10000f26c
10000f244:	3b 1c 02 50	adr	x27, #17286
10000f248:	1f 20 03 d5	nop
10000f24c:	03 00 00 14	b	0x10000f258
10000f250:	9b 1b 02 70	adr	x27, #17267
10000f254:	1f 20 03 d5	nop
10000f258:	dc 00 80 52	mov	w28, #6
10000f25c:	04 00 00 14	b	0x10000f26c
10000f260:	db 1a 02 30	adr	x27, #17241
10000f264:	1f 20 03 d5	nop
10000f268:	9c 00 80 52	mov	w28, #4
10000f26c:	95 03 1a 8b	add	x21, x28, x26
10000f270:	a8 06 00 91	add	x8, x21, #1
10000f274:	9f 02 08 eb	cmp	x20, x8
10000f278:	c3 02 00 54	b.lo	0x10000f2d0
10000f27c:	e0 03 17 aa	mov	x0, x23
10000f280:	e1 03 19 aa	mov	x1, x25
10000f284:	e2 03 1a aa	mov	x2, x26
10000f288:	ea 0a 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000f28c:	f7 02 1a 8b	add	x23, x23, x26
10000f290:	e0 03 17 aa	mov	x0, x23
10000f294:	e1 03 1b aa	mov	x1, x27
10000f298:	e2 03 1c aa	mov	x2, x28
10000f29c:	e5 0a 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000f2a0:	79 06 00 91	add	x25, x19, #1
10000f2a4:	f7 02 1c 8b	add	x23, x23, x28
10000f2a8:	94 02 15 cb	sub	x20, x20, x21
10000f2ac:	d8 f8 ff 35	cbnz	w24, 0x10000f1c4
10000f2b0:	0e 00 00 14	b	0x10000f2e8
10000f2b4:	f8 03 00 f9	str	x24, [sp]
10000f2b8:	c0 10 04 70	adr	x0, #33307 ; literal pool for: "encountered unknown XML special character: %c"
10000f2bc:	1f 20 03 d5	nop
10000f2c0:	a0 0b 00 94	bl	0x100012140 ; symbol stub for: _warnx
10000f2c4:	dd ff ff 17	b	0x10000f238
10000f2c8:	e0 17 40 f9	ldr	x0, [sp, #40]
10000f2cc:	09 00 00 14	b	0x10000f2f0
10000f2d0:	e9 17 40 f9	ldr	x9, [sp, #40]
10000f2d4:	e8 0f 40 f9	ldr	x8, [sp, #24]
10000f2d8:	e8 27 00 a9	stp	x8, x9, [sp]
10000f2dc:	20 11 04 30	adr	x0, #33317 ; literal pool for: "buffer size (%llu) insufficient for escaping string: %s"
10000f2e0:	1f 20 03 d5	nop
10000f2e4:	97 0b 00 94	bl	0x100012140 ; symbol stub for: _warnx
10000f2e8:	ff 02 00 39	strb	wzr, [x23]
10000f2ec:	e0 13 40 f9	ldr	x0, [sp, #32]
10000f2f0:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
10000f2f4:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
10000f2f8:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
10000f2fc:	f8 5f 45 a9	ldp	x24, x23, [sp, #80]
10000f300:	fa 67 44 a9	ldp	x26, x25, [sp, #64]
10000f304:	fc 6f 43 a9	ldp	x28, x27, [sp, #48]
10000f308:	ff 43 02 91	add	sp, sp, #144
10000f30c:	ff 0f 5f d6	retab
10000f310:	7f 23 03 d5	pacibsp
10000f314:	ff c3 00 d1	sub	sp, sp, #48
10000f318:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000f31c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000f320:	fd 83 00 91	add	x29, sp, #32
10000f324:	f3 03 00 aa	mov	x19, x0
10000f328:	00 e4 00 2f	movi	d0, #0000000000000000
10000f32c:	28 00 02 aa	orr	x8, x1, x2
10000f330:	88 00 00 b4	cbz	x8, 0x10000f340
10000f334:	20 00 63 9e	ucvtf	d0, x1
10000f338:	41 00 63 9e	ucvtf	d1, x2
10000f33c:	00 18 61 1e	fdiv	d0, d0, d1
10000f340:	1f 20 03 d5	nop
10000f344:	e1 11 02 5c	ldr	d1, 0x100013580
10000f348:	00 58 61 1e	fmin	d0, d0, d1
10000f34c:	08 20 60 1e	fcmp	d0, #0.0
10000f350:	a1 00 00 54	b.ne	0x10000f364
10000f354:	e0 03 00 fd	str	d0, [sp]
10000f358:	02 0f 04 30	adr	x2, #33249 ; literal pool for: "%3.0f"
10000f35c:	1f 20 03 d5	nop
10000f360:	13 00 00 14	b	0x10000f3ac
10000f364:	1f 20 03 d5	nop
10000f368:	01 11 02 5c	ldr	d1, 0x100013588
10000f36c:	00 20 61 1e	fcmp	d0, d1
10000f370:	05 01 00 54	b.pl	0x10000f390
10000f374:	28 0b e8 d2	mov	x8, #4636737291354636288
10000f378:	01 01 67 9e	fmov	d1, x8
10000f37c:	00 08 61 1e	fmul	d0, d0, d1
10000f380:	e0 03 00 fd	str	d0, [sp]
10000f384:	c2 0d 04 70	adr	x2, #33211 ; literal pool for: ".%02.0f"
10000f388:	1f 20 03 d5	nop
10000f38c:	08 00 00 14	b	0x10000f3ac
10000f390:	1f 20 03 d5	nop
10000f394:	e1 0f 02 5c	ldr	d1, 0x100013590
10000f398:	00 20 61 1e	fcmp	d0, d1
10000f39c:	c5 fd ff 54	b.pl	0x10000f354
10000f3a0:	e0 03 00 fd	str	d0, [sp]
10000f3a4:	02 0d 04 70	adr	x2, #33187 ; literal pool for: "%3.1f"
10000f3a8:	1f 20 03 d5	nop
10000f3ac:	e0 03 13 aa	mov	x0, x19
10000f3b0:	81 00 80 52	mov	w1, #4
10000f3b4:	13 0b 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000f3b8:	e0 03 13 aa	mov	x0, x19
10000f3bc:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000f3c0:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000f3c4:	ff c3 00 91	add	sp, sp, #48
10000f3c8:	ff 0f 5f d6	retab
10000f3cc:	7f 23 03 d5	pacibsp
10000f3d0:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000f3d4:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000f3d8:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000f3dc:	fd 83 00 91	add	x29, sp, #32
10000f3e0:	f4 03 03 aa	mov	x20, x3
10000f3e4:	f5 03 02 aa	mov	x21, x2
10000f3e8:	02 00 80 52	mov	w2, #0
10000f3ec:	03 00 80 d2	mov	x3, #0
10000f3f0:	a8 09 00 94	bl	0x100011a90 ; symbol stub for: _IOReportCopyChannelsInGroup
10000f3f4:	f3 03 00 aa	mov	x19, x0
10000f3f8:	60 01 00 b4	cbz	x0, 0x10000f424
10000f3fc:	00 00 80 d2	mov	x0, #0
10000f400:	e1 03 13 aa	mov	x1, x19
10000f404:	e2 03 14 aa	mov	x2, x20
10000f408:	03 00 80 52	mov	w3, #0
10000f40c:	04 00 80 d2	mov	x4, #0
10000f410:	b0 09 00 94	bl	0x100011ad0 ; symbol stub for: _IOReportCreateSubscription
10000f414:	a0 02 00 f9	str	x0, [x21]
10000f418:	e0 00 00 b4	cbz	x0, 0x10000f434
10000f41c:	34 00 80 52	mov	w20, #1
10000f420:	0c 00 00 14	b	0x10000f450
10000f424:	a0 02 40 f9	ldr	x0, [x21]
10000f428:	60 00 00 b4	cbz	x0, 0x10000f434
10000f42c:	51 09 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f430:	bf 02 00 f9	str	xzr, [x21]
10000f434:	80 02 40 f9	ldr	x0, [x20]
10000f438:	60 00 00 b4	cbz	x0, 0x10000f444
10000f43c:	4d 09 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f440:	9f 02 00 f9	str	xzr, [x20]
10000f444:	14 00 80 52	mov	w20, #0
10000f448:	00 00 80 52	mov	w0, #0
10000f44c:	93 00 00 b4	cbz	x19, 0x10000f45c
10000f450:	e0 03 13 aa	mov	x0, x19
10000f454:	47 09 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f458:	e0 03 14 aa	mov	x0, x20
10000f45c:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000f460:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000f464:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000f468:	ff 0f 5f d6	retab
10000f46c:	7f 23 03 d5	pacibsp
10000f470:	fa 67 bb a9	stp	x26, x25, [sp, #-80]!
10000f474:	f8 5f 01 a9	stp	x24, x23, [sp, #16]
10000f478:	f6 57 02 a9	stp	x22, x21, [sp, #32]
10000f47c:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
10000f480:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
10000f484:	fd 03 01 91	add	x29, sp, #64
10000f488:	f7 03 05 aa	mov	x23, x5
10000f48c:	f8 03 04 aa	mov	x24, x4
10000f490:	f3 03 03 aa	mov	x19, x3
10000f494:	f5 03 02 aa	mov	x21, x2
10000f498:	f4 03 01 aa	mov	x20, x1
10000f49c:	f6 03 00 aa	mov	x22, x0
10000f4a0:	40 00 40 f9	ldr	x0, [x2]
10000f4a4:	60 00 00 b4	cbz	x0, 0x10000f4b0
10000f4a8:	32 09 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f4ac:	bf 02 00 f9	str	xzr, [x21]
10000f4b0:	d9 5e 06 10	adr	x25, #52184
10000f4b4:	1f 20 03 d5	nop
10000f4b8:	28 0b 40 39	ldrb	w8, [x25, #2]
10000f4bc:	1f 01 00 71	cmp	w8, #0
10000f4c0:	88 02 96 9a	csel	x8, x20, x22, eq
10000f4c4:	08 01 40 f9	ldr	x8, [x8]
10000f4c8:	a8 02 00 f9	str	x8, [x21]
10000f4cc:	e0 03 18 aa	mov	x0, x24
10000f4d0:	e1 03 17 aa	mov	x1, x23
10000f4d4:	02 00 80 d2	mov	x2, #0
10000f4d8:	76 09 00 94	bl	0x100011ab0 ; symbol stub for: _IOReportCreateSamples
10000f4dc:	80 02 00 f9	str	x0, [x20]
10000f4e0:	60 03 00 b4	cbz	x0, 0x10000f54c
10000f4e4:	60 02 40 f9	ldr	x0, [x19]
10000f4e8:	60 00 00 b4	cbz	x0, 0x10000f4f4
10000f4ec:	21 09 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f4f0:	7f 02 00 f9	str	xzr, [x19]
10000f4f4:	28 03 40 39	ldrb	w8, [x25]
10000f4f8:	08 01 00 34	cbz	w8, 0x10000f518
10000f4fc:	88 02 40 f9	ldr	x8, [x20]
10000f500:	c8 02 00 f9	str	x8, [x22]
10000f504:	80 02 40 f9	ldr	x0, [x20]
10000f508:	60 02 00 f9	str	x0, [x19]
10000f50c:	1d 09 00 94	bl	0x100011980 ; symbol stub for: _CFRetain
10000f510:	c0 02 40 f9	ldr	x0, [x22]
10000f514:	1b 09 00 94	bl	0x100011980 ; symbol stub for: _CFRetain
10000f518:	a0 02 40 f9	ldr	x0, [x21]
10000f51c:	c0 00 00 b4	cbz	x0, 0x10000f534
10000f520:	81 02 40 f9	ldr	x1, [x20]
10000f524:	81 00 00 b4	cbz	x1, 0x10000f534
10000f528:	02 00 80 d2	mov	x2, #0
10000f52c:	65 09 00 94	bl	0x100011ac0 ; symbol stub for: _IOReportCreateSamplesDelta
10000f530:	60 02 00 f9	str	x0, [x19]
10000f534:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
10000f538:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
10000f53c:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
10000f540:	f8 5f 41 a9	ldp	x24, x23, [sp, #16]
10000f544:	fa 67 c5 a8	ldp	x26, x25, [sp], #80
10000f548:	ff 0f 5f d6	retab
10000f54c:	5b 08 00 94	bl	0x1000116b8
10000f550:	7f 23 03 d5	pacibsp
10000f554:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000f558:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000f55c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000f560:	fd 83 00 91	add	x29, sp, #32
10000f564:	f5 03 03 aa	mov	x21, x3
10000f568:	f3 03 02 aa	mov	x19, x2
10000f56c:	1f 20 03 d5	nop
10000f570:	88 78 04 58	ldr	x8, #36624 ; literal pool symbol address: _kCFAllocatorDefault
10000f574:	02 01 40 f9	ldr	x2, [x8]
10000f578:	03 00 80 52	mov	w3, #0
10000f57c:	21 09 00 94	bl	0x100011a00 ; symbol stub for: _IORegistryEntryCreateCFProperty
10000f580:	f4 03 00 aa	mov	x20, x0
10000f584:	e0 01 00 b4	cbz	x0, 0x10000f5c0
10000f588:	e0 03 14 aa	mov	x0, x20
10000f58c:	e9 08 00 94	bl	0x100011930 ; symbol stub for: _CFDataGetLength
10000f590:	1f 00 15 eb	cmp	x0, x21
10000f594:	88 00 00 54	b.hi	0x10000f5a4
10000f598:	e0 03 14 aa	mov	x0, x20
10000f59c:	e5 08 00 94	bl	0x100011930 ; symbol stub for: _CFDataGetLength
10000f5a0:	f5 03 00 aa	mov	x21, x0
10000f5a4:	e0 03 14 aa	mov	x0, x20
10000f5a8:	01 00 80 d2	mov	x1, #0
10000f5ac:	e2 03 15 aa	mov	x2, x21
10000f5b0:	e3 03 13 aa	mov	x3, x19
10000f5b4:	db 08 00 94	bl	0x100011920 ; symbol stub for: _CFDataGetBytes
10000f5b8:	e0 03 14 aa	mov	x0, x20
10000f5bc:	ed 08 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f5c0:	9f 02 00 f1	cmp	x20, #0
10000f5c4:	e0 07 9f 1a	cset	w0, ne
10000f5c8:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000f5cc:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000f5d0:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000f5d4:	ff 0f 5f d6	retab
10000f5d8:	7f 23 03 d5	pacibsp
10000f5dc:	ff 03 03 d1	sub	sp, sp, #192
10000f5e0:	f4 4f 0a a9	stp	x20, x19, [sp, #160]
10000f5e4:	fd 7b 0b a9	stp	x29, x30, [sp, #176]
10000f5e8:	fd c3 02 91	add	x29, sp, #176
10000f5ec:	1f 20 03 d5	nop
10000f5f0:	48 73 04 58	ldr	x8, #36456 ; literal pool symbol address: ___stack_chk_guard
10000f5f4:	08 01 40 f9	ldr	x8, [x8]
10000f5f8:	a8 83 1e f8	stur	x8, [x29, #-24]
10000f5fc:	48 fc 03 10	adr	x8, #32648 ; literal pool for: ":/arm-io/pmgr"
10000f600:	1f 20 03 d5	nop
10000f604:	89 fb 03 70	adr	x9, #32627 ; literal pool for: "IODeviceTree"
10000f608:	1f 20 03 d5	nop
10000f60c:	e9 23 00 a9	stp	x9, x8, [sp]
10000f610:	e2 45 02 70	adr	x2, #18623 ; literal pool for: "%s%s"
10000f614:	1f 20 03 d5	nop
10000f618:	f4 63 00 91	add	x20, sp, #24
10000f61c:	e0 63 00 91	add	x0, sp, #24
10000f620:	01 10 80 52	mov	w1, #128
10000f624:	77 0a 00 94	bl	0x100012000 ; symbol stub for: _snprintf
10000f628:	1f 20 03 d5	nop
10000f62c:	28 73 04 58	ldr	x8, #36452 ; literal pool symbol address: _kIOMainPortDefault
10000f630:	00 01 40 b9	ldr	w0, [x8]
10000f634:	e1 63 00 91	add	x1, sp, #24
10000f638:	f6 08 00 94	bl	0x100011a10 ; symbol stub for: _IORegistryEntryFromPath
10000f63c:	f3 03 00 aa	mov	x19, x0
10000f640:	00 01 00 35	cbnz	w0, 0x10000f660
10000f644:	1f 20 03 d5	nop
10000f648:	c8 70 04 58	ldr	x8, #36376 ; literal pool symbol address: ___stderrp
10000f64c:	00 01 40 f9	ldr	x0, [x8]
10000f650:	f4 03 00 f9	str	x20, [sp]
10000f654:	e1 f9 03 50	adr	x1, #32574 ; literal pool for: "ERROR: cannot find the IO registry entry for %s\n"
10000f658:	1f 20 03 d5	nop
10000f65c:	a1 09 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
10000f660:	a8 83 5e f8	ldur	x8, [x29, #-24]
10000f664:	1f 20 03 d5	nop
10000f668:	89 6f 04 58	ldr	x9, #36336 ; literal pool symbol address: ___stack_chk_guard
10000f66c:	29 01 40 f9	ldr	x9, [x9]
10000f670:	3f 01 08 eb	cmp	x9, x8
10000f674:	c1 00 00 54	b.ne	0x10000f68c
10000f678:	e0 03 13 aa	mov	x0, x19
10000f67c:	fd 7b 4b a9	ldp	x29, x30, [sp, #176]
10000f680:	f4 4f 4a a9	ldp	x20, x19, [sp, #160]
10000f684:	ff 03 03 91	add	sp, sp, #192
10000f688:	ff 0f 5f d6	retab
10000f68c:	5d 09 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
10000f690:	7f 23 03 d5	pacibsp
10000f694:	e9 23 ba 6d	stp	d9, d8, [sp, #-96]!
10000f698:	fa 67 01 a9	stp	x26, x25, [sp, #16]
10000f69c:	f8 5f 02 a9	stp	x24, x23, [sp, #32]
10000f6a0:	f6 57 03 a9	stp	x22, x21, [sp, #48]
10000f6a4:	f4 4f 04 a9	stp	x20, x19, [sp, #64]
10000f6a8:	fd 7b 05 a9	stp	x29, x30, [sp, #80]
10000f6ac:	fd 43 01 91	add	x29, sp, #80
10000f6b0:	f4 03 03 aa	mov	x20, x3
10000f6b4:	e8 03 02 aa	mov	x8, x2
10000f6b8:	f5 03 00 aa	mov	x21, x0
10000f6bc:	1f 20 03 d5	nop
10000f6c0:	09 6e 04 58	ldr	x9, #36288 ; literal pool symbol address: _kCFAllocatorDefault
10000f6c4:	22 01 40 f9	ldr	x2, [x9]
10000f6c8:	e0 03 08 aa	mov	x0, x8
10000f6cc:	03 00 80 52	mov	w3, #0
10000f6d0:	cc 08 00 94	bl	0x100011a00 ; symbol stub for: _IORegistryEntryCreateCFProperty
10000f6d4:	e0 00 00 b4	cbz	x0, 0x10000f6f0
10000f6d8:	f3 03 00 aa	mov	x19, x0
10000f6dc:	95 08 00 94	bl	0x100011930 ; symbol stub for: _CFDataGetLength
10000f6e0:	1f 20 00 71	cmp	w0, #8
10000f6e4:	a2 00 00 54	b.hs	0x10000f6f8
10000f6e8:	16 00 80 52	mov	w22, #0
10000f6ec:	21 00 00 14	b	0x10000f770
10000f6f0:	16 00 80 52	mov	w22, #0
10000f6f4:	21 00 00 14	b	0x10000f778
10000f6f8:	16 7c 03 53	lsr	w22, w0, #3
10000f6fc:	00 70 7d 92	and	x0, x0, #0xfffffff8
10000f700:	c4 09 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000f704:	18 00 80 d2	mov	x24, #0
10000f708:	17 00 80 d2	mov	x23, #0
10000f70c:	a0 02 00 f9	str	x0, [x21]
10000f710:	f9 03 16 cb	neg	x25, x22
10000f714:	1f 20 03 d5	nop
10000f718:	08 f4 01 5c	ldr	d8, 0x100013598
10000f71c:	1f 20 03 d5	nop
10000f720:	89 ec 01 5c	ldr	d9, 0x1000134b0
10000f724:	e0 03 13 aa	mov	x0, x19
10000f728:	7a 08 00 94	bl	0x100011910 ; symbol stub for: _CFDataGetBytePtr
10000f72c:	08 68 78 b8	ldr	w8, [x0, x24]
10000f730:	b4 00 00 34	cbz	w20, 0x10000f744
10000f734:	c8 01 00 34	cbz	w8, 0x10000f76c
10000f738:	00 01 63 1e	ucvtf	d0, w8
10000f73c:	01 41 60 1e	fmov	d1, d8
10000f740:	03 00 00 14	b	0x10000f74c
10000f744:	01 01 63 1e	ucvtf	d1, w8
10000f748:	20 41 60 1e	fmov	d0, d9
10000f74c:	20 18 60 1e	fdiv	d0, d1, d0
10000f750:	a8 02 40 f9	ldr	x8, [x21]
10000f754:	00 69 38 fc	str	d0, [x8, x24]
10000f758:	f7 06 00 d1	sub	x23, x23, #1
10000f75c:	18 23 00 91	add	x24, x24, #8
10000f760:	3f 03 17 eb	cmp	x25, x23
10000f764:	01 fe ff 54	b.ne	0x10000f724
10000f768:	02 00 00 14	b	0x10000f770
10000f76c:	f6 03 17 4b	neg	w22, w23
10000f770:	e0 03 13 aa	mov	x0, x19
10000f774:	7f 08 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
10000f778:	e0 03 16 aa	mov	x0, x22
10000f77c:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
10000f780:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
10000f784:	f6 57 43 a9	ldp	x22, x21, [sp, #48]
10000f788:	f8 5f 42 a9	ldp	x24, x23, [sp, #32]
10000f78c:	fa 67 41 a9	ldp	x26, x25, [sp, #16]
10000f790:	e9 23 c6 6c	ldp	d9, d8, [sp], #96
10000f794:	ff 0f 5f d6	retab
10000f798:	02 02 00 34	cbz	w2, 0x10000f7d8
10000f79c:	08 00 80 d2	mov	x8, #0
10000f7a0:	e9 03 02 2a	mov	w9, w2
10000f7a4:	00 e4 00 2f	movi	d0, #0000000000000000
10000f7a8:	0a 84 40 f8	ldr	x10, [x0], #8
10000f7ac:	41 01 63 9e	ucvtf	d1, x10
10000f7b0:	22 84 40 fc	ldr	d2, [x1], #8
10000f7b4:	41 08 61 1e	fmul	d1, d2, d1
10000f7b8:	00 28 61 1e	fadd	d0, d0, d1
10000f7bc:	48 01 08 8b	add	x8, x10, x8
10000f7c0:	29 05 00 f1	subs	x9, x9, #1
10000f7c4:	21 ff ff 54	b.ne	0x10000f7a8
10000f7c8:	88 00 00 b4	cbz	x8, 0x10000f7d8
10000f7cc:	01 01 63 9e	ucvtf	d1, x8
10000f7d0:	00 18 61 1e	fdiv	d0, d0, d1
10000f7d4:	c0 03 5f d6	ret
10000f7d8:	00 e4 00 2f	movi	d0, #0000000000000000
10000f7dc:	c0 03 5f d6	ret
10000f7e0:	7f 23 03 d5	pacibsp
10000f7e4:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000f7e8:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000f7ec:	fd 43 00 91	add	x29, sp, #16
10000f7f0:	f3 03 00 aa	mov	x19, x0
10000f7f4:	1f 7c 00 a9	stp	xzr, xzr, [x0]
10000f7f8:	20 f0 7d d3	lsl	x0, x1, #3
10000f7fc:	85 09 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000f800:	60 02 00 f9	str	x0, [x19]
10000f804:	08 01 80 52	mov	w8, #8
10000f808:	68 0a 00 b9	str	w8, [x19, #8]
10000f80c:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000f810:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000f814:	ff 0f 5f d6	retab
10000f818:	7f 23 03 d5	pacibsp
10000f81c:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000f820:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000f824:	fd 43 00 91	add	x29, sp, #16
10000f828:	f3 03 00 aa	mov	x19, x0
10000f82c:	00 00 40 f9	ldr	x0, [x0]
10000f830:	38 09 00 94	bl	0x100011d10 ; symbol stub for: _free
10000f834:	7f 7e 00 a9	stp	xzr, xzr, [x19]
10000f838:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000f83c:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000f840:	ff 0f 5f d6	retab
10000f844:	7f 23 03 d5	pacibsp
10000f848:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000f84c:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000f850:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000f854:	fd 83 00 91	add	x29, sp, #32
10000f858:	09 20 41 29	ldp	w9, w8, [x0, #8]
10000f85c:	1f 01 09 6b	cmp	w8, w9
10000f860:	68 03 00 54	b.hi	0x10000f8cc
10000f864:	f4 03 02 aa	mov	x20, x2
10000f868:	f5 03 01 aa	mov	x21, x1
10000f86c:	f3 03 00 aa	mov	x19, x0
10000f870:	00 00 40 f9	ldr	x0, [x0]
10000f874:	41 01 00 54	b.ne	0x10000f89c
10000f878:	08 79 1f 53	lsl	w8, w8, #1
10000f87c:	01 7d 14 9b	mul	x1, x8, x20
10000f880:	cc 09 00 94	bl	0x100011fb0 ; symbol stub for: _realloc
10000f884:	60 02 00 f9	str	x0, [x19]
10000f888:	68 0a 40 b9	ldr	w8, [x19, #8]
10000f88c:	08 79 1f 53	lsl	w8, w8, #1
10000f890:	68 0a 00 b9	str	w8, [x19, #8]
10000f894:	e0 01 00 b4	cbz	x0, 0x10000f8d0
10000f898:	68 0e 40 b9	ldr	w8, [x19, #12]
10000f89c:	e8 03 08 2a	mov	w8, w8
10000f8a0:	00 01 14 9b	madd	x0, x8, x20, x0
10000f8a4:	e1 03 15 aa	mov	x1, x21
10000f8a8:	e2 03 14 aa	mov	x2, x20
10000f8ac:	61 09 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000f8b0:	68 0e 40 b9	ldr	w8, [x19, #12]
10000f8b4:	08 05 00 11	add	w8, w8, #1
10000f8b8:	68 0e 00 b9	str	w8, [x19, #12]
10000f8bc:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000f8c0:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000f8c4:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000f8c8:	ff 0f 5f d6	retab
10000f8cc:	86 07 00 94	bl	0x1000116e4
10000f8d0:	90 07 00 94	bl	0x100011710
10000f8d4:	1f 0c 00 b9	str	wzr, [x0, #12]
10000f8d8:	c0 03 5f d6	ret
10000f8dc:	7f 23 03 d5	pacibsp
10000f8e0:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10000f8e4:	fd 03 00 91	mov	x29, sp
10000f8e8:	08 0c 40 b9	ldr	w8, [x0, #12]
10000f8ec:	1f 01 01 6b	cmp	w8, w1
10000f8f0:	c9 00 00 54	b.ls	0x10000f908
10000f8f4:	08 00 40 f9	ldr	x8, [x0]
10000f8f8:	e9 03 01 2a	mov	w9, w1
10000f8fc:	20 21 02 9b	madd	x0, x9, x2, x8
10000f900:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
10000f904:	ff 0f 5f d6	retab
10000f908:	8d 07 00 94	bl	0x10001173c
10000f90c:	7f 23 03 d5	pacibsp
10000f910:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000f914:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000f918:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000f91c:	fd 83 00 91	add	x29, sp, #32
10000f920:	f5 03 02 aa	mov	x21, x2
10000f924:	f4 03 01 aa	mov	x20, x1
10000f928:	f3 03 00 aa	mov	x19, x0
10000f92c:	28 0c 40 b9	ldr	w8, [x1, #12]
10000f930:	09 08 40 b9	ldr	w9, [x0, #8]
10000f934:	00 00 40 f9	ldr	x0, [x0]
10000f938:	1f 01 09 6b	cmp	w8, w9
10000f93c:	29 01 00 54	b.ls	0x10000f960
10000f940:	88 0a 40 b9	ldr	w8, [x20, #8]
10000f944:	01 7d 15 9b	mul	x1, x8, x21
10000f948:	9a 09 00 94	bl	0x100011fb0 ; symbol stub for: _realloc
10000f94c:	60 02 00 f9	str	x0, [x19]
10000f950:	88 0a 40 b9	ldr	w8, [x20, #8]
10000f954:	68 0a 00 b9	str	w8, [x19, #8]
10000f958:	80 01 00 b4	cbz	x0, 0x10000f988
10000f95c:	88 0e 40 b9	ldr	w8, [x20, #12]
10000f960:	81 02 40 f9	ldr	x1, [x20]
10000f964:	e8 03 08 2a	mov	w8, w8
10000f968:	02 7d 15 9b	mul	x2, x8, x21
10000f96c:	31 09 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000f970:	88 0e 40 b9	ldr	w8, [x20, #12]
10000f974:	68 0e 00 b9	str	w8, [x19, #12]
10000f978:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000f97c:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000f980:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000f984:	ff 0f 5f d6	retab
10000f988:	77 07 00 94	bl	0x100011764
10000f98c:	e3 03 01 aa	mov	x3, x1
10000f990:	08 00 40 f9	ldr	x8, [x0]
10000f994:	01 0c 40 b9	ldr	w1, [x0, #12]
10000f998:	e0 03 08 aa	mov	x0, x8
10000f99c:	7d 09 00 14	b	0x100011f90 ; symbol stub for: _qsort
10000f9a0:	e3 03 01 aa	mov	x3, x1
10000f9a4:	08 00 40 f9	ldr	x8, [x0]
10000f9a8:	01 0c 40 b9	ldr	w1, [x0, #12]
10000f9ac:	e0 03 08 aa	mov	x0, x8
10000f9b0:	24 09 00 14	b	0x100011e40 ; symbol stub for: _mergesort
10000f9b4:	e3 03 01 aa	mov	x3, x1
10000f9b8:	08 00 40 f9	ldr	x8, [x0]
10000f9bc:	01 0c 40 b9	ldr	w1, [x0, #12]
10000f9c0:	e0 03 08 aa	mov	x0, x8
10000f9c4:	77 09 00 14	b	0x100011fa0 ; symbol stub for: _qsort_b
10000f9c8:	e3 03 01 aa	mov	x3, x1
10000f9cc:	08 00 40 f9	ldr	x8, [x0]
10000f9d0:	01 0c 40 b9	ldr	w1, [x0, #12]
10000f9d4:	e0 03 08 aa	mov	x0, x8
10000f9d8:	1e 09 00 14	b	0x100011e50 ; symbol stub for: _mergesort_b
10000f9dc:	7f 23 03 d5	pacibsp
10000f9e0:	ff 03 01 d1	sub	sp, sp, #64
10000f9e4:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000f9e8:	fd c3 00 91	add	x29, sp, #48
10000f9ec:	e8 23 00 91	add	x8, sp, #8
10000f9f0:	1f 20 03 d5	nop
10000f9f4:	f0 52 04 58	ldr	x16, #35420 ; literal pool symbol address: __NSConcreteStackBlock
10000f9f8:	f1 03 08 aa	mov	x17, x8
10000f9fc:	31 5c ed f2	movk	x17, #27361, lsl #48
10000fa00:	30 0a c1 da	pacda	x16, x17
10000fa04:	f0 07 00 f9	str	x16, [sp, #8]
10000fa08:	1f 20 03 d5	nop
10000fa0c:	60 3c 01 5c	ldr	d0, 0x100012198
10000fa10:	e0 0b 00 fd	str	d0, [sp, #16]
10000fa14:	08 41 00 91	add	x8, x8, #16
10000fa18:	90 06 00 10	adr	x16, #208
10000fa1c:	1f 20 03 d5	nop
10000fa20:	10 01 c1 da	pacia	x16, x8
10000fa24:	68 c7 04 10	adr	x8, #39148
10000fa28:	1f 20 03 d5	nop
10000fa2c:	f0 a3 01 a9	stp	x16, x8, [sp, #24]
10000fa30:	e2 17 00 f9	str	x2, [sp, #40]
10000fa34:	e2 23 00 91	add	x2, sp, #8
10000fa38:	04 00 00 94	bl	0x10000fa48
10000fa3c:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000fa40:	ff 03 01 91	add	sp, sp, #64
10000fa44:	ff 0f 5f d6	retab
10000fa48:	7f 23 03 d5	pacibsp
10000fa4c:	fa 67 bb a9	stp	x26, x25, [sp, #-80]!
10000fa50:	f8 5f 01 a9	stp	x24, x23, [sp, #16]
10000fa54:	f6 57 02 a9	stp	x22, x21, [sp, #32]
10000fa58:	f4 4f 03 a9	stp	x20, x19, [sp, #48]
10000fa5c:	fd 7b 04 a9	stp	x29, x30, [sp, #64]
10000fa60:	fd 03 01 91	add	x29, sp, #64
10000fa64:	f6 03 03 aa	mov	x22, x3
10000fa68:	f3 03 02 aa	mov	x19, x2
10000fa6c:	f4 03 01 aa	mov	x20, x1
10000fa70:	f5 03 00 aa	mov	x21, x0
10000fa74:	01 00 40 f9	ldr	x1, [x0]
10000fa78:	02 0c 40 b9	ldr	w2, [x0, #12]
10000fa7c:	e0 03 14 aa	mov	x0, x20
10000fa80:	e4 03 13 aa	mov	x4, x19
10000fa84:	6f 08 00 94	bl	0x100011c40 ; symbol stub for: _bsearch_b
10000fa88:	00 02 00 b4	cbz	x0, 0x10000fac8
10000fa8c:	f7 03 00 aa	mov	x23, x0
10000fa90:	78 42 00 91	add	x24, x19, #16
10000fa94:	f9 03 16 cb	neg	x25, x22
10000fa98:	f6 03 17 aa	mov	x22, x23
10000fa9c:	a8 02 40 f9	ldr	x8, [x21]
10000faa0:	ff 02 08 eb	cmp	x23, x8
10000faa4:	49 01 00 54	b.ls	0x10000facc
10000faa8:	d7 02 19 8b	add	x23, x22, x25
10000faac:	68 0a 40 f9	ldr	x8, [x19, #16]
10000fab0:	e0 03 13 aa	mov	x0, x19
10000fab4:	e1 03 14 aa	mov	x1, x20
10000fab8:	e2 03 17 aa	mov	x2, x23
10000fabc:	18 09 3f d7	blraa	x8, x24
10000fac0:	c0 fe ff 34	cbz	w0, 0x10000fa98
10000fac4:	02 00 00 14	b	0x10000facc
10000fac8:	16 00 80 d2	mov	x22, #0
10000facc:	e0 03 16 aa	mov	x0, x22
10000fad0:	fd 7b 44 a9	ldp	x29, x30, [sp, #64]
10000fad4:	f4 4f 43 a9	ldp	x20, x19, [sp, #48]
10000fad8:	f6 57 42 a9	ldp	x22, x21, [sp, #32]
10000fadc:	f8 5f 41 a9	ldp	x24, x23, [sp, #16]
10000fae0:	fa 67 c5 a8	ldp	x26, x25, [sp], #80
10000fae4:	ff 0f 5f d6	retab
10000fae8:	03 10 40 f9	ldr	x3, [x0, #32]
10000faec:	e0 03 01 aa	mov	x0, x1
10000faf0:	e1 03 02 aa	mov	x1, x2
10000faf4:	7f 08 1f d6	braaz	x3
10000faf8:	7f 23 03 d5	pacibsp
10000fafc:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
10000fb00:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10000fb04:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
10000fb08:	fd 83 00 91	add	x29, sp, #32
10000fb0c:	f5 03 02 aa	mov	x21, x2
10000fb10:	f4 03 01 aa	mov	x20, x1
10000fb14:	f3 03 00 aa	mov	x19, x0
10000fb18:	28 0c 40 b9	ldr	w8, [x1, #12]
10000fb1c:	0a 24 41 29	ldp	w10, w9, [x0, #8]
10000fb20:	00 00 40 f9	ldr	x0, [x0]
10000fb24:	0b 01 09 0b	add	w11, w8, w9
10000fb28:	7f 01 0a 6b	cmp	w11, w10
10000fb2c:	a9 01 00 54	b.ls	0x10000fb60
10000fb30:	88 0a 40 b9	ldr	w8, [x20, #8]
10000fb34:	08 01 0a 0b	add	w8, w8, w10
10000fb38:	01 7d 15 9b	mul	x1, x8, x21
10000fb3c:	1d 09 00 94	bl	0x100011fb0 ; symbol stub for: _realloc
10000fb40:	60 02 00 f9	str	x0, [x19]
10000fb44:	88 0a 40 b9	ldr	w8, [x20, #8]
10000fb48:	69 0a 40 b9	ldr	w9, [x19, #8]
10000fb4c:	28 01 08 0b	add	w8, w9, w8
10000fb50:	68 0a 00 b9	str	w8, [x19, #8]
10000fb54:	20 02 00 b4	cbz	x0, 0x10000fb98
10000fb58:	69 0e 40 b9	ldr	w9, [x19, #12]
10000fb5c:	88 0e 40 b9	ldr	w8, [x20, #12]
10000fb60:	e9 03 09 2a	mov	w9, w9
10000fb64:	20 01 15 9b	madd	x0, x9, x21, x0
10000fb68:	81 02 40 f9	ldr	x1, [x20]
10000fb6c:	e8 03 08 2a	mov	w8, w8
10000fb70:	02 7d 15 9b	mul	x2, x8, x21
10000fb74:	af 08 00 94	bl	0x100011e30 ; symbol stub for: _memcpy
10000fb78:	88 0e 40 b9	ldr	w8, [x20, #12]
10000fb7c:	69 0e 40 b9	ldr	w9, [x19, #12]
10000fb80:	28 01 08 0b	add	w8, w9, w8
10000fb84:	68 0e 00 b9	str	w8, [x19, #12]
10000fb88:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
10000fb8c:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
10000fb90:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
10000fb94:	ff 0f 5f d6	retab
10000fb98:	fe 06 00 94	bl	0x100011790
10000fb9c:	7f 23 03 d5	pacibsp
10000fba0:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000fba4:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000fba8:	fd 43 00 91	add	x29, sp, #16
10000fbac:	f3 03 00 aa	mov	x19, x0
10000fbb0:	1f 7c 00 a9	stp	xzr, xzr, [x0]
10000fbb4:	00 20 82 52	mov	w0, #4352
10000fbb8:	96 08 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000fbbc:	60 02 00 f9	str	x0, [x19]
10000fbc0:	08 01 80 52	mov	w8, #8
10000fbc4:	68 0a 00 b9	str	w8, [x19, #8]
10000fbc8:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000fbcc:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000fbd0:	ff 0f 5f d6	retab
10000fbd4:	7f 23 03 d5	pacibsp
10000fbd8:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000fbdc:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000fbe0:	fd 43 00 91	add	x29, sp, #16
10000fbe4:	f3 03 00 aa	mov	x19, x0
10000fbe8:	00 00 40 f9	ldr	x0, [x0]
10000fbec:	49 08 00 94	bl	0x100011d10 ; symbol stub for: _free
10000fbf0:	7f 7e 00 a9	stp	xzr, xzr, [x19]
10000fbf4:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000fbf8:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000fbfc:	ff 0f 5f d6	retab
10000fc00:	02 44 80 52	mov	w2, #544
10000fc04:	10 ff ff 17	b	0x10000f844
10000fc08:	1f 0c 00 b9	str	wzr, [x0, #12]
10000fc0c:	c0 03 5f d6	ret
10000fc10:	7f 23 03 d5	pacibsp
10000fc14:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10000fc18:	fd 03 00 91	mov	x29, sp
10000fc1c:	08 0c 40 b9	ldr	w8, [x0, #12]
10000fc20:	1f 01 01 6b	cmp	w8, w1
10000fc24:	c9 00 00 54	b.ls	0x10000fc3c
10000fc28:	08 00 40 f9	ldr	x8, [x0]
10000fc2c:	09 44 80 52	mov	w9, #544
10000fc30:	20 20 a9 9b	umaddl	x0, w1, w9, x8
10000fc34:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
10000fc38:	ff 0f 5f d6	retab
10000fc3c:	e0 06 00 94	bl	0x1000117bc
10000fc40:	02 44 80 52	mov	w2, #544
10000fc44:	32 ff ff 17	b	0x10000f90c
10000fc48:	e3 03 01 aa	mov	x3, x1
10000fc4c:	08 00 40 f9	ldr	x8, [x0]
10000fc50:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fc54:	e0 03 08 aa	mov	x0, x8
10000fc58:	02 44 80 52	mov	w2, #544
10000fc5c:	cd 08 00 14	b	0x100011f90 ; symbol stub for: _qsort
10000fc60:	e3 03 01 aa	mov	x3, x1
10000fc64:	08 00 40 f9	ldr	x8, [x0]
10000fc68:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fc6c:	e0 03 08 aa	mov	x0, x8
10000fc70:	02 44 80 52	mov	w2, #544
10000fc74:	73 08 00 14	b	0x100011e40 ; symbol stub for: _mergesort
10000fc78:	e3 03 01 aa	mov	x3, x1
10000fc7c:	08 00 40 f9	ldr	x8, [x0]
10000fc80:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fc84:	e0 03 08 aa	mov	x0, x8
10000fc88:	02 44 80 52	mov	w2, #544
10000fc8c:	c5 08 00 14	b	0x100011fa0 ; symbol stub for: _qsort_b
10000fc90:	e3 03 01 aa	mov	x3, x1
10000fc94:	08 00 40 f9	ldr	x8, [x0]
10000fc98:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fc9c:	e0 03 08 aa	mov	x0, x8
10000fca0:	02 44 80 52	mov	w2, #544
10000fca4:	6b 08 00 14	b	0x100011e50 ; symbol stub for: _mergesort_b
10000fca8:	7f 23 03 d5	pacibsp
10000fcac:	ff 03 01 d1	sub	sp, sp, #64
10000fcb0:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000fcb4:	fd c3 00 91	add	x29, sp, #48
10000fcb8:	e8 23 00 91	add	x8, sp, #8
10000fcbc:	1f 20 03 d5	nop
10000fcc0:	90 3c 04 58	ldr	x16, #34704 ; literal pool symbol address: __NSConcreteStackBlock
10000fcc4:	f1 03 08 aa	mov	x17, x8
10000fcc8:	31 5c ed f2	movk	x17, #27361, lsl #48
10000fccc:	30 0a c1 da	pacda	x16, x17
10000fcd0:	f0 07 00 f9	str	x16, [sp, #8]
10000fcd4:	1f 20 03 d5	nop
10000fcd8:	00 26 01 5c	ldr	d0, 0x100012198
10000fcdc:	e0 0b 00 fd	str	d0, [sp, #16]
10000fce0:	08 41 00 91	add	x8, x8, #16
10000fce4:	30 f0 ff 10	adr	x16, #-508
10000fce8:	1f 20 03 d5	nop
10000fcec:	10 01 c1 da	pacia	x16, x8
10000fcf0:	08 b1 04 10	adr	x8, #38432
10000fcf4:	1f 20 03 d5	nop
10000fcf8:	f0 a3 01 a9	stp	x16, x8, [sp, #24]
10000fcfc:	e2 17 00 f9	str	x2, [sp, #40]
10000fd00:	e2 23 00 91	add	x2, sp, #8
10000fd04:	03 44 80 52	mov	w3, #544
10000fd08:	50 ff ff 97	bl	0x10000fa48
10000fd0c:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000fd10:	ff 03 01 91	add	sp, sp, #64
10000fd14:	ff 0f 5f d6	retab
10000fd18:	03 44 80 52	mov	w3, #544
10000fd1c:	4b ff ff 17	b	0x10000fa48
10000fd20:	02 44 80 52	mov	w2, #544
10000fd24:	75 ff ff 17	b	0x10000faf8
10000fd28:	7f 23 03 d5	pacibsp
10000fd2c:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000fd30:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000fd34:	fd 43 00 91	add	x29, sp, #16
10000fd38:	f3 03 00 aa	mov	x19, x0
10000fd3c:	1f 7c 00 a9	stp	xzr, xzr, [x0]
10000fd40:	00 30 82 52	mov	w0, #4480
10000fd44:	33 08 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000fd48:	60 02 00 f9	str	x0, [x19]
10000fd4c:	08 01 80 52	mov	w8, #8
10000fd50:	68 0a 00 b9	str	w8, [x19, #8]
10000fd54:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000fd58:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000fd5c:	ff 0f 5f d6	retab
10000fd60:	7f 23 03 d5	pacibsp
10000fd64:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000fd68:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000fd6c:	fd 43 00 91	add	x29, sp, #16
10000fd70:	f3 03 00 aa	mov	x19, x0
10000fd74:	00 00 40 f9	ldr	x0, [x0]
10000fd78:	e6 07 00 94	bl	0x100011d10 ; symbol stub for: _free
10000fd7c:	7f 7e 00 a9	stp	xzr, xzr, [x19]
10000fd80:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000fd84:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000fd88:	ff 0f 5f d6	retab
10000fd8c:	02 46 80 52	mov	w2, #560
10000fd90:	ad fe ff 17	b	0x10000f844
10000fd94:	1f 0c 00 b9	str	wzr, [x0, #12]
10000fd98:	c0 03 5f d6	ret
10000fd9c:	7f 23 03 d5	pacibsp
10000fda0:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10000fda4:	fd 03 00 91	mov	x29, sp
10000fda8:	08 0c 40 b9	ldr	w8, [x0, #12]
10000fdac:	1f 01 01 6b	cmp	w8, w1
10000fdb0:	c9 00 00 54	b.ls	0x10000fdc8
10000fdb4:	08 00 40 f9	ldr	x8, [x0]
10000fdb8:	09 46 80 52	mov	w9, #560
10000fdbc:	20 20 a9 9b	umaddl	x0, w1, w9, x8
10000fdc0:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
10000fdc4:	ff 0f 5f d6	retab
10000fdc8:	87 06 00 94	bl	0x1000117e4
10000fdcc:	02 46 80 52	mov	w2, #560
10000fdd0:	cf fe ff 17	b	0x10000f90c
10000fdd4:	e3 03 01 aa	mov	x3, x1
10000fdd8:	08 00 40 f9	ldr	x8, [x0]
10000fddc:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fde0:	e0 03 08 aa	mov	x0, x8
10000fde4:	02 46 80 52	mov	w2, #560
10000fde8:	6a 08 00 14	b	0x100011f90 ; symbol stub for: _qsort
10000fdec:	e3 03 01 aa	mov	x3, x1
10000fdf0:	08 00 40 f9	ldr	x8, [x0]
10000fdf4:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fdf8:	e0 03 08 aa	mov	x0, x8
10000fdfc:	02 46 80 52	mov	w2, #560
10000fe00:	10 08 00 14	b	0x100011e40 ; symbol stub for: _mergesort
10000fe04:	e3 03 01 aa	mov	x3, x1
10000fe08:	08 00 40 f9	ldr	x8, [x0]
10000fe0c:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fe10:	e0 03 08 aa	mov	x0, x8
10000fe14:	02 46 80 52	mov	w2, #560
10000fe18:	62 08 00 14	b	0x100011fa0 ; symbol stub for: _qsort_b
10000fe1c:	e3 03 01 aa	mov	x3, x1
10000fe20:	08 00 40 f9	ldr	x8, [x0]
10000fe24:	01 0c 40 b9	ldr	w1, [x0, #12]
10000fe28:	e0 03 08 aa	mov	x0, x8
10000fe2c:	02 46 80 52	mov	w2, #560
10000fe30:	08 08 00 14	b	0x100011e50 ; symbol stub for: _mergesort_b
10000fe34:	7f 23 03 d5	pacibsp
10000fe38:	ff 03 01 d1	sub	sp, sp, #64
10000fe3c:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000fe40:	fd c3 00 91	add	x29, sp, #48
10000fe44:	e8 23 00 91	add	x8, sp, #8
10000fe48:	1f 20 03 d5	nop
10000fe4c:	30 30 04 58	ldr	x16, #34308 ; literal pool symbol address: __NSConcreteStackBlock
10000fe50:	f1 03 08 aa	mov	x17, x8
10000fe54:	31 5c ed f2	movk	x17, #27361, lsl #48
10000fe58:	30 0a c1 da	pacda	x16, x17
10000fe5c:	f0 07 00 f9	str	x16, [sp, #8]
10000fe60:	1f 20 03 d5	nop
10000fe64:	a0 19 01 5c	ldr	d0, 0x100012198
10000fe68:	e0 0b 00 fd	str	d0, [sp, #16]
10000fe6c:	08 41 00 91	add	x8, x8, #16
10000fe70:	d0 e3 ff 10	adr	x16, #-904
10000fe74:	1f 20 03 d5	nop
10000fe78:	10 01 c1 da	pacia	x16, x8
10000fe7c:	a8 a4 04 10	adr	x8, #38036
10000fe80:	1f 20 03 d5	nop
10000fe84:	f0 a3 01 a9	stp	x16, x8, [sp, #24]
10000fe88:	e2 17 00 f9	str	x2, [sp, #40]
10000fe8c:	e2 23 00 91	add	x2, sp, #8
10000fe90:	03 46 80 52	mov	w3, #560
10000fe94:	ed fe ff 97	bl	0x10000fa48
10000fe98:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10000fe9c:	ff 03 01 91	add	sp, sp, #64
10000fea0:	ff 0f 5f d6	retab
10000fea4:	03 46 80 52	mov	w3, #560
10000fea8:	e8 fe ff 17	b	0x10000fa48
10000feac:	02 46 80 52	mov	w2, #560
10000feb0:	12 ff ff 17	b	0x10000faf8
10000feb4:	7f 23 03 d5	pacibsp
10000feb8:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000febc:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000fec0:	fd 43 00 91	add	x29, sp, #16
10000fec4:	f3 03 00 aa	mov	x19, x0
10000fec8:	1f 7c 00 a9	stp	xzr, xzr, [x0]
10000fecc:	00 08 80 52	mov	w0, #64
10000fed0:	d0 07 00 94	bl	0x100011e10 ; symbol stub for: _malloc
10000fed4:	60 02 00 f9	str	x0, [x19]
10000fed8:	08 01 80 52	mov	w8, #8
10000fedc:	68 0a 00 b9	str	w8, [x19, #8]
10000fee0:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000fee4:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000fee8:	ff 0f 5f d6	retab
10000feec:	7f 23 03 d5	pacibsp
10000fef0:	f4 4f be a9	stp	x20, x19, [sp, #-32]!
10000fef4:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10000fef8:	fd 43 00 91	add	x29, sp, #16
10000fefc:	f3 03 00 aa	mov	x19, x0
10000ff00:	00 00 40 f9	ldr	x0, [x0]
10000ff04:	83 07 00 94	bl	0x100011d10 ; symbol stub for: _free
10000ff08:	7f 7e 00 a9	stp	xzr, xzr, [x19]
10000ff0c:	fd 7b 41 a9	ldp	x29, x30, [sp, #16]
10000ff10:	f4 4f c2 a8	ldp	x20, x19, [sp], #32
10000ff14:	ff 0f 5f d6	retab
10000ff18:	02 01 80 52	mov	w2, #8
10000ff1c:	4a fe ff 17	b	0x10000f844
10000ff20:	1f 0c 00 b9	str	wzr, [x0, #12]
10000ff24:	c0 03 5f d6	ret
10000ff28:	7f 23 03 d5	pacibsp
10000ff2c:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10000ff30:	fd 03 00 91	mov	x29, sp
10000ff34:	08 0c 40 b9	ldr	w8, [x0, #12]
10000ff38:	1f 01 01 6b	cmp	w8, w1
10000ff3c:	a9 00 00 54	b.ls	0x10000ff50
10000ff40:	08 00 40 f9	ldr	x8, [x0]
10000ff44:	00 4d 21 8b	add	x0, x8, w1, uxtw #3
10000ff48:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
10000ff4c:	ff 0f 5f d6	retab
10000ff50:	2f 06 00 94	bl	0x10001180c
10000ff54:	02 01 80 52	mov	w2, #8
10000ff58:	6d fe ff 17	b	0x10000f90c
10000ff5c:	e3 03 01 aa	mov	x3, x1
10000ff60:	08 00 40 f9	ldr	x8, [x0]
10000ff64:	01 0c 40 b9	ldr	w1, [x0, #12]
10000ff68:	e0 03 08 aa	mov	x0, x8
10000ff6c:	02 01 80 52	mov	w2, #8
10000ff70:	08 08 00 14	b	0x100011f90 ; symbol stub for: _qsort
10000ff74:	e3 03 01 aa	mov	x3, x1
10000ff78:	08 00 40 f9	ldr	x8, [x0]
10000ff7c:	01 0c 40 b9	ldr	w1, [x0, #12]
10000ff80:	e0 03 08 aa	mov	x0, x8
10000ff84:	02 01 80 52	mov	w2, #8
10000ff88:	ae 07 00 14	b	0x100011e40 ; symbol stub for: _mergesort
10000ff8c:	e3 03 01 aa	mov	x3, x1
10000ff90:	08 00 40 f9	ldr	x8, [x0]
10000ff94:	01 0c 40 b9	ldr	w1, [x0, #12]
10000ff98:	e0 03 08 aa	mov	x0, x8
10000ff9c:	02 01 80 52	mov	w2, #8
10000ffa0:	00 08 00 14	b	0x100011fa0 ; symbol stub for: _qsort_b
10000ffa4:	e3 03 01 aa	mov	x3, x1
10000ffa8:	08 00 40 f9	ldr	x8, [x0]
10000ffac:	01 0c 40 b9	ldr	w1, [x0, #12]
10000ffb0:	e0 03 08 aa	mov	x0, x8
10000ffb4:	02 01 80 52	mov	w2, #8
10000ffb8:	a6 07 00 14	b	0x100011e50 ; symbol stub for: _mergesort_b
10000ffbc:	7f 23 03 d5	pacibsp
10000ffc0:	ff 03 01 d1	sub	sp, sp, #64
10000ffc4:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10000ffc8:	fd c3 00 91	add	x29, sp, #48
10000ffcc:	e8 23 00 91	add	x8, sp, #8
10000ffd0:	1f 20 03 d5	nop
10000ffd4:	f0 23 04 58	ldr	x16, #33916 ; literal pool symbol address: __NSConcreteStackBlock
10000ffd8:	f1 03 08 aa	mov	x17, x8
10000ffdc:	31 5c ed f2	movk	x17, #27361, lsl #48
10000ffe0:	30 0a c1 da	pacda	x16, x17
10000ffe4:	f0 07 00 f9	str	x16, [sp, #8]
10000ffe8:	1f 20 03 d5	nop
10000ffec:	60 0d 01 5c	ldr	d0, 0x100012198
10000fff0:	e0 0b 00 fd	str	d0, [sp, #16]
10000fff4:	08 41 00 91	add	x8, x8, #16
10000fff8:	90 d7 ff 10	adr	x16, #-1296
10000fffc:	1f 20 03 d5	nop
100010000:	10 01 c1 da	pacia	x16, x8
100010004:	68 98 04 10	adr	x8, #37644
100010008:	1f 20 03 d5	nop
10001000c:	f0 a3 01 a9	stp	x16, x8, [sp, #24]
100010010:	e2 17 00 f9	str	x2, [sp, #40]
100010014:	e2 23 00 91	add	x2, sp, #8
100010018:	03 01 80 52	mov	w3, #8
10001001c:	8b fe ff 97	bl	0x10000fa48
100010020:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
100010024:	ff 03 01 91	add	sp, sp, #64
100010028:	ff 0f 5f d6	retab
10001002c:	03 01 80 52	mov	w3, #8
100010030:	86 fe ff 17	b	0x10000fa48
100010034:	02 01 80 52	mov	w2, #8
100010038:	b0 fe ff 17	b	0x10000faf8
10001003c:	82 06 80 52	mov	w2, #52
100010040:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100010044:	50 00 f0 b6	tbz	x16, #62, 0x10001004c
100010048:	20 8e 38 d4	brk	#0xc471
10001004c:	e5 06 00 14	b	0x100011be0 ; symbol stub for: ___assert_rtn
100010050:	48 1b 07 10	adr	x8, #58216
100010054:	1f 20 03 d5	nop
100010058:	00 e4 00 6f	movi.2d	v0, #0000000000000000
10001005c:	00 01 00 ad	stp	q0, q0, [x8]
100010060:	c8 1b 07 10	adr	x8, #58232
100010064:	1f 20 03 d5	nop
100010068:	00 01 00 ad	stp	q0, q0, [x8]
10001006c:	c0 03 5f d6	ret
100010070:	7f 23 03 d5	pacibsp
100010074:	ff 83 01 d1	sub	sp, sp, #96
100010078:	f4 4f 04 a9	stp	x20, x19, [sp, #64]
10001007c:	fd 7b 05 a9	stp	x29, x30, [sp, #80]
100010080:	fd 43 01 91	add	x29, sp, #80
100010084:	33 00 06 10	adr	x19, #49156
100010088:	1f 20 03 d5	nop
10001008c:	68 02 40 39	ldrb	w8, [x19]
100010090:	68 01 00 34	cbz	w8, 0x1000100bc
100010094:	47 07 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100010098:	00 00 63 9e	ucvtf	d0, x0
10001009c:	61 06 40 fd	ldr	d1, [x19, #8]
1000100a0:	20 08 60 1e	fmul	d0, d1, d0
1000100a4:	1f 20 03 d5	nop
1000100a8:	41 07 01 5c	ldr	d1, 0x100012190
1000100ac:	00 18 61 1e	fdiv	d0, d0, d1
1000100b0:	4a 18 07 10	adr	x10, #58120
1000100b4:	1f 20 03 d5	nop
1000100b8:	06 00 00 14	b	0x1000100d0
1000100bc:	68 0a 40 39	ldrb	w8, [x19, #2]
1000100c0:	e8 04 00 34	cbz	w8, 0x10001015c
1000100c4:	60 0e 40 fd	ldr	d0, [x19, #24]
1000100c8:	8a 19 07 10	adr	x10, #58160
1000100cc:	1f 20 03 d5	nop
1000100d0:	1f 20 03 d5	nop
1000100d4:	28 18 07 58	ldr	x8, #58116
1000100d8:	49 01 40 f9	ldr	x9, [x10]
1000100dc:	08 01 09 eb	subs	x8, x8, x9
1000100e0:	03 02 00 54	b.lo	0x100010120
1000100e4:	1f 20 03 d5	nop
1000100e8:	c9 17 07 58	ldr	x9, #58104
1000100ec:	4b 05 40 f9	ldr	x11, [x10, #8]
1000100f0:	29 01 0b eb	subs	x9, x9, x11
1000100f4:	63 01 00 54	b.lo	0x100010120
1000100f8:	1f 20 03 d5	nop
1000100fc:	6b 17 07 58	ldr	x11, #58092
100010100:	4c 09 40 f9	ldr	x12, [x10, #16]
100010104:	6b 01 0c eb	subs	x11, x11, x12
100010108:	c3 00 00 54	b.lo	0x100010120
10001010c:	1f 20 03 d5	nop
100010110:	0c 17 07 58	ldr	x12, #58080
100010114:	4a 0d 40 f9	ldr	x10, [x10, #24]
100010118:	8a 01 0a eb	subs	x10, x12, x10
10001011c:	42 02 00 54	b.hs	0x100010164
100010120:	1f 20 03 d5	nop
100010124:	e8 19 04 58	ldr	x8, #33596 ; literal pool symbol address: ___stderrp
100010128:	03 01 40 f9	ldr	x3, [x8]
10001012c:	a0 a9 03 10	adr	x0, #30004 ; literal pool for: "warning: network activity underflow, an interface probably died.\n"
100010130:	1f 20 03 d5	nop
100010134:	21 08 80 52	mov	w1, #65
100010138:	22 00 80 52	mov	w2, #1
10001013c:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
100010140:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
100010144:	ff 83 01 91	add	sp, sp, #96
100010148:	ff 23 03 d5	autibsp
10001014c:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100010150:	50 00 f0 b6	tbz	x16, #62, 0x100010158
100010154:	20 8e 38 d4	brk	#0xc471
100010158:	f2 06 00 14	b	0x100011d20 ; symbol stub for: _fwrite
10001015c:	60 0a 40 fd	ldr	d0, [x19, #16]
100010160:	d4 ff ff 17	b	0x1000100b0
100010164:	01 01 63 9e	ucvtf	d1, x8
100010168:	22 01 63 9e	ucvtf	d2, x9
10001016c:	21 18 60 1e	fdiv	d1, d1, d0
100010170:	42 18 60 1e	fdiv	d2, d2, d0
100010174:	63 01 63 9e	ucvtf	d3, x11
100010178:	44 01 63 9e	ucvtf	d4, x10
10001017c:	63 18 60 1e	fdiv	d3, d3, d0
100010180:	1f 20 03 d5	nop
100010184:	1f 20 03 d5	nop
100010188:	8c fb 05 18	ldr	w12, 0x10001c0f8
10001018c:	80 18 60 1e	fdiv	d0, d4, d0
100010190:	9f 05 00 71	cmp	w12, #1
100010194:	00 01 00 54	b.eq	0x1000101b4
100010198:	6c 02 00 35	cbnz	w12, 0x1000101e4
10001019c:	60 22 40 f9	ldr	x0, [x19, #64]
1000101a0:	e2 03 01 6d	stp	d2, d0, [sp, #16]
1000101a4:	e1 0f 00 6d	stp	d1, d3, [sp]
1000101a8:	c1 a7 03 50	adr	x1, #29946 ; literal pool for: "\n\n**** Network activity ****\n\nout: %.2f packets/s, %.2f bytes/s\nin:  %.2f packets/s, %.2f bytes/s\n"
1000101ac:	1f 20 03 d5	nop
1000101b0:	0c 00 00 14	b	0x1000101e0
1000101b4:	60 22 40 f9	ldr	x0, [x19, #64]
1000101b8:	e0 1f 00 fd	str	d0, [sp, #56]
1000101bc:	ea 1b 00 f9	str	x10, [sp, #48]
1000101c0:	e3 17 00 fd	str	d3, [sp, #40]
1000101c4:	eb 13 00 f9	str	x11, [sp, #32]
1000101c8:	e2 0f 00 fd	str	d2, [sp, #24]
1000101cc:	e9 0b 00 f9	str	x9, [sp, #16]
1000101d0:	a1 a9 03 30	adr	x1, #30005 ; literal pool for: "<key>network</key>\n<dict>\n<key>opackets</key><integer>%llu</integer>\n<key>opacket_rate</key><real>%g</real>\n<key>ipackets</key><integer>%llu</integer>\n<key>ipacket_rate</key><real>%g</real>\n<key>obytes</key><integer>%llu</integer>\n<key>obyte_rate</key><real>%g</real>\n<key>ibytes</key><integer>%llu</integer>\n<key>ibyte_rate</key><real>%g</real>\n</dict>\n"
1000101d4:	1f 20 03 d5	nop
1000101d8:	e1 07 00 fd	str	d1, [sp, #8]
1000101dc:	e8 03 00 f9	str	x8, [sp]
1000101e0:	c0 06 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
1000101e4:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
1000101e8:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
1000101ec:	ff 83 01 91	add	sp, sp, #96
1000101f0:	ff 0f 5f d6	retab
1000101f4:	7f 23 03 d5	pacibsp
1000101f8:	ff c3 01 d1	sub	sp, sp, #112
1000101fc:	e9 23 04 6d	stp	d9, d8, [sp, #64]
100010200:	f4 4f 05 a9	stp	x20, x19, [sp, #80]
100010204:	fd 7b 06 a9	stp	x29, x30, [sp, #96]
100010208:	fd 83 01 91	add	x29, sp, #96
10001020c:	1f 20 03 d5	nop
100010210:	48 12 04 58	ldr	x8, #33352 ; literal pool symbol address: ___stack_chk_guard
100010214:	08 01 40 f9	ldr	x8, [x8]
100010218:	a8 83 1d f8	stur	x8, [x29, #-40]
10001021c:	ff 0f 00 f9	str	xzr, [sp, #24]
100010220:	1f 20 03 d5	nop
100010224:	e0 9d 01 9c	ldr	q0, 0x1000135e0
100010228:	e0 03 80 3d	str	q0, [sp]
10001022c:	e0 0b 80 3d	str	q0, [sp, #32]
100010230:	1f 20 03 d5	nop
100010234:	28 9d 01 5c	ldr	d8, 0x1000135d8
100010238:	e8 1b 00 fd	str	d8, [sp, #48]
10001023c:	e0 83 00 91	add	x0, sp, #32
100010240:	e3 63 00 91	add	x3, sp, #24
100010244:	c1 00 80 52	mov	w1, #6
100010248:	02 00 80 d2	mov	x2, #0
10001024c:	04 00 80 d2	mov	x4, #0
100010250:	05 00 80 d2	mov	x5, #0
100010254:	9f 07 00 94	bl	0x1000120d0 ; symbol stub for: _sysctl
100010258:	c0 08 00 35	cbnz	w0, 0x100010370
10001025c:	e0 0f 40 f9	ldr	x0, [sp, #24]
100010260:	ec 06 00 94	bl	0x100011e10 ; symbol stub for: _malloc
100010264:	e0 08 00 b4	cbz	x0, 0x100010380
100010268:	f3 03 00 aa	mov	x19, x0
10001026c:	e0 03 c0 3d	ldr	q0, [sp]
100010270:	e0 0b 80 3d	str	q0, [sp, #32]
100010274:	e8 1b 00 fd	str	d8, [sp, #48]
100010278:	e0 83 00 91	add	x0, sp, #32
10001027c:	e3 63 00 91	add	x3, sp, #24
100010280:	c1 00 80 52	mov	w1, #6
100010284:	e2 03 13 aa	mov	x2, x19
100010288:	04 00 80 d2	mov	x4, #0
10001028c:	05 00 80 d2	mov	x5, #0
100010290:	90 07 00 94	bl	0x1000120d0 ; symbol stub for: _sysctl
100010294:	a0 06 00 35	cbnz	w0, 0x100010368
100010298:	14 0a 07 10	adr	x20, #57664
10001029c:	1f 20 03 d5	nop
1000102a0:	c8 08 07 10	adr	x8, #57624
1000102a4:	1f 20 03 d5	nop
1000102a8:	80 06 40 ad	ldp	q0, q1, [x20]
1000102ac:	00 05 00 ad	stp	q0, q1, [x8]
1000102b0:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000102b4:	80 02 00 ad	stp	q0, q0, [x20]
1000102b8:	ea 0f 40 f9	ldr	x10, [sp, #24]
1000102bc:	5f 05 00 f1	cmp	x10, #1
1000102c0:	ab 02 00 54	b.lt	0x100010314
1000102c4:	08 00 80 d2	mov	x8, #0
1000102c8:	09 00 80 d2	mov	x9, #0
1000102cc:	6a 02 0a 8b	add	x10, x19, x10
1000102d0:	eb 03 13 aa	mov	x11, x19
1000102d4:	6c 0d 40 39	ldrb	w12, [x11, #3]
1000102d8:	9f 49 00 71	cmp	w12, #18
1000102dc:	41 01 00 54	b.ne	0x100010304
1000102e0:	6c 25 40 f9	ldr	x12, [x11, #72]
1000102e4:	29 01 0c 8b	add	x9, x9, x12
1000102e8:	6c 1d 40 f9	ldr	x12, [x11, #56]
1000102ec:	08 01 0c 8b	add	x8, x8, x12
1000102f0:	89 22 00 a9	stp	x9, x8, [x20]
1000102f4:	61 19 c0 3d	ldr	q1, [x11, #96]
1000102f8:	21 40 01 6e	ext.16b	v1, v1, v1, #8
1000102fc:	00 84 e1 4e	add.2d	v0, v0, v1
100010300:	80 06 80 3d	str	q0, [x20, #16]
100010304:	6c 01 40 79	ldrh	w12, [x11]
100010308:	6b 01 0c 8b	add	x11, x11, x12
10001030c:	7f 01 0a eb	cmp	x11, x10
100010310:	23 fe ff 54	b.lo	0x1000102d4
100010314:	e0 03 13 aa	mov	x0, x19
100010318:	7e 06 00 94	bl	0x100011d10 ; symbol stub for: _free
10001031c:	68 eb 05 10	adr	x8, #48492
100010320:	1f 20 03 d5	nop
100010324:	08 01 40 39	ldrb	w8, [x8]
100010328:	a8 00 00 34	cbz	w8, 0x10001033c
10001032c:	68 06 07 10	adr	x8, #57548
100010330:	1f 20 03 d5	nop
100010334:	80 06 40 ad	ldp	q0, q1, [x20]
100010338:	00 05 00 ad	stp	q0, q1, [x8]
10001033c:	a8 83 5d f8	ldur	x8, [x29, #-40]
100010340:	1f 20 03 d5	nop
100010344:	a9 08 04 58	ldr	x9, #33044 ; literal pool symbol address: ___stack_chk_guard
100010348:	29 01 40 f9	ldr	x9, [x9]
10001034c:	3f 01 08 eb	cmp	x9, x8
100010350:	a1 01 00 54	b.ne	0x100010384
100010354:	fd 7b 46 a9	ldp	x29, x30, [sp, #96]
100010358:	f4 4f 45 a9	ldp	x20, x19, [sp, #80]
10001035c:	e9 23 44 6d	ldp	d9, d8, [sp, #64]
100010360:	ff c3 01 91	add	sp, sp, #112
100010364:	ff 0f 5f d6	retab
100010368:	e0 03 13 aa	mov	x0, x19
10001036c:	69 06 00 94	bl	0x100011d10 ; symbol stub for: _free
100010370:	c0 a7 03 10	adr	x0, #29944 ; literal pool for: "Sysctl failed\n"
100010374:	1f 20 03 d5	nop
100010378:	ca 06 00 94	bl	0x100011ea0 ; symbol stub for: _perror
10001037c:	f0 ff ff 17	b	0x10001033c
100010380:	2d 05 00 94	bl	0x100011834
100010384:	1f 06 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100010388:	7f 23 03 d5	pacibsp
10001038c:	ff 03 01 d1	sub	sp, sp, #64
100010390:	f6 57 01 a9	stp	x22, x21, [sp, #16]
100010394:	f4 4f 02 a9	stp	x20, x19, [sp, #32]
100010398:	fd 7b 03 a9	stp	x29, x30, [sp, #48]
10001039c:	fd c3 00 91	add	x29, sp, #48
1000103a0:	ff 07 00 f9	str	xzr, [sp, #8]
1000103a4:	1f 20 03 d5	nop
1000103a8:	48 07 04 58	ldr	x8, #33000 ; literal pool symbol address: _kIOMainPortDefault
1000103ac:	00 01 40 b9	ldr	w0, [x8]
1000103b0:	a4 05 00 94	bl	0x100011a40 ; symbol stub for: _IORegistryGetRootEntry
1000103b4:	a0 03 00 34	cbz	w0, 0x100010428
1000103b8:	f3 03 00 aa	mov	x19, x0
1000103bc:	e1 23 00 91	add	x1, sp, #8
1000103c0:	f3 00 00 94	bl	0x10001078c
1000103c4:	e0 03 13 aa	mov	x0, x19
1000103c8:	82 05 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
1000103cc:	f3 07 40 f9	ldr	x19, [sp, #8]
1000103d0:	73 03 00 b4	cbz	x19, 0x10001043c
1000103d4:	e0 03 13 aa	mov	x0, x19
1000103d8:	c2 05 00 94	bl	0x100011ae0 ; symbol stub for: _IOReportGetChannelCount
1000103dc:	1f 00 00 71	cmp	w0, #0
1000103e0:	ed 04 00 54	b.le	0x10001047c
1000103e4:	f4 01 07 10	adr	x20, #57404
1000103e8:	1f 20 03 d5	nop
1000103ec:	00 00 80 d2	mov	x0, #0
1000103f0:	e1 03 13 aa	mov	x1, x19
1000103f4:	e2 03 14 aa	mov	x2, x20
1000103f8:	03 00 80 52	mov	w3, #0
1000103fc:	04 00 80 d2	mov	x4, #0
100010400:	b4 05 00 94	bl	0x100011ad0 ; symbol stub for: _IOReportCreateSubscription
100010404:	75 00 00 d0	adrp	x21, 14 ; 0x10001e000
100010408:	a0 16 02 f9	str	x0, [x21, #1064]
10001040c:	88 02 40 f9	ldr	x8, [x20]
100010410:	88 04 00 b4	cbz	x8, 0x1000104a0
100010414:	60 04 00 b4	cbz	x0, 0x1000104a0
100010418:	28 00 80 52	mov	w8, #1
10001041c:	69 00 00 d0	adrp	x9, 14 ; 0x10001e000
100010420:	28 c1 10 39	strb	w8, [x9, #1072]
100010424:	30 00 00 14	b	0x1000104e4
100010428:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10001042c:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
100010430:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
100010434:	ff 03 01 91	add	sp, sp, #64
100010438:	ff 0f 5f d6	retab
10001043c:	1f 20 03 d5	nop
100010440:	08 01 04 58	ldr	x8, #32800 ; literal pool symbol address: ___stderrp
100010444:	03 01 40 f9	ldr	x3, [x8]
100010448:	80 b0 01 50	adr	x0, #13842 ; literal pool for: "IOReportCopyChannelsForDriver() failed\n"
10001044c:	1f 20 03 d5	nop
100010450:	e1 04 80 52	mov	w1, #39
100010454:	22 00 80 52	mov	w2, #1
100010458:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
10001045c:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
100010460:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
100010464:	ff 03 01 91	add	sp, sp, #64
100010468:	ff 23 03 d5	autibsp
10001046c:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100010470:	50 00 f0 b6	tbz	x16, #62, 0x100010478
100010474:	20 8e 38 d4	brk	#0xc471
100010478:	2a 06 00 14	b	0x100011d20 ; symbol stub for: _fwrite
10001047c:	1f 20 03 d5	nop
100010480:	08 ff 03 58	ldr	x8, #32736 ; literal pool symbol address: ___stderrp
100010484:	03 01 40 f9	ldr	x3, [x8]
100010488:	c0 af 01 50	adr	x0, #13818 ; literal pool for: "No channels found!\n"
10001048c:	1f 20 03 d5	nop
100010490:	61 02 80 52	mov	w1, #19
100010494:	22 00 80 52	mov	w2, #1
100010498:	22 06 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
10001049c:	12 00 00 14	b	0x1000104e4
1000104a0:	1f 20 03 d5	nop
1000104a4:	e8 fd 03 58	ldr	x8, #32700 ; literal pool symbol address: ___stderrp
1000104a8:	03 01 40 f9	ldr	x3, [x8]
1000104ac:	40 af 01 50	adr	x0, #13802 ; literal pool for: "IOReportCreateSubscription() failed\n"
1000104b0:	1f 20 03 d5	nop
1000104b4:	81 04 80 52	mov	w1, #36
1000104b8:	22 00 80 52	mov	w2, #1
1000104bc:	19 06 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
1000104c0:	74 00 00 d0	adrp	x20, 14 ; 0x10001e000
1000104c4:	80 12 42 f9	ldr	x0, [x20, #1056]
1000104c8:	60 00 00 b4	cbz	x0, 0x1000104d4
1000104cc:	29 05 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
1000104d0:	9f 12 02 f9	str	xzr, [x20, #1056]
1000104d4:	a0 16 42 f9	ldr	x0, [x21, #1064]
1000104d8:	60 00 00 b4	cbz	x0, 0x1000104e4
1000104dc:	25 05 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
1000104e0:	bf 16 02 f9	str	xzr, [x21, #1064]
1000104e4:	e0 03 13 aa	mov	x0, x19
1000104e8:	fd 7b 43 a9	ldp	x29, x30, [sp, #48]
1000104ec:	f4 4f 42 a9	ldp	x20, x19, [sp, #32]
1000104f0:	f6 57 41 a9	ldp	x22, x21, [sp, #16]
1000104f4:	ff 03 01 91	add	sp, sp, #64
1000104f8:	ff 23 03 d5	autibsp
1000104fc:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100010500:	50 00 f0 b6	tbz	x16, #62, 0x100010508
100010504:	20 8e 38 d4	brk	#0xc471
100010508:	1a 05 00 14	b	0x100011970 ; symbol stub for: _CFRelease
10001050c:	7f 23 03 d5	pacibsp
100010510:	ff 43 02 d1	sub	sp, sp, #144
100010514:	f6 57 06 a9	stp	x22, x21, [sp, #96]
100010518:	f4 4f 07 a9	stp	x20, x19, [sp, #112]
10001051c:	fd 7b 08 a9	stp	x29, x30, [sp, #128]
100010520:	fd 03 02 91	add	x29, sp, #128
100010524:	74 00 00 d0	adrp	x20, 14 ; 0x10001e000
100010528:	88 1e 42 f9	ldr	x8, [x20, #1080]
10001052c:	88 0a 00 b4	cbz	x8, 0x10001067c
100010530:	13 dd 05 10	adr	x19, #48032
100010534:	1f 20 03 d5	nop
100010538:	68 2a 40 b9	ldr	w8, [x19, #40]
10001053c:	1f 05 00 71	cmp	w8, #1
100010540:	40 02 00 54	b.eq	0x100010588
100010544:	28 03 00 35	cbnz	w8, 0x1000105a8
100010548:	15 da 05 10	adr	x21, #47936
10001054c:	1f 20 03 d5	nop
100010550:	a3 22 40 f9	ldr	x3, [x21, #64]
100010554:	80 9d 03 10	adr	x0, #29616 ; literal pool for: "\n**** Device Power States ****\n"
100010558:	1f 20 03 d5	nop
10001055c:	e1 03 80 52	mov	w1, #31
100010560:	22 00 80 52	mov	w2, #1
100010564:	ef 05 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100010568:	a0 22 40 f9	ldr	x0, [x21, #64]
10001056c:	a8 9e 03 50	adr	x8, #29654 ; literal pool for: "Device"
100010570:	1f 20 03 d5	nop
100010574:	e8 03 00 f9	str	x8, [sp]
100010578:	61 9d 03 10	adr	x1, #29612 ; literal pool for: "%-35s State Residencies ms/s\n"
10001057c:	1f 20 03 d5	nop
100010580:	d8 05 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100010584:	09 00 00 14	b	0x1000105a8
100010588:	1f 20 03 d5	nop
10001058c:	1f 20 03 d5	nop
100010590:	c3 d9 05 58	ldr	x3, #47928
100010594:	a0 9d 03 30	adr	x0, #29621 ; literal pool for: "<key>devices</key>\n<array>\n"
100010598:	1f 20 03 d5	nop
10001059c:	61 03 80 52	mov	w1, #27
1000105a0:	22 00 80 52	mov	w2, #1
1000105a4:	df 05 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
1000105a8:	76 00 00 d0	adrp	x22, 14 ; 0x10001e000
1000105ac:	d5 22 42 f9	ldr	x21, [x22, #1088]
1000105b0:	f5 00 00 b5	cbnz	x21, 0x1000105cc
1000105b4:	80 1e 42 f9	ldr	x0, [x20, #1080]
1000105b8:	4a 05 00 94	bl	0x100011ae0 ; symbol stub for: _IOReportGetChannelCount
1000105bc:	48 11 80 52	mov	w8, #138
1000105c0:	00 7c a8 9b	umull	x0, w0, w8
1000105c4:	13 06 00 94	bl	0x100011e10 ; symbol stub for: _malloc
1000105c8:	c0 22 02 f9	str	x0, [x22, #1088]
1000105cc:	bf 02 00 f1	cmp	x21, #0
1000105d0:	e8 17 9f 1a	cset	w8, eq
1000105d4:	e9 03 01 91	add	x9, sp, #64
1000105d8:	ff 27 04 a9	stp	xzr, x9, [sp, #64]
1000105dc:	1f 20 03 d5	nop
1000105e0:	00 de 00 5c	ldr	d0, 0x1000121a0
1000105e4:	e0 2b 00 fd	str	d0, [sp, #80]
1000105e8:	ff 5b 00 b9	str	wzr, [sp, #88]
1000105ec:	80 1e 42 f9	ldr	x0, [x20, #1080]
1000105f0:	ea 43 00 91	add	x10, sp, #16
1000105f4:	1f 20 03 d5	nop
1000105f8:	d0 f2 03 58	ldr	x16, #32344 ; literal pool symbol address: __NSConcreteStackBlock
1000105fc:	f1 03 0a aa	mov	x17, x10
100010600:	31 5c ed f2	movk	x17, #27361, lsl #48
100010604:	30 0a c1 da	pacda	x16, x17
100010608:	f0 0b 00 f9	str	x16, [sp, #16]
10001060c:	1f 20 03 d5	nop
100010610:	c0 dc 00 5c	ldr	d0, 0x1000121a8
100010614:	e0 0f 00 fd	str	d0, [sp, #24]
100010618:	4a 41 00 91	add	x10, x10, #16
10001061c:	2b 6c 04 10	adr	x11, #36228
100010620:	1f 20 03 d5	nop
100010624:	b0 19 00 10	adr	x16, #820
100010628:	1f 20 03 d5	nop
10001062c:	50 01 c1 da	pacia	x16, x10
100010630:	f0 2f 02 a9	stp	x16, x11, [sp, #32]
100010634:	e8 e3 00 39	strb	w8, [sp, #56]
100010638:	e9 1b 00 f9	str	x9, [sp, #48]
10001063c:	e1 43 00 91	add	x1, sp, #16
100010640:	2c 05 00 94	bl	0x100011af0 ; symbol stub for: _IOReportIterate
100010644:	68 2a 40 b9	ldr	w8, [x19, #40]
100010648:	1f 05 00 71	cmp	w8, #1
10001064c:	21 01 00 54	b.ne	0x100010670
100010650:	1f 20 03 d5	nop
100010654:	1f 20 03 d5	nop
100010658:	83 d3 05 58	ldr	x3, #47728
10001065c:	60 8f 01 50	adr	x0, #12782 ; literal pool for: "</array>\n"
100010660:	1f 20 03 d5	nop
100010664:	21 01 80 52	mov	w1, #9
100010668:	22 00 80 52	mov	w2, #1
10001066c:	ad 05 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100010670:	e0 03 01 91	add	x0, sp, #64
100010674:	01 01 80 52	mov	w1, #8
100010678:	52 05 00 94	bl	0x100011bc0 ; symbol stub for: __Block_object_dispose
10001067c:	fd 7b 48 a9	ldp	x29, x30, [sp, #128]
100010680:	f4 4f 47 a9	ldp	x20, x19, [sp, #112]
100010684:	f6 57 46 a9	ldp	x22, x21, [sp, #96]
100010688:	ff 43 02 91	add	sp, sp, #144
10001068c:	ff 0f 5f d6	retab
100010690:	7f 23 03 d5	pacibsp
100010694:	f6 57 bd a9	stp	x22, x21, [sp, #-48]!
100010698:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10001069c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
1000106a0:	fd 83 00 91	add	x29, sp, #32
1000106a4:	74 00 00 d0	adrp	x20, 14 ; 0x10001e000
1000106a8:	88 c2 50 39	ldrb	w8, [x20, #1072]
1000106ac:	1f 05 00 71	cmp	w8, #1
1000106b0:	61 06 00 54	b.ne	0x10001077c
1000106b4:	73 00 00 d0	adrp	x19, 14 ; 0x10001e000
1000106b8:	60 26 42 f9	ldr	x0, [x19, #1096]
1000106bc:	40 00 00 b4	cbz	x0, 0x1000106c4
1000106c0:	ac 04 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
1000106c4:	35 ce 05 10	adr	x21, #47556
1000106c8:	1f 20 03 d5	nop
1000106cc:	a8 0a 40 39	ldrb	w8, [x21, #2]
1000106d0:	56 ec 06 10	adr	x22, #56712
1000106d4:	1f 20 03 d5	nop
1000106d8:	c9 eb 06 10	adr	x9, #56696
1000106dc:	1f 20 03 d5	nop
1000106e0:	1f 01 00 71	cmp	w8, #0
1000106e4:	c8 02 89 9a	csel	x8, x22, x9, eq
1000106e8:	08 01 40 f9	ldr	x8, [x8]
1000106ec:	68 26 02 f9	str	x8, [x19, #1096]
1000106f0:	1f 20 03 d5	nop
1000106f4:	a0 e9 06 58	ldr	x0, #56628
1000106f8:	1f 20 03 d5	nop
1000106fc:	21 e9 06 58	ldr	x1, #56612
100010700:	02 00 80 d2	mov	x2, #0
100010704:	eb 04 00 94	bl	0x100011ab0 ; symbol stub for: _IOReportCreateSamples
100010708:	c0 02 00 f9	str	x0, [x22]
10001070c:	60 02 00 b4	cbz	x0, 0x100010758
100010710:	a8 02 40 39	ldrb	w8, [x21]
100010714:	88 00 00 34	cbz	w8, 0x100010724
100010718:	68 00 00 d0	adrp	x8, 14 ; 0x10001e000
10001071c:	00 29 02 f9	str	x0, [x8, #1104]
100010720:	98 04 00 94	bl	0x100011980 ; symbol stub for: _CFRetain
100010724:	74 00 00 d0	adrp	x20, 14 ; 0x10001e000
100010728:	80 1e 42 f9	ldr	x0, [x20, #1080]
10001072c:	40 00 00 b4	cbz	x0, 0x100010734
100010730:	90 04 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
100010734:	60 26 42 f9	ldr	x0, [x19, #1096]
100010738:	20 02 00 b4	cbz	x0, 0x10001077c
10001073c:	1f 20 03 d5	nop
100010740:	c1 e8 06 58	ldr	x1, #56600
100010744:	c1 01 00 b4	cbz	x1, 0x10001077c
100010748:	02 00 80 d2	mov	x2, #0
10001074c:	dd 04 00 94	bl	0x100011ac0 ; symbol stub for: _IOReportCreateSamplesDelta
100010750:	80 1e 02 f9	str	x0, [x20, #1080]
100010754:	0a 00 00 14	b	0x10001077c
100010758:	1f 20 03 d5	nop
10001075c:	28 e8 03 58	ldr	x8, #32004 ; literal pool symbol address: ___stderrp
100010760:	03 01 40 f9	ldr	x3, [x8]
100010764:	a0 9a 03 10	adr	x0, #29524 ; literal pool for: "Unable to get device statistics!\n"
100010768:	1f 20 03 d5	nop
10001076c:	21 04 80 52	mov	w1, #33
100010770:	22 00 80 52	mov	w2, #1
100010774:	6b 05 00 94	bl	0x100011d20 ; symbol stub for: _fwrite
100010778:	9f c2 10 39	strb	wzr, [x20, #1072]
10001077c:	fd 7b 42 a9	ldp	x29, x30, [sp, #32]
100010780:	f4 4f 41 a9	ldp	x20, x19, [sp, #16]
100010784:	f6 57 c3 a8	ldp	x22, x21, [sp], #48
100010788:	ff 0f 5f d6	retab
10001078c:	7f 23 03 d5	pacibsp
100010790:	ff 83 03 d1	sub	sp, sp, #224
100010794:	f8 5f 0a a9	stp	x24, x23, [sp, #160]
100010798:	f6 57 0b a9	stp	x22, x21, [sp, #176]
10001079c:	f4 4f 0c a9	stp	x20, x19, [sp, #192]
1000107a0:	fd 7b 0d a9	stp	x29, x30, [sp, #208]
1000107a4:	fd 43 03 91	add	x29, sp, #208
1000107a8:	f3 03 01 aa	mov	x19, x1
1000107ac:	f5 03 00 aa	mov	x21, x0
1000107b0:	1f 20 03 d5	nop
1000107b4:	28 e5 03 58	ldr	x8, #31908 ; literal pool symbol address: ___stack_chk_guard
1000107b8:	08 01 40 f9	ldr	x8, [x8]
1000107bc:	a8 83 1c f8	stur	x8, [x29, #-56]
1000107c0:	ff 0f 00 b9	str	wzr, [sp, #12]
1000107c4:	00 e4 00 6f	movi.2d	v0, #0000000000000000
1000107c8:	e0 83 03 ad	stp	q0, q0, [sp, #112]
1000107cc:	e0 83 02 ad	stp	q0, q0, [sp, #80]
1000107d0:	e0 83 01 ad	stp	q0, q0, [sp, #48]
1000107d4:	e0 83 00 ad	stp	q0, q0, [sp, #16]
1000107d8:	e1 86 03 50	adr	x1, #28894 ; literal pool for: "IOPower"
1000107dc:	1f 20 03 d5	nop
1000107e0:	e2 33 00 91	add	x2, sp, #12
1000107e4:	8f 04 00 94	bl	0x100011a20 ; symbol stub for: _IORegistryEntryGetChildIterator
1000107e8:	20 09 00 35	cbnz	w0, 0x10001090c
1000107ec:	e0 0f 40 b9	ldr	w0, [sp, #12]
1000107f0:	70 04 00 94	bl	0x1000119b0 ; symbol stub for: _IOIteratorNext
1000107f4:	f4 03 00 aa	mov	x20, x0
1000107f8:	e1 85 03 50	adr	x1, #28862 ; literal pool for: "IOPower"
1000107fc:	1f 20 03 d5	nop
100010800:	e2 43 00 91	add	x2, sp, #16
100010804:	e0 03 15 aa	mov	x0, x21
100010808:	8a 04 00 94	bl	0x100011a30 ; symbol stub for: _IORegistryEntryGetNameInPlane
10001080c:	00 08 00 35	cbnz	w0, 0x10001090c
100010810:	28 e9 89 d2	mov	x8, #20297
100010814:	08 ea ad f2	movk	x8, #28496, lsl #16
100010818:	e8 ae cc f2	movk	x8, #25975, lsl #32
10001081c:	48 6e e8 f2	movk	x8, #17266, lsl #48
100010820:	e9 2b 41 a9	ldp	x9, x10, [sp, #16]
100010824:	28 01 08 ca	eor	x8, x9, x8
100010828:	e9 cd 8d d2	mov	x9, #28271
10001082c:	c9 ad ac f2	movk	x9, #25966, lsl #16
100010830:	69 8c ce f2	movk	x9, #29795, lsl #32
100010834:	29 ed ed f2	movk	x9, #28521, lsl #48
100010838:	49 01 09 ca	eor	x9, x10, x9
10001083c:	ea 43 40 79	ldrh	w10, [sp, #32]
100010840:	cb 0d 80 52	mov	w11, #110
100010844:	4a 01 0b ca	eor	x10, x10, x11
100010848:	08 01 09 aa	orr	x8, x8, x9
10001084c:	08 01 0a aa	orr	x8, x8, x10
100010850:	a8 02 00 b4	cbz	x8, 0x1000108a4
100010854:	f6 43 00 91	add	x22, sp, #16
100010858:	e0 43 00 91	add	x0, sp, #16
10001085c:	d1 04 00 94	bl	0x100011ba0 ; symbol stub for: _IOServiceMatching
100010860:	e0 04 00 b4	cbz	x0, 0x1000108fc
100010864:	f5 03 00 aa	mov	x21, x0
100010868:	81 6e 8e d2	mov	x1, #29556
10001086c:	21 0d a9 f2	movk	x1, #18537, lsl #16
100010870:	81 6e ca f2	movk	x1, #21364, lsl #32
100010874:	a1 09 ea f2	movk	x1, #20557, lsl #48
100010878:	02 00 80 d2	mov	x2, #0
10001087c:	89 04 00 94	bl	0x100011aa0 ; symbol stub for: _IOReportCopyChannelsWithID
100010880:	f6 03 00 aa	mov	x22, x0
100010884:	40 01 00 b4	cbz	x0, 0x1000108ac
100010888:	60 02 40 f9	ldr	x0, [x19]
10001088c:	80 05 00 b4	cbz	x0, 0x10001093c
100010890:	e1 03 16 aa	mov	x1, x22
100010894:	02 00 80 d2	mov	x2, #0
100010898:	9a 04 00 94	bl	0x100011b00 ; symbol stub for: _IOReportMergeChannels
10001089c:	b4 00 00 35	cbnz	w20, 0x1000108b0
1000108a0:	0e 00 00 14	b	0x1000108d8
1000108a4:	15 00 80 d2	mov	x21, #0
1000108a8:	16 00 80 d2	mov	x22, #0
1000108ac:	74 01 00 34	cbz	w20, 0x1000108d8
1000108b0:	e0 0f 40 b9	ldr	w0, [sp, #12]
1000108b4:	3f 04 00 94	bl	0x1000119b0 ; symbol stub for: _IOIteratorNext
1000108b8:	f7 03 00 aa	mov	x23, x0
1000108bc:	e0 03 14 aa	mov	x0, x20
1000108c0:	e1 03 13 aa	mov	x1, x19
1000108c4:	b2 ff ff 97	bl	0x10001078c
1000108c8:	e0 03 14 aa	mov	x0, x20
1000108cc:	41 04 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
1000108d0:	f4 03 17 aa	mov	x20, x23
1000108d4:	f7 fe ff 35	cbnz	w23, 0x1000108b0
1000108d8:	e0 0f 40 b9	ldr	w0, [sp, #12]
1000108dc:	3d 04 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
1000108e0:	76 00 00 b4	cbz	x22, 0x1000108ec
1000108e4:	e0 03 16 aa	mov	x0, x22
1000108e8:	22 04 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
1000108ec:	15 01 00 b4	cbz	x21, 0x10001090c
1000108f0:	e0 03 15 aa	mov	x0, x21
1000108f4:	1f 04 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
1000108f8:	05 00 00 14	b	0x10001090c
1000108fc:	f6 03 00 f9	str	x22, [sp]
100010900:	80 7e 03 10	adr	x0, #28624 ; literal pool for: "Failed to match an object with name %s in registry\n"
100010904:	1f 20 03 d5	nop
100010908:	96 05 00 94	bl	0x100011f60 ; symbol stub for: _printf
10001090c:	a8 83 5c f8	ldur	x8, [x29, #-56]
100010910:	1f 20 03 d5	nop
100010914:	29 da 03 58	ldr	x9, #31556 ; literal pool symbol address: ___stack_chk_guard
100010918:	29 01 40 f9	ldr	x9, [x9]
10001091c:	3f 01 08 eb	cmp	x9, x8
100010920:	a1 01 00 54	b.ne	0x100010954
100010924:	fd 7b 4d a9	ldp	x29, x30, [sp, #208]
100010928:	f4 4f 4c a9	ldp	x20, x19, [sp, #192]
10001092c:	f6 57 4b a9	ldp	x22, x21, [sp, #176]
100010930:	f8 5f 4a a9	ldp	x24, x23, [sp, #160]
100010934:	ff 83 03 91	add	sp, sp, #224
100010938:	ff 0f 5f d6	retab
10001093c:	01 00 80 d2	mov	x1, #0
100010940:	e2 03 16 aa	mov	x2, x22
100010944:	ff 03 00 94	bl	0x100011940 ; symbol stub for: _CFDictionaryCreateMutableCopy
100010948:	60 02 00 f9	str	x0, [x19]
10001094c:	34 fb ff 35	cbnz	w20, 0x1000108b0
100010950:	e2 ff ff 17	b	0x1000108d8
100010954:	ab 04 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100010958:	7f 23 03 d5	pacibsp
10001095c:	ff 03 06 d1	sub	sp, sp, #384
100010960:	e9 23 11 6d	stp	d9, d8, [sp, #272]
100010964:	fc 6f 12 a9	stp	x28, x27, [sp, #288]
100010968:	fa 67 13 a9	stp	x26, x25, [sp, #304]
10001096c:	f8 5f 14 a9	stp	x24, x23, [sp, #320]
100010970:	f6 57 15 a9	stp	x22, x21, [sp, #336]
100010974:	f4 4f 16 a9	stp	x20, x19, [sp, #352]
100010978:	fd 7b 17 a9	stp	x29, x30, [sp, #368]
10001097c:	fd c3 05 91	add	x29, sp, #368
100010980:	f4 03 01 aa	mov	x20, x1
100010984:	f3 03 00 aa	mov	x19, x0
100010988:	1f 20 03 d5	nop
10001098c:	68 d6 03 58	ldr	x8, #31436 ; literal pool symbol address: ___stack_chk_guard
100010990:	08 01 40 f9	ldr	x8, [x8]
100010994:	a8 03 19 f8	stur	x8, [x29, #-112]
100010998:	e0 03 01 aa	mov	x0, x1
10001099c:	69 04 00 94	bl	0x100011b40 ; symbol stub for: _IOReportStateGetCount
1000109a0:	f8 03 00 aa	mov	x24, x0
1000109a4:	68 a2 40 39	ldrb	w8, [x19, #40]
1000109a8:	88 03 00 34	cbz	w8, 0x100010a18
1000109ac:	e0 03 14 aa	mov	x0, x20
1000109b0:	34 04 00 94	bl	0x100011a80 ; symbol stub for: _IOReportChannelGetDriverName
1000109b4:	80 1d 00 b4	cbz	x0, 0x100010d64
1000109b8:	76 00 00 d0	adrp	x22, 14 ; 0x10001e000
1000109bc:	c8 22 42 f9	ldr	x8, [x22, #1088]
1000109c0:	69 12 40 f9	ldr	x9, [x19, #32]
1000109c4:	29 05 40 f9	ldr	x9, [x9, #8]
1000109c8:	29 19 80 b9	ldrsw	x9, [x9, #24]
1000109cc:	55 11 80 52	mov	w21, #138
1000109d0:	21 21 15 9b	madd	x1, x9, x21, x8
1000109d4:	02 10 80 52	mov	w2, #128
1000109d8:	03 c0 80 52	mov	w3, #1536
1000109dc:	ed 03 00 94	bl	0x100011990 ; symbol stub for: _CFStringGetCString
1000109e0:	c8 22 42 f9	ldr	x8, [x22, #1088]
1000109e4:	69 12 40 f9	ldr	x9, [x19, #32]
1000109e8:	29 05 40 f9	ldr	x9, [x9, #8]
1000109ec:	29 19 80 b9	ldrsw	x9, [x9, #24]
1000109f0:	29 21 15 9b	madd	x9, x9, x21, x8
1000109f4:	3f fd 01 39	strb	wzr, [x9, #127]
1000109f8:	69 12 40 f9	ldr	x9, [x19, #32]
1000109fc:	29 05 40 f9	ldr	x9, [x9, #8]
100010a00:	29 19 80 b9	ldrsw	x9, [x9, #24]
100010a04:	20 21 15 9b	madd	x0, x9, x21, x8
100010a08:	01 04 80 52	mov	w1, #32
100010a0c:	89 05 00 94	bl	0x100012030 ; symbol stub for: _strchr
100010a10:	40 00 00 b4	cbz	x0, 0x100010a18
100010a14:	1f 00 00 39	strb	wzr, [x0]
100010a18:	1f 20 03 d5	nop
100010a1c:	1f 20 03 d5	nop
100010a20:	c8 b6 05 18	ldr	w8, 0x10001c0f8
100010a24:	1f 05 00 71	cmp	w8, #1
100010a28:	a0 02 00 54	b.eq	0x100010a7c
100010a2c:	c8 04 00 35	cbnz	w8, 0x100010ac4
100010a30:	1f 20 03 d5	nop
100010a34:	68 d0 06 58	ldr	x8, #55820
100010a38:	69 12 40 f9	ldr	x9, [x19, #32]
100010a3c:	29 05 40 f9	ldr	x9, [x9, #8]
100010a40:	29 19 80 b9	ldrsw	x9, [x9, #24]
100010a44:	4a 11 80 52	mov	w10, #138
100010a48:	21 21 0a 9b	madd	x1, x9, x10, x8
100010a4c:	f5 03 02 91	add	x21, sp, #128
100010a50:	e0 03 02 91	add	x0, sp, #128
100010a54:	62 04 80 52	mov	w2, #35
100010a58:	92 05 00 94	bl	0x1000120a0 ; symbol stub for: _strncpy
100010a5c:	ff 8f 02 39	strb	wzr, [sp, #163]
100010a60:	1f 20 03 d5	nop
100010a64:	1f 20 03 d5	nop
100010a68:	00 b3 05 58	ldr	x0, #46688
100010a6c:	f5 03 00 f9	str	x21, [sp]
100010a70:	01 79 03 30	adr	x1, #28449 ; literal pool for: "%-35s"
100010a74:	1f 20 03 d5	nop
100010a78:	12 00 00 14	b	0x100010ac0
100010a7c:	1f 20 03 d5	nop
100010a80:	08 ce 06 58	ldr	x8, #55744
100010a84:	69 12 40 f9	ldr	x9, [x19, #32]
100010a88:	29 05 40 f9	ldr	x9, [x9, #8]
100010a8c:	29 19 80 b9	ldrsw	x9, [x9, #24]
100010a90:	4a 11 80 52	mov	w10, #138
100010a94:	20 21 0a 9b	madd	x0, x9, x10, x8
100010a98:	e1 03 02 91	add	x1, sp, #128
100010a9c:	02 10 80 52	mov	w2, #128
100010aa0:	b9 f9 ff 97	bl	0x10000f184
100010aa4:	1f 20 03 d5	nop
100010aa8:	1f 20 03 d5	nop
100010aac:	e8 b0 05 58	ldr	x8, #46620
100010ab0:	e0 03 00 f9	str	x0, [sp]
100010ab4:	01 77 03 70	adr	x1, #28387 ; literal pool for: "<dict>\n<key>name</key>\n<string>%s</string>\n<key>states</key>\n<array>\n"
100010ab8:	1f 20 03 d5	nop
100010abc:	e0 03 08 aa	mov	x0, x8
100010ac0:	88 04 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100010ac4:	1f 03 00 71	cmp	w24, #0
100010ac8:	4d 10 00 54	b.le	0x100010cd0
100010acc:	15 00 80 d2	mov	x21, #0
100010ad0:	16 00 80 d2	mov	x22, #0
100010ad4:	f7 c3 00 91	add	x23, sp, #48
100010ad8:	f9 03 18 2a	mov	w25, w24
100010adc:	e0 03 14 aa	mov	x0, x20
100010ae0:	e1 03 15 aa	mov	x1, x21
100010ae4:	23 04 00 94	bl	0x100011b70 ; symbol stub for: _IOReportStateGetResidency
100010ae8:	bf 26 00 f1	cmp	x21, #9
100010aec:	48 00 00 54	b.hi	0x100010af4
100010af0:	e0 7a 35 f8	str	x0, [x23, x21, lsl #3]
100010af4:	16 00 16 8b	add	x22, x0, x22
100010af8:	b5 06 00 91	add	x21, x21, #1
100010afc:	3f 03 15 eb	cmp	x25, x21
100010b00:	e1 fe ff 54	b.ne	0x100010adc
100010b04:	15 00 80 d2	mov	x21, #0
100010b08:	1f 20 03 d5	nop
100010b0c:	e8 cb 03 58	ldr	x8, #31100 ; literal pool symbol address: _kCFBooleanTrue
100010b10:	77 82 00 91	add	x23, x19, #32
100010b14:	09 07 00 51	sub	w9, w24, #1
100010b18:	2a 01 80 52	mov	w10, #9
100010b1c:	c8 02 63 9e	ucvtf	d8, x22
100010b20:	3f 25 00 71	cmp	w9, #9
100010b24:	29 31 8a 1a	csel	w9, w9, w10, lo
100010b28:	39 05 00 11	add	w25, w9, #1
100010b2c:	1c 01 40 f9	ldr	x28, [x8]
100010b30:	58 11 80 52	mov	w24, #138
100010b34:	1f 20 03 d5	nop
100010b38:	49 b4 00 5c	ldr	d9, 0x1000121c0
100010b3c:	e8 c3 00 91	add	x8, sp, #48
100010b40:	1a 79 75 f8	ldr	x26, [x8, x21, lsl #3]
100010b44:	68 a2 40 39	ldrb	w8, [x19, #40]
100010b48:	48 03 00 34	cbz	w8, 0x100010bb0
100010b4c:	e0 03 14 aa	mov	x0, x20
100010b50:	e1 03 15 aa	mov	x1, x21
100010b54:	ff 03 00 94	bl	0x100011b50 ; symbol stub for: _IOReportStateGetIDForIndex
100010b58:	a2 03 00 94	bl	0x1000119e0 ; symbol stub for: _IOPMCopyPowerStateInfo
100010b5c:	fb 03 00 aa	mov	x27, x0
100010b60:	41 6e 04 10	adr	x1, #36296 ; Objc cfstring ref: @"IsLowPower"
100010b64:	1f 20 03 d5	nop
100010b68:	7a 03 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
100010b6c:	1f 00 1c eb	cmp	x0, x28
100010b70:	60 02 00 54	b.eq	0x100010bbc
100010b74:	e0 03 1b aa	mov	x0, x27
100010b78:	81 6e 04 10	adr	x1, #36304 ; Objc cfstring ref: @"IsDeviceUsable"
100010b7c:	1f 20 03 d5	nop
100010b80:	74 03 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
100010b84:	1f 00 1c eb	cmp	x0, x28
100010b88:	e0 01 00 54	b.eq	0x100010bc4
100010b8c:	e0 03 1b aa	mov	x0, x27
100010b90:	c1 6e 04 10	adr	x1, #36312 ; Objc cfstring ref: @"IsPowerOn"
100010b94:	1f 20 03 d5	nop
100010b98:	6e 03 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
100010b9c:	1f 00 1c eb	cmp	x0, x28
100010ba0:	08 04 80 52	mov	w8, #32
100010ba4:	e9 09 80 52	mov	w9, #79
100010ba8:	36 01 88 1a	csel	w22, w9, w8, eq
100010bac:	07 00 00 14	b	0x100010bc8
100010bb0:	1f 20 03 d5	nop
100010bb4:	68 c4 06 58	ldr	x8, #55436
100010bb8:	0e 00 00 14	b	0x100010bf0
100010bbc:	96 09 80 52	mov	w22, #76
100010bc0:	02 00 00 14	b	0x100010bc8
100010bc4:	b6 0a 80 52	mov	w22, #85
100010bc8:	e0 03 1b aa	mov	x0, x27
100010bcc:	69 03 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
100010bd0:	1f 20 03 d5	nop
100010bd4:	68 c3 06 58	ldr	x8, #55404
100010bd8:	e9 02 40 f9	ldr	x9, [x23]
100010bdc:	29 05 40 f9	ldr	x9, [x9, #8]
100010be0:	29 19 80 b9	ldrsw	x9, [x9, #24]
100010be4:	29 21 18 9b	madd	x9, x9, x24, x8
100010be8:	29 01 15 8b	add	x9, x9, x21
100010bec:	36 01 02 39	strb	w22, [x9, #128]
100010bf0:	e9 02 40 f9	ldr	x9, [x23]
100010bf4:	29 05 40 f9	ldr	x9, [x9, #8]
100010bf8:	29 19 80 b9	ldrsw	x9, [x9, #24]
100010bfc:	28 21 18 9b	madd	x8, x9, x24, x8
100010c00:	08 01 15 8b	add	x8, x8, x21
100010c04:	1b 01 c2 39	ldrsb	w27, [x8, #128]
100010c08:	1f 20 03 d5	nop
100010c0c:	1f 20 03 d5	nop
100010c10:	48 a7 05 18	ldr	w8, 0x10001c0f8
100010c14:	1f 05 00 71	cmp	w8, #1
100010c18:	00 02 00 54	b.eq	0x100010c58
100010c1c:	28 05 00 35	cbnz	w8, 0x100010cc0
100010c20:	56 a3 05 10	adr	x22, #46184
100010c24:	1f 20 03 d5	nop
100010c28:	c0 22 40 f9	ldr	x0, [x22, #64]
100010c2c:	40 03 63 9e	ucvtf	d0, x26
100010c30:	00 18 68 1e	fdiv	d0, d0, d8
100010c34:	00 08 69 1e	fmul	d0, d0, d9
100010c38:	e0 03 00 fd	str	d0, [sp]
100010c3c:	21 6e 03 30	adr	x1, #28101 ; literal pool for: " %7.2f"
100010c40:	1f 20 03 d5	nop
100010c44:	27 04 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100010c48:	c1 22 40 f9	ldr	x1, [x22, #64]
100010c4c:	e0 03 1b aa	mov	x0, x27
100010c50:	28 04 00 94	bl	0x100011cf0 ; symbol stub for: _fputc
100010c54:	1b 00 00 14	b	0x100010cc0
100010c58:	88 a1 05 10	adr	x8, #46128
100010c5c:	1f 20 03 d5	nop
100010c60:	00 21 40 f9	ldr	x0, [x8, #64]
100010c64:	40 03 63 9e	ucvtf	d0, x26
100010c68:	01 05 40 fd	ldr	d1, [x8, #8]
100010c6c:	21 08 60 1e	fmul	d1, d1, d0
100010c70:	28 00 79 9e	fcvtzu	x8, d1
100010c74:	00 18 68 1e	fdiv	d0, d0, d8
100010c78:	00 08 69 1e	fmul	d0, d0, d9
100010c7c:	7f 33 01 71	cmp	w27, #76
100010c80:	ab fc 01 10	adr	x11, #16276 ; literal pool for: "false"
100010c84:	1f 20 03 d5	nop
100010c88:	8c fc 01 50	adr	x12, #16274 ; literal pool for: "true"
100010c8c:	1f 20 03 d5	nop
100010c90:	89 01 8b 9a	csel	x9, x12, x11, eq
100010c94:	7f 57 01 71	cmp	w27, #85
100010c98:	8a 01 8b 9a	csel	x10, x12, x11, eq
100010c9c:	7f 3f 01 71	cmp	w27, #79
100010ca0:	8b 01 8b 9a	csel	x11, x12, x11, eq
100010ca4:	ea af 01 a9	stp	x10, x11, [sp, #24]
100010ca8:	e9 0b 00 f9	str	x9, [sp, #16]
100010cac:	e0 07 00 fd	str	d0, [sp, #8]
100010cb0:	e8 03 00 f9	str	x8, [sp]
100010cb4:	a1 6a 03 10	adr	x1, #27988 ; literal pool for: "<dict>\n<key>residency_ns</key><integer>%llu</integer>\n<key>residency_ms_per_s</key><real>%f</real>\n<key>low_power</key><%s/>\n<key>usable</key><%s/>\n<key>on</key><%s/>\n</dict>\n"
100010cb8:	1f 20 03 d5	nop
100010cbc:	09 04 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100010cc0:	b5 06 00 91	add	x21, x21, #1
100010cc4:	3f 03 15 eb	cmp	x25, x21
100010cc8:	a1 f3 ff 54	b.ne	0x100010b3c
100010ccc:	02 00 00 14	b	0x100010cd4
100010cd0:	77 82 00 91	add	x23, x19, #32
100010cd4:	1f 20 03 d5	nop
100010cd8:	1f 20 03 d5	nop
100010cdc:	e8 a0 05 18	ldr	w8, 0x10001c0f8
100010ce0:	c8 00 00 34	cbz	w8, 0x100010cf8
100010ce4:	1f 05 00 71	cmp	w8, #1
100010ce8:	41 01 00 54	b.ne	0x100010d10
100010cec:	a0 b6 01 30	adr	x0, #14037 ; literal pool for: "</array>\n</dict>\n"
100010cf0:	1f 20 03 d5	nop
100010cf4:	03 00 00 14	b	0x100010d00
100010cf8:	a0 e7 01 10	adr	x0, #15604 ; literal pool for: "\n"
100010cfc:	1f 20 03 d5	nop
100010d00:	1f 20 03 d5	nop
100010d04:	1f 20 03 d5	nop
100010d08:	01 9e 05 58	ldr	x1, #46016
100010d0c:	fd 03 00 94	bl	0x100011d00 ; symbol stub for: _fputs
100010d10:	e8 02 40 f9	ldr	x8, [x23]
100010d14:	08 05 40 f9	ldr	x8, [x8, #8]
100010d18:	09 19 40 b9	ldr	w9, [x8, #24]
100010d1c:	29 05 00 11	add	w9, w9, #1
100010d20:	09 19 00 b9	str	w9, [x8, #24]
100010d24:	a8 03 59 f8	ldur	x8, [x29, #-112]
100010d28:	1f 20 03 d5	nop
100010d2c:	69 b9 03 58	ldr	x9, #30508 ; literal pool symbol address: ___stack_chk_guard
100010d30:	29 01 40 f9	ldr	x9, [x9]
100010d34:	3f 01 08 eb	cmp	x9, x8
100010d38:	81 01 00 54	b.ne	0x100010d68
100010d3c:	00 00 80 52	mov	w0, #0
100010d40:	fd 7b 57 a9	ldp	x29, x30, [sp, #368]
100010d44:	f4 4f 56 a9	ldp	x20, x19, [sp, #352]
100010d48:	f6 57 55 a9	ldp	x22, x21, [sp, #336]
100010d4c:	f8 5f 54 a9	ldp	x24, x23, [sp, #320]
100010d50:	fa 67 53 a9	ldp	x26, x25, [sp, #304]
100010d54:	fc 6f 52 a9	ldp	x28, x27, [sp, #288]
100010d58:	e9 23 51 6d	ldp	d9, d8, [sp, #272]
100010d5c:	ff 03 06 91	add	sp, sp, #384
100010d60:	ff 0f 5f d6	retab
100010d64:	bf 02 00 94	bl	0x100011860
100010d68:	a6 03 00 94	bl	0x100011c00 ; symbol stub for: ___stack_chk_fail
100010d6c:	7f 23 03 d5	pacibsp
100010d70:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100010d74:	fd 03 00 91	mov	x29, sp
100010d78:	1f 20 03 d5	nop
100010d7c:	e8 b7 03 58	ldr	x8, #30460 ; literal pool symbol address: _bootstrap_port
100010d80:	00 01 40 b9	ldr	w0, [x8]
100010d84:	e1 b6 06 10	adr	x1, #55004
100010d88:	1f 20 03 d5	nop
100010d8c:	0d 03 00 94	bl	0x1000119c0 ; symbol stub for: _IOMainPort
100010d90:	a0 01 00 35	cbnz	w0, 0x100010dc4
100010d94:	a8 b6 06 10	adr	x8, #54996
100010d98:	1f 20 03 d5	nop
100010d9c:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100010da0:	00 01 00 ad	stp	q0, q0, [x8]
100010da4:	28 b7 06 10	adr	x8, #55012
100010da8:	1f 20 03 d5	nop
100010dac:	00 01 00 ad	stp	q0, q0, [x8]
100010db0:	c8 b7 06 10	adr	x8, #55032
100010db4:	1f 20 03 d5	nop
100010db8:	00 01 00 ad	stp	q0, q0, [x8]
100010dbc:	fd 7b c1 a8	ldp	x29, x30, [sp], #16
100010dc0:	ff 0f 5f d6	retab
100010dc4:	b2 02 00 94	bl	0x10001188c
100010dc8:	7f 23 03 d5	pacibsp
100010dcc:	ff 83 01 d1	sub	sp, sp, #96
100010dd0:	f4 4f 04 a9	stp	x20, x19, [sp, #64]
100010dd4:	fd 7b 05 a9	stp	x29, x30, [sp, #80]
100010dd8:	fd 43 01 91	add	x29, sp, #80
100010ddc:	73 95 05 10	adr	x19, #45740
100010de0:	1f 20 03 d5	nop
100010de4:	68 02 40 39	ldrb	w8, [x19]
100010de8:	68 01 00 34	cbz	w8, 0x100010e14
100010dec:	f1 03 00 94	bl	0x100011db0 ; symbol stub for: _mach_absolute_time
100010df0:	00 00 63 9e	ucvtf	d0, x0
100010df4:	61 06 40 fd	ldr	d1, [x19, #8]
100010df8:	20 08 60 1e	fmul	d0, d1, d0
100010dfc:	1f 20 03 d5	nop
100010e00:	81 9c 00 5c	ldr	d1, 0x100012190
100010e04:	00 18 61 1e	fdiv	d0, d0, d1
100010e08:	0a b3 06 10	adr	x10, #54880
100010e0c:	1f 20 03 d5	nop
100010e10:	06 00 00 14	b	0x100010e28
100010e14:	68 0a 40 39	ldrb	w8, [x19, #2]
100010e18:	48 04 00 34	cbz	w8, 0x100010ea0
100010e1c:	60 0e 40 fd	ldr	d0, [x19, #24]
100010e20:	4a b4 06 10	adr	x10, #54920
100010e24:	1f 20 03 d5	nop
100010e28:	1f 20 03 d5	nop
100010e2c:	e8 b2 06 58	ldr	x8, #54876
100010e30:	49 01 40 f9	ldr	x9, [x10]
100010e34:	08 01 09 eb	subs	x8, x8, x9
100010e38:	63 01 00 54	b.lo	0x100010e64
100010e3c:	1f 20 03 d5	nop
100010e40:	89 b2 06 58	ldr	x9, #54864
100010e44:	4b 05 40 f9	ldr	x11, [x10, #8]
100010e48:	29 01 0b eb	subs	x9, x9, x11
100010e4c:	c3 00 00 54	b.lo	0x100010e64
100010e50:	1f 20 03 d5	nop
100010e54:	2b b2 06 58	ldr	x11, #54852
100010e58:	4c 09 40 f9	ldr	x12, [x10, #16]
100010e5c:	6b 01 0c eb	subs	x11, x11, x12
100010e60:	42 02 00 54	b.hs	0x100010ea8
100010e64:	1f 20 03 d5	nop
100010e68:	c8 af 03 58	ldr	x8, #30200 ; literal pool symbol address: ___stderrp
100010e6c:	03 01 40 f9	ldr	x3, [x8]
100010e70:	c0 64 03 70	adr	x0, #27803 ; literal pool for: "warning: detected disk usage underflow, a disk was probably removed\n"
100010e74:	1f 20 03 d5	nop
100010e78:	81 08 80 52	mov	w1, #68
100010e7c:	22 00 80 52	mov	w2, #1
100010e80:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
100010e84:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
100010e88:	ff 83 01 91	add	sp, sp, #96
100010e8c:	ff 23 03 d5	autibsp
100010e90:	d0 07 1e ca	eor	x16, x30, x30, lsl #1
100010e94:	50 00 f0 b6	tbz	x16, #62, 0x100010e9c
100010e98:	20 8e 38 d4	brk	#0xc471
100010e9c:	a1 03 00 14	b	0x100011d20 ; symbol stub for: _fwrite
100010ea0:	60 0a 40 fd	ldr	d0, [x19, #16]
100010ea4:	d9 ff ff 17	b	0x100010e08
100010ea8:	1f 20 03 d5	nop
100010eac:	ac af 06 58	ldr	x12, #54772
100010eb0:	4a 0d 40 f9	ldr	x10, [x10, #24]
100010eb4:	8a 01 0a cb	sub	x10, x12, x10
100010eb8:	01 01 63 9e	ucvtf	d1, x8
100010ebc:	22 01 63 9e	ucvtf	d2, x9
100010ec0:	21 18 60 1e	fdiv	d1, d1, d0
100010ec4:	42 18 60 1e	fdiv	d2, d2, d0
100010ec8:	63 01 63 9e	ucvtf	d3, x11
100010ecc:	44 01 63 9e	ucvtf	d4, x10
100010ed0:	63 18 60 1e	fdiv	d3, d3, d0
100010ed4:	1f 20 03 d5	nop
100010ed8:	1f 20 03 d5	nop
100010edc:	ec 90 05 18	ldr	w12, 0x10001c0f8
100010ee0:	80 18 60 1e	fdiv	d0, d4, d0
100010ee4:	9f 05 00 71	cmp	w12, #1
100010ee8:	80 01 00 54	b.eq	0x100010f18
100010eec:	ec 02 00 35	cbnz	w12, 0x100010f48
100010ef0:	60 22 40 f9	ldr	x0, [x19, #64]
100010ef4:	1f 20 03 d5	nop
100010ef8:	44 96 00 5c	ldr	d4, 0x1000121c0
100010efc:	63 18 64 1e	fdiv	d3, d3, d4
100010f00:	00 18 64 1e	fdiv	d0, d0, d4
100010f04:	e2 03 01 6d	stp	d2, d0, [sp, #16]
100010f08:	e1 0f 00 6d	stp	d1, d3, [sp]
100010f0c:	21 62 03 10	adr	x1, #27716 ; literal pool for: "\n\n**** Disk activity ****\n\nread: %.2f ops/s %.2f KBytes/s\nwrite: %.2f ops/s %.2f KBytes/s\n"
100010f10:	1f 20 03 d5	nop
100010f14:	0c 00 00 14	b	0x100010f44
100010f18:	60 22 40 f9	ldr	x0, [x19, #64]
100010f1c:	e0 1f 00 fd	str	d0, [sp, #56]
100010f20:	ea 1b 00 f9	str	x10, [sp, #48]
100010f24:	e3 17 00 fd	str	d3, [sp, #40]
100010f28:	eb 13 00 f9	str	x11, [sp, #32]
100010f2c:	e2 0f 00 fd	str	d2, [sp, #24]
100010f30:	e9 0b 00 f9	str	x9, [sp, #16]
100010f34:	a1 63 03 70	adr	x1, #27767 ; literal pool for: "<key>disk</key>\n<dict>\n<key>rops_diff</key><integer>%llu</integer>\n<key>rops_per_s</key><real>%g</real>\n<key>wops_diff</key><integer>%llu</integer>\n<key>wops_per_s</key><real>%g</real>\n<key>rbytes_diff</key><integer>%llu</integer>\n<key>rbytes_per_s</key><real>%g</real>\n<key>wbytes_diff</key><integer>%llu</integer>\n<key>wbytes_per_s</key><real>%g</real>\n</dict>\n"
100010f38:	1f 20 03 d5	nop
100010f3c:	e1 07 00 fd	str	d1, [sp, #8]
100010f40:	e8 03 00 f9	str	x8, [sp]
100010f44:	67 03 00 94	bl	0x100011ce0 ; symbol stub for: _fprintf
100010f48:	fd 7b 45 a9	ldp	x29, x30, [sp, #80]
100010f4c:	f4 4f 44 a9	ldp	x20, x19, [sp, #64]
100010f50:	ff 83 01 91	add	sp, sp, #96
100010f54:	ff 0f 5f d6	retab
100010f58:	7f 23 03 d5	pacibsp
100010f5c:	ff 03 02 d1	sub	sp, sp, #128
100010f60:	fc 6f 02 a9	stp	x28, x27, [sp, #32]
100010f64:	fa 67 03 a9	stp	x26, x25, [sp, #48]
100010f68:	f8 5f 04 a9	stp	x24, x23, [sp, #64]
100010f6c:	f6 57 05 a9	stp	x22, x21, [sp, #80]
100010f70:	f4 4f 06 a9	stp	x20, x19, [sp, #96]
100010f74:	fd 7b 07 a9	stp	x29, x30, [sp, #112]
100010f78:	fd c3 01 91	add	x29, sp, #112
100010f7c:	ff 1f 00 b9	str	wzr, [sp, #28]
100010f80:	ff ff 00 a9	stp	xzr, xzr, [sp, #8]
100010f84:	29 a8 06 10	adr	x9, #54532
100010f88:	1f 20 03 d5	nop
100010f8c:	e8 a6 06 10	adr	x8, #54492
100010f90:	1f 20 03 d5	nop
100010f94:	20 05 40 ad	ldp	q0, q1, [x9]
100010f98:	00 05 00 ad	stp	q0, q1, [x8]
100010f9c:	00 e4 00 6f	movi.2d	v0, #0000000000000000
100010fa0:	20 01 00 ad	stp	q0, q0, [x9]
100010fa4:	1f 20 03 d5	nop
100010fa8:	d3 a5 06 18	ldr	w19, 0x10001e460
100010fac:	40 6b 03 70	adr	x0, #28011 ; literal pool for: "IOBlockStorageDriver"
100010fb0:	1f 20 03 d5	nop
100010fb4:	fb 02 00 94	bl	0x100011ba0 ; symbol stub for: _IOServiceMatching
100010fb8:	e1 03 00 aa	mov	x1, x0
100010fbc:	e2 73 00 91	add	x2, sp, #28
100010fc0:	e0 03 13 aa	mov	x0, x19
100010fc4:	f3 02 00 94	bl	0x100011b90 ; symbol stub for: _IOServiceGetMatchingServices
100010fc8:	00 0d 00 35	cbnz	w0, 0x100011168
100010fcc:	e0 1f 40 b9	ldr	w0, [sp, #28]
100010fd0:	78 02 00 94	bl	0x1000119b0 ; symbol stub for: _IOIteratorNext
100010fd4:	00 0a 00 34	cbz	w0, 0x100011114
100010fd8:	f3 03 00 aa	mov	x19, x0
100010fdc:	1f 20 03 d5	nop
100010fe0:	08 a5 03 58	ldr	x8, #29856 ; literal pool symbol address: _kCFAllocatorDefault
100010fe4:	34 4d 04 10	adr	x20, #35236 ; Objc cfstring ref: @"Statistics"
100010fe8:	1f 20 03 d5	nop
100010fec:	15 01 40 f9	ldr	x21, [x8]
100010ff0:	d8 4f 04 10	adr	x24, #35320 ; Objc cfstring ref: @"Operations (Write)"
100010ff4:	1f 20 03 d5	nop
100010ff8:	99 50 04 10	adr	x25, #35344 ; Objc cfstring ref: @"Bytes (Write)"
100010ffc:	1f 20 03 d5	nop
100011000:	7c 00 00 b0	adrp	x28, 13 ; 0x10001e000
100011004:	7b 00 00 b0	adrp	x27, 13 ; 0x10001e000
100011008:	76 00 00 b0	adrp	x22, 13 ; 0x10001e000
10001100c:	77 00 00 b0	adrp	x23, 13 ; 0x10001e000
100011010:	e1 23 00 91	add	x1, sp, #8
100011014:	e0 03 13 aa	mov	x0, x19
100011018:	e2 03 15 aa	mov	x2, x21
10001101c:	03 00 80 52	mov	w3, #0
100011020:	74 02 00 94	bl	0x1000119f0 ; symbol stub for: _IORegistryEntryCreateCFProperties
100011024:	00 0a 00 35	cbnz	w0, 0x100011164
100011028:	e0 07 40 f9	ldr	x0, [sp, #8]
10001102c:	80 06 00 b4	cbz	x0, 0x1000110fc
100011030:	e1 03 14 aa	mov	x1, x20
100011034:	47 02 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
100011038:	e0 05 00 b4	cbz	x0, 0x1000110f4
10001103c:	fa 03 00 aa	mov	x26, x0
100011040:	41 4b 04 10	adr	x1, #35176 ; Objc cfstring ref: @"Operations (Read)"
100011044:	1f 20 03 d5	nop
100011048:	42 02 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10001104c:	00 01 00 b4	cbz	x0, 0x10001106c
100011050:	e2 43 00 91	add	x2, sp, #16
100011054:	81 00 80 52	mov	w1, #4
100011058:	42 02 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10001105c:	e8 0b 40 f9	ldr	x8, [sp, #16]
100011060:	e9 46 42 f9	ldr	x9, [x23, #1160]
100011064:	28 01 08 8b	add	x8, x9, x8
100011068:	e8 46 02 f9	str	x8, [x23, #1160]
10001106c:	e0 03 1a aa	mov	x0, x26
100011070:	c1 4a 04 10	adr	x1, #35160 ; Objc cfstring ref: @"Bytes (Read)"
100011074:	1f 20 03 d5	nop
100011078:	36 02 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
10001107c:	00 01 00 b4	cbz	x0, 0x10001109c
100011080:	e2 43 00 91	add	x2, sp, #16
100011084:	81 00 80 52	mov	w1, #4
100011088:	36 02 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
10001108c:	e8 0b 40 f9	ldr	x8, [sp, #16]
100011090:	c9 4e 42 f9	ldr	x9, [x22, #1176]
100011094:	28 01 08 8b	add	x8, x9, x8
100011098:	c8 4e 02 f9	str	x8, [x22, #1176]
10001109c:	e0 03 1a aa	mov	x0, x26
1000110a0:	e1 03 18 aa	mov	x1, x24
1000110a4:	2b 02 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
1000110a8:	00 01 00 b4	cbz	x0, 0x1000110c8
1000110ac:	e2 43 00 91	add	x2, sp, #16
1000110b0:	81 00 80 52	mov	w1, #4
1000110b4:	2b 02 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
1000110b8:	e8 0b 40 f9	ldr	x8, [sp, #16]
1000110bc:	69 4b 42 f9	ldr	x9, [x27, #1168]
1000110c0:	28 01 08 8b	add	x8, x9, x8
1000110c4:	68 4b 02 f9	str	x8, [x27, #1168]
1000110c8:	e0 03 1a aa	mov	x0, x26
1000110cc:	e1 03 19 aa	mov	x1, x25
1000110d0:	20 02 00 94	bl	0x100011950 ; symbol stub for: _CFDictionaryGetValue
1000110d4:	00 01 00 b4	cbz	x0, 0x1000110f4
1000110d8:	e2 43 00 91	add	x2, sp, #16
1000110dc:	81 00 80 52	mov	w1, #4
1000110e0:	20 02 00 94	bl	0x100011960 ; symbol stub for: _CFNumberGetValue
1000110e4:	e8 0b 40 f9	ldr	x8, [sp, #16]
1000110e8:	89 53 42 f9	ldr	x9, [x28, #1184]
1000110ec:	28 01 08 8b	add	x8, x9, x8
1000110f0:	88 53 02 f9	str	x8, [x28, #1184]
1000110f4:	e0 07 40 f9	ldr	x0, [sp, #8]
1000110f8:	1e 02 00 94	bl	0x100011970 ; symbol stub for: _CFRelease
1000110fc:	e0 03 13 aa	mov	x0, x19
100011100:	34 02 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
100011104:	e0 1f 40 b9	ldr	w0, [sp, #28]
100011108:	2a 02 00 94	bl	0x1000119b0 ; symbol stub for: _IOIteratorNext
10001110c:	f3 03 00 aa	mov	x19, x0
100011110:	00 f8 ff 35	cbnz	w0, 0x100011010
100011114:	e0 1f 40 b9	ldr	w0, [sp, #28]
100011118:	2e 02 00 94	bl	0x1000119d0 ; symbol stub for: _IOObjectRelease
10001111c:	68 7b 05 10	adr	x8, #44908
100011120:	1f 20 03 d5	nop
100011124:	08 01 40 39	ldrb	w8, [x8]
100011128:	e8 00 00 34	cbz	w8, 0x100011144
10001112c:	e8 9b 06 10	adr	x8, #54140
100011130:	1f 20 03 d5	nop
100011134:	a9 9a 06 10	adr	x9, #54100
100011138:	1f 20 03 d5	nop
10001113c:	20 05 40 ad	ldp	q0, q1, [x9]
100011140:	00 05 00 ad	stp	q0, q1, [x8]
100011144:	fd 7b 47 a9	ldp	x29, x30, [sp, #112]
100011148:	f4 4f 46 a9	ldp	x20, x19, [sp, #96]
10001114c:	f6 57 45 a9	ldp	x22, x21, [sp, #80]
100011150:	f8 5f 44 a9	ldp	x24, x23, [sp, #64]
100011154:	fa 67 43 a9	ldp	x26, x25, [sp, #48]
100011158:	fc 6f 42 a9	ldp	x28, x27, [sp, #32]
10001115c:	ff 03 02 91	add	sp, sp, #128
100011160:	ff 0f 5f d6	retab
100011164:	d5 01 00 94	bl	0x1000118b8
100011168:	df 01 00 94	bl	0x1000118e4
10001116c:	7f 23 03 d5	pacibsp
100011170:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011174:	fd 03 00 91	mov	x29, sp
100011178:	20 4c 01 50	adr	x0, #10630 ; literal pool for: "display_interrupt_sources_stats_block_invoke"
10001117c:	1f 20 03 d5	nop
100011180:	41 4d 01 70	adr	x1, #10667 ; literal pool for: "interrupt_sources.c"
100011184:	1f 20 03 d5	nop
100011188:	a3 4d 01 70	adr	x3, #10679 ; literal pool for: "driver"
10001118c:	1f 20 03 d5	nop
100011190:	a2 0d 80 52	mov	w2, #109
100011194:	93 02 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011198:	7f 23 03 d5	pacibsp
10001119c:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000111a0:	fd 03 00 91	mov	x29, sp
1000111a4:	c0 4a 01 50	adr	x0, #10586 ; literal pool for: "display_interrupt_sources_stats_block_invoke"
1000111a8:	1f 20 03 d5	nop
1000111ac:	e1 4b 01 70	adr	x1, #10623 ; literal pool for: "interrupt_sources.c"
1000111b0:	1f 20 03 d5	nop
1000111b4:	83 4c 01 50	adr	x3, #10642 ; literal pool for: "channel"
1000111b8:	1f 20 03 d5	nop
1000111bc:	22 0e 80 52	mov	w2, #113
1000111c0:	88 02 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000111c4:	7f 23 03 d5	pacibsp
1000111c8:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000111cc:	fd 03 00 91	mov	x29, sp
1000111d0:	c0 6b 01 30	adr	x0, #11641 ; literal pool for: "init_ane"
1000111d4:	1f 20 03 d5	nop
1000111d8:	c1 6b 01 50	adr	x1, #11642 ; literal pool for: "ane_power.c"
1000111dc:	1f 20 03 d5	nop
1000111e0:	e3 6b 01 50	adr	x3, #11646 ; literal pool for: "ane->ane_id <= MAX_ANE_ID"
1000111e4:	1f 20 03 d5	nop
1000111e8:	c2 22 80 52	mov	w2, #278
1000111ec:	7d 02 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000111f0:	7f 23 03 d5	pacibsp
1000111f4:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000111f8:	fd 03 00 91	mov	x29, sp
1000111fc:	20 82 01 30	adr	x0, #12357 ; literal pool for: "display_cpu_interrupt_stats"
100011200:	1f 20 03 d5	nop
100011204:	c1 82 01 30	adr	x1, #12377 ; literal pool for: "interrupts.c"
100011208:	1f 20 03 d5	nop
10001120c:	e3 82 01 50	adr	x3, #12382 ; literal pool for: "interval > 0"
100011210:	1f 20 03 d5	nop
100011214:	a2 2f 80 52	mov	w2, #381
100011218:	72 02 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
10001121c:	7f 23 03 d5	pacibsp
100011220:	ff 83 00 d1	sub	sp, sp, #32
100011224:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
100011228:	fd 43 00 91	add	x29, sp, #16
10001122c:	71 02 00 94	bl	0x100011bf0 ; symbol stub for: ___error
100011230:	08 00 40 b9	ldr	w8, [x0]
100011234:	e8 03 00 f9	str	x8, [sp]
100011238:	01 c5 01 30	adr	x1, #14497 ; literal pool for: "sysctl kern.boottime failed with errno = %d"
10001123c:	1f 20 03 d5	nop
100011240:	32 dd ff 97	bl	0x100008708
100011244:	7f 23 03 d5	pacibsp
100011248:	ff 83 00 d1	sub	sp, sp, #32
10001124c:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
100011250:	fd 43 00 91	add	x29, sp, #16
100011254:	1f 20 03 d5	nop
100011258:	88 92 03 58	ldr	x8, #29264 ; literal pool symbol address: _optarg
10001125c:	08 01 40 f9	ldr	x8, [x8]
100011260:	e8 03 00 f9	str	x8, [sp]
100011264:	61 96 01 70	adr	x1, #13007 ; literal pool for: "poweravg must be non-negative integer, got %s"
100011268:	1f 20 03 d5	nop
10001126c:	22 dd ff 97	bl	0x1000086f4
100011270:	7f 23 03 d5	pacibsp
100011274:	ff 83 00 d1	sub	sp, sp, #32
100011278:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10001127c:	fd 43 00 91	add	x29, sp, #16
100011280:	1f 20 03 d5	nop
100011284:	28 91 03 58	ldr	x8, #29220 ; literal pool symbol address: _optarg
100011288:	08 01 40 f9	ldr	x8, [x8]
10001128c:	e8 03 00 f9	str	x8, [sp]
100011290:	81 96 01 30	adr	x1, #13009 ; literal pool for: "buffer size must be non-negative integer or -1, got %s"
100011294:	1f 20 03 d5	nop
100011298:	17 dd ff 97	bl	0x1000086f4
10001129c:	7f 23 03 d5	pacibsp
1000112a0:	ff 83 00 d1	sub	sp, sp, #32
1000112a4:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
1000112a8:	fd 43 00 91	add	x29, sp, #16
1000112ac:	1f 20 03 d5	nop
1000112b0:	c8 8f 03 58	ldr	x8, #29176 ; literal pool symbol address: _optarg
1000112b4:	08 01 40 f9	ldr	x8, [x8]
1000112b8:	e8 03 00 f9	str	x8, [sp]
1000112bc:	21 97 01 70	adr	x1, #13031 ; literal pool for: "sample rate must be non-negative integer, got %s"
1000112c0:	1f 20 03 d5	nop
1000112c4:	0c dd ff 97	bl	0x1000086f4
1000112c8:	7f 23 03 d5	pacibsp
1000112cc:	ff 83 00 d1	sub	sp, sp, #32
1000112d0:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
1000112d4:	fd 43 00 91	add	x29, sp, #16
1000112d8:	1f 20 03 d5	nop
1000112dc:	68 8e 03 58	ldr	x8, #29132 ; literal pool symbol address: _optarg
1000112e0:	08 01 40 f9	ldr	x8, [x8]
1000112e4:	e8 03 00 f9	str	x8, [sp]
1000112e8:	61 97 01 10	adr	x1, #13036 ; literal pool for: "sample limit must be non-negative integer or -1, got %s"
1000112ec:	1f 20 03 d5	nop
1000112f0:	01 dd ff 97	bl	0x1000086f4
1000112f4:	7f 23 03 d5	pacibsp
1000112f8:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000112fc:	fd 03 00 91	mov	x29, sp
100011300:	61 98 01 50	adr	x1, #13070 ; literal pool for: "can't open output file for writing"
100011304:	1f 20 03 d5	nop
100011308:	fb dc ff 97	bl	0x1000086f4
10001130c:	7f 23 03 d5	pacibsp
100011310:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011314:	fd 03 00 91	mov	x29, sp
100011318:	80 b9 01 30	adr	x0, #14129 ; literal pool for: "parse_samplers_opt"
10001131c:	1f 20 03 d5	nop
100011320:	e1 b9 01 10	adr	x1, #14140 ; literal pool for: "powermetrics.c"
100011324:	1f 20 03 d5	nop
100011328:	03 ba 01 70	adr	x3, #14147 ; literal pool for: "str"
10001132c:	1f 20 03 d5	nop
100011330:	22 55 80 52	mov	w2, #681
100011334:	2b 02 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011338:	7f 23 03 d5	pacibsp
10001133c:	ff 83 00 d1	sub	sp, sp, #32
100011340:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
100011344:	fd 43 00 91	add	x29, sp, #16
100011348:	1f 20 03 d5	nop
10001134c:	e8 8a 03 58	ldr	x8, #29020 ; literal pool symbol address: _optarg
100011350:	08 01 40 f9	ldr	x8, [x8]
100011354:	e8 03 00 f9	str	x8, [sp]
100011358:	61 98 01 50	adr	x1, #13070 ; literal pool for: "wakeup cost must be positive integer, got %s"
10001135c:	1f 20 03 d5	nop
100011360:	e5 dc ff 97	bl	0x1000086f4
100011364:	7f 23 03 d5	pacibsp
100011368:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10001136c:	fd 03 00 91	mov	x29, sp
100011370:	c0 b8 01 10	adr	x0, #14104 ; literal pool for: "parse_unhide_opt"
100011374:	1f 20 03 d5	nop
100011378:	21 b7 01 10	adr	x1, #14052 ; literal pool for: "powermetrics.c"
10001137c:	1f 20 03 d5	nop
100011380:	43 b7 01 70	adr	x3, #14059 ; literal pool for: "str"
100011384:	1f 20 03 d5	nop
100011388:	22 50 80 52	mov	w2, #641
10001138c:	15 02 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011390:	7f 23 03 d5	pacibsp
100011394:	ff 83 00 d1	sub	sp, sp, #32
100011398:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
10001139c:	fd 43 00 91	add	x29, sp, #16
1000113a0:	14 02 00 94	bl	0x100011bf0 ; symbol stub for: ___error
1000113a4:	08 00 40 b9	ldr	w8, [x0]
1000113a8:	e8 03 00 f9	str	x8, [sp]
1000113ac:	41 86 01 10	adr	x1, #12488 ; literal pool for: "posix_spawnattr_setbinpref failed with errno = %d"
1000113b0:	1f 20 03 d5	nop
1000113b4:	d5 dc ff 97	bl	0x100008708
1000113b8:	7f 23 03 d5	pacibsp
1000113bc:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000113c0:	fd 03 00 91	mov	x29, sp
1000113c4:	01 87 01 50	adr	x1, #12514 ; literal pool for: "failed to set preferred cpu_type"
1000113c8:	1f 20 03 d5	nop
1000113cc:	cf dc ff 97	bl	0x100008708
1000113d0:	7f 23 03 d5	pacibsp
1000113d4:	ff 83 00 d1	sub	sp, sp, #32
1000113d8:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
1000113dc:	fd 43 00 91	add	x29, sp, #16
1000113e0:	04 02 00 94	bl	0x100011bf0 ; symbol stub for: ___error
1000113e4:	08 00 40 b9	ldr	w8, [x0]
1000113e8:	e8 03 00 f9	str	x8, [sp]
1000113ec:	c1 82 01 10	adr	x1, #12376 ; literal pool for: "posix_spawnattr_setflags failed with errno = %d"
1000113f0:	1f 20 03 d5	nop
1000113f4:	c5 dc ff 97	bl	0x100008708
1000113f8:	7f 23 03 d5	pacibsp
1000113fc:	ff 83 00 d1	sub	sp, sp, #32
100011400:	fd 7b 01 a9	stp	x29, x30, [sp, #16]
100011404:	fd 43 00 91	add	x29, sp, #16
100011408:	fa 01 00 94	bl	0x100011bf0 ; symbol stub for: ___error
10001140c:	08 00 40 b9	ldr	w8, [x0]
100011410:	e8 03 00 f9	str	x8, [sp]
100011414:	21 80 01 10	adr	x1, #12292 ; literal pool for: "posix_spwanattr_init failed with errno = %d"
100011418:	1f 20 03 d5	nop
10001141c:	bb dc ff 97	bl	0x100008708
100011420:	7f 23 03 d5	pacibsp
100011424:	ff c3 00 d1	sub	sp, sp, #48
100011428:	f4 4f 01 a9	stp	x20, x19, [sp, #16]
10001142c:	fd 7b 02 a9	stp	x29, x30, [sp, #32]
100011430:	fd 83 00 91	add	x29, sp, #32
100011434:	f3 03 00 aa	mov	x19, x0
100011438:	ee 01 00 94	bl	0x100011bf0 ; symbol stub for: ___error
10001143c:	08 00 40 b9	ldr	w8, [x0]
100011440:	f3 23 00 a9	stp	x19, x8, [sp]
100011444:	a1 b3 01 10	adr	x1, #13940 ; literal pool for: "sysctl %s failed with errno = %d"
100011448:	1f 20 03 d5	nop
10001144c:	af dc ff 97	bl	0x100008708
100011450:	7f 23 03 d5	pacibsp
100011454:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011458:	fd 03 00 91	mov	x29, sp
10001145c:	00 c3 01 10	adr	x0, #14432 ; literal pool for: "configure_task_power_stats"
100011460:	1f 20 03 d5	nop
100011464:	81 c3 01 70	adr	x1, #14451 ; literal pool for: "tasks.c"
100011468:	1f 20 03 d5	nop
10001146c:	43 bd 01 10	adr	x3, #14248 ; literal pool for: "false"
100011470:	1f 20 03 d5	nop
100011474:	e2 d4 80 52	mov	w2, #1703
100011478:	da 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
10001147c:	7f 23 03 d5	pacibsp
100011480:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011484:	fd 03 00 91	mov	x29, sp
100011488:	80 f7 01 70	adr	x0, #16115 ; literal pool for: "print_coalition_power_data"
10001148c:	1f 20 03 d5	nop
100011490:	21 c2 01 70	adr	x1, #14407 ; literal pool for: "tasks.c"
100011494:	1f 20 03 d5	nop
100011498:	e3 f7 01 50	adr	x3, #16126 ; literal pool for: "delta"
10001149c:	1f 20 03 d5	nop
1000114a0:	22 a5 80 52	mov	w2, #1321
1000114a4:	cf 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000114a8:	7f 23 03 d5	pacibsp
1000114ac:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000114b0:	fd 03 00 91	mov	x29, sp
1000114b4:	00 65 02 70	adr	x0, #19619 ; literal pool for: "sample_task_power_stats"
1000114b8:	1f 20 03 d5	nop
1000114bc:	c1 c0 01 70	adr	x1, #14363 ; literal pool for: "tasks.c"
1000114c0:	1f 20 03 d5	nop
1000114c4:	03 66 02 50	adr	x3, #19650 ; literal pool for: "num_tasks > 0"
1000114c8:	1f 20 03 d5	nop
1000114cc:	22 b1 80 52	mov	w2, #1417
1000114d0:	c4 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000114d4:	7f 23 03 d5	pacibsp
1000114d8:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000114dc:	fd 03 00 91	mov	x29, sp
1000114e0:	a0 63 02 70	adr	x0, #19575 ; literal pool for: "sample_task_power_stats"
1000114e4:	1f 20 03 d5	nop
1000114e8:	61 bf 01 70	adr	x1, #14319 ; literal pool for: "tasks.c"
1000114ec:	1f 20 03 d5	nop
1000114f0:	e3 63 02 70	adr	x3, #19583 ; literal pool for: "current_tpi.count == 0"
1000114f4:	1f 20 03 d5	nop
1000114f8:	62 b0 80 52	mov	w2, #1411
1000114fc:	b9 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011500:	7f 23 03 d5	pacibsp
100011504:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011508:	fd 03 00 91	mov	x29, sp
10001150c:	60 f9 01 50	adr	x0, #16174 ; literal pool for: "print_task_power_data"
100011510:	1f 20 03 d5	nop
100011514:	01 be 01 70	adr	x1, #14275 ; literal pool for: "tasks.c"
100011518:	1f 20 03 d5	nop
10001151c:	a3 f9 01 10	adr	x3, #16180 ; literal pool for: "pmt_info.summary || !task->dead"
100011520:	1f 20 03 d5	nop
100011524:	82 67 80 52	mov	w2, #828
100011528:	ae 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
10001152c:	7f 23 03 d5	pacibsp
100011530:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011534:	fd 03 00 91	mov	x29, sp
100011538:	20 69 02 70	adr	x0, #19751 ; literal pool for: "coalition_add_task"
10001153c:	1f 20 03 d5	nop
100011540:	a1 bc 01 70	adr	x1, #14231 ; literal pool for: "tasks.c"
100011544:	1f 20 03 d5	nop
100011548:	43 69 02 50	adr	x3, #19754 ; literal pool for: "coalition->id == task->coalition_id"
10001154c:	1f 20 03 d5	nop
100011550:	42 ab 80 52	mov	w2, #1370
100011554:	a3 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011558:	7f 23 03 d5	pacibsp
10001155c:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011560:	fd 03 00 91	mov	x29, sp
100011564:	e0 7b 02 70	adr	x0, #20351 ; literal pool for: "has_hw_idle_residency"
100011568:	1f 20 03 d5	nop
10001156c:	01 79 02 10	adr	x1, #20256 ; literal pool for: "cpu_power_arm.c"
100011570:	1f 20 03 d5	nop
100011574:	23 7c 02 30	adr	x3, #20357 ; literal pool for: "samples"
100011578:	1f 20 03 d5	nop
10001157c:	22 23 80 52	mov	w2, #281
100011580:	98 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011584:	7f 23 03 d5	pacibsp
100011588:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10001158c:	fd 03 00 91	mov	x29, sp
100011590:	60 77 02 10	adr	x0, #20204 ; literal pool for: "get_frequencies"
100011594:	1f 20 03 d5	nop
100011598:	a1 77 02 10	adr	x1, #20212 ; literal pool for: "cpu_power_arm.c"
10001159c:	1f 20 03 d5	nop
1000115a0:	e3 77 02 10	adr	x3, #20220 ; literal pool for: "num_cluster_types <= MAX_CLUSTER_TYPES"
1000115a4:	1f 20 03 d5	nop
1000115a8:	42 1d 80 52	mov	w2, #234
1000115ac:	8d 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000115b0:	7f 23 03 d5	pacibsp
1000115b4:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000115b8:	fd 03 00 91	mov	x29, sp
1000115bc:	60 b5 02 30	adr	x0, #22189 ; literal pool for: "setIdleIndex"
1000115c0:	1f 20 03 d5	nop
1000115c4:	41 76 02 10	adr	x1, #20168 ; literal pool for: "cpu_power_arm.c"
1000115c8:	1f 20 03 d5	nop
1000115cc:	43 b2 01 10	adr	x3, #13896 ; literal pool for: "false"
1000115d0:	1f 20 03 d5	nop
1000115d4:	42 22 80 52	mov	w2, #274
1000115d8:	82 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000115dc:	7f 23 03 d5	pacibsp
1000115e0:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000115e4:	fd 03 00 91	mov	x29, sp
1000115e8:	60 b4 02 50	adr	x0, #22158 ; literal pool for: "read_cluster_power_stats_sample"
1000115ec:	1f 20 03 d5	nop
1000115f0:	e1 74 02 10	adr	x1, #20124 ; literal pool for: "cpu_power_arm.c"
1000115f4:	1f 20 03 d5	nop
1000115f8:	e3 b4 02 50	adr	x3, #22174 ; literal pool for: "num_resids == (uint32_t)IOReportStateGetCount(sample)"
1000115fc:	1f 20 03 d5	nop
100011600:	a2 1e 80 52	mov	w2, #245
100011604:	77 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011608:	7f 23 03 d5	pacibsp
10001160c:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011610:	fd 03 00 91	mov	x29, sp
100011614:	c0 b5 02 10	adr	x0, #22200 ; literal pool for: "read_limits_resids_from_sample"
100011618:	1f 20 03 d5	nop
10001161c:	81 73 02 10	adr	x1, #20080 ; literal pool for: "cpu_power_arm.c"
100011620:	1f 20 03 d5	nop
100011624:	23 b6 02 70	adr	x3, #22215 ; literal pool for: "limits->limit_resids != NULL"
100011628:	1f 20 03 d5	nop
10001162c:	42 26 80 52	mov	w2, #306
100011630:	6c 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011634:	7f 23 03 d5	pacibsp
100011638:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10001163c:	fd 03 00 91	mov	x29, sp
100011640:	60 b4 02 10	adr	x0, #22156 ; literal pool for: "read_limits_resids_from_sample"
100011644:	1f 20 03 d5	nop
100011648:	21 72 02 10	adr	x1, #20036 ; literal pool for: "cpu_power_arm.c"
10001164c:	1f 20 03 d5	nop
100011650:	c3 b5 02 10	adr	x3, #22200 ; literal pool for: "limits->limit_name_cstr != NULL"
100011654:	1f 20 03 d5	nop
100011658:	e2 26 80 52	mov	w2, #311
10001165c:	61 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011660:	7f 23 03 d5	pacibsp
100011664:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011668:	fd 03 00 91	mov	x29, sp
10001166c:	00 b3 02 10	adr	x0, #22112 ; literal pool for: "read_limits_resids_from_sample"
100011670:	1f 20 03 d5	nop
100011674:	c1 70 02 10	adr	x1, #19992 ; literal pool for: "cpu_power_arm.c"
100011678:	1f 20 03 d5	nop
10001167c:	63 b5 02 10	adr	x3, #22188 ; literal pool for: "limits->limit_name_cstr[i] != NULL"
100011680:	1f 20 03 d5	nop
100011684:	a2 27 80 52	mov	w2, #317
100011688:	56 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
10001168c:	7f 23 03 d5	pacibsp
100011690:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011694:	fd 03 00 91	mov	x29, sp
100011698:	a0 b6 02 50	adr	x0, #22230 ; literal pool for: "configure_battery_stats"
10001169c:	1f 20 03 d5	nop
1000116a0:	21 b7 02 50	adr	x1, #22246 ; literal pool for: "battery.c"
1000116a4:	1f 20 03 d5	nop
1000116a8:	43 b7 02 10	adr	x3, #22248 ; literal pool for: "rv == kIOReturnSuccess"
1000116ac:	1f 20 03 d5	nop
1000116b0:	22 2c 80 52	mov	w2, #353
1000116b4:	4b 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000116b8:	7f 23 03 d5	pacibsp
1000116bc:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000116c0:	fd 03 00 91	mov	x29, sp
1000116c4:	40 f4 02 30	adr	x0, #24201 ; literal pool for: "ioreport_delta_sample"
1000116c8:	1f 20 03 d5	nop
1000116cc:	a1 f4 02 70	adr	x1, #24215 ; literal pool for: "util.c"
1000116d0:	1f 20 03 d5	nop
1000116d4:	a3 f4 02 50	adr	x3, #24214 ; literal pool for: "*cur_samples"
1000116d8:	1f 20 03 d5	nop
1000116dc:	a2 1c 80 52	mov	w2, #229
1000116e0:	40 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000116e4:	7f 23 03 d5	pacibsp
1000116e8:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000116ec:	fd 03 00 91	mov	x29, sp
1000116f0:	80 f6 02 70	adr	x0, #24275 ; literal pool for: "pm_array_add"
1000116f4:	1f 20 03 d5	nop
1000116f8:	c1 f6 02 10	adr	x1, #24280 ; literal pool for: "task_array.c"
1000116fc:	1f 20 03 d5	nop
100011700:	e3 f6 02 30	adr	x3, #24285 ; literal pool for: "arr->count <= arr->max"
100011704:	1f 20 03 d5	nop
100011708:	a2 03 80 52	mov	w2, #29
10001170c:	35 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011710:	7f 23 03 d5	pacibsp
100011714:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011718:	fd 03 00 91	mov	x29, sp
10001171c:	20 f5 02 70	adr	x0, #24231 ; literal pool for: "pm_array_add"
100011720:	1f 20 03 d5	nop
100011724:	61 f5 02 10	adr	x1, #24236 ; literal pool for: "task_array.c"
100011728:	1f 20 03 d5	nop
10001172c:	43 f6 02 10	adr	x3, #24264 ; literal pool for: "arr->data"
100011730:	1f 20 03 d5	nop
100011734:	c2 04 80 52	mov	w2, #38
100011738:	2a 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
10001173c:	7f 23 03 d5	pacibsp
100011740:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011744:	fd 03 00 91	mov	x29, sp
100011748:	a0 f5 02 50	adr	x0, #24246 ; literal pool for: "pm_array_get"
10001174c:	1f 20 03 d5	nop
100011750:	01 f4 02 10	adr	x1, #24192 ; literal pool for: "task_array.c"
100011754:	1f 20 03 d5	nop
100011758:	83 f5 02 70	adr	x3, #24243 ; literal pool for: "idx < arr->count"
10001175c:	1f 20 03 d5	nop
100011760:	37 fa ff 97	bl	0x10001003c
100011764:	7f 23 03 d5	pacibsp
100011768:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10001176c:	fd 03 00 91	mov	x29, sp
100011770:	60 f5 02 10	adr	x0, #24236 ; literal pool for: "pm_array_copy"
100011774:	1f 20 03 d5	nop
100011778:	c1 f2 02 10	adr	x1, #24152 ; literal pool for: "task_array.c"
10001177c:	1f 20 03 d5	nop
100011780:	43 f5 02 50	adr	x3, #24234 ; literal pool for: "dest->data"
100011784:	1f 20 03 d5	nop
100011788:	02 08 80 52	mov	w2, #64
10001178c:	15 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011790:	7f 23 03 d5	pacibsp
100011794:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011798:	fd 03 00 91	mov	x29, sp
10001179c:	c0 f4 02 30	adr	x0, #24217 ; literal pool for: "pm_array_append"
1000117a0:	1f 20 03 d5	nop
1000117a4:	61 f1 02 10	adr	x1, #24108 ; literal pool for: "task_array.c"
1000117a8:	1f 20 03 d5	nop
1000117ac:	43 f2 02 10	adr	x3, #24136 ; literal pool for: "arr->data"
1000117b0:	1f 20 03 d5	nop
1000117b4:	02 0f 80 52	mov	w2, #120
1000117b8:	0a 01 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000117bc:	7f 23 03 d5	pacibsp
1000117c0:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000117c4:	fd 03 00 91	mov	x29, sp
1000117c8:	a0 f1 02 50	adr	x0, #24118 ; literal pool for: "pm_array_get"
1000117cc:	1f 20 03 d5	nop
1000117d0:	01 f0 02 10	adr	x1, #24064 ; literal pool for: "task_array.c"
1000117d4:	1f 20 03 d5	nop
1000117d8:	83 f1 02 70	adr	x3, #24115 ; literal pool for: "idx < arr->count"
1000117dc:	1f 20 03 d5	nop
1000117e0:	17 fa ff 97	bl	0x10001003c
1000117e4:	7f 23 03 d5	pacibsp
1000117e8:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000117ec:	fd 03 00 91	mov	x29, sp
1000117f0:	60 f0 02 50	adr	x0, #24078 ; literal pool for: "pm_array_get"
1000117f4:	1f 20 03 d5	nop
1000117f8:	c1 ee 02 10	adr	x1, #24024 ; literal pool for: "task_array.c"
1000117fc:	1f 20 03 d5	nop
100011800:	43 f0 02 70	adr	x3, #24075 ; literal pool for: "idx < arr->count"
100011804:	1f 20 03 d5	nop
100011808:	0d fa ff 97	bl	0x10001003c
10001180c:	7f 23 03 d5	pacibsp
100011810:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011814:	fd 03 00 91	mov	x29, sp
100011818:	20 ef 02 50	adr	x0, #24038 ; literal pool for: "pm_array_get"
10001181c:	1f 20 03 d5	nop
100011820:	81 ed 02 10	adr	x1, #23984 ; literal pool for: "task_array.c"
100011824:	1f 20 03 d5	nop
100011828:	03 ef 02 70	adr	x3, #24035 ; literal pool for: "idx < arr->count"
10001182c:	1f 20 03 d5	nop
100011830:	03 fa ff 97	bl	0x10001003c
100011834:	7f 23 03 d5	pacibsp
100011838:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
10001183c:	fd 03 00 91	mov	x29, sp
100011840:	a0 01 03 70	adr	x0, #24631 ; literal pool for: "sample_network_stats"
100011844:	1f 20 03 d5	nop
100011848:	21 02 03 10	adr	x1, #24644 ; literal pool for: "network.c"
10001184c:	1f 20 03 d5	nop
100011850:	23 02 03 50	adr	x3, #24646 ; literal pool for: "buf"
100011854:	1f 20 03 d5	nop
100011858:	82 06 80 52	mov	w2, #52
10001185c:	e1 00 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
100011860:	7f 23 03 d5	pacibsp
100011864:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011868:	fd 03 00 91	mov	x29, sp
10001186c:	c0 07 03 30	adr	x0, #24825 ; literal pool for: "display_device_stats_block_invoke"
100011870:	1f 20 03 d5	nop
100011874:	81 08 03 70	adr	x1, #24851 ; literal pool for: "devices.c"
100011878:	1f 20 03 d5	nop
10001187c:	03 16 01 70	adr	x3, #8899 ; literal pool for: "driver"
100011880:	1f 20 03 d5	nop
100011884:	42 1a 80 52	mov	w2, #210
100011888:	d6 00 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
10001188c:	7f 23 03 d5	pacibsp
100011890:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
100011894:	fd 03 00 91	mov	x29, sp
100011898:	a0 12 03 70	adr	x0, #25175 ; literal pool for: "configure_disk_stats"
10001189c:	1f 20 03 d5	nop
1000118a0:	21 13 03 10	adr	x1, #25188 ; literal pool for: "disk.c"
1000118a4:	1f 20 03 d5	nop
1000118a8:	43 a7 02 10	adr	x3, #21736 ; literal pool for: "rv == kIOReturnSuccess"
1000118ac:	1f 20 03 d5	nop
1000118b0:	c2 14 80 52	mov	w2, #166
1000118b4:	cb 00 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000118b8:	7f 23 03 d5	pacibsp
1000118bc:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000118c0:	fd 03 00 91	mov	x29, sp
1000118c4:	40 23 03 10	adr	x0, #25704 ; literal pool for: "sample_disk_stats"
1000118c8:	1f 20 03 d5	nop
1000118cc:	c1 11 03 10	adr	x1, #25144 ; literal pool for: "disk.c"
1000118d0:	1f 20 03 d5	nop
1000118d4:	e3 a5 02 10	adr	x3, #21692 ; literal pool for: "rv == kIOReturnSuccess"
1000118d8:	1f 20 03 d5	nop
1000118dc:	02 05 80 52	mov	w2, #40
1000118e0:	c0 00 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
1000118e4:	7f 23 03 d5	pacibsp
1000118e8:	fd 7b bf a9	stp	x29, x30, [sp, #-16]!
1000118ec:	fd 03 00 91	mov	x29, sp
1000118f0:	e0 21 03 10	adr	x0, #25660 ; literal pool for: "sample_disk_stats"
1000118f4:	1f 20 03 d5	nop
1000118f8:	61 10 03 10	adr	x1, #25100 ; literal pool for: "disk.c"
1000118fc:	1f 20 03 d5	nop
100011900:	83 a4 02 10	adr	x3, #21648 ; literal pool for: "rv == kIOReturnSuccess"
100011904:	1f 20 03 d5	nop
100011908:	62 04 80 52	mov	w2, #35
10001190c:	b5 00 00 94	bl	0x100011be0 ; symbol stub for: ___assert_rtn
